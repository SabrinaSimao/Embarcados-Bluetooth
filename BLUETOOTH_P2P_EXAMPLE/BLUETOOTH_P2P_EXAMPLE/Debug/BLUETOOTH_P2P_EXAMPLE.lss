
BLUETOOTH_P2P_EXAMPLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000073ec  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004073ec  004073ec  000173ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20400000  004073f4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000114  204009c0  00407db4  000209c0  2**2
                  ALLOC
  4 .stack        00002004  20400ad4  00407ec8  000209c0  2**0
                  ALLOC
  5 .heap         00000200  20402ad8  00409ecc  000209c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209ee  2**0
                  CONTENTS, READONLY
  8 .debug_info   00013b5a  00000000  00000000  00020a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002571  00000000  00000000  000345a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00006ea0  00000000  00000000  00036b12  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000bd0  00000000  00000000  0003d9b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b58  00000000  00000000  0003e582  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001ed74  00000000  00000000  0003f0da  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000b306  00000000  00000000  0005de4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0008bc3d  00000000  00000000  00069154  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003ee0  00000000  00000000  000f4d94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	d8 2a 40 20 c5 17 40 00 75 18 40 00 75 18 40 00     .*@ ..@.u.@.u.@.
  400010:	75 18 40 00 75 18 40 00 75 18 40 00 00 00 00 00     u.@.u.@.u.@.....
	...
  40002c:	75 18 40 00 75 18 40 00 00 00 00 00 75 18 40 00     u.@.u.@.....u.@.
  40003c:	15 1e 40 00 75 18 40 00 75 18 40 00 75 18 40 00     ..@.u.@.u.@.u.@.
  40004c:	75 18 40 00 75 18 40 00 75 18 40 00 75 18 40 00     u.@.u.@.u.@.u.@.
  40005c:	75 18 40 00 75 18 40 00 00 00 00 00 7d 13 40 00     u.@.u.@.....}.@.
  40006c:	95 13 40 00 ad 13 40 00 75 18 40 00 75 18 40 00     ..@...@.u.@.u.@.
  40007c:	75 18 40 00 c5 13 40 00 dd 13 40 00 75 18 40 00     u.@...@...@.u.@.
  40008c:	75 18 40 00 75 18 40 00 75 18 40 00 75 18 40 00     u.@.u.@.u.@.u.@.
  40009c:	75 18 40 00 75 18 40 00 75 18 40 00 75 18 40 00     u.@.u.@.u.@.u.@.
  4000ac:	75 18 40 00 75 18 40 00 75 18 40 00 75 18 40 00     u.@.u.@.u.@.u.@.
  4000bc:	75 18 40 00 75 18 40 00 75 18 40 00 75 18 40 00     u.@.u.@.u.@.u.@.
  4000cc:	75 18 40 00 00 00 00 00 75 18 40 00 00 00 00 00     u.@.....u.@.....
  4000dc:	75 18 40 00 75 18 40 00 75 18 40 00 75 18 40 00     u.@.u.@.u.@.u.@.
  4000ec:	75 18 40 00 75 18 40 00 75 18 40 00 75 18 40 00     u.@.u.@.u.@.u.@.
  4000fc:	75 18 40 00 75 18 40 00 75 18 40 00 75 18 40 00     u.@.u.@.u.@.u.@.
  40010c:	75 18 40 00 75 18 40 00 00 00 00 00 00 00 00 00     u.@.u.@.........
  40011c:	00 00 00 00 75 18 40 00 75 18 40 00 75 18 40 00     ....u.@.u.@.u.@.
  40012c:	75 18 40 00 75 18 40 00 00 00 00 00 75 18 40 00     u.@.u.@.....u.@.
  40013c:	75 18 40 00                                         u.@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009c0 	.word	0x204009c0
  40015c:	00000000 	.word	0x00000000
  400160:	004073f4 	.word	0x004073f4

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	004073f4 	.word	0x004073f4
  4001a0:	204009c4 	.word	0x204009c4
  4001a4:	004073f4 	.word	0x004073f4
  4001a8:	00000000 	.word	0x00000000

004001ac <dacc_get_interrupt_status>:
 * \param p_dacc Pointer to a DACC instance. 
 *
 * \return The interrupt status.
 */
uint32_t dacc_get_interrupt_status(Dacc *p_dacc)
{
  4001ac:	b480      	push	{r7}
  4001ae:	b083      	sub	sp, #12
  4001b0:	af00      	add	r7, sp, #0
  4001b2:	6078      	str	r0, [r7, #4]
	return p_dacc->DACC_ISR;
  4001b4:	687b      	ldr	r3, [r7, #4]
  4001b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  4001b8:	4618      	mov	r0, r3
  4001ba:	370c      	adds	r7, #12
  4001bc:	46bd      	mov	sp, r7
  4001be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4001c2:	4770      	bx	lr

004001c4 <dacc_write_conversion_data>:
 * \param p_dacc Pointer to a DACC instance. 
 * \param ul_data The data to be transferred to analog value. 
 * \param channel The channel to convert the data ul_data
 */
void dacc_write_conversion_data(Dacc *p_dacc, uint32_t ul_data, uint32_t channel)
{
  4001c4:	b480      	push	{r7}
  4001c6:	b085      	sub	sp, #20
  4001c8:	af00      	add	r7, sp, #0
  4001ca:	60f8      	str	r0, [r7, #12]
  4001cc:	60b9      	str	r1, [r7, #8]
  4001ce:	607a      	str	r2, [r7, #4]
	p_dacc->DACC_CDR[channel] = ul_data;
  4001d0:	68fa      	ldr	r2, [r7, #12]
  4001d2:	687b      	ldr	r3, [r7, #4]
  4001d4:	3306      	adds	r3, #6
  4001d6:	009b      	lsls	r3, r3, #2
  4001d8:	4413      	add	r3, r2
  4001da:	68ba      	ldr	r2, [r7, #8]
  4001dc:	605a      	str	r2, [r3, #4]
}
  4001de:	bf00      	nop
  4001e0:	3714      	adds	r7, #20
  4001e2:	46bd      	mov	sp, r7
  4001e4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4001e8:	4770      	bx	lr

004001ea <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4001ea:	b480      	push	{r7}
  4001ec:	b089      	sub	sp, #36	; 0x24
  4001ee:	af00      	add	r7, sp, #0
  4001f0:	60f8      	str	r0, [r7, #12]
  4001f2:	60b9      	str	r1, [r7, #8]
  4001f4:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4001f6:	68bb      	ldr	r3, [r7, #8]
  4001f8:	011a      	lsls	r2, r3, #4
  4001fa:	687b      	ldr	r3, [r7, #4]
  4001fc:	429a      	cmp	r2, r3
  4001fe:	d802      	bhi.n	400206 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  400200:	2310      	movs	r3, #16
  400202:	61fb      	str	r3, [r7, #28]
  400204:	e001      	b.n	40020a <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  400206:	2308      	movs	r3, #8
  400208:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40020a:	687b      	ldr	r3, [r7, #4]
  40020c:	00da      	lsls	r2, r3, #3
  40020e:	69fb      	ldr	r3, [r7, #28]
  400210:	68b9      	ldr	r1, [r7, #8]
  400212:	fb01 f303 	mul.w	r3, r1, r3
  400216:	085b      	lsrs	r3, r3, #1
  400218:	441a      	add	r2, r3
  40021a:	69fb      	ldr	r3, [r7, #28]
  40021c:	68b9      	ldr	r1, [r7, #8]
  40021e:	fb01 f303 	mul.w	r3, r1, r3
  400222:	fbb2 f3f3 	udiv	r3, r2, r3
  400226:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  400228:	69bb      	ldr	r3, [r7, #24]
  40022a:	08db      	lsrs	r3, r3, #3
  40022c:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  40022e:	69bb      	ldr	r3, [r7, #24]
  400230:	f003 0307 	and.w	r3, r3, #7
  400234:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400236:	697b      	ldr	r3, [r7, #20]
  400238:	2b00      	cmp	r3, #0
  40023a:	d003      	beq.n	400244 <usart_set_async_baudrate+0x5a>
  40023c:	697b      	ldr	r3, [r7, #20]
  40023e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  400242:	d301      	bcc.n	400248 <usart_set_async_baudrate+0x5e>
		return 1;
  400244:	2301      	movs	r3, #1
  400246:	e00f      	b.n	400268 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  400248:	69fb      	ldr	r3, [r7, #28]
  40024a:	2b08      	cmp	r3, #8
  40024c:	d105      	bne.n	40025a <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  40024e:	68fb      	ldr	r3, [r7, #12]
  400250:	685b      	ldr	r3, [r3, #4]
  400252:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  400256:	68fb      	ldr	r3, [r7, #12]
  400258:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  40025a:	693b      	ldr	r3, [r7, #16]
  40025c:	041a      	lsls	r2, r3, #16
  40025e:	697b      	ldr	r3, [r7, #20]
  400260:	431a      	orrs	r2, r3
  400262:	68fb      	ldr	r3, [r7, #12]
  400264:	621a      	str	r2, [r3, #32]

	return 0;
  400266:	2300      	movs	r3, #0
}
  400268:	4618      	mov	r0, r3
  40026a:	3724      	adds	r7, #36	; 0x24
  40026c:	46bd      	mov	sp, r7
  40026e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400272:	4770      	bx	lr

00400274 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  400274:	b580      	push	{r7, lr}
  400276:	b082      	sub	sp, #8
  400278:	af00      	add	r7, sp, #0
  40027a:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  40027c:	6878      	ldr	r0, [r7, #4]
  40027e:	4b0d      	ldr	r3, [pc, #52]	; (4002b4 <usart_reset+0x40>)
  400280:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  400282:	687b      	ldr	r3, [r7, #4]
  400284:	2200      	movs	r2, #0
  400286:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  400288:	687b      	ldr	r3, [r7, #4]
  40028a:	2200      	movs	r2, #0
  40028c:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  40028e:	687b      	ldr	r3, [r7, #4]
  400290:	2200      	movs	r2, #0
  400292:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  400294:	6878      	ldr	r0, [r7, #4]
  400296:	4b08      	ldr	r3, [pc, #32]	; (4002b8 <usart_reset+0x44>)
  400298:	4798      	blx	r3
	usart_reset_rx(p_usart);
  40029a:	6878      	ldr	r0, [r7, #4]
  40029c:	4b07      	ldr	r3, [pc, #28]	; (4002bc <usart_reset+0x48>)
  40029e:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  4002a0:	6878      	ldr	r0, [r7, #4]
  4002a2:	4b07      	ldr	r3, [pc, #28]	; (4002c0 <usart_reset+0x4c>)
  4002a4:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  4002a6:	6878      	ldr	r0, [r7, #4]
  4002a8:	4b06      	ldr	r3, [pc, #24]	; (4002c4 <usart_reset+0x50>)
  4002aa:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
  4002ac:	bf00      	nop
  4002ae:	3708      	adds	r7, #8
  4002b0:	46bd      	mov	sp, r7
  4002b2:	bd80      	pop	{r7, pc}
  4002b4:	00400455 	.word	0x00400455
  4002b8:	00400367 	.word	0x00400367
  4002bc:	0040039b 	.word	0x0040039b
  4002c0:	004003b5 	.word	0x004003b5
  4002c4:	004003d1 	.word	0x004003d1

004002c8 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4002c8:	b580      	push	{r7, lr}
  4002ca:	b084      	sub	sp, #16
  4002cc:	af00      	add	r7, sp, #0
  4002ce:	60f8      	str	r0, [r7, #12]
  4002d0:	60b9      	str	r1, [r7, #8]
  4002d2:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  4002d4:	68f8      	ldr	r0, [r7, #12]
  4002d6:	4b1a      	ldr	r3, [pc, #104]	; (400340 <usart_init_rs232+0x78>)
  4002d8:	4798      	blx	r3

	ul_reg_val = 0;
  4002da:	4b1a      	ldr	r3, [pc, #104]	; (400344 <usart_init_rs232+0x7c>)
  4002dc:	2200      	movs	r2, #0
  4002de:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4002e0:	68bb      	ldr	r3, [r7, #8]
  4002e2:	2b00      	cmp	r3, #0
  4002e4:	d009      	beq.n	4002fa <usart_init_rs232+0x32>
  4002e6:	68bb      	ldr	r3, [r7, #8]
  4002e8:	681b      	ldr	r3, [r3, #0]
  4002ea:	687a      	ldr	r2, [r7, #4]
  4002ec:	4619      	mov	r1, r3
  4002ee:	68f8      	ldr	r0, [r7, #12]
  4002f0:	4b15      	ldr	r3, [pc, #84]	; (400348 <usart_init_rs232+0x80>)
  4002f2:	4798      	blx	r3
  4002f4:	4603      	mov	r3, r0
  4002f6:	2b00      	cmp	r3, #0
  4002f8:	d001      	beq.n	4002fe <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  4002fa:	2301      	movs	r3, #1
  4002fc:	e01b      	b.n	400336 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4002fe:	68bb      	ldr	r3, [r7, #8]
  400300:	685a      	ldr	r2, [r3, #4]
  400302:	68bb      	ldr	r3, [r7, #8]
  400304:	689b      	ldr	r3, [r3, #8]
  400306:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400308:	68bb      	ldr	r3, [r7, #8]
  40030a:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40030c:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40030e:	68bb      	ldr	r3, [r7, #8]
  400310:	68db      	ldr	r3, [r3, #12]
  400312:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400314:	4b0b      	ldr	r3, [pc, #44]	; (400344 <usart_init_rs232+0x7c>)
  400316:	681b      	ldr	r3, [r3, #0]
  400318:	4313      	orrs	r3, r2
  40031a:	4a0a      	ldr	r2, [pc, #40]	; (400344 <usart_init_rs232+0x7c>)
  40031c:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  40031e:	4b09      	ldr	r3, [pc, #36]	; (400344 <usart_init_rs232+0x7c>)
  400320:	681b      	ldr	r3, [r3, #0]
  400322:	4a08      	ldr	r2, [pc, #32]	; (400344 <usart_init_rs232+0x7c>)
  400324:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  400326:	68fb      	ldr	r3, [r7, #12]
  400328:	685a      	ldr	r2, [r3, #4]
  40032a:	4b06      	ldr	r3, [pc, #24]	; (400344 <usart_init_rs232+0x7c>)
  40032c:	681b      	ldr	r3, [r3, #0]
  40032e:	431a      	orrs	r2, r3
  400330:	68fb      	ldr	r3, [r7, #12]
  400332:	605a      	str	r2, [r3, #4]

	return 0;
  400334:	2300      	movs	r3, #0
}
  400336:	4618      	mov	r0, r3
  400338:	3710      	adds	r7, #16
  40033a:	46bd      	mov	sp, r7
  40033c:	bd80      	pop	{r7, pc}
  40033e:	bf00      	nop
  400340:	00400275 	.word	0x00400275
  400344:	204009dc 	.word	0x204009dc
  400348:	004001eb 	.word	0x004001eb

0040034c <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  40034c:	b480      	push	{r7}
  40034e:	b083      	sub	sp, #12
  400350:	af00      	add	r7, sp, #0
  400352:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  400354:	687b      	ldr	r3, [r7, #4]
  400356:	2240      	movs	r2, #64	; 0x40
  400358:	601a      	str	r2, [r3, #0]
}
  40035a:	bf00      	nop
  40035c:	370c      	adds	r7, #12
  40035e:	46bd      	mov	sp, r7
  400360:	f85d 7b04 	ldr.w	r7, [sp], #4
  400364:	4770      	bx	lr

00400366 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  400366:	b480      	push	{r7}
  400368:	b083      	sub	sp, #12
  40036a:	af00      	add	r7, sp, #0
  40036c:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40036e:	687b      	ldr	r3, [r7, #4]
  400370:	2288      	movs	r2, #136	; 0x88
  400372:	601a      	str	r2, [r3, #0]
}
  400374:	bf00      	nop
  400376:	370c      	adds	r7, #12
  400378:	46bd      	mov	sp, r7
  40037a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40037e:	4770      	bx	lr

00400380 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  400380:	b480      	push	{r7}
  400382:	b083      	sub	sp, #12
  400384:	af00      	add	r7, sp, #0
  400386:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  400388:	687b      	ldr	r3, [r7, #4]
  40038a:	2210      	movs	r2, #16
  40038c:	601a      	str	r2, [r3, #0]
}
  40038e:	bf00      	nop
  400390:	370c      	adds	r7, #12
  400392:	46bd      	mov	sp, r7
  400394:	f85d 7b04 	ldr.w	r7, [sp], #4
  400398:	4770      	bx	lr

0040039a <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  40039a:	b480      	push	{r7}
  40039c:	b083      	sub	sp, #12
  40039e:	af00      	add	r7, sp, #0
  4003a0:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4003a2:	687b      	ldr	r3, [r7, #4]
  4003a4:	2224      	movs	r2, #36	; 0x24
  4003a6:	601a      	str	r2, [r3, #0]
}
  4003a8:	bf00      	nop
  4003aa:	370c      	adds	r7, #12
  4003ac:	46bd      	mov	sp, r7
  4003ae:	f85d 7b04 	ldr.w	r7, [sp], #4
  4003b2:	4770      	bx	lr

004003b4 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  4003b4:	b480      	push	{r7}
  4003b6:	b083      	sub	sp, #12
  4003b8:	af00      	add	r7, sp, #0
  4003ba:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  4003bc:	687b      	ldr	r3, [r7, #4]
  4003be:	f44f 7280 	mov.w	r2, #256	; 0x100
  4003c2:	601a      	str	r2, [r3, #0]
}
  4003c4:	bf00      	nop
  4003c6:	370c      	adds	r7, #12
  4003c8:	46bd      	mov	sp, r7
  4003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
  4003ce:	4770      	bx	lr

004003d0 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  4003d0:	b480      	push	{r7}
  4003d2:	b083      	sub	sp, #12
  4003d4:	af00      	add	r7, sp, #0
  4003d6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  4003d8:	687b      	ldr	r3, [r7, #4]
  4003da:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4003de:	601a      	str	r2, [r3, #0]
}
  4003e0:	bf00      	nop
  4003e2:	370c      	adds	r7, #12
  4003e4:	46bd      	mov	sp, r7
  4003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4003ea:	4770      	bx	lr

004003ec <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  4003ec:	b480      	push	{r7}
  4003ee:	b083      	sub	sp, #12
  4003f0:	af00      	add	r7, sp, #0
  4003f2:	6078      	str	r0, [r7, #4]
  4003f4:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4003f6:	687b      	ldr	r3, [r7, #4]
  4003f8:	695b      	ldr	r3, [r3, #20]
  4003fa:	f003 0302 	and.w	r3, r3, #2
  4003fe:	2b00      	cmp	r3, #0
  400400:	d101      	bne.n	400406 <usart_write+0x1a>
		return 1;
  400402:	2301      	movs	r3, #1
  400404:	e005      	b.n	400412 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400406:	683b      	ldr	r3, [r7, #0]
  400408:	f3c3 0208 	ubfx	r2, r3, #0, #9
  40040c:	687b      	ldr	r3, [r7, #4]
  40040e:	61da      	str	r2, [r3, #28]
	return 0;
  400410:	2300      	movs	r3, #0
}
  400412:	4618      	mov	r0, r3
  400414:	370c      	adds	r7, #12
  400416:	46bd      	mov	sp, r7
  400418:	f85d 7b04 	ldr.w	r7, [sp], #4
  40041c:	4770      	bx	lr

0040041e <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  40041e:	b480      	push	{r7}
  400420:	b083      	sub	sp, #12
  400422:	af00      	add	r7, sp, #0
  400424:	6078      	str	r0, [r7, #4]
  400426:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400428:	687b      	ldr	r3, [r7, #4]
  40042a:	695b      	ldr	r3, [r3, #20]
  40042c:	f003 0301 	and.w	r3, r3, #1
  400430:	2b00      	cmp	r3, #0
  400432:	d101      	bne.n	400438 <usart_read+0x1a>
		return 1;
  400434:	2301      	movs	r3, #1
  400436:	e006      	b.n	400446 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400438:	687b      	ldr	r3, [r7, #4]
  40043a:	699b      	ldr	r3, [r3, #24]
  40043c:	f3c3 0208 	ubfx	r2, r3, #0, #9
  400440:	683b      	ldr	r3, [r7, #0]
  400442:	601a      	str	r2, [r3, #0]

	return 0;
  400444:	2300      	movs	r3, #0
}
  400446:	4618      	mov	r0, r3
  400448:	370c      	adds	r7, #12
  40044a:	46bd      	mov	sp, r7
  40044c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400450:	4770      	bx	lr
	...

00400454 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  400454:	b480      	push	{r7}
  400456:	b083      	sub	sp, #12
  400458:	af00      	add	r7, sp, #0
  40045a:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  40045c:	687b      	ldr	r3, [r7, #4]
  40045e:	4a04      	ldr	r2, [pc, #16]	; (400470 <usart_disable_writeprotect+0x1c>)
  400460:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  400464:	bf00      	nop
  400466:	370c      	adds	r7, #12
  400468:	46bd      	mov	sp, r7
  40046a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40046e:	4770      	bx	lr
  400470:	55534100 	.word	0x55534100

00400474 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  400474:	b580      	push	{r7, lr}
  400476:	b082      	sub	sp, #8
  400478:	af00      	add	r7, sp, #0
  40047a:	6078      	str	r0, [r7, #4]
  40047c:	460b      	mov	r3, r1
  40047e:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400480:	687b      	ldr	r3, [r7, #4]
  400482:	4a36      	ldr	r2, [pc, #216]	; (40055c <usart_serial_putchar+0xe8>)
  400484:	4293      	cmp	r3, r2
  400486:	d10a      	bne.n	40049e <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  400488:	bf00      	nop
  40048a:	78fb      	ldrb	r3, [r7, #3]
  40048c:	4619      	mov	r1, r3
  40048e:	6878      	ldr	r0, [r7, #4]
  400490:	4b33      	ldr	r3, [pc, #204]	; (400560 <usart_serial_putchar+0xec>)
  400492:	4798      	blx	r3
  400494:	4603      	mov	r3, r0
  400496:	2b00      	cmp	r3, #0
  400498:	d1f7      	bne.n	40048a <usart_serial_putchar+0x16>
		return 1;
  40049a:	2301      	movs	r3, #1
  40049c:	e05a      	b.n	400554 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40049e:	687b      	ldr	r3, [r7, #4]
  4004a0:	4a30      	ldr	r2, [pc, #192]	; (400564 <usart_serial_putchar+0xf0>)
  4004a2:	4293      	cmp	r3, r2
  4004a4:	d10a      	bne.n	4004bc <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  4004a6:	bf00      	nop
  4004a8:	78fb      	ldrb	r3, [r7, #3]
  4004aa:	4619      	mov	r1, r3
  4004ac:	6878      	ldr	r0, [r7, #4]
  4004ae:	4b2c      	ldr	r3, [pc, #176]	; (400560 <usart_serial_putchar+0xec>)
  4004b0:	4798      	blx	r3
  4004b2:	4603      	mov	r3, r0
  4004b4:	2b00      	cmp	r3, #0
  4004b6:	d1f7      	bne.n	4004a8 <usart_serial_putchar+0x34>
		return 1;
  4004b8:	2301      	movs	r3, #1
  4004ba:	e04b      	b.n	400554 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4004bc:	687b      	ldr	r3, [r7, #4]
  4004be:	4a2a      	ldr	r2, [pc, #168]	; (400568 <usart_serial_putchar+0xf4>)
  4004c0:	4293      	cmp	r3, r2
  4004c2:	d10a      	bne.n	4004da <usart_serial_putchar+0x66>
		while (uart_write((Uart*)p_usart, c)!=0);
  4004c4:	bf00      	nop
  4004c6:	78fb      	ldrb	r3, [r7, #3]
  4004c8:	4619      	mov	r1, r3
  4004ca:	6878      	ldr	r0, [r7, #4]
  4004cc:	4b24      	ldr	r3, [pc, #144]	; (400560 <usart_serial_putchar+0xec>)
  4004ce:	4798      	blx	r3
  4004d0:	4603      	mov	r3, r0
  4004d2:	2b00      	cmp	r3, #0
  4004d4:	d1f7      	bne.n	4004c6 <usart_serial_putchar+0x52>
		return 1;
  4004d6:	2301      	movs	r3, #1
  4004d8:	e03c      	b.n	400554 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4004da:	687b      	ldr	r3, [r7, #4]
  4004dc:	4a23      	ldr	r2, [pc, #140]	; (40056c <usart_serial_putchar+0xf8>)
  4004de:	4293      	cmp	r3, r2
  4004e0:	d10a      	bne.n	4004f8 <usart_serial_putchar+0x84>
		while (uart_write((Uart*)p_usart, c)!=0);
  4004e2:	bf00      	nop
  4004e4:	78fb      	ldrb	r3, [r7, #3]
  4004e6:	4619      	mov	r1, r3
  4004e8:	6878      	ldr	r0, [r7, #4]
  4004ea:	4b1d      	ldr	r3, [pc, #116]	; (400560 <usart_serial_putchar+0xec>)
  4004ec:	4798      	blx	r3
  4004ee:	4603      	mov	r3, r0
  4004f0:	2b00      	cmp	r3, #0
  4004f2:	d1f7      	bne.n	4004e4 <usart_serial_putchar+0x70>
		return 1;
  4004f4:	2301      	movs	r3, #1
  4004f6:	e02d      	b.n	400554 <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4004f8:	687b      	ldr	r3, [r7, #4]
  4004fa:	4a1d      	ldr	r2, [pc, #116]	; (400570 <usart_serial_putchar+0xfc>)
  4004fc:	4293      	cmp	r3, r2
  4004fe:	d10a      	bne.n	400516 <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
  400500:	bf00      	nop
  400502:	78fb      	ldrb	r3, [r7, #3]
  400504:	4619      	mov	r1, r3
  400506:	6878      	ldr	r0, [r7, #4]
  400508:	4b1a      	ldr	r3, [pc, #104]	; (400574 <usart_serial_putchar+0x100>)
  40050a:	4798      	blx	r3
  40050c:	4603      	mov	r3, r0
  40050e:	2b00      	cmp	r3, #0
  400510:	d1f7      	bne.n	400502 <usart_serial_putchar+0x8e>
		return 1;
  400512:	2301      	movs	r3, #1
  400514:	e01e      	b.n	400554 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400516:	687b      	ldr	r3, [r7, #4]
  400518:	4a17      	ldr	r2, [pc, #92]	; (400578 <usart_serial_putchar+0x104>)
  40051a:	4293      	cmp	r3, r2
  40051c:	d10a      	bne.n	400534 <usart_serial_putchar+0xc0>
		while (usart_write(p_usart, c)!=0);
  40051e:	bf00      	nop
  400520:	78fb      	ldrb	r3, [r7, #3]
  400522:	4619      	mov	r1, r3
  400524:	6878      	ldr	r0, [r7, #4]
  400526:	4b13      	ldr	r3, [pc, #76]	; (400574 <usart_serial_putchar+0x100>)
  400528:	4798      	blx	r3
  40052a:	4603      	mov	r3, r0
  40052c:	2b00      	cmp	r3, #0
  40052e:	d1f7      	bne.n	400520 <usart_serial_putchar+0xac>
		return 1;
  400530:	2301      	movs	r3, #1
  400532:	e00f      	b.n	400554 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  400534:	687b      	ldr	r3, [r7, #4]
  400536:	4a11      	ldr	r2, [pc, #68]	; (40057c <usart_serial_putchar+0x108>)
  400538:	4293      	cmp	r3, r2
  40053a:	d10a      	bne.n	400552 <usart_serial_putchar+0xde>
		while (usart_write(p_usart, c)!=0);
  40053c:	bf00      	nop
  40053e:	78fb      	ldrb	r3, [r7, #3]
  400540:	4619      	mov	r1, r3
  400542:	6878      	ldr	r0, [r7, #4]
  400544:	4b0b      	ldr	r3, [pc, #44]	; (400574 <usart_serial_putchar+0x100>)
  400546:	4798      	blx	r3
  400548:	4603      	mov	r3, r0
  40054a:	2b00      	cmp	r3, #0
  40054c:	d1f7      	bne.n	40053e <usart_serial_putchar+0xca>
		return 1;
  40054e:	2301      	movs	r3, #1
  400550:	e000      	b.n	400554 <usart_serial_putchar+0xe0>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  400552:	2300      	movs	r3, #0
}
  400554:	4618      	mov	r0, r3
  400556:	3708      	adds	r7, #8
  400558:	46bd      	mov	sp, r7
  40055a:	bd80      	pop	{r7, pc}
  40055c:	400e0800 	.word	0x400e0800
  400560:	00400615 	.word	0x00400615
  400564:	400e0a00 	.word	0x400e0a00
  400568:	400e1a00 	.word	0x400e1a00
  40056c:	400e1c00 	.word	0x400e1c00
  400570:	40024000 	.word	0x40024000
  400574:	004003ed 	.word	0x004003ed
  400578:	40028000 	.word	0x40028000
  40057c:	4002c000 	.word	0x4002c000

00400580 <usart_serial_write_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
  400580:	b580      	push	{r7, lr}
  400582:	b084      	sub	sp, #16
  400584:	af00      	add	r7, sp, #0
  400586:	60f8      	str	r0, [r7, #12]
  400588:	60b9      	str	r1, [r7, #8]
  40058a:	607a      	str	r2, [r7, #4]
	while (len) {
  40058c:	e00b      	b.n	4005a6 <usart_serial_write_packet+0x26>
		usart_serial_putchar(usart, *data);
  40058e:	68bb      	ldr	r3, [r7, #8]
  400590:	781b      	ldrb	r3, [r3, #0]
  400592:	4619      	mov	r1, r3
  400594:	68f8      	ldr	r0, [r7, #12]
  400596:	4b08      	ldr	r3, [pc, #32]	; (4005b8 <usart_serial_write_packet+0x38>)
  400598:	4798      	blx	r3
		len--;
  40059a:	687b      	ldr	r3, [r7, #4]
  40059c:	3b01      	subs	r3, #1
  40059e:	607b      	str	r3, [r7, #4]
		data++;
  4005a0:	68bb      	ldr	r3, [r7, #8]
  4005a2:	3301      	adds	r3, #1
  4005a4:	60bb      	str	r3, [r7, #8]
	while (len) {
  4005a6:	687b      	ldr	r3, [r7, #4]
  4005a8:	2b00      	cmp	r3, #0
  4005aa:	d1f0      	bne.n	40058e <usart_serial_write_packet+0xe>
	}
	return STATUS_OK;
  4005ac:	2300      	movs	r3, #0
}
  4005ae:	4618      	mov	r0, r3
  4005b0:	3710      	adds	r7, #16
  4005b2:	46bd      	mov	sp, r7
  4005b4:	bd80      	pop	{r7, pc}
  4005b6:	bf00      	nop
  4005b8:	00400475 	.word	0x00400475

004005bc <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4005bc:	b480      	push	{r7}
  4005be:	b085      	sub	sp, #20
  4005c0:	af00      	add	r7, sp, #0
  4005c2:	6078      	str	r0, [r7, #4]
  4005c4:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  4005c6:	2300      	movs	r3, #0
  4005c8:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4005ca:	687b      	ldr	r3, [r7, #4]
  4005cc:	22ac      	movs	r2, #172	; 0xac
  4005ce:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  4005d0:	683b      	ldr	r3, [r7, #0]
  4005d2:	681a      	ldr	r2, [r3, #0]
  4005d4:	683b      	ldr	r3, [r7, #0]
  4005d6:	685b      	ldr	r3, [r3, #4]
  4005d8:	fbb2 f3f3 	udiv	r3, r2, r3
  4005dc:	091b      	lsrs	r3, r3, #4
  4005de:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  4005e0:	68fb      	ldr	r3, [r7, #12]
  4005e2:	2b00      	cmp	r3, #0
  4005e4:	d003      	beq.n	4005ee <uart_init+0x32>
  4005e6:	68fb      	ldr	r3, [r7, #12]
  4005e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  4005ec:	d301      	bcc.n	4005f2 <uart_init+0x36>
		return 1;
  4005ee:	2301      	movs	r3, #1
  4005f0:	e00a      	b.n	400608 <uart_init+0x4c>

	p_uart->UART_BRGR = cd;
  4005f2:	687b      	ldr	r3, [r7, #4]
  4005f4:	68fa      	ldr	r2, [r7, #12]
  4005f6:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  4005f8:	683b      	ldr	r3, [r7, #0]
  4005fa:	689a      	ldr	r2, [r3, #8]
  4005fc:	687b      	ldr	r3, [r7, #4]
  4005fe:	605a      	str	r2, [r3, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400600:	687b      	ldr	r3, [r7, #4]
  400602:	2250      	movs	r2, #80	; 0x50
  400604:	601a      	str	r2, [r3, #0]

	return 0;
  400606:	2300      	movs	r3, #0
}
  400608:	4618      	mov	r0, r3
  40060a:	3714      	adds	r7, #20
  40060c:	46bd      	mov	sp, r7
  40060e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400612:	4770      	bx	lr

00400614 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  400614:	b480      	push	{r7}
  400616:	b083      	sub	sp, #12
  400618:	af00      	add	r7, sp, #0
  40061a:	6078      	str	r0, [r7, #4]
  40061c:	460b      	mov	r3, r1
  40061e:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400620:	687b      	ldr	r3, [r7, #4]
  400622:	695b      	ldr	r3, [r3, #20]
  400624:	f003 0302 	and.w	r3, r3, #2
  400628:	2b00      	cmp	r3, #0
  40062a:	d101      	bne.n	400630 <uart_write+0x1c>
		return 1;
  40062c:	2301      	movs	r3, #1
  40062e:	e003      	b.n	400638 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  400630:	78fa      	ldrb	r2, [r7, #3]
  400632:	687b      	ldr	r3, [r7, #4]
  400634:	61da      	str	r2, [r3, #28]
	return 0;
  400636:	2300      	movs	r3, #0
}
  400638:	4618      	mov	r0, r3
  40063a:	370c      	adds	r7, #12
  40063c:	46bd      	mov	sp, r7
  40063e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400642:	4770      	bx	lr

00400644 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ      BOARD_FREQ_MAINCK_XTAL    //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ    BOARD_FREQ_MAINCK_BYPASS  //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  400644:	b580      	push	{r7, lr}
  400646:	b082      	sub	sp, #8
  400648:	af00      	add	r7, sp, #0
  40064a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40064c:	687b      	ldr	r3, [r7, #4]
  40064e:	2b07      	cmp	r3, #7
  400650:	d831      	bhi.n	4006b6 <osc_enable+0x72>
  400652:	a201      	add	r2, pc, #4	; (adr r2, 400658 <osc_enable+0x14>)
  400654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400658:	004006b5 	.word	0x004006b5
  40065c:	00400679 	.word	0x00400679
  400660:	00400681 	.word	0x00400681
  400664:	00400689 	.word	0x00400689
  400668:	00400691 	.word	0x00400691
  40066c:	00400699 	.word	0x00400699
  400670:	004006a1 	.word	0x004006a1
  400674:	004006ab 	.word	0x004006ab
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  400678:	2000      	movs	r0, #0
  40067a:	4b11      	ldr	r3, [pc, #68]	; (4006c0 <osc_enable+0x7c>)
  40067c:	4798      	blx	r3
		break;
  40067e:	e01a      	b.n	4006b6 <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  400680:	2001      	movs	r0, #1
  400682:	4b0f      	ldr	r3, [pc, #60]	; (4006c0 <osc_enable+0x7c>)
  400684:	4798      	blx	r3
		break;
  400686:	e016      	b.n	4006b6 <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  400688:	2000      	movs	r0, #0
  40068a:	4b0e      	ldr	r3, [pc, #56]	; (4006c4 <osc_enable+0x80>)
  40068c:	4798      	blx	r3
		break;
  40068e:	e012      	b.n	4006b6 <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  400690:	2010      	movs	r0, #16
  400692:	4b0c      	ldr	r3, [pc, #48]	; (4006c4 <osc_enable+0x80>)
  400694:	4798      	blx	r3
		break;
  400696:	e00e      	b.n	4006b6 <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  400698:	2020      	movs	r0, #32
  40069a:	4b0a      	ldr	r3, [pc, #40]	; (4006c4 <osc_enable+0x80>)
  40069c:	4798      	blx	r3
		break;
  40069e:	e00a      	b.n	4006b6 <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4006a0:	213e      	movs	r1, #62	; 0x3e
  4006a2:	2000      	movs	r0, #0
  4006a4:	4b08      	ldr	r3, [pc, #32]	; (4006c8 <osc_enable+0x84>)
  4006a6:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  4006a8:	e005      	b.n	4006b6 <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  4006aa:	213e      	movs	r1, #62	; 0x3e
  4006ac:	2001      	movs	r0, #1
  4006ae:	4b06      	ldr	r3, [pc, #24]	; (4006c8 <osc_enable+0x84>)
  4006b0:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  4006b2:	e000      	b.n	4006b6 <osc_enable+0x72>
		break;
  4006b4:	bf00      	nop
	}
}
  4006b6:	bf00      	nop
  4006b8:	3708      	adds	r7, #8
  4006ba:	46bd      	mov	sp, r7
  4006bc:	bd80      	pop	{r7, pc}
  4006be:	bf00      	nop
  4006c0:	004014f5 	.word	0x004014f5
  4006c4:	00401561 	.word	0x00401561
  4006c8:	004015d1 	.word	0x004015d1

004006cc <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  4006cc:	b580      	push	{r7, lr}
  4006ce:	b082      	sub	sp, #8
  4006d0:	af00      	add	r7, sp, #0
  4006d2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4006d4:	687b      	ldr	r3, [r7, #4]
  4006d6:	2b07      	cmp	r3, #7
  4006d8:	d826      	bhi.n	400728 <osc_is_ready+0x5c>
  4006da:	a201      	add	r2, pc, #4	; (adr r2, 4006e0 <osc_is_ready+0x14>)
  4006dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4006e0:	00400701 	.word	0x00400701
  4006e4:	00400705 	.word	0x00400705
  4006e8:	00400705 	.word	0x00400705
  4006ec:	00400717 	.word	0x00400717
  4006f0:	00400717 	.word	0x00400717
  4006f4:	00400717 	.word	0x00400717
  4006f8:	00400717 	.word	0x00400717
  4006fc:	00400717 	.word	0x00400717
	case OSC_SLCK_32K_RC:
		return 1;
  400700:	2301      	movs	r3, #1
  400702:	e012      	b.n	40072a <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  400704:	4b0b      	ldr	r3, [pc, #44]	; (400734 <osc_is_ready+0x68>)
  400706:	4798      	blx	r3
  400708:	4603      	mov	r3, r0
  40070a:	2b00      	cmp	r3, #0
  40070c:	bf14      	ite	ne
  40070e:	2301      	movne	r3, #1
  400710:	2300      	moveq	r3, #0
  400712:	b2db      	uxtb	r3, r3
  400714:	e009      	b.n	40072a <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400716:	4b08      	ldr	r3, [pc, #32]	; (400738 <osc_is_ready+0x6c>)
  400718:	4798      	blx	r3
  40071a:	4603      	mov	r3, r0
  40071c:	2b00      	cmp	r3, #0
  40071e:	bf14      	ite	ne
  400720:	2301      	movne	r3, #1
  400722:	2300      	moveq	r3, #0
  400724:	b2db      	uxtb	r3, r3
  400726:	e000      	b.n	40072a <osc_is_ready+0x5e>
	}

	return 0;
  400728:	2300      	movs	r3, #0
}
  40072a:	4618      	mov	r0, r3
  40072c:	3708      	adds	r7, #8
  40072e:	46bd      	mov	sp, r7
  400730:	bd80      	pop	{r7, pc}
  400732:	bf00      	nop
  400734:	0040152d 	.word	0x0040152d
  400738:	00401649 	.word	0x00401649

0040073c <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  40073c:	b480      	push	{r7}
  40073e:	b083      	sub	sp, #12
  400740:	af00      	add	r7, sp, #0
  400742:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400744:	687b      	ldr	r3, [r7, #4]
  400746:	2b07      	cmp	r3, #7
  400748:	d825      	bhi.n	400796 <osc_get_rate+0x5a>
  40074a:	a201      	add	r2, pc, #4	; (adr r2, 400750 <osc_get_rate+0x14>)
  40074c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400750:	00400771 	.word	0x00400771
  400754:	00400777 	.word	0x00400777
  400758:	0040077d 	.word	0x0040077d
  40075c:	00400783 	.word	0x00400783
  400760:	00400787 	.word	0x00400787
  400764:	0040078b 	.word	0x0040078b
  400768:	0040078f 	.word	0x0040078f
  40076c:	00400793 	.word	0x00400793
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400770:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400774:	e010      	b.n	400798 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40077a:	e00d      	b.n	400798 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  40077c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400780:	e00a      	b.n	400798 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400782:	4b08      	ldr	r3, [pc, #32]	; (4007a4 <osc_get_rate+0x68>)
  400784:	e008      	b.n	400798 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400786:	4b08      	ldr	r3, [pc, #32]	; (4007a8 <osc_get_rate+0x6c>)
  400788:	e006      	b.n	400798 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40078a:	4b08      	ldr	r3, [pc, #32]	; (4007ac <osc_get_rate+0x70>)
  40078c:	e004      	b.n	400798 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40078e:	4b07      	ldr	r3, [pc, #28]	; (4007ac <osc_get_rate+0x70>)
  400790:	e002      	b.n	400798 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400792:	4b06      	ldr	r3, [pc, #24]	; (4007ac <osc_get_rate+0x70>)
  400794:	e000      	b.n	400798 <osc_get_rate+0x5c>
	}

	return 0;
  400796:	2300      	movs	r3, #0
}
  400798:	4618      	mov	r0, r3
  40079a:	370c      	adds	r7, #12
  40079c:	46bd      	mov	sp, r7
  40079e:	f85d 7b04 	ldr.w	r7, [sp], #4
  4007a2:	4770      	bx	lr
  4007a4:	003d0900 	.word	0x003d0900
  4007a8:	007a1200 	.word	0x007a1200
  4007ac:	00b71b00 	.word	0x00b71b00

004007b0 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  4007b0:	b580      	push	{r7, lr}
  4007b2:	b082      	sub	sp, #8
  4007b4:	af00      	add	r7, sp, #0
  4007b6:	4603      	mov	r3, r0
  4007b8:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  4007ba:	bf00      	nop
  4007bc:	79fb      	ldrb	r3, [r7, #7]
  4007be:	4618      	mov	r0, r3
  4007c0:	4b05      	ldr	r3, [pc, #20]	; (4007d8 <osc_wait_ready+0x28>)
  4007c2:	4798      	blx	r3
  4007c4:	4603      	mov	r3, r0
  4007c6:	f083 0301 	eor.w	r3, r3, #1
  4007ca:	b2db      	uxtb	r3, r3
  4007cc:	2b00      	cmp	r3, #0
  4007ce:	d1f5      	bne.n	4007bc <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  4007d0:	bf00      	nop
  4007d2:	3708      	adds	r7, #8
  4007d4:	46bd      	mov	sp, r7
  4007d6:	bd80      	pop	{r7, pc}
  4007d8:	004006cd 	.word	0x004006cd

004007dc <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  4007dc:	b580      	push	{r7, lr}
  4007de:	b086      	sub	sp, #24
  4007e0:	af00      	add	r7, sp, #0
  4007e2:	60f8      	str	r0, [r7, #12]
  4007e4:	607a      	str	r2, [r7, #4]
  4007e6:	603b      	str	r3, [r7, #0]
  4007e8:	460b      	mov	r3, r1
  4007ea:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  4007ec:	687b      	ldr	r3, [r7, #4]
  4007ee:	2b00      	cmp	r3, #0
  4007f0:	d107      	bne.n	400802 <pll_config_init+0x26>
  4007f2:	683b      	ldr	r3, [r7, #0]
  4007f4:	2b00      	cmp	r3, #0
  4007f6:	d104      	bne.n	400802 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  4007f8:	68fb      	ldr	r3, [r7, #12]
  4007fa:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  4007fe:	601a      	str	r2, [r3, #0]
  400800:	e019      	b.n	400836 <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  400802:	7afb      	ldrb	r3, [r7, #11]
  400804:	4618      	mov	r0, r3
  400806:	4b0e      	ldr	r3, [pc, #56]	; (400840 <pll_config_init+0x64>)
  400808:	4798      	blx	r3
  40080a:	4602      	mov	r2, r0
  40080c:	687b      	ldr	r3, [r7, #4]
  40080e:	fbb2 f3f3 	udiv	r3, r2, r3
  400812:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  400814:	697b      	ldr	r3, [r7, #20]
  400816:	683a      	ldr	r2, [r7, #0]
  400818:	fb02 f303 	mul.w	r3, r2, r3
  40081c:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  40081e:	683b      	ldr	r3, [r7, #0]
  400820:	3b01      	subs	r3, #1
  400822:	041a      	lsls	r2, r3, #16
  400824:	4b07      	ldr	r3, [pc, #28]	; (400844 <pll_config_init+0x68>)
  400826:	4013      	ands	r3, r2
  400828:	687a      	ldr	r2, [r7, #4]
  40082a:	b2d2      	uxtb	r2, r2
  40082c:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  40082e:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  400832:	68fb      	ldr	r3, [r7, #12]
  400834:	601a      	str	r2, [r3, #0]
	}
}
  400836:	bf00      	nop
  400838:	3718      	adds	r7, #24
  40083a:	46bd      	mov	sp, r7
  40083c:	bd80      	pop	{r7, pc}
  40083e:	bf00      	nop
  400840:	0040073d 	.word	0x0040073d
  400844:	07ff0000 	.word	0x07ff0000

00400848 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  400848:	b580      	push	{r7, lr}
  40084a:	b082      	sub	sp, #8
  40084c:	af00      	add	r7, sp, #0
  40084e:	6078      	str	r0, [r7, #4]
  400850:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400852:	683b      	ldr	r3, [r7, #0]
  400854:	2b00      	cmp	r3, #0
  400856:	d108      	bne.n	40086a <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  400858:	4b09      	ldr	r3, [pc, #36]	; (400880 <pll_enable+0x38>)
  40085a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  40085c:	4a09      	ldr	r2, [pc, #36]	; (400884 <pll_enable+0x3c>)
  40085e:	687b      	ldr	r3, [r7, #4]
  400860:	681b      	ldr	r3, [r3, #0]
  400862:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  400866:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  400868:	e005      	b.n	400876 <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  40086a:	4a06      	ldr	r2, [pc, #24]	; (400884 <pll_enable+0x3c>)
  40086c:	687b      	ldr	r3, [r7, #4]
  40086e:	681b      	ldr	r3, [r3, #0]
  400870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400874:	61d3      	str	r3, [r2, #28]
}
  400876:	bf00      	nop
  400878:	3708      	adds	r7, #8
  40087a:	46bd      	mov	sp, r7
  40087c:	bd80      	pop	{r7, pc}
  40087e:	bf00      	nop
  400880:	00401665 	.word	0x00401665
  400884:	400e0600 	.word	0x400e0600

00400888 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  400888:	b580      	push	{r7, lr}
  40088a:	b082      	sub	sp, #8
  40088c:	af00      	add	r7, sp, #0
  40088e:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400890:	687b      	ldr	r3, [r7, #4]
  400892:	2b00      	cmp	r3, #0
  400894:	d103      	bne.n	40089e <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  400896:	4b05      	ldr	r3, [pc, #20]	; (4008ac <pll_is_locked+0x24>)
  400898:	4798      	blx	r3
  40089a:	4603      	mov	r3, r0
  40089c:	e002      	b.n	4008a4 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  40089e:	4b04      	ldr	r3, [pc, #16]	; (4008b0 <pll_is_locked+0x28>)
  4008a0:	4798      	blx	r3
  4008a2:	4603      	mov	r3, r0
	}
}
  4008a4:	4618      	mov	r0, r3
  4008a6:	3708      	adds	r7, #8
  4008a8:	46bd      	mov	sp, r7
  4008aa:	bd80      	pop	{r7, pc}
  4008ac:	00401681 	.word	0x00401681
  4008b0:	0040169d 	.word	0x0040169d

004008b4 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  4008b4:	b580      	push	{r7, lr}
  4008b6:	b082      	sub	sp, #8
  4008b8:	af00      	add	r7, sp, #0
  4008ba:	4603      	mov	r3, r0
  4008bc:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  4008be:	79fb      	ldrb	r3, [r7, #7]
  4008c0:	3b03      	subs	r3, #3
  4008c2:	2b04      	cmp	r3, #4
  4008c4:	d808      	bhi.n	4008d8 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  4008c6:	79fb      	ldrb	r3, [r7, #7]
  4008c8:	4618      	mov	r0, r3
  4008ca:	4b06      	ldr	r3, [pc, #24]	; (4008e4 <pll_enable_source+0x30>)
  4008cc:	4798      	blx	r3
		osc_wait_ready(e_src);
  4008ce:	79fb      	ldrb	r3, [r7, #7]
  4008d0:	4618      	mov	r0, r3
  4008d2:	4b05      	ldr	r3, [pc, #20]	; (4008e8 <pll_enable_source+0x34>)
  4008d4:	4798      	blx	r3
		break;
  4008d6:	e000      	b.n	4008da <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  4008d8:	bf00      	nop
	}
}
  4008da:	bf00      	nop
  4008dc:	3708      	adds	r7, #8
  4008de:	46bd      	mov	sp, r7
  4008e0:	bd80      	pop	{r7, pc}
  4008e2:	bf00      	nop
  4008e4:	00400645 	.word	0x00400645
  4008e8:	004007b1 	.word	0x004007b1

004008ec <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  4008ec:	b580      	push	{r7, lr}
  4008ee:	b082      	sub	sp, #8
  4008f0:	af00      	add	r7, sp, #0
  4008f2:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4008f4:	bf00      	nop
  4008f6:	6878      	ldr	r0, [r7, #4]
  4008f8:	4b04      	ldr	r3, [pc, #16]	; (40090c <pll_wait_for_lock+0x20>)
  4008fa:	4798      	blx	r3
  4008fc:	4603      	mov	r3, r0
  4008fe:	2b00      	cmp	r3, #0
  400900:	d0f9      	beq.n	4008f6 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  400902:	2300      	movs	r3, #0
}
  400904:	4618      	mov	r0, r3
  400906:	3708      	adds	r7, #8
  400908:	46bd      	mov	sp, r7
  40090a:	bd80      	pop	{r7, pc}
  40090c:	00400889 	.word	0x00400889

00400910 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400910:	b580      	push	{r7, lr}
  400912:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400914:	2006      	movs	r0, #6
  400916:	4b05      	ldr	r3, [pc, #20]	; (40092c <sysclk_get_main_hz+0x1c>)
  400918:	4798      	blx	r3
  40091a:	4602      	mov	r2, r0
  40091c:	4613      	mov	r3, r2
  40091e:	009b      	lsls	r3, r3, #2
  400920:	4413      	add	r3, r2
  400922:	009a      	lsls	r2, r3, #2
  400924:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400926:	4618      	mov	r0, r3
  400928:	bd80      	pop	{r7, pc}
  40092a:	bf00      	nop
  40092c:	0040073d 	.word	0x0040073d

00400930 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400930:	b580      	push	{r7, lr}
  400932:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400934:	4b02      	ldr	r3, [pc, #8]	; (400940 <sysclk_get_cpu_hz+0x10>)
  400936:	4798      	blx	r3
  400938:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40093a:	4618      	mov	r0, r3
  40093c:	bd80      	pop	{r7, pc}
  40093e:	bf00      	nop
  400940:	00400911 	.word	0x00400911

00400944 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400944:	b590      	push	{r4, r7, lr}
  400946:	b083      	sub	sp, #12
  400948:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40094a:	4813      	ldr	r0, [pc, #76]	; (400998 <sysclk_init+0x54>)
  40094c:	4b13      	ldr	r3, [pc, #76]	; (40099c <sysclk_init+0x58>)
  40094e:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  400950:	2006      	movs	r0, #6
  400952:	4b13      	ldr	r3, [pc, #76]	; (4009a0 <sysclk_init+0x5c>)
  400954:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  400956:	1d38      	adds	r0, r7, #4
  400958:	2319      	movs	r3, #25
  40095a:	2201      	movs	r2, #1
  40095c:	2106      	movs	r1, #6
  40095e:	4c11      	ldr	r4, [pc, #68]	; (4009a4 <sysclk_init+0x60>)
  400960:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  400962:	1d3b      	adds	r3, r7, #4
  400964:	2100      	movs	r1, #0
  400966:	4618      	mov	r0, r3
  400968:	4b0f      	ldr	r3, [pc, #60]	; (4009a8 <sysclk_init+0x64>)
  40096a:	4798      	blx	r3
		pll_wait_for_lock(0);
  40096c:	2000      	movs	r0, #0
  40096e:	4b0f      	ldr	r3, [pc, #60]	; (4009ac <sysclk_init+0x68>)
  400970:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400972:	2002      	movs	r0, #2
  400974:	4b0e      	ldr	r3, [pc, #56]	; (4009b0 <sysclk_init+0x6c>)
  400976:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400978:	2000      	movs	r0, #0
  40097a:	4b0e      	ldr	r3, [pc, #56]	; (4009b4 <sysclk_init+0x70>)
  40097c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40097e:	4b0e      	ldr	r3, [pc, #56]	; (4009b8 <sysclk_init+0x74>)
  400980:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400982:	4b0e      	ldr	r3, [pc, #56]	; (4009bc <sysclk_init+0x78>)
  400984:	4798      	blx	r3
  400986:	4603      	mov	r3, r0
  400988:	4618      	mov	r0, r3
  40098a:	4b04      	ldr	r3, [pc, #16]	; (40099c <sysclk_init+0x58>)
  40098c:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  40098e:	bf00      	nop
  400990:	370c      	adds	r7, #12
  400992:	46bd      	mov	sp, r7
  400994:	bd90      	pop	{r4, r7, pc}
  400996:	bf00      	nop
  400998:	11e1a300 	.word	0x11e1a300
  40099c:	004019e5 	.word	0x004019e5
  4009a0:	004008b5 	.word	0x004008b5
  4009a4:	004007dd 	.word	0x004007dd
  4009a8:	00400849 	.word	0x00400849
  4009ac:	004008ed 	.word	0x004008ed
  4009b0:	004013f5 	.word	0x004013f5
  4009b4:	00401471 	.word	0x00401471
  4009b8:	0040187d 	.word	0x0040187d
  4009bc:	00400931 	.word	0x00400931

004009c0 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4009c0:	b580      	push	{r7, lr}
  4009c2:	b082      	sub	sp, #8
  4009c4:	af00      	add	r7, sp, #0
  4009c6:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4009c8:	6878      	ldr	r0, [r7, #4]
  4009ca:	4b03      	ldr	r3, [pc, #12]	; (4009d8 <sysclk_enable_peripheral_clock+0x18>)
  4009cc:	4798      	blx	r3
}
  4009ce:	bf00      	nop
  4009d0:	3708      	adds	r7, #8
  4009d2:	46bd      	mov	sp, r7
  4009d4:	bd80      	pop	{r7, pc}
  4009d6:	bf00      	nop
  4009d8:	004016b9 	.word	0x004016b9

004009dc <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  4009dc:	b580      	push	{r7, lr}
  4009de:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  4009e0:	200a      	movs	r0, #10
  4009e2:	4b08      	ldr	r3, [pc, #32]	; (400a04 <ioport_init+0x28>)
  4009e4:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  4009e6:	200b      	movs	r0, #11
  4009e8:	4b06      	ldr	r3, [pc, #24]	; (400a04 <ioport_init+0x28>)
  4009ea:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  4009ec:	200c      	movs	r0, #12
  4009ee:	4b05      	ldr	r3, [pc, #20]	; (400a04 <ioport_init+0x28>)
  4009f0:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
  4009f2:	2010      	movs	r0, #16
  4009f4:	4b03      	ldr	r3, [pc, #12]	; (400a04 <ioport_init+0x28>)
  4009f6:	4798      	blx	r3
#endif
#ifdef ID_PIOE
	sysclk_enable_peripheral_clock(ID_PIOE);
  4009f8:	2011      	movs	r0, #17
  4009fa:	4b02      	ldr	r3, [pc, #8]	; (400a04 <ioport_init+0x28>)
  4009fc:	4798      	blx	r3
	arch_ioport_init();
}
  4009fe:	bf00      	nop
  400a00:	bd80      	pop	{r7, pc}
  400a02:	bf00      	nop
  400a04:	004009c1 	.word	0x004009c1

00400a08 <ioport_disable_pin>:
 *        IOPORT_CREATE_PIN().
 *
 * \param pin IOPORT pin to disable
 */
static inline void ioport_disable_pin(ioport_pin_t pin)
{
  400a08:	b480      	push	{r7}
  400a0a:	b089      	sub	sp, #36	; 0x24
  400a0c:	af00      	add	r7, sp, #0
  400a0e:	6078      	str	r0, [r7, #4]
  400a10:	687b      	ldr	r3, [r7, #4]
  400a12:	61fb      	str	r3, [r7, #28]
  400a14:	69fb      	ldr	r3, [r7, #28]
  400a16:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  400a18:	69bb      	ldr	r3, [r7, #24]
  400a1a:	095a      	lsrs	r2, r3, #5
  400a1c:	69fb      	ldr	r3, [r7, #28]
  400a1e:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  400a20:	697b      	ldr	r3, [r7, #20]
  400a22:	f003 031f 	and.w	r3, r3, #31
  400a26:	2101      	movs	r1, #1
  400a28:	fa01 f303 	lsl.w	r3, r1, r3
  400a2c:	613a      	str	r2, [r7, #16]
  400a2e:	60fb      	str	r3, [r7, #12]
  400a30:	693b      	ldr	r3, [r7, #16]
  400a32:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400a34:	68ba      	ldr	r2, [r7, #8]
  400a36:	4b06      	ldr	r3, [pc, #24]	; (400a50 <ioport_disable_pin+0x48>)
  400a38:	4413      	add	r3, r2
  400a3a:	025b      	lsls	r3, r3, #9
  400a3c:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400a3e:	68fb      	ldr	r3, [r7, #12]
  400a40:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_pin(pin);
}
  400a42:	bf00      	nop
  400a44:	3724      	adds	r7, #36	; 0x24
  400a46:	46bd      	mov	sp, r7
  400a48:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a4c:	4770      	bx	lr
  400a4e:	bf00      	nop
  400a50:	00200707 	.word	0x00200707

00400a54 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  400a54:	b480      	push	{r7}
  400a56:	b08d      	sub	sp, #52	; 0x34
  400a58:	af00      	add	r7, sp, #0
  400a5a:	6078      	str	r0, [r7, #4]
  400a5c:	6039      	str	r1, [r7, #0]
  400a5e:	687b      	ldr	r3, [r7, #4]
  400a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  400a62:	683b      	ldr	r3, [r7, #0]
  400a64:	62bb      	str	r3, [r7, #40]	; 0x28
  400a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400a68:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  400a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400a6c:	095a      	lsrs	r2, r3, #5
  400a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400a70:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  400a72:	6a3b      	ldr	r3, [r7, #32]
  400a74:	f003 031f 	and.w	r3, r3, #31
  400a78:	2101      	movs	r1, #1
  400a7a:	fa01 f303 	lsl.w	r3, r1, r3
  400a7e:	61fa      	str	r2, [r7, #28]
  400a80:	61bb      	str	r3, [r7, #24]
  400a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400a84:	617b      	str	r3, [r7, #20]
  400a86:	69fb      	ldr	r3, [r7, #28]
  400a88:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400a8a:	693a      	ldr	r2, [r7, #16]
  400a8c:	4b37      	ldr	r3, [pc, #220]	; (400b6c <ioport_set_pin_mode+0x118>)
  400a8e:	4413      	add	r3, r2
  400a90:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  400a92:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  400a94:	697b      	ldr	r3, [r7, #20]
  400a96:	f003 0308 	and.w	r3, r3, #8
  400a9a:	2b00      	cmp	r3, #0
  400a9c:	d003      	beq.n	400aa6 <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  400a9e:	68fb      	ldr	r3, [r7, #12]
  400aa0:	69ba      	ldr	r2, [r7, #24]
  400aa2:	665a      	str	r2, [r3, #100]	; 0x64
  400aa4:	e002      	b.n	400aac <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  400aa6:	68fb      	ldr	r3, [r7, #12]
  400aa8:	69ba      	ldr	r2, [r7, #24]
  400aaa:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  400aac:	697b      	ldr	r3, [r7, #20]
  400aae:	f003 0310 	and.w	r3, r3, #16
  400ab2:	2b00      	cmp	r3, #0
  400ab4:	d004      	beq.n	400ac0 <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  400ab6:	68fb      	ldr	r3, [r7, #12]
  400ab8:	69ba      	ldr	r2, [r7, #24]
  400aba:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  400abe:	e003      	b.n	400ac8 <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  400ac0:	68fb      	ldr	r3, [r7, #12]
  400ac2:	69ba      	ldr	r2, [r7, #24]
  400ac4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  400ac8:	697b      	ldr	r3, [r7, #20]
  400aca:	f003 0320 	and.w	r3, r3, #32
  400ace:	2b00      	cmp	r3, #0
  400ad0:	d003      	beq.n	400ada <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  400ad2:	68fb      	ldr	r3, [r7, #12]
  400ad4:	69ba      	ldr	r2, [r7, #24]
  400ad6:	651a      	str	r2, [r3, #80]	; 0x50
  400ad8:	e002      	b.n	400ae0 <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  400ada:	68fb      	ldr	r3, [r7, #12]
  400adc:	69ba      	ldr	r2, [r7, #24]
  400ade:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  400ae0:	697b      	ldr	r3, [r7, #20]
  400ae2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  400ae6:	2b00      	cmp	r3, #0
  400ae8:	d003      	beq.n	400af2 <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  400aea:	68fb      	ldr	r3, [r7, #12]
  400aec:	69ba      	ldr	r2, [r7, #24]
  400aee:	621a      	str	r2, [r3, #32]
  400af0:	e002      	b.n	400af8 <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  400af2:	68fb      	ldr	r3, [r7, #12]
  400af4:	69ba      	ldr	r2, [r7, #24]
  400af6:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  400af8:	697b      	ldr	r3, [r7, #20]
  400afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400afe:	2b00      	cmp	r3, #0
  400b00:	d004      	beq.n	400b0c <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  400b02:	68fb      	ldr	r3, [r7, #12]
  400b04:	69ba      	ldr	r2, [r7, #24]
  400b06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  400b0a:	e003      	b.n	400b14 <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400b0c:	68fb      	ldr	r3, [r7, #12]
  400b0e:	69ba      	ldr	r2, [r7, #24]
  400b10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  400b14:	697b      	ldr	r3, [r7, #20]
  400b16:	f003 0301 	and.w	r3, r3, #1
  400b1a:	2b00      	cmp	r3, #0
  400b1c:	d006      	beq.n	400b2c <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  400b1e:	68fb      	ldr	r3, [r7, #12]
  400b20:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400b22:	69bb      	ldr	r3, [r7, #24]
  400b24:	431a      	orrs	r2, r3
  400b26:	68fb      	ldr	r3, [r7, #12]
  400b28:	671a      	str	r2, [r3, #112]	; 0x70
  400b2a:	e006      	b.n	400b3a <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400b2c:	68fb      	ldr	r3, [r7, #12]
  400b2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400b30:	69bb      	ldr	r3, [r7, #24]
  400b32:	43db      	mvns	r3, r3
  400b34:	401a      	ands	r2, r3
  400b36:	68fb      	ldr	r3, [r7, #12]
  400b38:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  400b3a:	697b      	ldr	r3, [r7, #20]
  400b3c:	f003 0302 	and.w	r3, r3, #2
  400b40:	2b00      	cmp	r3, #0
  400b42:	d006      	beq.n	400b52 <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  400b44:	68fb      	ldr	r3, [r7, #12]
  400b46:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400b48:	69bb      	ldr	r3, [r7, #24]
  400b4a:	431a      	orrs	r2, r3
  400b4c:	68fb      	ldr	r3, [r7, #12]
  400b4e:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  400b50:	e006      	b.n	400b60 <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400b52:	68fb      	ldr	r3, [r7, #12]
  400b54:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400b56:	69bb      	ldr	r3, [r7, #24]
  400b58:	43db      	mvns	r3, r3
  400b5a:	401a      	ands	r2, r3
  400b5c:	68fb      	ldr	r3, [r7, #12]
  400b5e:	675a      	str	r2, [r3, #116]	; 0x74
  400b60:	bf00      	nop
  400b62:	3734      	adds	r7, #52	; 0x34
  400b64:	46bd      	mov	sp, r7
  400b66:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b6a:	4770      	bx	lr
  400b6c:	00200707 	.word	0x00200707

00400b70 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  400b70:	b480      	push	{r7}
  400b72:	b08d      	sub	sp, #52	; 0x34
  400b74:	af00      	add	r7, sp, #0
  400b76:	6078      	str	r0, [r7, #4]
  400b78:	460b      	mov	r3, r1
  400b7a:	70fb      	strb	r3, [r7, #3]
  400b7c:	687b      	ldr	r3, [r7, #4]
  400b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  400b80:	78fb      	ldrb	r3, [r7, #3]
  400b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  400b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400b88:	627b      	str	r3, [r7, #36]	; 0x24
  400b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400b8c:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  400b8e:	6a3b      	ldr	r3, [r7, #32]
  400b90:	095b      	lsrs	r3, r3, #5
  400b92:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400b94:	69fa      	ldr	r2, [r7, #28]
  400b96:	4b17      	ldr	r3, [pc, #92]	; (400bf4 <ioport_set_pin_dir+0x84>)
  400b98:	4413      	add	r3, r2
  400b9a:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400b9c:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  400b9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400ba2:	2b01      	cmp	r3, #1
  400ba4:	d109      	bne.n	400bba <ioport_set_pin_dir+0x4a>
  400ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400ba8:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  400baa:	697b      	ldr	r3, [r7, #20]
  400bac:	f003 031f 	and.w	r3, r3, #31
  400bb0:	2201      	movs	r2, #1
  400bb2:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400bb4:	69bb      	ldr	r3, [r7, #24]
  400bb6:	611a      	str	r2, [r3, #16]
  400bb8:	e00c      	b.n	400bd4 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  400bba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400bbe:	2b00      	cmp	r3, #0
  400bc0:	d108      	bne.n	400bd4 <ioport_set_pin_dir+0x64>
  400bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400bc4:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  400bc6:	693b      	ldr	r3, [r7, #16]
  400bc8:	f003 031f 	and.w	r3, r3, #31
  400bcc:	2201      	movs	r2, #1
  400bce:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400bd0:	69bb      	ldr	r3, [r7, #24]
  400bd2:	615a      	str	r2, [r3, #20]
  400bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400bd6:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  400bd8:	68fb      	ldr	r3, [r7, #12]
  400bda:	f003 031f 	and.w	r3, r3, #31
  400bde:	2201      	movs	r2, #1
  400be0:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400be2:	69bb      	ldr	r3, [r7, #24]
  400be4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  400be8:	bf00      	nop
  400bea:	3734      	adds	r7, #52	; 0x34
  400bec:	46bd      	mov	sp, r7
  400bee:	f85d 7b04 	ldr.w	r7, [sp], #4
  400bf2:	4770      	bx	lr
  400bf4:	00200707 	.word	0x00200707

00400bf8 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  400bf8:	b480      	push	{r7}
  400bfa:	b08b      	sub	sp, #44	; 0x2c
  400bfc:	af00      	add	r7, sp, #0
  400bfe:	6078      	str	r0, [r7, #4]
  400c00:	460b      	mov	r3, r1
  400c02:	70fb      	strb	r3, [r7, #3]
  400c04:	687b      	ldr	r3, [r7, #4]
  400c06:	627b      	str	r3, [r7, #36]	; 0x24
  400c08:	78fb      	ldrb	r3, [r7, #3]
  400c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  400c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400c10:	61fb      	str	r3, [r7, #28]
  400c12:	69fb      	ldr	r3, [r7, #28]
  400c14:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  400c16:	69bb      	ldr	r3, [r7, #24]
  400c18:	095b      	lsrs	r3, r3, #5
  400c1a:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400c1c:	697a      	ldr	r2, [r7, #20]
  400c1e:	4b10      	ldr	r3, [pc, #64]	; (400c60 <ioport_set_pin_level+0x68>)
  400c20:	4413      	add	r3, r2
  400c22:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400c24:	613b      	str	r3, [r7, #16]

	if (level) {
  400c26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  400c2a:	2b00      	cmp	r3, #0
  400c2c:	d009      	beq.n	400c42 <ioport_set_pin_level+0x4a>
  400c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400c30:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  400c32:	68fb      	ldr	r3, [r7, #12]
  400c34:	f003 031f 	and.w	r3, r3, #31
  400c38:	2201      	movs	r2, #1
  400c3a:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400c3c:	693b      	ldr	r3, [r7, #16]
  400c3e:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  400c40:	e008      	b.n	400c54 <ioport_set_pin_level+0x5c>
  400c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400c44:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  400c46:	68bb      	ldr	r3, [r7, #8]
  400c48:	f003 031f 	and.w	r3, r3, #31
  400c4c:	2201      	movs	r2, #1
  400c4e:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400c50:	693b      	ldr	r3, [r7, #16]
  400c52:	635a      	str	r2, [r3, #52]	; 0x34
  400c54:	bf00      	nop
  400c56:	372c      	adds	r7, #44	; 0x2c
  400c58:	46bd      	mov	sp, r7
  400c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c5e:	4770      	bx	lr
  400c60:	00200707 	.word	0x00200707

00400c64 <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  400c64:	b480      	push	{r7}
  400c66:	b08d      	sub	sp, #52	; 0x34
  400c68:	af00      	add	r7, sp, #0
  400c6a:	6078      	str	r0, [r7, #4]
  400c6c:	460b      	mov	r3, r1
  400c6e:	70fb      	strb	r3, [r7, #3]
  400c70:	687b      	ldr	r3, [r7, #4]
  400c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  400c74:	78fb      	ldrb	r3, [r7, #3]
  400c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  400c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400c7c:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  400c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400c80:	095a      	lsrs	r2, r3, #5
  400c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400c84:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  400c86:	6a3b      	ldr	r3, [r7, #32]
  400c88:	f003 031f 	and.w	r3, r3, #31
  400c8c:	2101      	movs	r1, #1
  400c8e:	fa01 f303 	lsl.w	r3, r1, r3
  400c92:	61fa      	str	r2, [r7, #28]
  400c94:	61bb      	str	r3, [r7, #24]
  400c96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400c9a:	75fb      	strb	r3, [r7, #23]
  400c9c:	69fb      	ldr	r3, [r7, #28]
  400c9e:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400ca0:	693a      	ldr	r2, [r7, #16]
  400ca2:	4b23      	ldr	r3, [pc, #140]	; (400d30 <ioport_set_pin_sense_mode+0xcc>)
  400ca4:	4413      	add	r3, r2
  400ca6:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  400ca8:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  400caa:	7dfb      	ldrb	r3, [r7, #23]
  400cac:	3b01      	subs	r3, #1
  400cae:	2b03      	cmp	r3, #3
  400cb0:	d82e      	bhi.n	400d10 <ioport_set_pin_sense_mode+0xac>
  400cb2:	a201      	add	r2, pc, #4	; (adr r2, 400cb8 <ioport_set_pin_sense_mode+0x54>)
  400cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400cb8:	00400ced 	.word	0x00400ced
  400cbc:	00400cff 	.word	0x00400cff
  400cc0:	00400cc9 	.word	0x00400cc9
  400cc4:	00400cdb 	.word	0x00400cdb
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  400cc8:	68fb      	ldr	r3, [r7, #12]
  400cca:	69ba      	ldr	r2, [r7, #24]
  400ccc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  400cd0:	68fb      	ldr	r3, [r7, #12]
  400cd2:	69ba      	ldr	r2, [r7, #24]
  400cd4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  400cd8:	e01f      	b.n	400d1a <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  400cda:	68fb      	ldr	r3, [r7, #12]
  400cdc:	69ba      	ldr	r2, [r7, #24]
  400cde:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  400ce2:	68fb      	ldr	r3, [r7, #12]
  400ce4:	69ba      	ldr	r2, [r7, #24]
  400ce6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400cea:	e016      	b.n	400d1a <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  400cec:	68fb      	ldr	r3, [r7, #12]
  400cee:	69ba      	ldr	r2, [r7, #24]
  400cf0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  400cf4:	68fb      	ldr	r3, [r7, #12]
  400cf6:	69ba      	ldr	r2, [r7, #24]
  400cf8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  400cfc:	e00d      	b.n	400d1a <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400cfe:	68fb      	ldr	r3, [r7, #12]
  400d00:	69ba      	ldr	r2, [r7, #24]
  400d02:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400d06:	68fb      	ldr	r3, [r7, #12]
  400d08:	69ba      	ldr	r2, [r7, #24]
  400d0a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400d0e:	e004      	b.n	400d1a <ioport_set_pin_sense_mode+0xb6>
		break;
	default:
		base->PIO_AIMDR = mask;
  400d10:	68fb      	ldr	r3, [r7, #12]
  400d12:	69ba      	ldr	r2, [r7, #24]
  400d14:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  400d18:	e003      	b.n	400d22 <ioport_set_pin_sense_mode+0xbe>
		return;
	}
	base->PIO_AIMER = mask;
  400d1a:	68fb      	ldr	r3, [r7, #12]
  400d1c:	69ba      	ldr	r2, [r7, #24]
  400d1e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  400d22:	bf00      	nop
  400d24:	3734      	adds	r7, #52	; 0x34
  400d26:	46bd      	mov	sp, r7
  400d28:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d2c:	4770      	bx	lr
  400d2e:	bf00      	nop
  400d30:	00200707 	.word	0x00200707

00400d34 <tcm_disable>:
/** \brief  TCM memory Disable

	The function enables TCM memories
 */
static inline void tcm_disable(void) 
{
  400d34:	b480      	push	{r7}
  400d36:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400d38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400d3c:	f3bf 8f6f 	isb	sy

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400d40:	4a0c      	ldr	r2, [pc, #48]	; (400d74 <tcm_disable+0x40>)
  400d42:	4b0c      	ldr	r3, [pc, #48]	; (400d74 <tcm_disable+0x40>)
  400d44:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
  400d48:	f023 0301 	bic.w	r3, r3, #1
  400d4c:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400d50:	4a08      	ldr	r2, [pc, #32]	; (400d74 <tcm_disable+0x40>)
  400d52:	4b08      	ldr	r3, [pc, #32]	; (400d74 <tcm_disable+0x40>)
  400d54:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
  400d58:	f023 0301 	bic.w	r3, r3, #1
  400d5c:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
  __ASM volatile ("dsb");
  400d60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400d64:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
}
  400d68:	bf00      	nop
  400d6a:	46bd      	mov	sp, r7
  400d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d70:	4770      	bx	lr
  400d72:	bf00      	nop
  400d74:	e000ed00 	.word	0xe000ed00

00400d78 <board_init>:
#endif

void board_init(void)
{
  400d78:	b580      	push	{r7, lr}
  400d7a:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400d7c:	4b1c      	ldr	r3, [pc, #112]	; (400df0 <board_init+0x78>)
  400d7e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400d82:	605a      	str	r2, [r3, #4]
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400d84:	4b1b      	ldr	r3, [pc, #108]	; (400df4 <board_init+0x7c>)
  400d86:	4a1c      	ldr	r2, [pc, #112]	; (400df8 <board_init+0x80>)
  400d88:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400d8a:	4b1a      	ldr	r3, [pc, #104]	; (400df4 <board_init+0x7c>)
  400d8c:	4a1b      	ldr	r2, [pc, #108]	; (400dfc <board_init+0x84>)
  400d8e:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(7));
	
	tcm_disable();
  400d90:	4b1b      	ldr	r3, [pc, #108]	; (400e00 <board_init+0x88>)
  400d92:	4798      	blx	r3
#endif

	/* Initialize IOPORTs */
	ioport_init();
  400d94:	4b1b      	ldr	r3, [pc, #108]	; (400e04 <board_init+0x8c>)
  400d96:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  400d98:	2101      	movs	r1, #1
  400d9a:	2048      	movs	r0, #72	; 0x48
  400d9c:	4b1a      	ldr	r3, [pc, #104]	; (400e08 <board_init+0x90>)
  400d9e:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  400da0:	2101      	movs	r1, #1
  400da2:	2048      	movs	r0, #72	; 0x48
  400da4:	4b19      	ldr	r3, [pc, #100]	; (400e0c <board_init+0x94>)
  400da6:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  400da8:	2100      	movs	r1, #0
  400daa:	200b      	movs	r0, #11
  400dac:	4b16      	ldr	r3, [pc, #88]	; (400e08 <board_init+0x90>)
  400dae:	4798      	blx	r3
  400db0:	2188      	movs	r1, #136	; 0x88
  400db2:	200b      	movs	r0, #11
  400db4:	4b16      	ldr	r3, [pc, #88]	; (400e10 <board_init+0x98>)
  400db6:	4798      	blx	r3
  400db8:	2102      	movs	r1, #2
  400dba:	200b      	movs	r0, #11
  400dbc:	4b15      	ldr	r3, [pc, #84]	; (400e14 <board_init+0x9c>)
  400dbe:	4798      	blx	r3
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
  400dc0:	2100      	movs	r1, #0
  400dc2:	2015      	movs	r0, #21
  400dc4:	4b12      	ldr	r3, [pc, #72]	; (400e10 <board_init+0x98>)
  400dc6:	4798      	blx	r3
  400dc8:	2015      	movs	r0, #21
  400dca:	4b13      	ldr	r3, [pc, #76]	; (400e18 <board_init+0xa0>)
  400dcc:	4798      	blx	r3
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400dce:	4a13      	ldr	r2, [pc, #76]	; (400e1c <board_init+0xa4>)
  400dd0:	4b12      	ldr	r3, [pc, #72]	; (400e1c <board_init+0xa4>)
  400dd2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
  400dd6:	f043 0310 	orr.w	r3, r3, #16
  400dda:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	ioport_set_pin_peripheral_mode(USART1_TXD_GPIO, USART1_TXD_FLAGS);
  400dde:	2103      	movs	r1, #3
  400de0:	2024      	movs	r0, #36	; 0x24
  400de2:	4b0b      	ldr	r3, [pc, #44]	; (400e10 <board_init+0x98>)
  400de4:	4798      	blx	r3
  400de6:	2024      	movs	r0, #36	; 0x24
  400de8:	4b0b      	ldr	r3, [pc, #44]	; (400e18 <board_init+0xa0>)
  400dea:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);

#endif
}
  400dec:	bf00      	nop
  400dee:	bd80      	pop	{r7, pc}
  400df0:	400e1850 	.word	0x400e1850
  400df4:	400e0c00 	.word	0x400e0c00
  400df8:	5a00080c 	.word	0x5a00080c
  400dfc:	5a00070c 	.word	0x5a00070c
  400e00:	00400d35 	.word	0x00400d35
  400e04:	004009dd 	.word	0x004009dd
  400e08:	00400b71 	.word	0x00400b71
  400e0c:	00400bf9 	.word	0x00400bf9
  400e10:	00400a55 	.word	0x00400a55
  400e14:	00400c65 	.word	0x00400c65
  400e18:	00400a09 	.word	0x00400a09
  400e1c:	40088000 	.word	0x40088000

00400e20 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  400e20:	b480      	push	{r7}
  400e22:	b085      	sub	sp, #20
  400e24:	af00      	add	r7, sp, #0
  400e26:	60f8      	str	r0, [r7, #12]
  400e28:	60b9      	str	r1, [r7, #8]
  400e2a:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400e2c:	687b      	ldr	r3, [r7, #4]
  400e2e:	2b00      	cmp	r3, #0
  400e30:	d003      	beq.n	400e3a <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  400e32:	68fb      	ldr	r3, [r7, #12]
  400e34:	68ba      	ldr	r2, [r7, #8]
  400e36:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  400e38:	e002      	b.n	400e40 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  400e3a:	68fb      	ldr	r3, [r7, #12]
  400e3c:	68ba      	ldr	r2, [r7, #8]
  400e3e:	661a      	str	r2, [r3, #96]	; 0x60
}
  400e40:	bf00      	nop
  400e42:	3714      	adds	r7, #20
  400e44:	46bd      	mov	sp, r7
  400e46:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e4a:	4770      	bx	lr

00400e4c <pio_get>:
 * \retval 1 at least one PIO currently has a high level.
 * \retval 0 all PIOs have a low level.
 */
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400e4c:	b480      	push	{r7}
  400e4e:	b087      	sub	sp, #28
  400e50:	af00      	add	r7, sp, #0
  400e52:	60f8      	str	r0, [r7, #12]
  400e54:	60b9      	str	r1, [r7, #8]
  400e56:	607a      	str	r2, [r7, #4]
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  400e58:	68bb      	ldr	r3, [r7, #8]
  400e5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400e5e:	d003      	beq.n	400e68 <pio_get+0x1c>
  400e60:	68bb      	ldr	r3, [r7, #8]
  400e62:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400e66:	d103      	bne.n	400e70 <pio_get+0x24>
		ul_reg = p_pio->PIO_ODSR;
  400e68:	68fb      	ldr	r3, [r7, #12]
  400e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  400e6c:	617b      	str	r3, [r7, #20]
  400e6e:	e002      	b.n	400e76 <pio_get+0x2a>
	} else {
		ul_reg = p_pio->PIO_PDSR;
  400e70:	68fb      	ldr	r3, [r7, #12]
  400e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400e74:	617b      	str	r3, [r7, #20]
	}

	if ((ul_reg & ul_mask) == 0) {
  400e76:	697a      	ldr	r2, [r7, #20]
  400e78:	687b      	ldr	r3, [r7, #4]
  400e7a:	4013      	ands	r3, r2
  400e7c:	2b00      	cmp	r3, #0
  400e7e:	d101      	bne.n	400e84 <pio_get+0x38>
		return 0;
  400e80:	2300      	movs	r3, #0
  400e82:	e000      	b.n	400e86 <pio_get+0x3a>
	} else {
		return 1;
  400e84:	2301      	movs	r3, #1
	}
}
  400e86:	4618      	mov	r0, r3
  400e88:	371c      	adds	r7, #28
  400e8a:	46bd      	mov	sp, r7
  400e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e90:	4770      	bx	lr

00400e92 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400e92:	b480      	push	{r7}
  400e94:	b087      	sub	sp, #28
  400e96:	af00      	add	r7, sp, #0
  400e98:	60f8      	str	r0, [r7, #12]
  400e9a:	60b9      	str	r1, [r7, #8]
  400e9c:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400e9e:	68fb      	ldr	r3, [r7, #12]
  400ea0:	687a      	ldr	r2, [r7, #4]
  400ea2:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400ea4:	68bb      	ldr	r3, [r7, #8]
  400ea6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400eaa:	d04a      	beq.n	400f42 <pio_set_peripheral+0xb0>
  400eac:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400eb0:	d808      	bhi.n	400ec4 <pio_set_peripheral+0x32>
  400eb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400eb6:	d016      	beq.n	400ee6 <pio_set_peripheral+0x54>
  400eb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400ebc:	d02c      	beq.n	400f18 <pio_set_peripheral+0x86>
  400ebe:	2b00      	cmp	r3, #0
  400ec0:	d069      	beq.n	400f96 <pio_set_peripheral+0x104>
  400ec2:	e064      	b.n	400f8e <pio_set_peripheral+0xfc>
  400ec4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400ec8:	d065      	beq.n	400f96 <pio_set_peripheral+0x104>
  400eca:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400ece:	d803      	bhi.n	400ed8 <pio_set_peripheral+0x46>
  400ed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400ed4:	d04a      	beq.n	400f6c <pio_set_peripheral+0xda>
  400ed6:	e05a      	b.n	400f8e <pio_set_peripheral+0xfc>
  400ed8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400edc:	d05b      	beq.n	400f96 <pio_set_peripheral+0x104>
  400ede:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400ee2:	d058      	beq.n	400f96 <pio_set_peripheral+0x104>
  400ee4:	e053      	b.n	400f8e <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400ee6:	68fb      	ldr	r3, [r7, #12]
  400ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400eea:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400eec:	68fb      	ldr	r3, [r7, #12]
  400eee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400ef0:	687b      	ldr	r3, [r7, #4]
  400ef2:	43d9      	mvns	r1, r3
  400ef4:	697b      	ldr	r3, [r7, #20]
  400ef6:	400b      	ands	r3, r1
  400ef8:	401a      	ands	r2, r3
  400efa:	68fb      	ldr	r3, [r7, #12]
  400efc:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400efe:	68fb      	ldr	r3, [r7, #12]
  400f00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400f02:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400f04:	68fb      	ldr	r3, [r7, #12]
  400f06:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400f08:	687b      	ldr	r3, [r7, #4]
  400f0a:	43d9      	mvns	r1, r3
  400f0c:	697b      	ldr	r3, [r7, #20]
  400f0e:	400b      	ands	r3, r1
  400f10:	401a      	ands	r2, r3
  400f12:	68fb      	ldr	r3, [r7, #12]
  400f14:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400f16:	e03a      	b.n	400f8e <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400f18:	68fb      	ldr	r3, [r7, #12]
  400f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400f1c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400f1e:	687a      	ldr	r2, [r7, #4]
  400f20:	697b      	ldr	r3, [r7, #20]
  400f22:	431a      	orrs	r2, r3
  400f24:	68fb      	ldr	r3, [r7, #12]
  400f26:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400f28:	68fb      	ldr	r3, [r7, #12]
  400f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400f2c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400f2e:	68fb      	ldr	r3, [r7, #12]
  400f30:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400f32:	687b      	ldr	r3, [r7, #4]
  400f34:	43d9      	mvns	r1, r3
  400f36:	697b      	ldr	r3, [r7, #20]
  400f38:	400b      	ands	r3, r1
  400f3a:	401a      	ands	r2, r3
  400f3c:	68fb      	ldr	r3, [r7, #12]
  400f3e:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400f40:	e025      	b.n	400f8e <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400f42:	68fb      	ldr	r3, [r7, #12]
  400f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400f46:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400f48:	68fb      	ldr	r3, [r7, #12]
  400f4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400f4c:	687b      	ldr	r3, [r7, #4]
  400f4e:	43d9      	mvns	r1, r3
  400f50:	697b      	ldr	r3, [r7, #20]
  400f52:	400b      	ands	r3, r1
  400f54:	401a      	ands	r2, r3
  400f56:	68fb      	ldr	r3, [r7, #12]
  400f58:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400f5a:	68fb      	ldr	r3, [r7, #12]
  400f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400f5e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400f60:	687a      	ldr	r2, [r7, #4]
  400f62:	697b      	ldr	r3, [r7, #20]
  400f64:	431a      	orrs	r2, r3
  400f66:	68fb      	ldr	r3, [r7, #12]
  400f68:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400f6a:	e010      	b.n	400f8e <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400f6c:	68fb      	ldr	r3, [r7, #12]
  400f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400f70:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400f72:	687a      	ldr	r2, [r7, #4]
  400f74:	697b      	ldr	r3, [r7, #20]
  400f76:	431a      	orrs	r2, r3
  400f78:	68fb      	ldr	r3, [r7, #12]
  400f7a:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400f7c:	68fb      	ldr	r3, [r7, #12]
  400f7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400f80:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400f82:	687a      	ldr	r2, [r7, #4]
  400f84:	697b      	ldr	r3, [r7, #20]
  400f86:	431a      	orrs	r2, r3
  400f88:	68fb      	ldr	r3, [r7, #12]
  400f8a:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400f8c:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400f8e:	68fb      	ldr	r3, [r7, #12]
  400f90:	687a      	ldr	r2, [r7, #4]
  400f92:	605a      	str	r2, [r3, #4]
  400f94:	e000      	b.n	400f98 <pio_set_peripheral+0x106>
		return;
  400f96:	bf00      	nop
}
  400f98:	371c      	adds	r7, #28
  400f9a:	46bd      	mov	sp, r7
  400f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400fa0:	4770      	bx	lr
	...

00400fa4 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  400fa4:	b580      	push	{r7, lr}
  400fa6:	b084      	sub	sp, #16
  400fa8:	af00      	add	r7, sp, #0
  400faa:	60f8      	str	r0, [r7, #12]
  400fac:	60b9      	str	r1, [r7, #8]
  400fae:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  400fb0:	68b9      	ldr	r1, [r7, #8]
  400fb2:	68f8      	ldr	r0, [r7, #12]
  400fb4:	4b19      	ldr	r3, [pc, #100]	; (40101c <pio_set_input+0x78>)
  400fb6:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  400fb8:	687b      	ldr	r3, [r7, #4]
  400fba:	f003 0301 	and.w	r3, r3, #1
  400fbe:	461a      	mov	r2, r3
  400fc0:	68b9      	ldr	r1, [r7, #8]
  400fc2:	68f8      	ldr	r0, [r7, #12]
  400fc4:	4b16      	ldr	r3, [pc, #88]	; (401020 <pio_set_input+0x7c>)
  400fc6:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400fc8:	687b      	ldr	r3, [r7, #4]
  400fca:	f003 030a 	and.w	r3, r3, #10
  400fce:	2b00      	cmp	r3, #0
  400fd0:	d003      	beq.n	400fda <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  400fd2:	68fb      	ldr	r3, [r7, #12]
  400fd4:	68ba      	ldr	r2, [r7, #8]
  400fd6:	621a      	str	r2, [r3, #32]
  400fd8:	e002      	b.n	400fe0 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400fda:	68fb      	ldr	r3, [r7, #12]
  400fdc:	68ba      	ldr	r2, [r7, #8]
  400fde:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  400fe0:	687b      	ldr	r3, [r7, #4]
  400fe2:	f003 0302 	and.w	r3, r3, #2
  400fe6:	2b00      	cmp	r3, #0
  400fe8:	d004      	beq.n	400ff4 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  400fea:	68fb      	ldr	r3, [r7, #12]
  400fec:	68ba      	ldr	r2, [r7, #8]
  400fee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  400ff2:	e008      	b.n	401006 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  400ff4:	687b      	ldr	r3, [r7, #4]
  400ff6:	f003 0308 	and.w	r3, r3, #8
  400ffa:	2b00      	cmp	r3, #0
  400ffc:	d003      	beq.n	401006 <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  400ffe:	68fb      	ldr	r3, [r7, #12]
  401000:	68ba      	ldr	r2, [r7, #8]
  401002:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  401006:	68fb      	ldr	r3, [r7, #12]
  401008:	68ba      	ldr	r2, [r7, #8]
  40100a:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  40100c:	68fb      	ldr	r3, [r7, #12]
  40100e:	68ba      	ldr	r2, [r7, #8]
  401010:	601a      	str	r2, [r3, #0]
}
  401012:	bf00      	nop
  401014:	3710      	adds	r7, #16
  401016:	46bd      	mov	sp, r7
  401018:	bd80      	pop	{r7, pc}
  40101a:	bf00      	nop
  40101c:	004011dd 	.word	0x004011dd
  401020:	00400e21 	.word	0x00400e21

00401024 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  401024:	b580      	push	{r7, lr}
  401026:	b084      	sub	sp, #16
  401028:	af00      	add	r7, sp, #0
  40102a:	60f8      	str	r0, [r7, #12]
  40102c:	60b9      	str	r1, [r7, #8]
  40102e:	607a      	str	r2, [r7, #4]
  401030:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  401032:	68b9      	ldr	r1, [r7, #8]
  401034:	68f8      	ldr	r0, [r7, #12]
  401036:	4b12      	ldr	r3, [pc, #72]	; (401080 <pio_set_output+0x5c>)
  401038:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  40103a:	69ba      	ldr	r2, [r7, #24]
  40103c:	68b9      	ldr	r1, [r7, #8]
  40103e:	68f8      	ldr	r0, [r7, #12]
  401040:	4b10      	ldr	r3, [pc, #64]	; (401084 <pio_set_output+0x60>)
  401042:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  401044:	683b      	ldr	r3, [r7, #0]
  401046:	2b00      	cmp	r3, #0
  401048:	d003      	beq.n	401052 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  40104a:	68fb      	ldr	r3, [r7, #12]
  40104c:	68ba      	ldr	r2, [r7, #8]
  40104e:	651a      	str	r2, [r3, #80]	; 0x50
  401050:	e002      	b.n	401058 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  401052:	68fb      	ldr	r3, [r7, #12]
  401054:	68ba      	ldr	r2, [r7, #8]
  401056:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  401058:	687b      	ldr	r3, [r7, #4]
  40105a:	2b00      	cmp	r3, #0
  40105c:	d003      	beq.n	401066 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  40105e:	68fb      	ldr	r3, [r7, #12]
  401060:	68ba      	ldr	r2, [r7, #8]
  401062:	631a      	str	r2, [r3, #48]	; 0x30
  401064:	e002      	b.n	40106c <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  401066:	68fb      	ldr	r3, [r7, #12]
  401068:	68ba      	ldr	r2, [r7, #8]
  40106a:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  40106c:	68fb      	ldr	r3, [r7, #12]
  40106e:	68ba      	ldr	r2, [r7, #8]
  401070:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  401072:	68fb      	ldr	r3, [r7, #12]
  401074:	68ba      	ldr	r2, [r7, #8]
  401076:	601a      	str	r2, [r3, #0]
}
  401078:	bf00      	nop
  40107a:	3710      	adds	r7, #16
  40107c:	46bd      	mov	sp, r7
  40107e:	bd80      	pop	{r7, pc}
  401080:	004011dd 	.word	0x004011dd
  401084:	00400e21 	.word	0x00400e21

00401088 <pio_configure>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
  401088:	b590      	push	{r4, r7, lr}
  40108a:	b087      	sub	sp, #28
  40108c:	af02      	add	r7, sp, #8
  40108e:	60f8      	str	r0, [r7, #12]
  401090:	60b9      	str	r1, [r7, #8]
  401092:	607a      	str	r2, [r7, #4]
  401094:	603b      	str	r3, [r7, #0]
	/* Configure pins */
	switch (ul_type) {
  401096:	68bb      	ldr	r3, [r7, #8]
  401098:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40109c:	d016      	beq.n	4010cc <pio_configure+0x44>
  40109e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4010a2:	d809      	bhi.n	4010b8 <pio_configure+0x30>
  4010a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4010a8:	d010      	beq.n	4010cc <pio_configure+0x44>
  4010aa:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4010ae:	d00d      	beq.n	4010cc <pio_configure+0x44>
  4010b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4010b4:	d00a      	beq.n	4010cc <pio_configure+0x44>
  4010b6:	e03d      	b.n	401134 <pio_configure+0xac>
  4010b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4010bc:	d01a      	beq.n	4010f4 <pio_configure+0x6c>
  4010be:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4010c2:	d017      	beq.n	4010f4 <pio_configure+0x6c>
  4010c4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4010c8:	d00e      	beq.n	4010e8 <pio_configure+0x60>
  4010ca:	e033      	b.n	401134 <pio_configure+0xac>
	case PIO_PERIPH_B:
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_PERIPH_C:
	case PIO_PERIPH_D:
#endif
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  4010cc:	687a      	ldr	r2, [r7, #4]
  4010ce:	68b9      	ldr	r1, [r7, #8]
  4010d0:	68f8      	ldr	r0, [r7, #12]
  4010d2:	4b1c      	ldr	r3, [pc, #112]	; (401144 <pio_configure+0xbc>)
  4010d4:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
  4010d6:	683b      	ldr	r3, [r7, #0]
  4010d8:	f003 0301 	and.w	r3, r3, #1
  4010dc:	461a      	mov	r2, r3
  4010de:	6879      	ldr	r1, [r7, #4]
  4010e0:	68f8      	ldr	r0, [r7, #12]
  4010e2:	4b19      	ldr	r3, [pc, #100]	; (401148 <pio_configure+0xc0>)
  4010e4:	4798      	blx	r3
		break;
  4010e6:	e027      	b.n	401138 <pio_configure+0xb0>

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
  4010e8:	683a      	ldr	r2, [r7, #0]
  4010ea:	6879      	ldr	r1, [r7, #4]
  4010ec:	68f8      	ldr	r0, [r7, #12]
  4010ee:	4b17      	ldr	r3, [pc, #92]	; (40114c <pio_configure+0xc4>)
  4010f0:	4798      	blx	r3
		break;
  4010f2:	e021      	b.n	401138 <pio_configure+0xb0>

	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  4010f4:	68bb      	ldr	r3, [r7, #8]
  4010f6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4010fa:	bf0c      	ite	eq
  4010fc:	2301      	moveq	r3, #1
  4010fe:	2300      	movne	r3, #0
  401100:	b2db      	uxtb	r3, r3
  401102:	461a      	mov	r2, r3
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
  401104:	683b      	ldr	r3, [r7, #0]
  401106:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  40110a:	2b00      	cmp	r3, #0
  40110c:	bf14      	ite	ne
  40110e:	2301      	movne	r3, #1
  401110:	2300      	moveq	r3, #0
  401112:	b2db      	uxtb	r3, r3
  401114:	4619      	mov	r1, r3
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
  401116:	683b      	ldr	r3, [r7, #0]
  401118:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  40111c:	2b00      	cmp	r3, #0
  40111e:	bf14      	ite	ne
  401120:	2301      	movne	r3, #1
  401122:	2300      	moveq	r3, #0
  401124:	b2db      	uxtb	r3, r3
  401126:	9300      	str	r3, [sp, #0]
  401128:	460b      	mov	r3, r1
  40112a:	6879      	ldr	r1, [r7, #4]
  40112c:	68f8      	ldr	r0, [r7, #12]
  40112e:	4c08      	ldr	r4, [pc, #32]	; (401150 <pio_configure+0xc8>)
  401130:	47a0      	blx	r4
		break;
  401132:	e001      	b.n	401138 <pio_configure+0xb0>

	default:
		return 0;
  401134:	2300      	movs	r3, #0
  401136:	e000      	b.n	40113a <pio_configure+0xb2>
	}

	return 1;
  401138:	2301      	movs	r3, #1
}
  40113a:	4618      	mov	r0, r3
  40113c:	3714      	adds	r7, #20
  40113e:	46bd      	mov	sp, r7
  401140:	bd90      	pop	{r4, r7, pc}
  401142:	bf00      	nop
  401144:	00400e93 	.word	0x00400e93
  401148:	00400e21 	.word	0x00400e21
  40114c:	00400fa5 	.word	0x00400fa5
  401150:	00401025 	.word	0x00401025

00401154 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  401154:	b480      	push	{r7}
  401156:	b085      	sub	sp, #20
  401158:	af00      	add	r7, sp, #0
  40115a:	60f8      	str	r0, [r7, #12]
  40115c:	60b9      	str	r1, [r7, #8]
  40115e:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  401160:	687b      	ldr	r3, [r7, #4]
  401162:	f003 0310 	and.w	r3, r3, #16
  401166:	2b00      	cmp	r3, #0
  401168:	d020      	beq.n	4011ac <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  40116a:	68fb      	ldr	r3, [r7, #12]
  40116c:	68ba      	ldr	r2, [r7, #8]
  40116e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  401172:	687b      	ldr	r3, [r7, #4]
  401174:	f003 0320 	and.w	r3, r3, #32
  401178:	2b00      	cmp	r3, #0
  40117a:	d004      	beq.n	401186 <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  40117c:	68fb      	ldr	r3, [r7, #12]
  40117e:	68ba      	ldr	r2, [r7, #8]
  401180:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  401184:	e003      	b.n	40118e <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  401186:	68fb      	ldr	r3, [r7, #12]
  401188:	68ba      	ldr	r2, [r7, #8]
  40118a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  40118e:	687b      	ldr	r3, [r7, #4]
  401190:	f003 0340 	and.w	r3, r3, #64	; 0x40
  401194:	2b00      	cmp	r3, #0
  401196:	d004      	beq.n	4011a2 <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  401198:	68fb      	ldr	r3, [r7, #12]
  40119a:	68ba      	ldr	r2, [r7, #8]
  40119c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  4011a0:	e008      	b.n	4011b4 <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  4011a2:	68fb      	ldr	r3, [r7, #12]
  4011a4:	68ba      	ldr	r2, [r7, #8]
  4011a6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  4011aa:	e003      	b.n	4011b4 <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  4011ac:	68fb      	ldr	r3, [r7, #12]
  4011ae:	68ba      	ldr	r2, [r7, #8]
  4011b0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  4011b4:	bf00      	nop
  4011b6:	3714      	adds	r7, #20
  4011b8:	46bd      	mov	sp, r7
  4011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
  4011be:	4770      	bx	lr

004011c0 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  4011c0:	b480      	push	{r7}
  4011c2:	b083      	sub	sp, #12
  4011c4:	af00      	add	r7, sp, #0
  4011c6:	6078      	str	r0, [r7, #4]
  4011c8:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  4011ca:	687b      	ldr	r3, [r7, #4]
  4011cc:	683a      	ldr	r2, [r7, #0]
  4011ce:	641a      	str	r2, [r3, #64]	; 0x40
}
  4011d0:	bf00      	nop
  4011d2:	370c      	adds	r7, #12
  4011d4:	46bd      	mov	sp, r7
  4011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4011da:	4770      	bx	lr

004011dc <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  4011dc:	b480      	push	{r7}
  4011de:	b083      	sub	sp, #12
  4011e0:	af00      	add	r7, sp, #0
  4011e2:	6078      	str	r0, [r7, #4]
  4011e4:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  4011e6:	687b      	ldr	r3, [r7, #4]
  4011e8:	683a      	ldr	r2, [r7, #0]
  4011ea:	645a      	str	r2, [r3, #68]	; 0x44
}
  4011ec:	bf00      	nop
  4011ee:	370c      	adds	r7, #12
  4011f0:	46bd      	mov	sp, r7
  4011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4011f6:	4770      	bx	lr

004011f8 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  4011f8:	b480      	push	{r7}
  4011fa:	b083      	sub	sp, #12
  4011fc:	af00      	add	r7, sp, #0
  4011fe:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  401200:	687b      	ldr	r3, [r7, #4]
  401202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  401204:	4618      	mov	r0, r3
  401206:	370c      	adds	r7, #12
  401208:	46bd      	mov	sp, r7
  40120a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40120e:	4770      	bx	lr

00401210 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  401210:	b480      	push	{r7}
  401212:	b083      	sub	sp, #12
  401214:	af00      	add	r7, sp, #0
  401216:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  401218:	687b      	ldr	r3, [r7, #4]
  40121a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  40121c:	4618      	mov	r0, r3
  40121e:	370c      	adds	r7, #12
  401220:	46bd      	mov	sp, r7
  401222:	f85d 7b04 	ldr.w	r7, [sp], #4
  401226:	4770      	bx	lr

00401228 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401228:	b580      	push	{r7, lr}
  40122a:	b084      	sub	sp, #16
  40122c:	af00      	add	r7, sp, #0
  40122e:	6078      	str	r0, [r7, #4]
  401230:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401232:	6878      	ldr	r0, [r7, #4]
  401234:	4b26      	ldr	r3, [pc, #152]	; (4012d0 <pio_handler_process+0xa8>)
  401236:	4798      	blx	r3
  401238:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  40123a:	6878      	ldr	r0, [r7, #4]
  40123c:	4b25      	ldr	r3, [pc, #148]	; (4012d4 <pio_handler_process+0xac>)
  40123e:	4798      	blx	r3
  401240:	4602      	mov	r2, r0
  401242:	68fb      	ldr	r3, [r7, #12]
  401244:	4013      	ands	r3, r2
  401246:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  401248:	68fb      	ldr	r3, [r7, #12]
  40124a:	2b00      	cmp	r3, #0
  40124c:	d03c      	beq.n	4012c8 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  40124e:	2300      	movs	r3, #0
  401250:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  401252:	e034      	b.n	4012be <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  401254:	4a20      	ldr	r2, [pc, #128]	; (4012d8 <pio_handler_process+0xb0>)
  401256:	68bb      	ldr	r3, [r7, #8]
  401258:	011b      	lsls	r3, r3, #4
  40125a:	4413      	add	r3, r2
  40125c:	681a      	ldr	r2, [r3, #0]
  40125e:	683b      	ldr	r3, [r7, #0]
  401260:	429a      	cmp	r2, r3
  401262:	d126      	bne.n	4012b2 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401264:	4a1c      	ldr	r2, [pc, #112]	; (4012d8 <pio_handler_process+0xb0>)
  401266:	68bb      	ldr	r3, [r7, #8]
  401268:	011b      	lsls	r3, r3, #4
  40126a:	4413      	add	r3, r2
  40126c:	3304      	adds	r3, #4
  40126e:	681a      	ldr	r2, [r3, #0]
  401270:	68fb      	ldr	r3, [r7, #12]
  401272:	4013      	ands	r3, r2
  401274:	2b00      	cmp	r3, #0
  401276:	d01c      	beq.n	4012b2 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401278:	4a17      	ldr	r2, [pc, #92]	; (4012d8 <pio_handler_process+0xb0>)
  40127a:	68bb      	ldr	r3, [r7, #8]
  40127c:	011b      	lsls	r3, r3, #4
  40127e:	4413      	add	r3, r2
  401280:	330c      	adds	r3, #12
  401282:	681b      	ldr	r3, [r3, #0]
  401284:	4914      	ldr	r1, [pc, #80]	; (4012d8 <pio_handler_process+0xb0>)
  401286:	68ba      	ldr	r2, [r7, #8]
  401288:	0112      	lsls	r2, r2, #4
  40128a:	440a      	add	r2, r1
  40128c:	6810      	ldr	r0, [r2, #0]
  40128e:	4912      	ldr	r1, [pc, #72]	; (4012d8 <pio_handler_process+0xb0>)
  401290:	68ba      	ldr	r2, [r7, #8]
  401292:	0112      	lsls	r2, r2, #4
  401294:	440a      	add	r2, r1
  401296:	3204      	adds	r2, #4
  401298:	6812      	ldr	r2, [r2, #0]
  40129a:	4611      	mov	r1, r2
  40129c:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40129e:	4a0e      	ldr	r2, [pc, #56]	; (4012d8 <pio_handler_process+0xb0>)
  4012a0:	68bb      	ldr	r3, [r7, #8]
  4012a2:	011b      	lsls	r3, r3, #4
  4012a4:	4413      	add	r3, r2
  4012a6:	3304      	adds	r3, #4
  4012a8:	681b      	ldr	r3, [r3, #0]
  4012aa:	43db      	mvns	r3, r3
  4012ac:	68fa      	ldr	r2, [r7, #12]
  4012ae:	4013      	ands	r3, r2
  4012b0:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4012b2:	68bb      	ldr	r3, [r7, #8]
  4012b4:	3301      	adds	r3, #1
  4012b6:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4012b8:	68bb      	ldr	r3, [r7, #8]
  4012ba:	2b06      	cmp	r3, #6
  4012bc:	d803      	bhi.n	4012c6 <pio_handler_process+0x9e>
		while (status != 0) {
  4012be:	68fb      	ldr	r3, [r7, #12]
  4012c0:	2b00      	cmp	r3, #0
  4012c2:	d1c7      	bne.n	401254 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  4012c4:	e000      	b.n	4012c8 <pio_handler_process+0xa0>
				break;
  4012c6:	bf00      	nop
}
  4012c8:	bf00      	nop
  4012ca:	3710      	adds	r7, #16
  4012cc:	46bd      	mov	sp, r7
  4012ce:	bd80      	pop	{r7, pc}
  4012d0:	004011f9 	.word	0x004011f9
  4012d4:	00401211 	.word	0x00401211
  4012d8:	204009e0 	.word	0x204009e0

004012dc <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  4012dc:	b580      	push	{r7, lr}
  4012de:	b086      	sub	sp, #24
  4012e0:	af00      	add	r7, sp, #0
  4012e2:	60f8      	str	r0, [r7, #12]
  4012e4:	60b9      	str	r1, [r7, #8]
  4012e6:	607a      	str	r2, [r7, #4]
  4012e8:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  4012ea:	4b21      	ldr	r3, [pc, #132]	; (401370 <pio_handler_set+0x94>)
  4012ec:	681b      	ldr	r3, [r3, #0]
  4012ee:	2b06      	cmp	r3, #6
  4012f0:	d901      	bls.n	4012f6 <pio_handler_set+0x1a>
		return 1;
  4012f2:	2301      	movs	r3, #1
  4012f4:	e038      	b.n	401368 <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4012f6:	2300      	movs	r3, #0
  4012f8:	75fb      	strb	r3, [r7, #23]
  4012fa:	e011      	b.n	401320 <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  4012fc:	7dfb      	ldrb	r3, [r7, #23]
  4012fe:	011b      	lsls	r3, r3, #4
  401300:	4a1c      	ldr	r2, [pc, #112]	; (401374 <pio_handler_set+0x98>)
  401302:	4413      	add	r3, r2
  401304:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  401306:	693b      	ldr	r3, [r7, #16]
  401308:	681a      	ldr	r2, [r3, #0]
  40130a:	68bb      	ldr	r3, [r7, #8]
  40130c:	429a      	cmp	r2, r3
  40130e:	d104      	bne.n	40131a <pio_handler_set+0x3e>
  401310:	693b      	ldr	r3, [r7, #16]
  401312:	685a      	ldr	r2, [r3, #4]
  401314:	687b      	ldr	r3, [r7, #4]
  401316:	429a      	cmp	r2, r3
  401318:	d008      	beq.n	40132c <pio_handler_set+0x50>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  40131a:	7dfb      	ldrb	r3, [r7, #23]
  40131c:	3301      	adds	r3, #1
  40131e:	75fb      	strb	r3, [r7, #23]
  401320:	7dfa      	ldrb	r2, [r7, #23]
  401322:	4b13      	ldr	r3, [pc, #76]	; (401370 <pio_handler_set+0x94>)
  401324:	681b      	ldr	r3, [r3, #0]
  401326:	429a      	cmp	r2, r3
  401328:	d9e8      	bls.n	4012fc <pio_handler_set+0x20>
  40132a:	e000      	b.n	40132e <pio_handler_set+0x52>
			break;
  40132c:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  40132e:	693b      	ldr	r3, [r7, #16]
  401330:	68ba      	ldr	r2, [r7, #8]
  401332:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  401334:	693b      	ldr	r3, [r7, #16]
  401336:	687a      	ldr	r2, [r7, #4]
  401338:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  40133a:	693b      	ldr	r3, [r7, #16]
  40133c:	683a      	ldr	r2, [r7, #0]
  40133e:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  401340:	693b      	ldr	r3, [r7, #16]
  401342:	6a3a      	ldr	r2, [r7, #32]
  401344:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  401346:	7dfa      	ldrb	r2, [r7, #23]
  401348:	4b09      	ldr	r3, [pc, #36]	; (401370 <pio_handler_set+0x94>)
  40134a:	681b      	ldr	r3, [r3, #0]
  40134c:	3301      	adds	r3, #1
  40134e:	429a      	cmp	r2, r3
  401350:	d104      	bne.n	40135c <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  401352:	4b07      	ldr	r3, [pc, #28]	; (401370 <pio_handler_set+0x94>)
  401354:	681b      	ldr	r3, [r3, #0]
  401356:	3301      	adds	r3, #1
  401358:	4a05      	ldr	r2, [pc, #20]	; (401370 <pio_handler_set+0x94>)
  40135a:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  40135c:	683a      	ldr	r2, [r7, #0]
  40135e:	6879      	ldr	r1, [r7, #4]
  401360:	68f8      	ldr	r0, [r7, #12]
  401362:	4b05      	ldr	r3, [pc, #20]	; (401378 <pio_handler_set+0x9c>)
  401364:	4798      	blx	r3

	return 0;
  401366:	2300      	movs	r3, #0
}
  401368:	4618      	mov	r0, r3
  40136a:	3718      	adds	r7, #24
  40136c:	46bd      	mov	sp, r7
  40136e:	bd80      	pop	{r7, pc}
  401370:	20400a50 	.word	0x20400a50
  401374:	204009e0 	.word	0x204009e0
  401378:	00401155 	.word	0x00401155

0040137c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40137c:	b580      	push	{r7, lr}
  40137e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  401380:	210a      	movs	r1, #10
  401382:	4802      	ldr	r0, [pc, #8]	; (40138c <PIOA_Handler+0x10>)
  401384:	4b02      	ldr	r3, [pc, #8]	; (401390 <PIOA_Handler+0x14>)
  401386:	4798      	blx	r3
}
  401388:	bf00      	nop
  40138a:	bd80      	pop	{r7, pc}
  40138c:	400e0e00 	.word	0x400e0e00
  401390:	00401229 	.word	0x00401229

00401394 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401394:	b580      	push	{r7, lr}
  401396:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  401398:	210b      	movs	r1, #11
  40139a:	4802      	ldr	r0, [pc, #8]	; (4013a4 <PIOB_Handler+0x10>)
  40139c:	4b02      	ldr	r3, [pc, #8]	; (4013a8 <PIOB_Handler+0x14>)
  40139e:	4798      	blx	r3
}
  4013a0:	bf00      	nop
  4013a2:	bd80      	pop	{r7, pc}
  4013a4:	400e1000 	.word	0x400e1000
  4013a8:	00401229 	.word	0x00401229

004013ac <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4013ac:	b580      	push	{r7, lr}
  4013ae:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  4013b0:	210c      	movs	r1, #12
  4013b2:	4802      	ldr	r0, [pc, #8]	; (4013bc <PIOC_Handler+0x10>)
  4013b4:	4b02      	ldr	r3, [pc, #8]	; (4013c0 <PIOC_Handler+0x14>)
  4013b6:	4798      	blx	r3
}
  4013b8:	bf00      	nop
  4013ba:	bd80      	pop	{r7, pc}
  4013bc:	400e1200 	.word	0x400e1200
  4013c0:	00401229 	.word	0x00401229

004013c4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4013c4:	b580      	push	{r7, lr}
  4013c6:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  4013c8:	2110      	movs	r1, #16
  4013ca:	4802      	ldr	r0, [pc, #8]	; (4013d4 <PIOD_Handler+0x10>)
  4013cc:	4b02      	ldr	r3, [pc, #8]	; (4013d8 <PIOD_Handler+0x14>)
  4013ce:	4798      	blx	r3
}
  4013d0:	bf00      	nop
  4013d2:	bd80      	pop	{r7, pc}
  4013d4:	400e1400 	.word	0x400e1400
  4013d8:	00401229 	.word	0x00401229

004013dc <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4013dc:	b580      	push	{r7, lr}
  4013de:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  4013e0:	2111      	movs	r1, #17
  4013e2:	4802      	ldr	r0, [pc, #8]	; (4013ec <PIOE_Handler+0x10>)
  4013e4:	4b02      	ldr	r3, [pc, #8]	; (4013f0 <PIOE_Handler+0x14>)
  4013e6:	4798      	blx	r3
}
  4013e8:	bf00      	nop
  4013ea:	bd80      	pop	{r7, pc}
  4013ec:	400e1600 	.word	0x400e1600
  4013f0:	00401229 	.word	0x00401229

004013f4 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  4013f4:	b480      	push	{r7}
  4013f6:	b083      	sub	sp, #12
  4013f8:	af00      	add	r7, sp, #0
  4013fa:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  4013fc:	687b      	ldr	r3, [r7, #4]
  4013fe:	3b01      	subs	r3, #1
  401400:	2b03      	cmp	r3, #3
  401402:	d81a      	bhi.n	40143a <pmc_mck_set_division+0x46>
  401404:	a201      	add	r2, pc, #4	; (adr r2, 40140c <pmc_mck_set_division+0x18>)
  401406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40140a:	bf00      	nop
  40140c:	0040141d 	.word	0x0040141d
  401410:	00401423 	.word	0x00401423
  401414:	0040142b 	.word	0x0040142b
  401418:	00401433 	.word	0x00401433
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40141c:	2300      	movs	r3, #0
  40141e:	607b      	str	r3, [r7, #4]
			break;
  401420:	e00e      	b.n	401440 <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  401422:	f44f 7380 	mov.w	r3, #256	; 0x100
  401426:	607b      	str	r3, [r7, #4]
			break;
  401428:	e00a      	b.n	401440 <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  40142a:	f44f 7340 	mov.w	r3, #768	; 0x300
  40142e:	607b      	str	r3, [r7, #4]
			break;
  401430:	e006      	b.n	401440 <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401432:	f44f 7300 	mov.w	r3, #512	; 0x200
  401436:	607b      	str	r3, [r7, #4]
			break;
  401438:	e002      	b.n	401440 <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40143a:	2300      	movs	r3, #0
  40143c:	607b      	str	r3, [r7, #4]
			break;
  40143e:	bf00      	nop
	}
	PMC->PMC_MCKR =
  401440:	490a      	ldr	r1, [pc, #40]	; (40146c <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  401442:	4b0a      	ldr	r3, [pc, #40]	; (40146c <pmc_mck_set_division+0x78>)
  401444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401446:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  40144a:	687b      	ldr	r3, [r7, #4]
  40144c:	4313      	orrs	r3, r2
	PMC->PMC_MCKR =
  40144e:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401450:	bf00      	nop
  401452:	4b06      	ldr	r3, [pc, #24]	; (40146c <pmc_mck_set_division+0x78>)
  401454:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401456:	f003 0308 	and.w	r3, r3, #8
  40145a:	2b00      	cmp	r3, #0
  40145c:	d0f9      	beq.n	401452 <pmc_mck_set_division+0x5e>
}
  40145e:	bf00      	nop
  401460:	370c      	adds	r7, #12
  401462:	46bd      	mov	sp, r7
  401464:	f85d 7b04 	ldr.w	r7, [sp], #4
  401468:	4770      	bx	lr
  40146a:	bf00      	nop
  40146c:	400e0600 	.word	0x400e0600

00401470 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  401470:	b480      	push	{r7}
  401472:	b085      	sub	sp, #20
  401474:	af00      	add	r7, sp, #0
  401476:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401478:	491d      	ldr	r1, [pc, #116]	; (4014f0 <pmc_switch_mck_to_pllack+0x80>)
  40147a:	4b1d      	ldr	r3, [pc, #116]	; (4014f0 <pmc_switch_mck_to_pllack+0x80>)
  40147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40147e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  401482:	687b      	ldr	r3, [r7, #4]
  401484:	4313      	orrs	r3, r2
  401486:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401488:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40148c:	60fb      	str	r3, [r7, #12]
  40148e:	e007      	b.n	4014a0 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401490:	68fb      	ldr	r3, [r7, #12]
  401492:	2b00      	cmp	r3, #0
  401494:	d101      	bne.n	40149a <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  401496:	2301      	movs	r3, #1
  401498:	e023      	b.n	4014e2 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  40149a:	68fb      	ldr	r3, [r7, #12]
  40149c:	3b01      	subs	r3, #1
  40149e:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4014a0:	4b13      	ldr	r3, [pc, #76]	; (4014f0 <pmc_switch_mck_to_pllack+0x80>)
  4014a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4014a4:	f003 0308 	and.w	r3, r3, #8
  4014a8:	2b00      	cmp	r3, #0
  4014aa:	d0f1      	beq.n	401490 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4014ac:	4a10      	ldr	r2, [pc, #64]	; (4014f0 <pmc_switch_mck_to_pllack+0x80>)
  4014ae:	4b10      	ldr	r3, [pc, #64]	; (4014f0 <pmc_switch_mck_to_pllack+0x80>)
  4014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4014b2:	f023 0303 	bic.w	r3, r3, #3
  4014b6:	f043 0302 	orr.w	r3, r3, #2
  4014ba:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4014bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4014c0:	60fb      	str	r3, [r7, #12]
  4014c2:	e007      	b.n	4014d4 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4014c4:	68fb      	ldr	r3, [r7, #12]
  4014c6:	2b00      	cmp	r3, #0
  4014c8:	d101      	bne.n	4014ce <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  4014ca:	2301      	movs	r3, #1
  4014cc:	e009      	b.n	4014e2 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  4014ce:	68fb      	ldr	r3, [r7, #12]
  4014d0:	3b01      	subs	r3, #1
  4014d2:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4014d4:	4b06      	ldr	r3, [pc, #24]	; (4014f0 <pmc_switch_mck_to_pllack+0x80>)
  4014d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4014d8:	f003 0308 	and.w	r3, r3, #8
  4014dc:	2b00      	cmp	r3, #0
  4014de:	d0f1      	beq.n	4014c4 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  4014e0:	2300      	movs	r3, #0
}
  4014e2:	4618      	mov	r0, r3
  4014e4:	3714      	adds	r7, #20
  4014e6:	46bd      	mov	sp, r7
  4014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4014ec:	4770      	bx	lr
  4014ee:	bf00      	nop
  4014f0:	400e0600 	.word	0x400e0600

004014f4 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  4014f4:	b480      	push	{r7}
  4014f6:	b083      	sub	sp, #12
  4014f8:	af00      	add	r7, sp, #0
  4014fa:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  4014fc:	687b      	ldr	r3, [r7, #4]
  4014fe:	2b01      	cmp	r3, #1
  401500:	d105      	bne.n	40150e <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  401502:	4907      	ldr	r1, [pc, #28]	; (401520 <pmc_switch_sclk_to_32kxtal+0x2c>)
  401504:	4b06      	ldr	r3, [pc, #24]	; (401520 <pmc_switch_sclk_to_32kxtal+0x2c>)
  401506:	689a      	ldr	r2, [r3, #8]
  401508:	4b06      	ldr	r3, [pc, #24]	; (401524 <pmc_switch_sclk_to_32kxtal+0x30>)
  40150a:	4313      	orrs	r3, r2
  40150c:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  40150e:	4b04      	ldr	r3, [pc, #16]	; (401520 <pmc_switch_sclk_to_32kxtal+0x2c>)
  401510:	4a05      	ldr	r2, [pc, #20]	; (401528 <pmc_switch_sclk_to_32kxtal+0x34>)
  401512:	601a      	str	r2, [r3, #0]
}
  401514:	bf00      	nop
  401516:	370c      	adds	r7, #12
  401518:	46bd      	mov	sp, r7
  40151a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40151e:	4770      	bx	lr
  401520:	400e1810 	.word	0x400e1810
  401524:	a5100000 	.word	0xa5100000
  401528:	a5000008 	.word	0xa5000008

0040152c <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  40152c:	b480      	push	{r7}
  40152e:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  401530:	4b09      	ldr	r3, [pc, #36]	; (401558 <pmc_osc_is_ready_32kxtal+0x2c>)
  401532:	695b      	ldr	r3, [r3, #20]
  401534:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  401538:	2b00      	cmp	r3, #0
  40153a:	d007      	beq.n	40154c <pmc_osc_is_ready_32kxtal+0x20>
  40153c:	4b07      	ldr	r3, [pc, #28]	; (40155c <pmc_osc_is_ready_32kxtal+0x30>)
  40153e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401540:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401544:	2b00      	cmp	r3, #0
  401546:	d001      	beq.n	40154c <pmc_osc_is_ready_32kxtal+0x20>
  401548:	2301      	movs	r3, #1
  40154a:	e000      	b.n	40154e <pmc_osc_is_ready_32kxtal+0x22>
  40154c:	2300      	movs	r3, #0
}
  40154e:	4618      	mov	r0, r3
  401550:	46bd      	mov	sp, r7
  401552:	f85d 7b04 	ldr.w	r7, [sp], #4
  401556:	4770      	bx	lr
  401558:	400e1810 	.word	0x400e1810
  40155c:	400e0600 	.word	0x400e0600

00401560 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  401560:	b480      	push	{r7}
  401562:	b083      	sub	sp, #12
  401564:	af00      	add	r7, sp, #0
  401566:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  401568:	4915      	ldr	r1, [pc, #84]	; (4015c0 <pmc_switch_mainck_to_fastrc+0x60>)
  40156a:	4b15      	ldr	r3, [pc, #84]	; (4015c0 <pmc_switch_mainck_to_fastrc+0x60>)
  40156c:	6a1a      	ldr	r2, [r3, #32]
  40156e:	4b15      	ldr	r3, [pc, #84]	; (4015c4 <pmc_switch_mainck_to_fastrc+0x64>)
  401570:	4313      	orrs	r3, r2
  401572:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401574:	bf00      	nop
  401576:	4b12      	ldr	r3, [pc, #72]	; (4015c0 <pmc_switch_mainck_to_fastrc+0x60>)
  401578:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40157a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40157e:	2b00      	cmp	r3, #0
  401580:	d0f9      	beq.n	401576 <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401582:	490f      	ldr	r1, [pc, #60]	; (4015c0 <pmc_switch_mainck_to_fastrc+0x60>)
  401584:	4b0e      	ldr	r3, [pc, #56]	; (4015c0 <pmc_switch_mainck_to_fastrc+0x60>)
  401586:	6a1a      	ldr	r2, [r3, #32]
  401588:	4b0f      	ldr	r3, [pc, #60]	; (4015c8 <pmc_switch_mainck_to_fastrc+0x68>)
  40158a:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  40158c:	687a      	ldr	r2, [r7, #4]
  40158e:	4313      	orrs	r3, r2
  401590:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401594:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401596:	bf00      	nop
  401598:	4b09      	ldr	r3, [pc, #36]	; (4015c0 <pmc_switch_mainck_to_fastrc+0x60>)
  40159a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40159c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4015a0:	2b00      	cmp	r3, #0
  4015a2:	d0f9      	beq.n	401598 <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4015a4:	4906      	ldr	r1, [pc, #24]	; (4015c0 <pmc_switch_mainck_to_fastrc+0x60>)
  4015a6:	4b06      	ldr	r3, [pc, #24]	; (4015c0 <pmc_switch_mainck_to_fastrc+0x60>)
  4015a8:	6a1a      	ldr	r2, [r3, #32]
  4015aa:	4b08      	ldr	r3, [pc, #32]	; (4015cc <pmc_switch_mainck_to_fastrc+0x6c>)
  4015ac:	4013      	ands	r3, r2
  4015ae:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4015b2:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  4015b4:	bf00      	nop
  4015b6:	370c      	adds	r7, #12
  4015b8:	46bd      	mov	sp, r7
  4015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015be:	4770      	bx	lr
  4015c0:	400e0600 	.word	0x400e0600
  4015c4:	00370008 	.word	0x00370008
  4015c8:	ffc8ff8f 	.word	0xffc8ff8f
  4015cc:	fec8ffff 	.word	0xfec8ffff

004015d0 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  4015d0:	b480      	push	{r7}
  4015d2:	b083      	sub	sp, #12
  4015d4:	af00      	add	r7, sp, #0
  4015d6:	6078      	str	r0, [r7, #4]
  4015d8:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4015da:	687b      	ldr	r3, [r7, #4]
  4015dc:	2b00      	cmp	r3, #0
  4015de:	d008      	beq.n	4015f2 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4015e0:	4913      	ldr	r1, [pc, #76]	; (401630 <pmc_switch_mainck_to_xtal+0x60>)
  4015e2:	4b13      	ldr	r3, [pc, #76]	; (401630 <pmc_switch_mainck_to_xtal+0x60>)
  4015e4:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4015e6:	4a13      	ldr	r2, [pc, #76]	; (401634 <pmc_switch_mainck_to_xtal+0x64>)
  4015e8:	401a      	ands	r2, r3
  4015ea:	4b13      	ldr	r3, [pc, #76]	; (401638 <pmc_switch_mainck_to_xtal+0x68>)
  4015ec:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4015ee:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  4015f0:	e018      	b.n	401624 <pmc_switch_mainck_to_xtal+0x54>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4015f2:	490f      	ldr	r1, [pc, #60]	; (401630 <pmc_switch_mainck_to_xtal+0x60>)
  4015f4:	4b0e      	ldr	r3, [pc, #56]	; (401630 <pmc_switch_mainck_to_xtal+0x60>)
  4015f6:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4015f8:	4b10      	ldr	r3, [pc, #64]	; (40163c <pmc_switch_mainck_to_xtal+0x6c>)
  4015fa:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4015fc:	683a      	ldr	r2, [r7, #0]
  4015fe:	0212      	lsls	r2, r2, #8
  401600:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401602:	431a      	orrs	r2, r3
  401604:	4b0e      	ldr	r3, [pc, #56]	; (401640 <pmc_switch_mainck_to_xtal+0x70>)
  401606:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401608:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40160a:	bf00      	nop
  40160c:	4b08      	ldr	r3, [pc, #32]	; (401630 <pmc_switch_mainck_to_xtal+0x60>)
  40160e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401610:	f003 0301 	and.w	r3, r3, #1
  401614:	2b00      	cmp	r3, #0
  401616:	d0f9      	beq.n	40160c <pmc_switch_mainck_to_xtal+0x3c>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401618:	4905      	ldr	r1, [pc, #20]	; (401630 <pmc_switch_mainck_to_xtal+0x60>)
  40161a:	4b05      	ldr	r3, [pc, #20]	; (401630 <pmc_switch_mainck_to_xtal+0x60>)
  40161c:	6a1a      	ldr	r2, [r3, #32]
  40161e:	4b09      	ldr	r3, [pc, #36]	; (401644 <pmc_switch_mainck_to_xtal+0x74>)
  401620:	4313      	orrs	r3, r2
  401622:	620b      	str	r3, [r1, #32]
}
  401624:	bf00      	nop
  401626:	370c      	adds	r7, #12
  401628:	46bd      	mov	sp, r7
  40162a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40162e:	4770      	bx	lr
  401630:	400e0600 	.word	0x400e0600
  401634:	fec8fffc 	.word	0xfec8fffc
  401638:	01370002 	.word	0x01370002
  40163c:	ffc8fffc 	.word	0xffc8fffc
  401640:	00370001 	.word	0x00370001
  401644:	01370000 	.word	0x01370000

00401648 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  401648:	b480      	push	{r7}
  40164a:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40164c:	4b04      	ldr	r3, [pc, #16]	; (401660 <pmc_osc_is_ready_mainck+0x18>)
  40164e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401650:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  401654:	4618      	mov	r0, r3
  401656:	46bd      	mov	sp, r7
  401658:	f85d 7b04 	ldr.w	r7, [sp], #4
  40165c:	4770      	bx	lr
  40165e:	bf00      	nop
  401660:	400e0600 	.word	0x400e0600

00401664 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  401664:	b480      	push	{r7}
  401666:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401668:	4b04      	ldr	r3, [pc, #16]	; (40167c <pmc_disable_pllack+0x18>)
  40166a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40166e:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  401670:	bf00      	nop
  401672:	46bd      	mov	sp, r7
  401674:	f85d 7b04 	ldr.w	r7, [sp], #4
  401678:	4770      	bx	lr
  40167a:	bf00      	nop
  40167c:	400e0600 	.word	0x400e0600

00401680 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  401680:	b480      	push	{r7}
  401682:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401684:	4b04      	ldr	r3, [pc, #16]	; (401698 <pmc_is_locked_pllack+0x18>)
  401686:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401688:	f003 0302 	and.w	r3, r3, #2
}
  40168c:	4618      	mov	r0, r3
  40168e:	46bd      	mov	sp, r7
  401690:	f85d 7b04 	ldr.w	r7, [sp], #4
  401694:	4770      	bx	lr
  401696:	bf00      	nop
  401698:	400e0600 	.word	0x400e0600

0040169c <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  40169c:	b480      	push	{r7}
  40169e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  4016a0:	4b04      	ldr	r3, [pc, #16]	; (4016b4 <pmc_is_locked_upll+0x18>)
  4016a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4016a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  4016a8:	4618      	mov	r0, r3
  4016aa:	46bd      	mov	sp, r7
  4016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016b0:	4770      	bx	lr
  4016b2:	bf00      	nop
  4016b4:	400e0600 	.word	0x400e0600

004016b8 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  4016b8:	b480      	push	{r7}
  4016ba:	b083      	sub	sp, #12
  4016bc:	af00      	add	r7, sp, #0
  4016be:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  4016c0:	687b      	ldr	r3, [r7, #4]
  4016c2:	2b3f      	cmp	r3, #63	; 0x3f
  4016c4:	d901      	bls.n	4016ca <pmc_enable_periph_clk+0x12>
		return 1;
  4016c6:	2301      	movs	r3, #1
  4016c8:	e02f      	b.n	40172a <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  4016ca:	687b      	ldr	r3, [r7, #4]
  4016cc:	2b1f      	cmp	r3, #31
  4016ce:	d813      	bhi.n	4016f8 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4016d0:	4b19      	ldr	r3, [pc, #100]	; (401738 <pmc_enable_periph_clk+0x80>)
  4016d2:	699a      	ldr	r2, [r3, #24]
  4016d4:	2101      	movs	r1, #1
  4016d6:	687b      	ldr	r3, [r7, #4]
  4016d8:	fa01 f303 	lsl.w	r3, r1, r3
  4016dc:	401a      	ands	r2, r3
  4016de:	2101      	movs	r1, #1
  4016e0:	687b      	ldr	r3, [r7, #4]
  4016e2:	fa01 f303 	lsl.w	r3, r1, r3
  4016e6:	429a      	cmp	r2, r3
  4016e8:	d01e      	beq.n	401728 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  4016ea:	4a13      	ldr	r2, [pc, #76]	; (401738 <pmc_enable_periph_clk+0x80>)
  4016ec:	2101      	movs	r1, #1
  4016ee:	687b      	ldr	r3, [r7, #4]
  4016f0:	fa01 f303 	lsl.w	r3, r1, r3
  4016f4:	6113      	str	r3, [r2, #16]
  4016f6:	e017      	b.n	401728 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4016f8:	687b      	ldr	r3, [r7, #4]
  4016fa:	3b20      	subs	r3, #32
  4016fc:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4016fe:	4b0e      	ldr	r3, [pc, #56]	; (401738 <pmc_enable_periph_clk+0x80>)
  401700:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401704:	2101      	movs	r1, #1
  401706:	687b      	ldr	r3, [r7, #4]
  401708:	fa01 f303 	lsl.w	r3, r1, r3
  40170c:	401a      	ands	r2, r3
  40170e:	2101      	movs	r1, #1
  401710:	687b      	ldr	r3, [r7, #4]
  401712:	fa01 f303 	lsl.w	r3, r1, r3
  401716:	429a      	cmp	r2, r3
  401718:	d006      	beq.n	401728 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  40171a:	4a07      	ldr	r2, [pc, #28]	; (401738 <pmc_enable_periph_clk+0x80>)
  40171c:	2101      	movs	r1, #1
  40171e:	687b      	ldr	r3, [r7, #4]
  401720:	fa01 f303 	lsl.w	r3, r1, r3
  401724:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  401728:	2300      	movs	r3, #0
}
  40172a:	4618      	mov	r0, r3
  40172c:	370c      	adds	r7, #12
  40172e:	46bd      	mov	sp, r7
  401730:	f85d 7b04 	ldr.w	r7, [sp], #4
  401734:	4770      	bx	lr
  401736:	bf00      	nop
  401738:	400e0600 	.word	0x400e0600

0040173c <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  40173c:	b480      	push	{r7}
  40173e:	b083      	sub	sp, #12
  401740:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401742:	f3ef 8310 	mrs	r3, PRIMASK
  401746:	607b      	str	r3, [r7, #4]
  return(result);
  401748:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40174a:	2b00      	cmp	r3, #0
  40174c:	bf0c      	ite	eq
  40174e:	2301      	moveq	r3, #1
  401750:	2300      	movne	r3, #0
  401752:	b2db      	uxtb	r3, r3
  401754:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  401756:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401758:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40175c:	4b04      	ldr	r3, [pc, #16]	; (401770 <cpu_irq_save+0x34>)
  40175e:	2200      	movs	r2, #0
  401760:	701a      	strb	r2, [r3, #0]
	return flags;
  401762:	683b      	ldr	r3, [r7, #0]
}
  401764:	4618      	mov	r0, r3
  401766:	370c      	adds	r7, #12
  401768:	46bd      	mov	sp, r7
  40176a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40176e:	4770      	bx	lr
  401770:	2040000a 	.word	0x2040000a

00401774 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  401774:	b480      	push	{r7}
  401776:	b083      	sub	sp, #12
  401778:	af00      	add	r7, sp, #0
  40177a:	6078      	str	r0, [r7, #4]
	return (flags);
  40177c:	687b      	ldr	r3, [r7, #4]
  40177e:	2b00      	cmp	r3, #0
  401780:	bf14      	ite	ne
  401782:	2301      	movne	r3, #1
  401784:	2300      	moveq	r3, #0
  401786:	b2db      	uxtb	r3, r3
}
  401788:	4618      	mov	r0, r3
  40178a:	370c      	adds	r7, #12
  40178c:	46bd      	mov	sp, r7
  40178e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401792:	4770      	bx	lr

00401794 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  401794:	b580      	push	{r7, lr}
  401796:	b082      	sub	sp, #8
  401798:	af00      	add	r7, sp, #0
  40179a:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  40179c:	6878      	ldr	r0, [r7, #4]
  40179e:	4b07      	ldr	r3, [pc, #28]	; (4017bc <cpu_irq_restore+0x28>)
  4017a0:	4798      	blx	r3
  4017a2:	4603      	mov	r3, r0
  4017a4:	2b00      	cmp	r3, #0
  4017a6:	d005      	beq.n	4017b4 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  4017a8:	4b05      	ldr	r3, [pc, #20]	; (4017c0 <cpu_irq_restore+0x2c>)
  4017aa:	2201      	movs	r2, #1
  4017ac:	701a      	strb	r2, [r3, #0]
  4017ae:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4017b2:	b662      	cpsie	i
}
  4017b4:	bf00      	nop
  4017b6:	3708      	adds	r7, #8
  4017b8:	46bd      	mov	sp, r7
  4017ba:	bd80      	pop	{r7, pc}
  4017bc:	00401775 	.word	0x00401775
  4017c0:	2040000a 	.word	0x2040000a

004017c4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4017c4:	b580      	push	{r7, lr}
  4017c6:	b084      	sub	sp, #16
  4017c8:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  4017ca:	4b1e      	ldr	r3, [pc, #120]	; (401844 <Reset_Handler+0x80>)
  4017cc:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  4017ce:	4b1e      	ldr	r3, [pc, #120]	; (401848 <Reset_Handler+0x84>)
  4017d0:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  4017d2:	68fa      	ldr	r2, [r7, #12]
  4017d4:	68bb      	ldr	r3, [r7, #8]
  4017d6:	429a      	cmp	r2, r3
  4017d8:	d00c      	beq.n	4017f4 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  4017da:	e007      	b.n	4017ec <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  4017dc:	68bb      	ldr	r3, [r7, #8]
  4017de:	1d1a      	adds	r2, r3, #4
  4017e0:	60ba      	str	r2, [r7, #8]
  4017e2:	68fa      	ldr	r2, [r7, #12]
  4017e4:	1d11      	adds	r1, r2, #4
  4017e6:	60f9      	str	r1, [r7, #12]
  4017e8:	6812      	ldr	r2, [r2, #0]
  4017ea:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  4017ec:	68bb      	ldr	r3, [r7, #8]
  4017ee:	4a17      	ldr	r2, [pc, #92]	; (40184c <Reset_Handler+0x88>)
  4017f0:	4293      	cmp	r3, r2
  4017f2:	d3f3      	bcc.n	4017dc <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4017f4:	4b16      	ldr	r3, [pc, #88]	; (401850 <Reset_Handler+0x8c>)
  4017f6:	60bb      	str	r3, [r7, #8]
  4017f8:	e004      	b.n	401804 <Reset_Handler+0x40>
                *pDest++ = 0;
  4017fa:	68bb      	ldr	r3, [r7, #8]
  4017fc:	1d1a      	adds	r2, r3, #4
  4017fe:	60ba      	str	r2, [r7, #8]
  401800:	2200      	movs	r2, #0
  401802:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  401804:	68bb      	ldr	r3, [r7, #8]
  401806:	4a13      	ldr	r2, [pc, #76]	; (401854 <Reset_Handler+0x90>)
  401808:	4293      	cmp	r3, r2
  40180a:	d3f6      	bcc.n	4017fa <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  40180c:	4b12      	ldr	r3, [pc, #72]	; (401858 <Reset_Handler+0x94>)
  40180e:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401810:	4a12      	ldr	r2, [pc, #72]	; (40185c <Reset_Handler+0x98>)
  401812:	68fb      	ldr	r3, [r7, #12]
  401814:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401818:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  40181a:	4b11      	ldr	r3, [pc, #68]	; (401860 <Reset_Handler+0x9c>)
  40181c:	4798      	blx	r3
  40181e:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  401820:	4a10      	ldr	r2, [pc, #64]	; (401864 <Reset_Handler+0xa0>)
  401822:	4b10      	ldr	r3, [pc, #64]	; (401864 <Reset_Handler+0xa0>)
  401824:	681b      	ldr	r3, [r3, #0]
  401826:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40182a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  40182c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401830:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  401834:	6878      	ldr	r0, [r7, #4]
  401836:	4b0c      	ldr	r3, [pc, #48]	; (401868 <Reset_Handler+0xa4>)
  401838:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  40183a:	4b0c      	ldr	r3, [pc, #48]	; (40186c <Reset_Handler+0xa8>)
  40183c:	4798      	blx	r3

        /* Branch to main function */
        main();
  40183e:	4b0c      	ldr	r3, [pc, #48]	; (401870 <Reset_Handler+0xac>)
  401840:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  401842:	e7fe      	b.n	401842 <Reset_Handler+0x7e>
  401844:	004073f4 	.word	0x004073f4
  401848:	20400000 	.word	0x20400000
  40184c:	204009c0 	.word	0x204009c0
  401850:	204009c0 	.word	0x204009c0
  401854:	20400ad4 	.word	0x20400ad4
  401858:	00400000 	.word	0x00400000
  40185c:	e000ed00 	.word	0xe000ed00
  401860:	0040173d 	.word	0x0040173d
  401864:	e000ed88 	.word	0xe000ed88
  401868:	00401795 	.word	0x00401795
  40186c:	004028cd 	.word	0x004028cd
  401870:	004023c5 	.word	0x004023c5

00401874 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401874:	b480      	push	{r7}
  401876:	af00      	add	r7, sp, #0
        while (1) {
  401878:	e7fe      	b.n	401878 <Dummy_Handler+0x4>
	...

0040187c <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  40187c:	b480      	push	{r7}
  40187e:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401880:	4b52      	ldr	r3, [pc, #328]	; (4019cc <SystemCoreClockUpdate+0x150>)
  401882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401884:	f003 0303 	and.w	r3, r3, #3
  401888:	2b01      	cmp	r3, #1
  40188a:	d014      	beq.n	4018b6 <SystemCoreClockUpdate+0x3a>
  40188c:	2b01      	cmp	r3, #1
  40188e:	d302      	bcc.n	401896 <SystemCoreClockUpdate+0x1a>
  401890:	2b02      	cmp	r3, #2
  401892:	d038      	beq.n	401906 <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  401894:	e07a      	b.n	40198c <SystemCoreClockUpdate+0x110>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401896:	4b4e      	ldr	r3, [pc, #312]	; (4019d0 <SystemCoreClockUpdate+0x154>)
  401898:	695b      	ldr	r3, [r3, #20]
  40189a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40189e:	2b00      	cmp	r3, #0
  4018a0:	d004      	beq.n	4018ac <SystemCoreClockUpdate+0x30>
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4018a2:	4b4c      	ldr	r3, [pc, #304]	; (4019d4 <SystemCoreClockUpdate+0x158>)
  4018a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4018a8:	601a      	str	r2, [r3, #0]
    break;
  4018aa:	e06f      	b.n	40198c <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4018ac:	4b49      	ldr	r3, [pc, #292]	; (4019d4 <SystemCoreClockUpdate+0x158>)
  4018ae:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  4018b2:	601a      	str	r2, [r3, #0]
    break;
  4018b4:	e06a      	b.n	40198c <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4018b6:	4b45      	ldr	r3, [pc, #276]	; (4019cc <SystemCoreClockUpdate+0x150>)
  4018b8:	6a1b      	ldr	r3, [r3, #32]
  4018ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4018be:	2b00      	cmp	r3, #0
  4018c0:	d003      	beq.n	4018ca <SystemCoreClockUpdate+0x4e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4018c2:	4b44      	ldr	r3, [pc, #272]	; (4019d4 <SystemCoreClockUpdate+0x158>)
  4018c4:	4a44      	ldr	r2, [pc, #272]	; (4019d8 <SystemCoreClockUpdate+0x15c>)
  4018c6:	601a      	str	r2, [r3, #0]
    break;
  4018c8:	e060      	b.n	40198c <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4018ca:	4b42      	ldr	r3, [pc, #264]	; (4019d4 <SystemCoreClockUpdate+0x158>)
  4018cc:	4a43      	ldr	r2, [pc, #268]	; (4019dc <SystemCoreClockUpdate+0x160>)
  4018ce:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4018d0:	4b3e      	ldr	r3, [pc, #248]	; (4019cc <SystemCoreClockUpdate+0x150>)
  4018d2:	6a1b      	ldr	r3, [r3, #32]
  4018d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4018d8:	2b10      	cmp	r3, #16
  4018da:	d004      	beq.n	4018e6 <SystemCoreClockUpdate+0x6a>
  4018dc:	2b20      	cmp	r3, #32
  4018de:	d008      	beq.n	4018f2 <SystemCoreClockUpdate+0x76>
  4018e0:	2b00      	cmp	r3, #0
  4018e2:	d00e      	beq.n	401902 <SystemCoreClockUpdate+0x86>
          break;
  4018e4:	e00e      	b.n	401904 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 2U;
  4018e6:	4b3b      	ldr	r3, [pc, #236]	; (4019d4 <SystemCoreClockUpdate+0x158>)
  4018e8:	681b      	ldr	r3, [r3, #0]
  4018ea:	005b      	lsls	r3, r3, #1
  4018ec:	4a39      	ldr	r2, [pc, #228]	; (4019d4 <SystemCoreClockUpdate+0x158>)
  4018ee:	6013      	str	r3, [r2, #0]
          break;
  4018f0:	e008      	b.n	401904 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 3U;
  4018f2:	4b38      	ldr	r3, [pc, #224]	; (4019d4 <SystemCoreClockUpdate+0x158>)
  4018f4:	681a      	ldr	r2, [r3, #0]
  4018f6:	4613      	mov	r3, r2
  4018f8:	005b      	lsls	r3, r3, #1
  4018fa:	4413      	add	r3, r2
  4018fc:	4a35      	ldr	r2, [pc, #212]	; (4019d4 <SystemCoreClockUpdate+0x158>)
  4018fe:	6013      	str	r3, [r2, #0]
          break;
  401900:	e000      	b.n	401904 <SystemCoreClockUpdate+0x88>
          break;
  401902:	bf00      	nop
    break;
  401904:	e042      	b.n	40198c <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401906:	4b31      	ldr	r3, [pc, #196]	; (4019cc <SystemCoreClockUpdate+0x150>)
  401908:	6a1b      	ldr	r3, [r3, #32]
  40190a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40190e:	2b00      	cmp	r3, #0
  401910:	d003      	beq.n	40191a <SystemCoreClockUpdate+0x9e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401912:	4b30      	ldr	r3, [pc, #192]	; (4019d4 <SystemCoreClockUpdate+0x158>)
  401914:	4a30      	ldr	r2, [pc, #192]	; (4019d8 <SystemCoreClockUpdate+0x15c>)
  401916:	601a      	str	r2, [r3, #0]
  401918:	e01c      	b.n	401954 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40191a:	4b2e      	ldr	r3, [pc, #184]	; (4019d4 <SystemCoreClockUpdate+0x158>)
  40191c:	4a2f      	ldr	r2, [pc, #188]	; (4019dc <SystemCoreClockUpdate+0x160>)
  40191e:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401920:	4b2a      	ldr	r3, [pc, #168]	; (4019cc <SystemCoreClockUpdate+0x150>)
  401922:	6a1b      	ldr	r3, [r3, #32]
  401924:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401928:	2b10      	cmp	r3, #16
  40192a:	d004      	beq.n	401936 <SystemCoreClockUpdate+0xba>
  40192c:	2b20      	cmp	r3, #32
  40192e:	d008      	beq.n	401942 <SystemCoreClockUpdate+0xc6>
  401930:	2b00      	cmp	r3, #0
  401932:	d00e      	beq.n	401952 <SystemCoreClockUpdate+0xd6>
          break;
  401934:	e00e      	b.n	401954 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 2U;
  401936:	4b27      	ldr	r3, [pc, #156]	; (4019d4 <SystemCoreClockUpdate+0x158>)
  401938:	681b      	ldr	r3, [r3, #0]
  40193a:	005b      	lsls	r3, r3, #1
  40193c:	4a25      	ldr	r2, [pc, #148]	; (4019d4 <SystemCoreClockUpdate+0x158>)
  40193e:	6013      	str	r3, [r2, #0]
          break;
  401940:	e008      	b.n	401954 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 3U;
  401942:	4b24      	ldr	r3, [pc, #144]	; (4019d4 <SystemCoreClockUpdate+0x158>)
  401944:	681a      	ldr	r2, [r3, #0]
  401946:	4613      	mov	r3, r2
  401948:	005b      	lsls	r3, r3, #1
  40194a:	4413      	add	r3, r2
  40194c:	4a21      	ldr	r2, [pc, #132]	; (4019d4 <SystemCoreClockUpdate+0x158>)
  40194e:	6013      	str	r3, [r2, #0]
          break;
  401950:	e000      	b.n	401954 <SystemCoreClockUpdate+0xd8>
          break;
  401952:	bf00      	nop
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401954:	4b1d      	ldr	r3, [pc, #116]	; (4019cc <SystemCoreClockUpdate+0x150>)
  401956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401958:	f003 0303 	and.w	r3, r3, #3
  40195c:	2b02      	cmp	r3, #2
  40195e:	d114      	bne.n	40198a <SystemCoreClockUpdate+0x10e>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401960:	4b1a      	ldr	r3, [pc, #104]	; (4019cc <SystemCoreClockUpdate+0x150>)
  401962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401964:	0c1b      	lsrs	r3, r3, #16
  401966:	f3c3 030a 	ubfx	r3, r3, #0, #11
  40196a:	3301      	adds	r3, #1
  40196c:	4a19      	ldr	r2, [pc, #100]	; (4019d4 <SystemCoreClockUpdate+0x158>)
  40196e:	6812      	ldr	r2, [r2, #0]
  401970:	fb02 f303 	mul.w	r3, r2, r3
  401974:	4a17      	ldr	r2, [pc, #92]	; (4019d4 <SystemCoreClockUpdate+0x158>)
  401976:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401978:	4b14      	ldr	r3, [pc, #80]	; (4019cc <SystemCoreClockUpdate+0x150>)
  40197a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40197c:	b2db      	uxtb	r3, r3
  40197e:	4a15      	ldr	r2, [pc, #84]	; (4019d4 <SystemCoreClockUpdate+0x158>)
  401980:	6812      	ldr	r2, [r2, #0]
  401982:	fbb2 f3f3 	udiv	r3, r2, r3
  401986:	4a13      	ldr	r2, [pc, #76]	; (4019d4 <SystemCoreClockUpdate+0x158>)
  401988:	6013      	str	r3, [r2, #0]
    break;
  40198a:	bf00      	nop
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40198c:	4b0f      	ldr	r3, [pc, #60]	; (4019cc <SystemCoreClockUpdate+0x150>)
  40198e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401990:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401994:	2b70      	cmp	r3, #112	; 0x70
  401996:	d108      	bne.n	4019aa <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  401998:	4b0e      	ldr	r3, [pc, #56]	; (4019d4 <SystemCoreClockUpdate+0x158>)
  40199a:	681b      	ldr	r3, [r3, #0]
  40199c:	4a10      	ldr	r2, [pc, #64]	; (4019e0 <SystemCoreClockUpdate+0x164>)
  40199e:	fba2 2303 	umull	r2, r3, r2, r3
  4019a2:	085b      	lsrs	r3, r3, #1
  4019a4:	4a0b      	ldr	r2, [pc, #44]	; (4019d4 <SystemCoreClockUpdate+0x158>)
  4019a6:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  4019a8:	e00a      	b.n	4019c0 <SystemCoreClockUpdate+0x144>
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4019aa:	4b08      	ldr	r3, [pc, #32]	; (4019cc <SystemCoreClockUpdate+0x150>)
  4019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4019ae:	091b      	lsrs	r3, r3, #4
  4019b0:	f003 0307 	and.w	r3, r3, #7
  4019b4:	4a07      	ldr	r2, [pc, #28]	; (4019d4 <SystemCoreClockUpdate+0x158>)
  4019b6:	6812      	ldr	r2, [r2, #0]
  4019b8:	fa22 f303 	lsr.w	r3, r2, r3
  4019bc:	4a05      	ldr	r2, [pc, #20]	; (4019d4 <SystemCoreClockUpdate+0x158>)
  4019be:	6013      	str	r3, [r2, #0]
}
  4019c0:	bf00      	nop
  4019c2:	46bd      	mov	sp, r7
  4019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019c8:	4770      	bx	lr
  4019ca:	bf00      	nop
  4019cc:	400e0600 	.word	0x400e0600
  4019d0:	400e1810 	.word	0x400e1810
  4019d4:	2040000c 	.word	0x2040000c
  4019d8:	00b71b00 	.word	0x00b71b00
  4019dc:	003d0900 	.word	0x003d0900
  4019e0:	aaaaaaab 	.word	0xaaaaaaab

004019e4 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  4019e4:	b480      	push	{r7}
  4019e6:	b083      	sub	sp, #12
  4019e8:	af00      	add	r7, sp, #0
  4019ea:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4019ec:	687b      	ldr	r3, [r7, #4]
  4019ee:	4a1d      	ldr	r2, [pc, #116]	; (401a64 <system_init_flash+0x80>)
  4019f0:	4293      	cmp	r3, r2
  4019f2:	d804      	bhi.n	4019fe <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4019f4:	4b1c      	ldr	r3, [pc, #112]	; (401a68 <system_init_flash+0x84>)
  4019f6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4019fa:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4019fc:	e02b      	b.n	401a56 <system_init_flash+0x72>
    if (ul_clk < CHIP_FREQ_FWS_1)
  4019fe:	687b      	ldr	r3, [r7, #4]
  401a00:	4a1a      	ldr	r2, [pc, #104]	; (401a6c <system_init_flash+0x88>)
  401a02:	4293      	cmp	r3, r2
  401a04:	d803      	bhi.n	401a0e <system_init_flash+0x2a>
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401a06:	4b18      	ldr	r3, [pc, #96]	; (401a68 <system_init_flash+0x84>)
  401a08:	4a19      	ldr	r2, [pc, #100]	; (401a70 <system_init_flash+0x8c>)
  401a0a:	601a      	str	r2, [r3, #0]
}
  401a0c:	e023      	b.n	401a56 <system_init_flash+0x72>
      if (ul_clk < CHIP_FREQ_FWS_2)
  401a0e:	687b      	ldr	r3, [r7, #4]
  401a10:	4a18      	ldr	r2, [pc, #96]	; (401a74 <system_init_flash+0x90>)
  401a12:	4293      	cmp	r3, r2
  401a14:	d803      	bhi.n	401a1e <system_init_flash+0x3a>
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401a16:	4b14      	ldr	r3, [pc, #80]	; (401a68 <system_init_flash+0x84>)
  401a18:	4a17      	ldr	r2, [pc, #92]	; (401a78 <system_init_flash+0x94>)
  401a1a:	601a      	str	r2, [r3, #0]
}
  401a1c:	e01b      	b.n	401a56 <system_init_flash+0x72>
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401a1e:	687b      	ldr	r3, [r7, #4]
  401a20:	4a16      	ldr	r2, [pc, #88]	; (401a7c <system_init_flash+0x98>)
  401a22:	4293      	cmp	r3, r2
  401a24:	d803      	bhi.n	401a2e <system_init_flash+0x4a>
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401a26:	4b10      	ldr	r3, [pc, #64]	; (401a68 <system_init_flash+0x84>)
  401a28:	4a15      	ldr	r2, [pc, #84]	; (401a80 <system_init_flash+0x9c>)
  401a2a:	601a      	str	r2, [r3, #0]
}
  401a2c:	e013      	b.n	401a56 <system_init_flash+0x72>
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401a2e:	687b      	ldr	r3, [r7, #4]
  401a30:	4a14      	ldr	r2, [pc, #80]	; (401a84 <system_init_flash+0xa0>)
  401a32:	4293      	cmp	r3, r2
  401a34:	d804      	bhi.n	401a40 <system_init_flash+0x5c>
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401a36:	4b0c      	ldr	r3, [pc, #48]	; (401a68 <system_init_flash+0x84>)
  401a38:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401a3c:	601a      	str	r2, [r3, #0]
}
  401a3e:	e00a      	b.n	401a56 <system_init_flash+0x72>
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  401a40:	687b      	ldr	r3, [r7, #4]
  401a42:	4a11      	ldr	r2, [pc, #68]	; (401a88 <system_init_flash+0xa4>)
  401a44:	4293      	cmp	r3, r2
  401a46:	d803      	bhi.n	401a50 <system_init_flash+0x6c>
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401a48:	4b07      	ldr	r3, [pc, #28]	; (401a68 <system_init_flash+0x84>)
  401a4a:	4a10      	ldr	r2, [pc, #64]	; (401a8c <system_init_flash+0xa8>)
  401a4c:	601a      	str	r2, [r3, #0]
}
  401a4e:	e002      	b.n	401a56 <system_init_flash+0x72>
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  401a50:	4b05      	ldr	r3, [pc, #20]	; (401a68 <system_init_flash+0x84>)
  401a52:	4a0f      	ldr	r2, [pc, #60]	; (401a90 <system_init_flash+0xac>)
  401a54:	601a      	str	r2, [r3, #0]
}
  401a56:	bf00      	nop
  401a58:	370c      	adds	r7, #12
  401a5a:	46bd      	mov	sp, r7
  401a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a60:	4770      	bx	lr
  401a62:	bf00      	nop
  401a64:	015ef3bf 	.word	0x015ef3bf
  401a68:	400e0c00 	.word	0x400e0c00
  401a6c:	02bde77f 	.word	0x02bde77f
  401a70:	04000100 	.word	0x04000100
  401a74:	041cdb3f 	.word	0x041cdb3f
  401a78:	04000200 	.word	0x04000200
  401a7c:	057bceff 	.word	0x057bceff
  401a80:	04000300 	.word	0x04000300
  401a84:	06dac2bf 	.word	0x06dac2bf
  401a88:	0839b67f 	.word	0x0839b67f
  401a8c:	04000500 	.word	0x04000500
  401a90:	04000600 	.word	0x04000600

00401a94 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  401a94:	b480      	push	{r7}
  401a96:	b085      	sub	sp, #20
  401a98:	af00      	add	r7, sp, #0
  401a9a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  401a9c:	4b10      	ldr	r3, [pc, #64]	; (401ae0 <_sbrk+0x4c>)
  401a9e:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  401aa0:	4b10      	ldr	r3, [pc, #64]	; (401ae4 <_sbrk+0x50>)
  401aa2:	681b      	ldr	r3, [r3, #0]
  401aa4:	2b00      	cmp	r3, #0
  401aa6:	d102      	bne.n	401aae <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  401aa8:	4b0e      	ldr	r3, [pc, #56]	; (401ae4 <_sbrk+0x50>)
  401aaa:	4a0f      	ldr	r2, [pc, #60]	; (401ae8 <_sbrk+0x54>)
  401aac:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  401aae:	4b0d      	ldr	r3, [pc, #52]	; (401ae4 <_sbrk+0x50>)
  401ab0:	681b      	ldr	r3, [r3, #0]
  401ab2:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  401ab4:	68ba      	ldr	r2, [r7, #8]
  401ab6:	687b      	ldr	r3, [r7, #4]
  401ab8:	441a      	add	r2, r3
  401aba:	68fb      	ldr	r3, [r7, #12]
  401abc:	429a      	cmp	r2, r3
  401abe:	dd02      	ble.n	401ac6 <_sbrk+0x32>
		return (caddr_t) -1;	
  401ac0:	f04f 33ff 	mov.w	r3, #4294967295
  401ac4:	e006      	b.n	401ad4 <_sbrk+0x40>
	}

	heap += incr;
  401ac6:	4b07      	ldr	r3, [pc, #28]	; (401ae4 <_sbrk+0x50>)
  401ac8:	681a      	ldr	r2, [r3, #0]
  401aca:	687b      	ldr	r3, [r7, #4]
  401acc:	4413      	add	r3, r2
  401ace:	4a05      	ldr	r2, [pc, #20]	; (401ae4 <_sbrk+0x50>)
  401ad0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  401ad2:	68bb      	ldr	r3, [r7, #8]
}
  401ad4:	4618      	mov	r0, r3
  401ad6:	3714      	adds	r7, #20
  401ad8:	46bd      	mov	sp, r7
  401ada:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ade:	4770      	bx	lr
  401ae0:	2045fffc 	.word	0x2045fffc
  401ae4:	20400a54 	.word	0x20400a54
  401ae8:	20402cd8 	.word	0x20402cd8

00401aec <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  401aec:	b480      	push	{r7}
  401aee:	b083      	sub	sp, #12
  401af0:	af00      	add	r7, sp, #0
  401af2:	4603      	mov	r3, r0
  401af4:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401af6:	4909      	ldr	r1, [pc, #36]	; (401b1c <NVIC_EnableIRQ+0x30>)
  401af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401afc:	095b      	lsrs	r3, r3, #5
  401afe:	79fa      	ldrb	r2, [r7, #7]
  401b00:	f002 021f 	and.w	r2, r2, #31
  401b04:	2001      	movs	r0, #1
  401b06:	fa00 f202 	lsl.w	r2, r0, r2
  401b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  401b0e:	bf00      	nop
  401b10:	370c      	adds	r7, #12
  401b12:	46bd      	mov	sp, r7
  401b14:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b18:	4770      	bx	lr
  401b1a:	bf00      	nop
  401b1c:	e000e100 	.word	0xe000e100

00401b20 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  401b20:	b480      	push	{r7}
  401b22:	b083      	sub	sp, #12
  401b24:	af00      	add	r7, sp, #0
  401b26:	4603      	mov	r3, r0
  401b28:	6039      	str	r1, [r7, #0]
  401b2a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  401b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401b30:	2b00      	cmp	r3, #0
  401b32:	da0b      	bge.n	401b4c <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401b34:	490d      	ldr	r1, [pc, #52]	; (401b6c <NVIC_SetPriority+0x4c>)
  401b36:	79fb      	ldrb	r3, [r7, #7]
  401b38:	f003 030f 	and.w	r3, r3, #15
  401b3c:	3b04      	subs	r3, #4
  401b3e:	683a      	ldr	r2, [r7, #0]
  401b40:	b2d2      	uxtb	r2, r2
  401b42:	0152      	lsls	r2, r2, #5
  401b44:	b2d2      	uxtb	r2, r2
  401b46:	440b      	add	r3, r1
  401b48:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
}
  401b4a:	e009      	b.n	401b60 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401b4c:	4908      	ldr	r1, [pc, #32]	; (401b70 <NVIC_SetPriority+0x50>)
  401b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401b52:	683a      	ldr	r2, [r7, #0]
  401b54:	b2d2      	uxtb	r2, r2
  401b56:	0152      	lsls	r2, r2, #5
  401b58:	b2d2      	uxtb	r2, r2
  401b5a:	440b      	add	r3, r1
  401b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  401b60:	bf00      	nop
  401b62:	370c      	adds	r7, #12
  401b64:	46bd      	mov	sp, r7
  401b66:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b6a:	4770      	bx	lr
  401b6c:	e000ed00 	.word	0xe000ed00
  401b70:	e000e100 	.word	0xe000e100

00401b74 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  401b74:	b580      	push	{r7, lr}
  401b76:	b082      	sub	sp, #8
  401b78:	af00      	add	r7, sp, #0
  401b7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
  401b7c:	687b      	ldr	r3, [r7, #4]
  401b7e:	3b01      	subs	r3, #1
  401b80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  401b84:	d301      	bcc.n	401b8a <SysTick_Config+0x16>
  401b86:	2301      	movs	r3, #1
  401b88:	e00f      	b.n	401baa <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  401b8a:	4a0a      	ldr	r2, [pc, #40]	; (401bb4 <SysTick_Config+0x40>)
  401b8c:	687b      	ldr	r3, [r7, #4]
  401b8e:	3b01      	subs	r3, #1
  401b90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  401b92:	2107      	movs	r1, #7
  401b94:	f04f 30ff 	mov.w	r0, #4294967295
  401b98:	4b07      	ldr	r3, [pc, #28]	; (401bb8 <SysTick_Config+0x44>)
  401b9a:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  401b9c:	4b05      	ldr	r3, [pc, #20]	; (401bb4 <SysTick_Config+0x40>)
  401b9e:	2200      	movs	r2, #0
  401ba0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  401ba2:	4b04      	ldr	r3, [pc, #16]	; (401bb4 <SysTick_Config+0x40>)
  401ba4:	2207      	movs	r2, #7
  401ba6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
  401ba8:	2300      	movs	r3, #0
}
  401baa:	4618      	mov	r0, r3
  401bac:	3708      	adds	r7, #8
  401bae:	46bd      	mov	sp, r7
  401bb0:	bd80      	pop	{r7, pc}
  401bb2:	bf00      	nop
  401bb4:	e000e010 	.word	0xe000e010
  401bb8:	00401b21 	.word	0x00401b21

00401bbc <osc_get_rate>:
{
  401bbc:	b480      	push	{r7}
  401bbe:	b083      	sub	sp, #12
  401bc0:	af00      	add	r7, sp, #0
  401bc2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401bc4:	687b      	ldr	r3, [r7, #4]
  401bc6:	2b07      	cmp	r3, #7
  401bc8:	d825      	bhi.n	401c16 <osc_get_rate+0x5a>
  401bca:	a201      	add	r2, pc, #4	; (adr r2, 401bd0 <osc_get_rate+0x14>)
  401bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401bd0:	00401bf1 	.word	0x00401bf1
  401bd4:	00401bf7 	.word	0x00401bf7
  401bd8:	00401bfd 	.word	0x00401bfd
  401bdc:	00401c03 	.word	0x00401c03
  401be0:	00401c07 	.word	0x00401c07
  401be4:	00401c0b 	.word	0x00401c0b
  401be8:	00401c0f 	.word	0x00401c0f
  401bec:	00401c13 	.word	0x00401c13
		return OSC_SLCK_32K_RC_HZ;
  401bf0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401bf4:	e010      	b.n	401c18 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  401bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401bfa:	e00d      	b.n	401c18 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  401bfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401c00:	e00a      	b.n	401c18 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  401c02:	4b08      	ldr	r3, [pc, #32]	; (401c24 <osc_get_rate+0x68>)
  401c04:	e008      	b.n	401c18 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  401c06:	4b08      	ldr	r3, [pc, #32]	; (401c28 <osc_get_rate+0x6c>)
  401c08:	e006      	b.n	401c18 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  401c0a:	4b08      	ldr	r3, [pc, #32]	; (401c2c <osc_get_rate+0x70>)
  401c0c:	e004      	b.n	401c18 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  401c0e:	4b07      	ldr	r3, [pc, #28]	; (401c2c <osc_get_rate+0x70>)
  401c10:	e002      	b.n	401c18 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  401c12:	4b06      	ldr	r3, [pc, #24]	; (401c2c <osc_get_rate+0x70>)
  401c14:	e000      	b.n	401c18 <osc_get_rate+0x5c>
	return 0;
  401c16:	2300      	movs	r3, #0
}
  401c18:	4618      	mov	r0, r3
  401c1a:	370c      	adds	r7, #12
  401c1c:	46bd      	mov	sp, r7
  401c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c22:	4770      	bx	lr
  401c24:	003d0900 	.word	0x003d0900
  401c28:	007a1200 	.word	0x007a1200
  401c2c:	00b71b00 	.word	0x00b71b00

00401c30 <sysclk_get_main_hz>:
{
  401c30:	b580      	push	{r7, lr}
  401c32:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401c34:	2006      	movs	r0, #6
  401c36:	4b05      	ldr	r3, [pc, #20]	; (401c4c <sysclk_get_main_hz+0x1c>)
  401c38:	4798      	blx	r3
  401c3a:	4602      	mov	r2, r0
  401c3c:	4613      	mov	r3, r2
  401c3e:	009b      	lsls	r3, r3, #2
  401c40:	4413      	add	r3, r2
  401c42:	009a      	lsls	r2, r3, #2
  401c44:	4413      	add	r3, r2
}
  401c46:	4618      	mov	r0, r3
  401c48:	bd80      	pop	{r7, pc}
  401c4a:	bf00      	nop
  401c4c:	00401bbd 	.word	0x00401bbd

00401c50 <sysclk_get_cpu_hz>:
{
  401c50:	b580      	push	{r7, lr}
  401c52:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401c54:	4b02      	ldr	r3, [pc, #8]	; (401c60 <sysclk_get_cpu_hz+0x10>)
  401c56:	4798      	blx	r3
  401c58:	4603      	mov	r3, r0
}
  401c5a:	4618      	mov	r0, r3
  401c5c:	bd80      	pop	{r7, pc}
  401c5e:	bf00      	nop
  401c60:	00401c31 	.word	0x00401c31

00401c64 <sysclk_get_peripheral_hz>:
{
  401c64:	b580      	push	{r7, lr}
  401c66:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401c68:	4b02      	ldr	r3, [pc, #8]	; (401c74 <sysclk_get_peripheral_hz+0x10>)
  401c6a:	4798      	blx	r3
  401c6c:	4603      	mov	r3, r0
  401c6e:	085b      	lsrs	r3, r3, #1
}
  401c70:	4618      	mov	r0, r3
  401c72:	bd80      	pop	{r7, pc}
  401c74:	00401c31 	.word	0x00401c31

00401c78 <sysclk_enable_peripheral_clock>:
{
  401c78:	b580      	push	{r7, lr}
  401c7a:	b082      	sub	sp, #8
  401c7c:	af00      	add	r7, sp, #0
  401c7e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401c80:	6878      	ldr	r0, [r7, #4]
  401c82:	4b03      	ldr	r3, [pc, #12]	; (401c90 <sysclk_enable_peripheral_clock+0x18>)
  401c84:	4798      	blx	r3
}
  401c86:	bf00      	nop
  401c88:	3708      	adds	r7, #8
  401c8a:	46bd      	mov	sp, r7
  401c8c:	bd80      	pop	{r7, pc}
  401c8e:	bf00      	nop
  401c90:	004016b9 	.word	0x004016b9

00401c94 <usart_serial_init>:
{
  401c94:	b580      	push	{r7, lr}
  401c96:	b08c      	sub	sp, #48	; 0x30
  401c98:	af00      	add	r7, sp, #0
  401c9a:	6078      	str	r0, [r7, #4]
  401c9c:	6039      	str	r1, [r7, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  401c9e:	4b4f      	ldr	r3, [pc, #316]	; (401ddc <usart_serial_init+0x148>)
  401ca0:	4798      	blx	r3
  401ca2:	4603      	mov	r3, r0
  401ca4:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  401ca6:	683b      	ldr	r3, [r7, #0]
  401ca8:	681b      	ldr	r3, [r3, #0]
  401caa:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  401cac:	683b      	ldr	r3, [r7, #0]
  401cae:	689b      	ldr	r3, [r3, #8]
  401cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	usart_settings.baudrate = opt->baudrate;
  401cb2:	683b      	ldr	r3, [r7, #0]
  401cb4:	681b      	ldr	r3, [r3, #0]
  401cb6:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  401cb8:	683b      	ldr	r3, [r7, #0]
  401cba:	685b      	ldr	r3, [r3, #4]
  401cbc:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  401cbe:	683b      	ldr	r3, [r7, #0]
  401cc0:	689b      	ldr	r3, [r3, #8]
  401cc2:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  401cc4:	683b      	ldr	r3, [r7, #0]
  401cc6:	68db      	ldr	r3, [r3, #12]
  401cc8:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  401cca:	2300      	movs	r3, #0
  401ccc:	61fb      	str	r3, [r7, #28]
	if (UART0 == (Uart*)p_usart) {
  401cce:	687b      	ldr	r3, [r7, #4]
  401cd0:	4a43      	ldr	r2, [pc, #268]	; (401de0 <usart_serial_init+0x14c>)
  401cd2:	4293      	cmp	r3, r2
  401cd4:	d108      	bne.n	401ce8 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  401cd6:	2007      	movs	r0, #7
  401cd8:	4b42      	ldr	r3, [pc, #264]	; (401de4 <usart_serial_init+0x150>)
  401cda:	4798      	blx	r3
		uart_init((Uart*)p_usart, &uart_settings);
  401cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401ce0:	4619      	mov	r1, r3
  401ce2:	6878      	ldr	r0, [r7, #4]
  401ce4:	4b40      	ldr	r3, [pc, #256]	; (401de8 <usart_serial_init+0x154>)
  401ce6:	4798      	blx	r3
	if (UART1 == (Uart*)p_usart) {
  401ce8:	687b      	ldr	r3, [r7, #4]
  401cea:	4a40      	ldr	r2, [pc, #256]	; (401dec <usart_serial_init+0x158>)
  401cec:	4293      	cmp	r3, r2
  401cee:	d108      	bne.n	401d02 <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  401cf0:	2008      	movs	r0, #8
  401cf2:	4b3c      	ldr	r3, [pc, #240]	; (401de4 <usart_serial_init+0x150>)
  401cf4:	4798      	blx	r3
		uart_init((Uart*)p_usart, &uart_settings);
  401cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401cfa:	4619      	mov	r1, r3
  401cfc:	6878      	ldr	r0, [r7, #4]
  401cfe:	4b3a      	ldr	r3, [pc, #232]	; (401de8 <usart_serial_init+0x154>)
  401d00:	4798      	blx	r3
	if (UART2 == (Uart*)p_usart) {
  401d02:	687b      	ldr	r3, [r7, #4]
  401d04:	4a3a      	ldr	r2, [pc, #232]	; (401df0 <usart_serial_init+0x15c>)
  401d06:	4293      	cmp	r3, r2
  401d08:	d108      	bne.n	401d1c <usart_serial_init+0x88>
		sysclk_enable_peripheral_clock(ID_UART2);
  401d0a:	202c      	movs	r0, #44	; 0x2c
  401d0c:	4b35      	ldr	r3, [pc, #212]	; (401de4 <usart_serial_init+0x150>)
  401d0e:	4798      	blx	r3
		uart_init((Uart*)p_usart, &uart_settings);
  401d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401d14:	4619      	mov	r1, r3
  401d16:	6878      	ldr	r0, [r7, #4]
  401d18:	4b33      	ldr	r3, [pc, #204]	; (401de8 <usart_serial_init+0x154>)
  401d1a:	4798      	blx	r3
	if (UART3 == (Uart*)p_usart) {
  401d1c:	687b      	ldr	r3, [r7, #4]
  401d1e:	4a35      	ldr	r2, [pc, #212]	; (401df4 <usart_serial_init+0x160>)
  401d20:	4293      	cmp	r3, r2
  401d22:	d108      	bne.n	401d36 <usart_serial_init+0xa2>
		sysclk_enable_peripheral_clock(ID_UART3);
  401d24:	202d      	movs	r0, #45	; 0x2d
  401d26:	4b2f      	ldr	r3, [pc, #188]	; (401de4 <usart_serial_init+0x150>)
  401d28:	4798      	blx	r3
		uart_init((Uart*)p_usart, &uart_settings);
  401d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401d2e:	4619      	mov	r1, r3
  401d30:	6878      	ldr	r0, [r7, #4]
  401d32:	4b2d      	ldr	r3, [pc, #180]	; (401de8 <usart_serial_init+0x154>)
  401d34:	4798      	blx	r3
	if (UART4 == (Uart*)p_usart) {
  401d36:	687b      	ldr	r3, [r7, #4]
  401d38:	4a2f      	ldr	r2, [pc, #188]	; (401df8 <usart_serial_init+0x164>)
  401d3a:	4293      	cmp	r3, r2
  401d3c:	d108      	bne.n	401d50 <usart_serial_init+0xbc>
		sysclk_enable_peripheral_clock(ID_UART4);
  401d3e:	202e      	movs	r0, #46	; 0x2e
  401d40:	4b28      	ldr	r3, [pc, #160]	; (401de4 <usart_serial_init+0x150>)
  401d42:	4798      	blx	r3
		uart_init((Uart*)p_usart, &uart_settings);
  401d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401d48:	4619      	mov	r1, r3
  401d4a:	6878      	ldr	r0, [r7, #4]
  401d4c:	4b26      	ldr	r3, [pc, #152]	; (401de8 <usart_serial_init+0x154>)
  401d4e:	4798      	blx	r3
	if (USART0 == p_usart) {
  401d50:	687b      	ldr	r3, [r7, #4]
  401d52:	4a2a      	ldr	r2, [pc, #168]	; (401dfc <usart_serial_init+0x168>)
  401d54:	4293      	cmp	r3, r2
  401d56:	d111      	bne.n	401d7c <usart_serial_init+0xe8>
		sysclk_enable_peripheral_clock(ID_USART0);
  401d58:	200d      	movs	r0, #13
  401d5a:	4b22      	ldr	r3, [pc, #136]	; (401de4 <usart_serial_init+0x150>)
  401d5c:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  401d5e:	4b1f      	ldr	r3, [pc, #124]	; (401ddc <usart_serial_init+0x148>)
  401d60:	4798      	blx	r3
  401d62:	4602      	mov	r2, r0
  401d64:	f107 030c 	add.w	r3, r7, #12
  401d68:	4619      	mov	r1, r3
  401d6a:	6878      	ldr	r0, [r7, #4]
  401d6c:	4b24      	ldr	r3, [pc, #144]	; (401e00 <usart_serial_init+0x16c>)
  401d6e:	4798      	blx	r3
		usart_enable_tx(p_usart);
  401d70:	6878      	ldr	r0, [r7, #4]
  401d72:	4b24      	ldr	r3, [pc, #144]	; (401e04 <usart_serial_init+0x170>)
  401d74:	4798      	blx	r3
		usart_enable_rx(p_usart);
  401d76:	6878      	ldr	r0, [r7, #4]
  401d78:	4b23      	ldr	r3, [pc, #140]	; (401e08 <usart_serial_init+0x174>)
  401d7a:	4798      	blx	r3
	if (USART1 == p_usart) {
  401d7c:	687b      	ldr	r3, [r7, #4]
  401d7e:	4a23      	ldr	r2, [pc, #140]	; (401e0c <usart_serial_init+0x178>)
  401d80:	4293      	cmp	r3, r2
  401d82:	d111      	bne.n	401da8 <usart_serial_init+0x114>
		sysclk_enable_peripheral_clock(ID_USART1);
  401d84:	200e      	movs	r0, #14
  401d86:	4b17      	ldr	r3, [pc, #92]	; (401de4 <usart_serial_init+0x150>)
  401d88:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  401d8a:	4b14      	ldr	r3, [pc, #80]	; (401ddc <usart_serial_init+0x148>)
  401d8c:	4798      	blx	r3
  401d8e:	4602      	mov	r2, r0
  401d90:	f107 030c 	add.w	r3, r7, #12
  401d94:	4619      	mov	r1, r3
  401d96:	6878      	ldr	r0, [r7, #4]
  401d98:	4b19      	ldr	r3, [pc, #100]	; (401e00 <usart_serial_init+0x16c>)
  401d9a:	4798      	blx	r3
		usart_enable_tx(p_usart);
  401d9c:	6878      	ldr	r0, [r7, #4]
  401d9e:	4b19      	ldr	r3, [pc, #100]	; (401e04 <usart_serial_init+0x170>)
  401da0:	4798      	blx	r3
		usart_enable_rx(p_usart);
  401da2:	6878      	ldr	r0, [r7, #4]
  401da4:	4b18      	ldr	r3, [pc, #96]	; (401e08 <usart_serial_init+0x174>)
  401da6:	4798      	blx	r3
	if (USART2 == p_usart) {
  401da8:	687b      	ldr	r3, [r7, #4]
  401daa:	4a19      	ldr	r2, [pc, #100]	; (401e10 <usart_serial_init+0x17c>)
  401dac:	4293      	cmp	r3, r2
  401dae:	d111      	bne.n	401dd4 <usart_serial_init+0x140>
		sysclk_enable_peripheral_clock(ID_USART2);
  401db0:	200f      	movs	r0, #15
  401db2:	4b0c      	ldr	r3, [pc, #48]	; (401de4 <usart_serial_init+0x150>)
  401db4:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  401db6:	4b09      	ldr	r3, [pc, #36]	; (401ddc <usart_serial_init+0x148>)
  401db8:	4798      	blx	r3
  401dba:	4602      	mov	r2, r0
  401dbc:	f107 030c 	add.w	r3, r7, #12
  401dc0:	4619      	mov	r1, r3
  401dc2:	6878      	ldr	r0, [r7, #4]
  401dc4:	4b0e      	ldr	r3, [pc, #56]	; (401e00 <usart_serial_init+0x16c>)
  401dc6:	4798      	blx	r3
		usart_enable_tx(p_usart);
  401dc8:	6878      	ldr	r0, [r7, #4]
  401dca:	4b0e      	ldr	r3, [pc, #56]	; (401e04 <usart_serial_init+0x170>)
  401dcc:	4798      	blx	r3
		usart_enable_rx(p_usart);
  401dce:	6878      	ldr	r0, [r7, #4]
  401dd0:	4b0d      	ldr	r3, [pc, #52]	; (401e08 <usart_serial_init+0x174>)
  401dd2:	4798      	blx	r3
}
  401dd4:	bf00      	nop
  401dd6:	3730      	adds	r7, #48	; 0x30
  401dd8:	46bd      	mov	sp, r7
  401dda:	bd80      	pop	{r7, pc}
  401ddc:	00401c65 	.word	0x00401c65
  401de0:	400e0800 	.word	0x400e0800
  401de4:	00401c79 	.word	0x00401c79
  401de8:	004005bd 	.word	0x004005bd
  401dec:	400e0a00 	.word	0x400e0a00
  401df0:	400e1a00 	.word	0x400e1a00
  401df4:	400e1c00 	.word	0x400e1c00
  401df8:	400e1e00 	.word	0x400e1e00
  401dfc:	40024000 	.word	0x40024000
  401e00:	004002c9 	.word	0x004002c9
  401e04:	0040034d 	.word	0x0040034d
  401e08:	00400381 	.word	0x00400381
  401e0c:	40028000 	.word	0x40028000
  401e10:	4002c000 	.word	0x4002c000

00401e14 <SysTick_Handler>:
	-0x79b, -0x76f, -0x73c, -0x702, -0x6c0, -0x678, -0x629, -0x5d4, -0x579, -0x519,
	-0x4b3, -0x449, -0x3da, -0x367, -0x2f1, -0x278, -0x1fd, -0x17f, -0x100, -0x080
};


void SysTick_Handler() {
  401e14:	b580      	push	{r7, lr}
  401e16:	b082      	sub	sp, #8
  401e18:	af00      	add	r7, sp, #0
	g_systimer++;
  401e1a:	4b22      	ldr	r3, [pc, #136]	; (401ea4 <SysTick_Handler+0x90>)
  401e1c:	681b      	ldr	r3, [r3, #0]
  401e1e:	3301      	adds	r3, #1
  401e20:	4a20      	ldr	r2, [pc, #128]	; (401ea4 <SysTick_Handler+0x90>)
  401e22:	6013      	str	r3, [r2, #0]
	
	//Coisas do dac
	uint32_t status;
	uint32_t dac_val;
	
	status = dacc_get_interrupt_status(DACC_BASE);
  401e24:	4820      	ldr	r0, [pc, #128]	; (401ea8 <SysTick_Handler+0x94>)
  401e26:	4b21      	ldr	r3, [pc, #132]	; (401eac <SysTick_Handler+0x98>)
  401e28:	4798      	blx	r3
  401e2a:	6078      	str	r0, [r7, #4]

	/* If ready for new data */
	if ((status & DACC_ISR_TXRDY0) == DACC_ISR_TXRDY0) {
  401e2c:	687b      	ldr	r3, [r7, #4]
  401e2e:	f003 0301 	and.w	r3, r3, #1
  401e32:	2b00      	cmp	r3, #0
  401e34:	d031      	beq.n	401e9a <SysTick_Handler+0x86>
		g_ul_index_sample++;
  401e36:	4b1e      	ldr	r3, [pc, #120]	; (401eb0 <SysTick_Handler+0x9c>)
  401e38:	681b      	ldr	r3, [r3, #0]
  401e3a:	3301      	adds	r3, #1
  401e3c:	4a1c      	ldr	r2, [pc, #112]	; (401eb0 <SysTick_Handler+0x9c>)
  401e3e:	6013      	str	r3, [r2, #0]
		if (g_ul_index_sample >= SAMPLES) {
  401e40:	4b1b      	ldr	r3, [pc, #108]	; (401eb0 <SysTick_Handler+0x9c>)
  401e42:	681b      	ldr	r3, [r3, #0]
  401e44:	2b63      	cmp	r3, #99	; 0x63
  401e46:	d902      	bls.n	401e4e <SysTick_Handler+0x3a>
			g_ul_index_sample = 0;
  401e48:	4b19      	ldr	r3, [pc, #100]	; (401eb0 <SysTick_Handler+0x9c>)
  401e4a:	2200      	movs	r2, #0
  401e4c:	601a      	str	r2, [r3, #0]
		}
		dac_val = g_uc_wave_sel ?
  401e4e:	4b19      	ldr	r3, [pc, #100]	; (401eb4 <SysTick_Handler+0xa0>)
  401e50:	781b      	ldrb	r3, [r3, #0]
				((g_ul_index_sample > SAMPLES / 2) ? 0 : MAX_AMPLITUDE)
				: wave_to_dacc(gc_us_sine_data[g_ul_index_sample],
  401e52:	2b00      	cmp	r3, #0
  401e54:	d008      	beq.n	401e68 <SysTick_Handler+0x54>
				((g_ul_index_sample > SAMPLES / 2) ? 0 : MAX_AMPLITUDE)
  401e56:	4b16      	ldr	r3, [pc, #88]	; (401eb0 <SysTick_Handler+0x9c>)
  401e58:	681b      	ldr	r3, [r3, #0]
				: wave_to_dacc(gc_us_sine_data[g_ul_index_sample],
  401e5a:	2b32      	cmp	r3, #50	; 0x32
  401e5c:	d901      	bls.n	401e62 <SysTick_Handler+0x4e>
  401e5e:	2300      	movs	r3, #0
  401e60:	e015      	b.n	401e8e <SysTick_Handler+0x7a>
  401e62:	f640 73ff 	movw	r3, #4095	; 0xfff
  401e66:	e012      	b.n	401e8e <SysTick_Handler+0x7a>
  401e68:	4b11      	ldr	r3, [pc, #68]	; (401eb0 <SysTick_Handler+0x9c>)
  401e6a:	681b      	ldr	r3, [r3, #0]
  401e6c:	4a12      	ldr	r2, [pc, #72]	; (401eb8 <SysTick_Handler+0xa4>)
  401e6e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
  401e72:	461a      	mov	r2, r3
  401e74:	4b11      	ldr	r3, [pc, #68]	; (401ebc <SysTick_Handler+0xa8>)
  401e76:	681b      	ldr	r3, [r3, #0]
  401e78:	fb03 f302 	mul.w	r3, r3, r2
  401e7c:	4a10      	ldr	r2, [pc, #64]	; (401ec0 <SysTick_Handler+0xac>)
  401e7e:	fb82 1203 	smull	r1, r2, r2, r3
  401e82:	441a      	add	r2, r3
  401e84:	12d2      	asrs	r2, r2, #11
  401e86:	17db      	asrs	r3, r3, #31
  401e88:	1ad3      	subs	r3, r2, r3
  401e8a:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
		dac_val = g_uc_wave_sel ?
  401e8e:	603b      	str	r3, [r7, #0]
					 g_l_amplitude,
					 MAX_DIGITAL * 2, MAX_AMPLITUDE);

		dacc_write_conversion_data(DACC_BASE, dac_val, DACC_CHANNEL);
  401e90:	2200      	movs	r2, #0
  401e92:	6839      	ldr	r1, [r7, #0]
  401e94:	4804      	ldr	r0, [pc, #16]	; (401ea8 <SysTick_Handler+0x94>)
  401e96:	4b0b      	ldr	r3, [pc, #44]	; (401ec4 <SysTick_Handler+0xb0>)
  401e98:	4798      	blx	r3

	}
}
  401e9a:	bf00      	nop
  401e9c:	3708      	adds	r7, #8
  401e9e:	46bd      	mov	sp, r7
  401ea0:	bd80      	pop	{r7, pc}
  401ea2:	bf00      	nop
  401ea4:	20400a58 	.word	0x20400a58
  401ea8:	40040000 	.word	0x40040000
  401eac:	004001ad 	.word	0x004001ad
  401eb0:	20400a68 	.word	0x20400a68
  401eb4:	20400a70 	.word	0x20400a70
  401eb8:	00406f5c 	.word	0x00406f5c
  401ebc:	20400a6c 	.word	0x20400a6c
  401ec0:	80100201 	.word	0x80100201
  401ec4:	004001c5 	.word	0x004001c5

00401ec8 <usart_put_string>:

void usart_put_string(Usart *usart, char str[]) {
  401ec8:	b580      	push	{r7, lr}
  401eca:	b082      	sub	sp, #8
  401ecc:	af00      	add	r7, sp, #0
  401ece:	6078      	str	r0, [r7, #4]
  401ed0:	6039      	str	r1, [r7, #0]
	usart_serial_write_packet(usart, str, strlen(str));
  401ed2:	6838      	ldr	r0, [r7, #0]
  401ed4:	4b05      	ldr	r3, [pc, #20]	; (401eec <usart_put_string+0x24>)
  401ed6:	4798      	blx	r3
  401ed8:	4603      	mov	r3, r0
  401eda:	461a      	mov	r2, r3
  401edc:	6839      	ldr	r1, [r7, #0]
  401ede:	6878      	ldr	r0, [r7, #4]
  401ee0:	4b03      	ldr	r3, [pc, #12]	; (401ef0 <usart_put_string+0x28>)
  401ee2:	4798      	blx	r3
}
  401ee4:	bf00      	nop
  401ee6:	3708      	adds	r7, #8
  401ee8:	46bd      	mov	sp, r7
  401eea:	bd80      	pop	{r7, pc}
  401eec:	00402a41 	.word	0x00402a41
  401ef0:	00400581 	.word	0x00400581

00401ef4 <usart_get_string>:

int usart_get_string(Usart *usart, char buffer[], int bufferlen, int timeout_ms) {
  401ef4:	b580      	push	{r7, lr}
  401ef6:	b088      	sub	sp, #32
  401ef8:	af00      	add	r7, sp, #0
  401efa:	60f8      	str	r0, [r7, #12]
  401efc:	60b9      	str	r1, [r7, #8]
  401efe:	607a      	str	r2, [r7, #4]
  401f00:	603b      	str	r3, [r7, #0]
	long timestart = g_systimer;
  401f02:	4b17      	ldr	r3, [pc, #92]	; (401f60 <usart_get_string+0x6c>)
  401f04:	681b      	ldr	r3, [r3, #0]
  401f06:	61bb      	str	r3, [r7, #24]
	uint32_t rx;
	uint32_t counter = 0;
  401f08:	2300      	movs	r3, #0
  401f0a:	61fb      	str	r3, [r7, #28]
	
	while(g_systimer - timestart < timeout_ms && counter < bufferlen - 1) {
  401f0c:	e010      	b.n	401f30 <usart_get_string+0x3c>
		if(usart_read(usart, &rx) == 0) {
  401f0e:	f107 0314 	add.w	r3, r7, #20
  401f12:	4619      	mov	r1, r3
  401f14:	68f8      	ldr	r0, [r7, #12]
  401f16:	4b13      	ldr	r3, [pc, #76]	; (401f64 <usart_get_string+0x70>)
  401f18:	4798      	blx	r3
  401f1a:	4603      	mov	r3, r0
  401f1c:	2b00      	cmp	r3, #0
  401f1e:	d107      	bne.n	401f30 <usart_get_string+0x3c>
			//timestart = g_systimer; // reset timeout
			buffer[counter++] = rx;
  401f20:	69fb      	ldr	r3, [r7, #28]
  401f22:	1c5a      	adds	r2, r3, #1
  401f24:	61fa      	str	r2, [r7, #28]
  401f26:	68ba      	ldr	r2, [r7, #8]
  401f28:	4413      	add	r3, r2
  401f2a:	697a      	ldr	r2, [r7, #20]
  401f2c:	b2d2      	uxtb	r2, r2
  401f2e:	701a      	strb	r2, [r3, #0]
	while(g_systimer - timestart < timeout_ms && counter < bufferlen - 1) {
  401f30:	4b0b      	ldr	r3, [pc, #44]	; (401f60 <usart_get_string+0x6c>)
  401f32:	681a      	ldr	r2, [r3, #0]
  401f34:	69bb      	ldr	r3, [r7, #24]
  401f36:	1ad2      	subs	r2, r2, r3
  401f38:	683b      	ldr	r3, [r7, #0]
  401f3a:	429a      	cmp	r2, r3
  401f3c:	d205      	bcs.n	401f4a <usart_get_string+0x56>
  401f3e:	687b      	ldr	r3, [r7, #4]
  401f40:	3b01      	subs	r3, #1
  401f42:	461a      	mov	r2, r3
  401f44:	69fb      	ldr	r3, [r7, #28]
  401f46:	429a      	cmp	r2, r3
  401f48:	d8e1      	bhi.n	401f0e <usart_get_string+0x1a>
		}
	}
	buffer[counter] = 0x00;
  401f4a:	68ba      	ldr	r2, [r7, #8]
  401f4c:	69fb      	ldr	r3, [r7, #28]
  401f4e:	4413      	add	r3, r2
  401f50:	2200      	movs	r2, #0
  401f52:	701a      	strb	r2, [r3, #0]
	return counter;
  401f54:	69fb      	ldr	r3, [r7, #28]
}
  401f56:	4618      	mov	r0, r3
  401f58:	3720      	adds	r7, #32
  401f5a:	46bd      	mov	sp, r7
  401f5c:	bd80      	pop	{r7, pc}
  401f5e:	bf00      	nop
  401f60:	20400a58 	.word	0x20400a58
  401f64:	0040041f 	.word	0x0040041f

00401f68 <usart_send_command>:

void usart_send_command(Usart *usart, char buffer_rx[], int bufferlen, char buffer_tx[], int timeout) {
  401f68:	b590      	push	{r4, r7, lr}
  401f6a:	b085      	sub	sp, #20
  401f6c:	af00      	add	r7, sp, #0
  401f6e:	60f8      	str	r0, [r7, #12]
  401f70:	60b9      	str	r1, [r7, #8]
  401f72:	607a      	str	r2, [r7, #4]
  401f74:	603b      	str	r3, [r7, #0]
	usart_put_string(usart, buffer_tx);
  401f76:	6839      	ldr	r1, [r7, #0]
  401f78:	68f8      	ldr	r0, [r7, #12]
  401f7a:	4b06      	ldr	r3, [pc, #24]	; (401f94 <usart_send_command+0x2c>)
  401f7c:	4798      	blx	r3
	usart_get_string(usart, buffer_rx, bufferlen, timeout);
  401f7e:	6a3b      	ldr	r3, [r7, #32]
  401f80:	687a      	ldr	r2, [r7, #4]
  401f82:	68b9      	ldr	r1, [r7, #8]
  401f84:	68f8      	ldr	r0, [r7, #12]
  401f86:	4c04      	ldr	r4, [pc, #16]	; (401f98 <usart_send_command+0x30>)
  401f88:	47a0      	blx	r4
}
  401f8a:	bf00      	nop
  401f8c:	3714      	adds	r7, #20
  401f8e:	46bd      	mov	sp, r7
  401f90:	bd90      	pop	{r4, r7, pc}
  401f92:	bf00      	nop
  401f94:	00401ec9 	.word	0x00401ec9
  401f98:	00401ef5 	.word	0x00401ef5

00401f9c <usart_log>:

void usart_log(char* name, char* log) {
  401f9c:	b580      	push	{r7, lr}
  401f9e:	b082      	sub	sp, #8
  401fa0:	af00      	add	r7, sp, #0
  401fa2:	6078      	str	r0, [r7, #4]
  401fa4:	6039      	str	r1, [r7, #0]
	usart_put_string(USART1, "[");
  401fa6:	490c      	ldr	r1, [pc, #48]	; (401fd8 <usart_log+0x3c>)
  401fa8:	480c      	ldr	r0, [pc, #48]	; (401fdc <usart_log+0x40>)
  401faa:	4b0d      	ldr	r3, [pc, #52]	; (401fe0 <usart_log+0x44>)
  401fac:	4798      	blx	r3
	usart_put_string(USART1, name);
  401fae:	6879      	ldr	r1, [r7, #4]
  401fb0:	480a      	ldr	r0, [pc, #40]	; (401fdc <usart_log+0x40>)
  401fb2:	4b0b      	ldr	r3, [pc, #44]	; (401fe0 <usart_log+0x44>)
  401fb4:	4798      	blx	r3
	usart_put_string(USART1, "] ");
  401fb6:	490b      	ldr	r1, [pc, #44]	; (401fe4 <usart_log+0x48>)
  401fb8:	4808      	ldr	r0, [pc, #32]	; (401fdc <usart_log+0x40>)
  401fba:	4b09      	ldr	r3, [pc, #36]	; (401fe0 <usart_log+0x44>)
  401fbc:	4798      	blx	r3
	usart_put_string(USART1, log);
  401fbe:	6839      	ldr	r1, [r7, #0]
  401fc0:	4806      	ldr	r0, [pc, #24]	; (401fdc <usart_log+0x40>)
  401fc2:	4b07      	ldr	r3, [pc, #28]	; (401fe0 <usart_log+0x44>)
  401fc4:	4798      	blx	r3
	usart_put_string(USART1, "\r\n");
  401fc6:	4908      	ldr	r1, [pc, #32]	; (401fe8 <usart_log+0x4c>)
  401fc8:	4804      	ldr	r0, [pc, #16]	; (401fdc <usart_log+0x40>)
  401fca:	4b05      	ldr	r3, [pc, #20]	; (401fe0 <usart_log+0x44>)
  401fcc:	4798      	blx	r3
}
  401fce:	bf00      	nop
  401fd0:	3708      	adds	r7, #8
  401fd2:	46bd      	mov	sp, r7
  401fd4:	bd80      	pop	{r7, pc}
  401fd6:	bf00      	nop
  401fd8:	00407024 	.word	0x00407024
  401fdc:	40028000 	.word	0x40028000
  401fe0:	00401ec9 	.word	0x00401ec9
  401fe4:	00407028 	.word	0x00407028
  401fe8:	0040702c 	.word	0x0040702c

00401fec <config_console>:

void config_console(void) {
  401fec:	b580      	push	{r7, lr}
  401fee:	b084      	sub	sp, #16
  401ff0:	af00      	add	r7, sp, #0
	usart_serial_options_t config;
	config.baudrate = 115200;
  401ff2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  401ff6:	603b      	str	r3, [r7, #0]
	config.charlength = US_MR_CHRL_8_BIT;
  401ff8:	23c0      	movs	r3, #192	; 0xc0
  401ffa:	607b      	str	r3, [r7, #4]
	config.paritytype = US_MR_PAR_NO;
  401ffc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402000:	60bb      	str	r3, [r7, #8]
	config.stopbits = false;
  402002:	2300      	movs	r3, #0
  402004:	60fb      	str	r3, [r7, #12]
	usart_serial_init(USART1, &config);
  402006:	463b      	mov	r3, r7
  402008:	4619      	mov	r1, r3
  40200a:	4806      	ldr	r0, [pc, #24]	; (402024 <config_console+0x38>)
  40200c:	4b06      	ldr	r3, [pc, #24]	; (402028 <config_console+0x3c>)
  40200e:	4798      	blx	r3
	usart_enable_tx(USART1);
  402010:	4804      	ldr	r0, [pc, #16]	; (402024 <config_console+0x38>)
  402012:	4b06      	ldr	r3, [pc, #24]	; (40202c <config_console+0x40>)
  402014:	4798      	blx	r3
	usart_enable_rx(USART1);
  402016:	4803      	ldr	r0, [pc, #12]	; (402024 <config_console+0x38>)
  402018:	4b05      	ldr	r3, [pc, #20]	; (402030 <config_console+0x44>)
  40201a:	4798      	blx	r3
}
  40201c:	bf00      	nop
  40201e:	3710      	adds	r7, #16
  402020:	46bd      	mov	sp, r7
  402022:	bd80      	pop	{r7, pc}
  402024:	40028000 	.word	0x40028000
  402028:	00401c95 	.word	0x00401c95
  40202c:	0040034d 	.word	0x0040034d
  402030:	00400381 	.word	0x00400381

00402034 <hm10_config_client>:

void hm10_config_client(void) {
  402034:	b590      	push	{r4, r7, lr}
  402036:	b085      	sub	sp, #20
  402038:	af00      	add	r7, sp, #0
	usart_serial_options_t config;
	config.baudrate = 9600;
  40203a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  40203e:	603b      	str	r3, [r7, #0]
	config.charlength = US_MR_CHRL_8_BIT;
  402040:	23c0      	movs	r3, #192	; 0xc0
  402042:	607b      	str	r3, [r7, #4]
	config.paritytype = US_MR_PAR_NO;
  402044:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402048:	60bb      	str	r3, [r7, #8]
	config.stopbits = false;
  40204a:	2300      	movs	r3, #0
  40204c:	60fb      	str	r3, [r7, #12]
	usart_serial_init(UART3, &config);
  40204e:	463b      	mov	r3, r7
  402050:	4619      	mov	r1, r3
  402052:	480e      	ldr	r0, [pc, #56]	; (40208c <hm10_config_client+0x58>)
  402054:	4b0e      	ldr	r3, [pc, #56]	; (402090 <hm10_config_client+0x5c>)
  402056:	4798      	blx	r3
	usart_enable_tx(UART3);
  402058:	480c      	ldr	r0, [pc, #48]	; (40208c <hm10_config_client+0x58>)
  40205a:	4b0e      	ldr	r3, [pc, #56]	; (402094 <hm10_config_client+0x60>)
  40205c:	4798      	blx	r3
	usart_enable_rx(UART3);
  40205e:	480b      	ldr	r0, [pc, #44]	; (40208c <hm10_config_client+0x58>)
  402060:	4b0d      	ldr	r3, [pc, #52]	; (402098 <hm10_config_client+0x64>)
  402062:	4798      	blx	r3
	
	// RX - PD28 TX - PD30
	pio_configure(PIOD, PIO_PERIPH_A, (1 << 28), PIO_DEFAULT);
  402064:	2300      	movs	r3, #0
  402066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40206a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40206e:	480b      	ldr	r0, [pc, #44]	; (40209c <hm10_config_client+0x68>)
  402070:	4c0b      	ldr	r4, [pc, #44]	; (4020a0 <hm10_config_client+0x6c>)
  402072:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_A, (1 << 30), PIO_DEFAULT);
  402074:	2300      	movs	r3, #0
  402076:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40207a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40207e:	4807      	ldr	r0, [pc, #28]	; (40209c <hm10_config_client+0x68>)
  402080:	4c07      	ldr	r4, [pc, #28]	; (4020a0 <hm10_config_client+0x6c>)
  402082:	47a0      	blx	r4
}
  402084:	bf00      	nop
  402086:	3714      	adds	r7, #20
  402088:	46bd      	mov	sp, r7
  40208a:	bd90      	pop	{r4, r7, pc}
  40208c:	400e1c00 	.word	0x400e1c00
  402090:	00401c95 	.word	0x00401c95
  402094:	0040034d 	.word	0x0040034d
  402098:	00400381 	.word	0x00400381
  40209c:	400e1400 	.word	0x400e1400
  4020a0:	00401089 	.word	0x00401089

004020a4 <hm10_client_init>:

int hm10_client_init(void) {
  4020a4:	b590      	push	{r4, r7, lr}
  4020a6:	b0a3      	sub	sp, #140	; 0x8c
  4020a8:	af02      	add	r7, sp, #8
	char buffer_rx[128];
	usart_send_command(UART3, buffer_rx, 1000, "AT", 200);
  4020aa:	4639      	mov	r1, r7
  4020ac:	23c8      	movs	r3, #200	; 0xc8
  4020ae:	9300      	str	r3, [sp, #0]
  4020b0:	4b40      	ldr	r3, [pc, #256]	; (4021b4 <hm10_client_init+0x110>)
  4020b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4020b6:	4840      	ldr	r0, [pc, #256]	; (4021b8 <hm10_client_init+0x114>)
  4020b8:	4c40      	ldr	r4, [pc, #256]	; (4021bc <hm10_client_init+0x118>)
  4020ba:	47a0      	blx	r4
	usart_send_command(UART3, buffer_rx, 1000, "AT", 200);
  4020bc:	4639      	mov	r1, r7
  4020be:	23c8      	movs	r3, #200	; 0xc8
  4020c0:	9300      	str	r3, [sp, #0]
  4020c2:	4b3c      	ldr	r3, [pc, #240]	; (4021b4 <hm10_client_init+0x110>)
  4020c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4020c8:	483b      	ldr	r0, [pc, #236]	; (4021b8 <hm10_client_init+0x114>)
  4020ca:	4c3c      	ldr	r4, [pc, #240]	; (4021bc <hm10_client_init+0x118>)
  4020cc:	47a0      	blx	r4
	usart_send_command(UART3, buffer_rx, 1000, "AT", 200);
  4020ce:	4639      	mov	r1, r7
  4020d0:	23c8      	movs	r3, #200	; 0xc8
  4020d2:	9300      	str	r3, [sp, #0]
  4020d4:	4b37      	ldr	r3, [pc, #220]	; (4021b4 <hm10_client_init+0x110>)
  4020d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4020da:	4837      	ldr	r0, [pc, #220]	; (4021b8 <hm10_client_init+0x114>)
  4020dc:	4c37      	ldr	r4, [pc, #220]	; (4021bc <hm10_client_init+0x118>)
  4020de:	47a0      	blx	r4
	usart_send_command(UART3, buffer_rx, 1000, "AT+RESET", 400);
  4020e0:	4639      	mov	r1, r7
  4020e2:	f44f 73c8 	mov.w	r3, #400	; 0x190
  4020e6:	9300      	str	r3, [sp, #0]
  4020e8:	4b35      	ldr	r3, [pc, #212]	; (4021c0 <hm10_client_init+0x11c>)
  4020ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4020ee:	4832      	ldr	r0, [pc, #200]	; (4021b8 <hm10_client_init+0x114>)
  4020f0:	4c32      	ldr	r4, [pc, #200]	; (4021bc <hm10_client_init+0x118>)
  4020f2:	47a0      	blx	r4
	usart_send_command(UART3, buffer_rx, 1000, "AT+NAMEClient", 400);
  4020f4:	4639      	mov	r1, r7
  4020f6:	f44f 73c8 	mov.w	r3, #400	; 0x190
  4020fa:	9300      	str	r3, [sp, #0]
  4020fc:	4b31      	ldr	r3, [pc, #196]	; (4021c4 <hm10_client_init+0x120>)
  4020fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  402102:	482d      	ldr	r0, [pc, #180]	; (4021b8 <hm10_client_init+0x114>)
  402104:	4c2d      	ldr	r4, [pc, #180]	; (4021bc <hm10_client_init+0x118>)
  402106:	47a0      	blx	r4
	usart_log("hm10_client_init", buffer_rx);
  402108:	463b      	mov	r3, r7
  40210a:	4619      	mov	r1, r3
  40210c:	482e      	ldr	r0, [pc, #184]	; (4021c8 <hm10_client_init+0x124>)
  40210e:	4b2f      	ldr	r3, [pc, #188]	; (4021cc <hm10_client_init+0x128>)
  402110:	4798      	blx	r3
	usart_send_command(UART3, buffer_rx, 1000, "AT+IMME1", 400);
  402112:	4639      	mov	r1, r7
  402114:	f44f 73c8 	mov.w	r3, #400	; 0x190
  402118:	9300      	str	r3, [sp, #0]
  40211a:	4b2d      	ldr	r3, [pc, #180]	; (4021d0 <hm10_client_init+0x12c>)
  40211c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  402120:	4825      	ldr	r0, [pc, #148]	; (4021b8 <hm10_client_init+0x114>)
  402122:	4c26      	ldr	r4, [pc, #152]	; (4021bc <hm10_client_init+0x118>)
  402124:	47a0      	blx	r4
	usart_log("hm10_client_init", buffer_rx);
  402126:	463b      	mov	r3, r7
  402128:	4619      	mov	r1, r3
  40212a:	4827      	ldr	r0, [pc, #156]	; (4021c8 <hm10_client_init+0x124>)
  40212c:	4b27      	ldr	r3, [pc, #156]	; (4021cc <hm10_client_init+0x128>)
  40212e:	4798      	blx	r3
	usart_send_command(UART3, buffer_rx, 1000, "AT+ROLE1", 400);
  402130:	4639      	mov	r1, r7
  402132:	f44f 73c8 	mov.w	r3, #400	; 0x190
  402136:	9300      	str	r3, [sp, #0]
  402138:	4b26      	ldr	r3, [pc, #152]	; (4021d4 <hm10_client_init+0x130>)
  40213a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40213e:	481e      	ldr	r0, [pc, #120]	; (4021b8 <hm10_client_init+0x114>)
  402140:	4c1e      	ldr	r4, [pc, #120]	; (4021bc <hm10_client_init+0x118>)
  402142:	47a0      	blx	r4
	usart_log("hm10_client_init", buffer_rx);
  402144:	463b      	mov	r3, r7
  402146:	4619      	mov	r1, r3
  402148:	481f      	ldr	r0, [pc, #124]	; (4021c8 <hm10_client_init+0x124>)
  40214a:	4b20      	ldr	r3, [pc, #128]	; (4021cc <hm10_client_init+0x128>)
  40214c:	4798      	blx	r3
	usart_send_command(UART3, buffer_rx, 1000, "AT+RESET", 800); // http://www.martyncurrey.com/hm-10-bluetooth-4ble-modules/
  40214e:	4639      	mov	r1, r7
  402150:	f44f 7348 	mov.w	r3, #800	; 0x320
  402154:	9300      	str	r3, [sp, #0]
  402156:	4b1a      	ldr	r3, [pc, #104]	; (4021c0 <hm10_client_init+0x11c>)
  402158:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40215c:	4816      	ldr	r0, [pc, #88]	; (4021b8 <hm10_client_init+0x114>)
  40215e:	4c17      	ldr	r4, [pc, #92]	; (4021bc <hm10_client_init+0x118>)
  402160:	47a0      	blx	r4
	usart_log("hm10_client_init", buffer_rx);
  402162:	463b      	mov	r3, r7
  402164:	4619      	mov	r1, r3
  402166:	4818      	ldr	r0, [pc, #96]	; (4021c8 <hm10_client_init+0x124>)
  402168:	4b18      	ldr	r3, [pc, #96]	; (4021cc <hm10_client_init+0x128>)
  40216a:	4798      	blx	r3
	usart_send_command(UART3, buffer_rx, 1000, "AT+DISC?", 1000); 
  40216c:	4639      	mov	r1, r7
  40216e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  402172:	9300      	str	r3, [sp, #0]
  402174:	4b18      	ldr	r3, [pc, #96]	; (4021d8 <hm10_client_init+0x134>)
  402176:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40217a:	480f      	ldr	r0, [pc, #60]	; (4021b8 <hm10_client_init+0x114>)
  40217c:	4c0f      	ldr	r4, [pc, #60]	; (4021bc <hm10_client_init+0x118>)
  40217e:	47a0      	blx	r4
	usart_log("hm10_client_init", buffer_rx);
  402180:	463b      	mov	r3, r7
  402182:	4619      	mov	r1, r3
  402184:	4810      	ldr	r0, [pc, #64]	; (4021c8 <hm10_client_init+0x124>)
  402186:	4b11      	ldr	r3, [pc, #68]	; (4021cc <hm10_client_init+0x128>)
  402188:	4798      	blx	r3
	usart_send_command(UART3, buffer_rx, 1000, "AT+COND43639D8BD1D", 1000); //D43639D8BD1D
  40218a:	4639      	mov	r1, r7
  40218c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  402190:	9300      	str	r3, [sp, #0]
  402192:	4b12      	ldr	r3, [pc, #72]	; (4021dc <hm10_client_init+0x138>)
  402194:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  402198:	4807      	ldr	r0, [pc, #28]	; (4021b8 <hm10_client_init+0x114>)
  40219a:	4c08      	ldr	r4, [pc, #32]	; (4021bc <hm10_client_init+0x118>)
  40219c:	47a0      	blx	r4
	usart_log("hm10_client_init", buffer_rx);
  40219e:	463b      	mov	r3, r7
  4021a0:	4619      	mov	r1, r3
  4021a2:	4809      	ldr	r0, [pc, #36]	; (4021c8 <hm10_client_init+0x124>)
  4021a4:	4b09      	ldr	r3, [pc, #36]	; (4021cc <hm10_client_init+0x128>)
  4021a6:	4798      	blx	r3
	
}
  4021a8:	bf00      	nop
  4021aa:	4618      	mov	r0, r3
  4021ac:	3784      	adds	r7, #132	; 0x84
  4021ae:	46bd      	mov	sp, r7
  4021b0:	bd90      	pop	{r4, r7, pc}
  4021b2:	bf00      	nop
  4021b4:	00407030 	.word	0x00407030
  4021b8:	400e1c00 	.word	0x400e1c00
  4021bc:	00401f69 	.word	0x00401f69
  4021c0:	00407034 	.word	0x00407034
  4021c4:	00407040 	.word	0x00407040
  4021c8:	00407050 	.word	0x00407050
  4021cc:	00401f9d 	.word	0x00401f9d
  4021d0:	00407064 	.word	0x00407064
  4021d4:	00407070 	.word	0x00407070
  4021d8:	0040707c 	.word	0x0040707c
  4021dc:	00407088 	.word	0x00407088

004021e0 <Encoder_init>:

void Encoder_init(void){
  4021e0:	b590      	push	{r4, r7, lr}
  4021e2:	b083      	sub	sp, #12
  4021e4:	af02      	add	r7, sp, #8
	/* config. pino CLK em modo de entrada */
	pmc_enable_periph_clk(EN_CLK_ID);
  4021e6:	2010      	movs	r0, #16
  4021e8:	4b10      	ldr	r3, [pc, #64]	; (40222c <Encoder_init+0x4c>)
  4021ea:	4798      	blx	r3
	pio_set_input(EN_CLK, EN_CLK_PIN_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  4021ec:	2209      	movs	r2, #9
  4021ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  4021f2:	480f      	ldr	r0, [pc, #60]	; (402230 <Encoder_init+0x50>)
  4021f4:	4b0f      	ldr	r3, [pc, #60]	; (402234 <Encoder_init+0x54>)
  4021f6:	4798      	blx	r3

	/* indica funcao (but_Handler) a ser chamada quando houver uma interrupo */
	pio_enable_interrupt(EN_CLK, EN_CLK_PIN_MASK);// INTERRUPCAO
  4021f8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  4021fc:	480c      	ldr	r0, [pc, #48]	; (402230 <Encoder_init+0x50>)
  4021fe:	4b0e      	ldr	r3, [pc, #56]	; (402238 <Encoder_init+0x58>)
  402200:	4798      	blx	r3
	pio_handler_set(EN_CLK,EN_CLK_ID, EN_CLK_PIN_MASK, PIO_IT_FALL_EDGE || PIO_IT_RISE_EDGE, Encoder_Handler);
  402202:	4b0e      	ldr	r3, [pc, #56]	; (40223c <Encoder_init+0x5c>)
  402204:	9300      	str	r3, [sp, #0]
  402206:	2301      	movs	r3, #1
  402208:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40220c:	2110      	movs	r1, #16
  40220e:	4808      	ldr	r0, [pc, #32]	; (402230 <Encoder_init+0x50>)
  402210:	4c0b      	ldr	r4, [pc, #44]	; (402240 <Encoder_init+0x60>)
  402212:	47a0      	blx	r4

	/* e configura sua prioridade  */
	NVIC_EnableIRQ(EN_CLK_ID);
  402214:	2010      	movs	r0, #16
  402216:	4b0b      	ldr	r3, [pc, #44]	; (402244 <Encoder_init+0x64>)
  402218:	4798      	blx	r3
	NVIC_SetPriority(EN_CLK_ID, 1);
  40221a:	2101      	movs	r1, #1
  40221c:	2010      	movs	r0, #16
  40221e:	4b0a      	ldr	r3, [pc, #40]	; (402248 <Encoder_init+0x68>)
  402220:	4798      	blx	r3
	
	}
  402222:	bf00      	nop
  402224:	3704      	adds	r7, #4
  402226:	46bd      	mov	sp, r7
  402228:	bd90      	pop	{r4, r7, pc}
  40222a:	bf00      	nop
  40222c:	004016b9 	.word	0x004016b9
  402230:	400e1400 	.word	0x400e1400
  402234:	00400fa5 	.word	0x00400fa5
  402238:	004011c1 	.word	0x004011c1
  40223c:	0040224d 	.word	0x0040224d
  402240:	004012dd 	.word	0x004012dd
  402244:	00401aed 	.word	0x00401aed
  402248:	00401b21 	.word	0x00401b21

0040224c <Encoder_Handler>:



static void Encoder_Handler(uint32_t id, uint32_t mask){
  40224c:	b580      	push	{r7, lr}
  40224e:	b08e      	sub	sp, #56	; 0x38
  402250:	af00      	add	r7, sp, #0
  402252:	6078      	str	r0, [r7, #4]
  402254:	6039      	str	r1, [r7, #0]
	
	char buffer[42];
	sprintf(buffer, "flag before %d \n", flag_encoder);
  402256:	4b21      	ldr	r3, [pc, #132]	; (4022dc <Encoder_Handler+0x90>)
  402258:	681a      	ldr	r2, [r3, #0]
  40225a:	f107 030c 	add.w	r3, r7, #12
  40225e:	4920      	ldr	r1, [pc, #128]	; (4022e0 <Encoder_Handler+0x94>)
  402260:	4618      	mov	r0, r3
  402262:	4b20      	ldr	r3, [pc, #128]	; (4022e4 <Encoder_Handler+0x98>)
  402264:	4798      	blx	r3
	usart_put_string(USART1, buffer);
  402266:	f107 030c 	add.w	r3, r7, #12
  40226a:	4619      	mov	r1, r3
  40226c:	481e      	ldr	r0, [pc, #120]	; (4022e8 <Encoder_Handler+0x9c>)
  40226e:	4b1f      	ldr	r3, [pc, #124]	; (4022ec <Encoder_Handler+0xa0>)
  402270:	4798      	blx	r3
			
	volatile uint8_t aVal = pio_get(EN_CLK, PIO_INPUT,  EN_CLK_PIN_MASK);// digitalRead(pinA)?
  402272:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  402276:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40227a:	481d      	ldr	r0, [pc, #116]	; (4022f0 <Encoder_Handler+0xa4>)
  40227c:	4b1d      	ldr	r3, [pc, #116]	; (4022f4 <Encoder_Handler+0xa8>)
  40227e:	4798      	blx	r3
  402280:	4603      	mov	r3, r0
  402282:	b2db      	uxtb	r3, r3
  402284:	72fb      	strb	r3, [r7, #11]
	
	if (pio_get(PIOD, PIO_INPUT,  EN_DT_PIN_MASK)!= aVal) { // Means pin A Changed first  We're Rotating Clockwise
  402286:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40228a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40228e:	4818      	ldr	r0, [pc, #96]	; (4022f0 <Encoder_Handler+0xa4>)
  402290:	4b18      	ldr	r3, [pc, #96]	; (4022f4 <Encoder_Handler+0xa8>)
  402292:	4798      	blx	r3
  402294:	4602      	mov	r2, r0
  402296:	7afb      	ldrb	r3, [r7, #11]
  402298:	b2db      	uxtb	r3, r3
  40229a:	429a      	cmp	r2, r3
  40229c:	d009      	beq.n	4022b2 <Encoder_Handler+0x66>
		if (encoderPosCount < 100){
  40229e:	4b16      	ldr	r3, [pc, #88]	; (4022f8 <Encoder_Handler+0xac>)
  4022a0:	681b      	ldr	r3, [r3, #0]
  4022a2:	2b63      	cmp	r3, #99	; 0x63
  4022a4:	dc0e      	bgt.n	4022c4 <Encoder_Handler+0x78>
			encoderPosCount++;
  4022a6:	4b14      	ldr	r3, [pc, #80]	; (4022f8 <Encoder_Handler+0xac>)
  4022a8:	681b      	ldr	r3, [r3, #0]
  4022aa:	3301      	adds	r3, #1
  4022ac:	4a12      	ldr	r2, [pc, #72]	; (4022f8 <Encoder_Handler+0xac>)
  4022ae:	6013      	str	r3, [r2, #0]
  4022b0:	e008      	b.n	4022c4 <Encoder_Handler+0x78>
		}
		
	}
	else if (encoderPosCount > 0){// Otherwise B changed first and we're moving CCW
  4022b2:	4b11      	ldr	r3, [pc, #68]	; (4022f8 <Encoder_Handler+0xac>)
  4022b4:	681b      	ldr	r3, [r3, #0]
  4022b6:	2b00      	cmp	r3, #0
  4022b8:	dd04      	ble.n	4022c4 <Encoder_Handler+0x78>
		encoderPosCount--;
  4022ba:	4b0f      	ldr	r3, [pc, #60]	; (4022f8 <Encoder_Handler+0xac>)
  4022bc:	681b      	ldr	r3, [r3, #0]
  4022be:	3b01      	subs	r3, #1
  4022c0:	4a0d      	ldr	r2, [pc, #52]	; (4022f8 <Encoder_Handler+0xac>)
  4022c2:	6013      	str	r3, [r2, #0]
		}
		
		
	flag_encoder = 1;
  4022c4:	4b05      	ldr	r3, [pc, #20]	; (4022dc <Encoder_Handler+0x90>)
  4022c6:	2201      	movs	r2, #1
  4022c8:	601a      	str	r2, [r3, #0]
	pinALast = aVal;
  4022ca:	7afb      	ldrb	r3, [r7, #11]
  4022cc:	b2db      	uxtb	r3, r3
  4022ce:	461a      	mov	r2, r3
  4022d0:	4b0a      	ldr	r3, [pc, #40]	; (4022fc <Encoder_Handler+0xb0>)
  4022d2:	601a      	str	r2, [r3, #0]
	
}
  4022d4:	bf00      	nop
  4022d6:	3738      	adds	r7, #56	; 0x38
  4022d8:	46bd      	mov	sp, r7
  4022da:	bd80      	pop	{r7, pc}
  4022dc:	20400a60 	.word	0x20400a60
  4022e0:	0040709c 	.word	0x0040709c
  4022e4:	004029ed 	.word	0x004029ed
  4022e8:	40028000 	.word	0x40028000
  4022ec:	00401ec9 	.word	0x00401ec9
  4022f0:	400e1400 	.word	0x400e1400
  4022f4:	00400e4d 	.word	0x00400e4d
  4022f8:	20400a5c 	.word	0x20400a5c
  4022fc:	20400aa8 	.word	0x20400aa8

00402300 <BUT_init>:

void BUT_init(void){
  402300:	b590      	push	{r4, r7, lr}
  402302:	b083      	sub	sp, #12
  402304:	af02      	add	r7, sp, #8
	/* config. pino botao em modo de entrada */
	pmc_enable_periph_clk(BUT_PIO_ID);
  402306:	200a      	movs	r0, #10
  402308:	4b10      	ldr	r3, [pc, #64]	; (40234c <BUT_init+0x4c>)
  40230a:	4798      	blx	r3
	pio_set_input(BUT_PIO, BUT_PIN_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  40230c:	2209      	movs	r2, #9
  40230e:	f44f 6100 	mov.w	r1, #2048	; 0x800
  402312:	480f      	ldr	r0, [pc, #60]	; (402350 <BUT_init+0x50>)
  402314:	4b0f      	ldr	r3, [pc, #60]	; (402354 <BUT_init+0x54>)
  402316:	4798      	blx	r3

	/* config. interrupcao em borda de descida no botao do kit */
	/* indica funcao (but_Handler) a ser chamada quando houver uma interrupo */
	pio_enable_interrupt(BUT_PIO, BUT_PIN_MASK);// INTERRUPCAO
  402318:	f44f 6100 	mov.w	r1, #2048	; 0x800
  40231c:	480c      	ldr	r0, [pc, #48]	; (402350 <BUT_init+0x50>)
  40231e:	4b0e      	ldr	r3, [pc, #56]	; (402358 <BUT_init+0x58>)
  402320:	4798      	blx	r3
	pio_handler_set(BUT_PIO, BUT_PIO_ID, BUT_PIN_MASK, PIO_IT_FALL_EDGE, Button_Handler);
  402322:	4b0e      	ldr	r3, [pc, #56]	; (40235c <BUT_init+0x5c>)
  402324:	9300      	str	r3, [sp, #0]
  402326:	2350      	movs	r3, #80	; 0x50
  402328:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40232c:	210a      	movs	r1, #10
  40232e:	4808      	ldr	r0, [pc, #32]	; (402350 <BUT_init+0x50>)
  402330:	4c0b      	ldr	r4, [pc, #44]	; (402360 <BUT_init+0x60>)
  402332:	47a0      	blx	r4

	/* habilita interrupco do PIO que controla o botao */
	/* e configura sua prioridade                        */
	NVIC_EnableIRQ(BUT_PIO_ID);
  402334:	200a      	movs	r0, #10
  402336:	4b0b      	ldr	r3, [pc, #44]	; (402364 <BUT_init+0x64>)
  402338:	4798      	blx	r3
	NVIC_SetPriority(BUT_PIO_ID, 1);
  40233a:	2101      	movs	r1, #1
  40233c:	200a      	movs	r0, #10
  40233e:	4b0a      	ldr	r3, [pc, #40]	; (402368 <BUT_init+0x68>)
  402340:	4798      	blx	r3
	}
  402342:	bf00      	nop
  402344:	3704      	adds	r7, #4
  402346:	46bd      	mov	sp, r7
  402348:	bd90      	pop	{r4, r7, pc}
  40234a:	bf00      	nop
  40234c:	004016b9 	.word	0x004016b9
  402350:	400e0e00 	.word	0x400e0e00
  402354:	00400fa5 	.word	0x00400fa5
  402358:	004011c1 	.word	0x004011c1
  40235c:	0040236d 	.word	0x0040236d
  402360:	004012dd 	.word	0x004012dd
  402364:	00401aed 	.word	0x00401aed
  402368:	00401b21 	.word	0x00401b21

0040236c <Button_Handler>:
	
static void Button_Handler(uint32_t id, uint32_t mask){
  40236c:	b580      	push	{r7, lr}
  40236e:	b090      	sub	sp, #64	; 0x40
  402370:	af00      	add	r7, sp, #0
  402372:	6078      	str	r0, [r7, #4]
  402374:	6039      	str	r1, [r7, #0]
		usart_put_string(UART3, "!");
  402376:	490c      	ldr	r1, [pc, #48]	; (4023a8 <Button_Handler+0x3c>)
  402378:	480c      	ldr	r0, [pc, #48]	; (4023ac <Button_Handler+0x40>)
  40237a:	4b0d      	ldr	r3, [pc, #52]	; (4023b0 <Button_Handler+0x44>)
  40237c:	4798      	blx	r3
		flag_but = 1;
  40237e:	4b0d      	ldr	r3, [pc, #52]	; (4023b4 <Button_Handler+0x48>)
  402380:	2201      	movs	r2, #1
  402382:	601a      	str	r2, [r3, #0]
		
		char buffer[54];
		sprintf(buffer, "flag butt %d \n", flag_but);
  402384:	4b0b      	ldr	r3, [pc, #44]	; (4023b4 <Button_Handler+0x48>)
  402386:	681a      	ldr	r2, [r3, #0]
  402388:	f107 0308 	add.w	r3, r7, #8
  40238c:	490a      	ldr	r1, [pc, #40]	; (4023b8 <Button_Handler+0x4c>)
  40238e:	4618      	mov	r0, r3
  402390:	4b0a      	ldr	r3, [pc, #40]	; (4023bc <Button_Handler+0x50>)
  402392:	4798      	blx	r3
		usart_put_string(USART1, buffer);
  402394:	f107 0308 	add.w	r3, r7, #8
  402398:	4619      	mov	r1, r3
  40239a:	4809      	ldr	r0, [pc, #36]	; (4023c0 <Button_Handler+0x54>)
  40239c:	4b04      	ldr	r3, [pc, #16]	; (4023b0 <Button_Handler+0x44>)
  40239e:	4798      	blx	r3
}
  4023a0:	bf00      	nop
  4023a2:	3740      	adds	r7, #64	; 0x40
  4023a4:	46bd      	mov	sp, r7
  4023a6:	bd80      	pop	{r7, pc}
  4023a8:	004070b0 	.word	0x004070b0
  4023ac:	400e1c00 	.word	0x400e1c00
  4023b0:	00401ec9 	.word	0x00401ec9
  4023b4:	20400a64 	.word	0x20400a64
  4023b8:	004070b4 	.word	0x004070b4
  4023bc:	004029ed 	.word	0x004029ed
  4023c0:	40028000 	.word	0x40028000

004023c4 <main>:


int main (void)
{
  4023c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4023c8:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
  4023cc:	af00      	add	r7, sp, #0
	board_init();
  4023ce:	4b5b      	ldr	r3, [pc, #364]	; (40253c <main+0x178>)
  4023d0:	4798      	blx	r3
	sysclk_init();
  4023d2:	4b5b      	ldr	r3, [pc, #364]	; (402540 <main+0x17c>)
  4023d4:	4798      	blx	r3
	
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4023d6:	4b5b      	ldr	r3, [pc, #364]	; (402544 <main+0x180>)
  4023d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4023dc:	605a      	str	r2, [r3, #4]

	delay_init();
	SysTick_Config(sysclk_get_cpu_hz() / 1000); // 1 ms
  4023de:	4b5a      	ldr	r3, [pc, #360]	; (402548 <main+0x184>)
  4023e0:	4798      	blx	r3
  4023e2:	4602      	mov	r2, r0
  4023e4:	4b59      	ldr	r3, [pc, #356]	; (40254c <main+0x188>)
  4023e6:	fba3 2302 	umull	r2, r3, r3, r2
  4023ea:	099b      	lsrs	r3, r3, #6
  4023ec:	4618      	mov	r0, r3
  4023ee:	4b58      	ldr	r3, [pc, #352]	; (402550 <main+0x18c>)
  4023f0:	4798      	blx	r3
	config_console();
  4023f2:	4b58      	ldr	r3, [pc, #352]	; (402554 <main+0x190>)
  4023f4:	4798      	blx	r3
		
	usart_put_string(USART1, "Inicializando...\r\n");
  4023f6:	4958      	ldr	r1, [pc, #352]	; (402558 <main+0x194>)
  4023f8:	4858      	ldr	r0, [pc, #352]	; (40255c <main+0x198>)
  4023fa:	4b59      	ldr	r3, [pc, #356]	; (402560 <main+0x19c>)
  4023fc:	4798      	blx	r3
	/*
	usart_put_string(USART1, "Config HC05 Server...\r\n");
	hm10_config_server();
	hm10_server_init();
	*/
	usart_put_string(USART1, "Config HC05 Client...\r\n");
  4023fe:	4959      	ldr	r1, [pc, #356]	; (402564 <main+0x1a0>)
  402400:	4856      	ldr	r0, [pc, #344]	; (40255c <main+0x198>)
  402402:	4b57      	ldr	r3, [pc, #348]	; (402560 <main+0x19c>)
  402404:	4798      	blx	r3
	hm10_config_client(); 
  402406:	4b58      	ldr	r3, [pc, #352]	; (402568 <main+0x1a4>)
  402408:	4798      	blx	r3
	hm10_client_init();
  40240a:	4b58      	ldr	r3, [pc, #352]	; (40256c <main+0x1a8>)
  40240c:	4798      	blx	r3
	char buffer[1024];
	
	pinALast = pio_get(EN_CLK, PIO_INPUT,  EN_CLK_PIN_MASK);
  40240e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  402412:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402416:	4856      	ldr	r0, [pc, #344]	; (402570 <main+0x1ac>)
  402418:	4b56      	ldr	r3, [pc, #344]	; (402574 <main+0x1b0>)
  40241a:	4798      	blx	r3
  40241c:	4602      	mov	r2, r0
  40241e:	4b56      	ldr	r3, [pc, #344]	; (402578 <main+0x1b4>)
  402420:	601a      	str	r2, [r3, #0]
	
	Encoder_init();
  402422:	4b56      	ldr	r3, [pc, #344]	; (40257c <main+0x1b8>)
  402424:	4798      	blx	r3
	BUT_init();
  402426:	4b56      	ldr	r3, [pc, #344]	; (402580 <main+0x1bc>)
  402428:	4798      	blx	r3

	g_systimer = 0;
  40242a:	4b56      	ldr	r3, [pc, #344]	; (402584 <main+0x1c0>)
  40242c:	2200      	movs	r2, #0
  40242e:	601a      	str	r2, [r3, #0]
	encoderPosCount = 0;
  402430:	4b55      	ldr	r3, [pc, #340]	; (402588 <main+0x1c4>)
  402432:	2200      	movs	r2, #0
  402434:	601a      	str	r2, [r3, #0]
	flag_encoder = 0;
  402436:	4b55      	ldr	r3, [pc, #340]	; (40258c <main+0x1c8>)
  402438:	2200      	movs	r2, #0
  40243a:	601a      	str	r2, [r3, #0]
	flag_but = 1;
  40243c:	4b54      	ldr	r3, [pc, #336]	; (402590 <main+0x1cc>)
  40243e:	2201      	movs	r2, #1
  402440:	601a      	str	r2, [r3, #0]

	while(1) {
		if (flag_but){
  402442:	4b53      	ldr	r3, [pc, #332]	; (402590 <main+0x1cc>)
  402444:	681b      	ldr	r3, [r3, #0]
  402446:	2b00      	cmp	r3, #0
  402448:	d0fb      	beq.n	402442 <main+0x7e>
			//usart_put_string(UART3, "OI\n");
			//usart_get_string(UART3, buffer, 1024, 1000);
			//usart_log("main", buffer);
		
			sprintf(buffer, "flag %d \n", flag_encoder);
  40244a:	4b50      	ldr	r3, [pc, #320]	; (40258c <main+0x1c8>)
  40244c:	681a      	ldr	r2, [r3, #0]
  40244e:	f107 0314 	add.w	r3, r7, #20
  402452:	4950      	ldr	r1, [pc, #320]	; (402594 <main+0x1d0>)
  402454:	4618      	mov	r0, r3
  402456:	4b50      	ldr	r3, [pc, #320]	; (402598 <main+0x1d4>)
  402458:	4798      	blx	r3
			usart_put_string(USART1, buffer);
  40245a:	f107 0314 	add.w	r3, r7, #20
  40245e:	4619      	mov	r1, r3
  402460:	483e      	ldr	r0, [pc, #248]	; (40255c <main+0x198>)
  402462:	4b3f      	ldr	r3, [pc, #252]	; (402560 <main+0x19c>)
  402464:	4798      	blx	r3
			delay_ms(500);
  402466:	4b38      	ldr	r3, [pc, #224]	; (402548 <main+0x184>)
  402468:	4798      	blx	r3
  40246a:	4603      	mov	r3, r0
  40246c:	4619      	mov	r1, r3
  40246e:	f04f 0200 	mov.w	r2, #0
  402472:	460b      	mov	r3, r1
  402474:	4614      	mov	r4, r2
  402476:	0160      	lsls	r0, r4, #5
  402478:	6078      	str	r0, [r7, #4]
  40247a:	6878      	ldr	r0, [r7, #4]
  40247c:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
  402480:	6078      	str	r0, [r7, #4]
  402482:	015b      	lsls	r3, r3, #5
  402484:	603b      	str	r3, [r7, #0]
  402486:	e9d7 3400 	ldrd	r3, r4, [r7]
  40248a:	1a5b      	subs	r3, r3, r1
  40248c:	eb64 0402 	sbc.w	r4, r4, r2
  402490:	ea4f 0984 	mov.w	r9, r4, lsl #2
  402494:	ea49 7993 	orr.w	r9, r9, r3, lsr #30
  402498:	ea4f 0883 	mov.w	r8, r3, lsl #2
  40249c:	4643      	mov	r3, r8
  40249e:	464c      	mov	r4, r9
  4024a0:	185b      	adds	r3, r3, r1
  4024a2:	eb44 0402 	adc.w	r4, r4, r2
  4024a6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
  4024aa:	ea4b 7b93 	orr.w	fp, fp, r3, lsr #30
  4024ae:	ea4f 0a83 	mov.w	sl, r3, lsl #2
  4024b2:	4653      	mov	r3, sl
  4024b4:	465c      	mov	r4, fp
  4024b6:	4619      	mov	r1, r3
  4024b8:	4622      	mov	r2, r4
  4024ba:	f241 732b 	movw	r3, #5931	; 0x172b
  4024be:	f04f 0400 	mov.w	r4, #0
  4024c2:	18cd      	adds	r5, r1, r3
  4024c4:	eb42 0604 	adc.w	r6, r2, r4
  4024c8:	4628      	mov	r0, r5
  4024ca:	4631      	mov	r1, r6
  4024cc:	4c33      	ldr	r4, [pc, #204]	; (40259c <main+0x1d8>)
  4024ce:	f241 722c 	movw	r2, #5932	; 0x172c
  4024d2:	f04f 0300 	mov.w	r3, #0
  4024d6:	47a0      	blx	r4
  4024d8:	4603      	mov	r3, r0
  4024da:	460c      	mov	r4, r1
  4024dc:	4618      	mov	r0, r3
  4024de:	4b30      	ldr	r3, [pc, #192]	; (4025a0 <main+0x1dc>)
  4024e0:	4798      	blx	r3
		
			if(flag_encoder == 1){
  4024e2:	4b2a      	ldr	r3, [pc, #168]	; (40258c <main+0x1c8>)
  4024e4:	681b      	ldr	r3, [r3, #0]
  4024e6:	2b01      	cmp	r3, #1
  4024e8:	d1ab      	bne.n	402442 <main+0x7e>
				usart_put_string(USART1, "entrou...\r\n");
  4024ea:	492e      	ldr	r1, [pc, #184]	; (4025a4 <main+0x1e0>)
  4024ec:	481b      	ldr	r0, [pc, #108]	; (40255c <main+0x198>)
  4024ee:	4b1c      	ldr	r3, [pc, #112]	; (402560 <main+0x19c>)
  4024f0:	4798      	blx	r3

				sprintf(buffer, "%d \n", encoderPosCount);
  4024f2:	4b25      	ldr	r3, [pc, #148]	; (402588 <main+0x1c4>)
  4024f4:	681a      	ldr	r2, [r3, #0]
  4024f6:	f107 0314 	add.w	r3, r7, #20
  4024fa:	492b      	ldr	r1, [pc, #172]	; (4025a8 <main+0x1e4>)
  4024fc:	4618      	mov	r0, r3
  4024fe:	4b26      	ldr	r3, [pc, #152]	; (402598 <main+0x1d4>)
  402500:	4798      	blx	r3
				usart_log("encoder", buffer);
  402502:	f107 0314 	add.w	r3, r7, #20
  402506:	4619      	mov	r1, r3
  402508:	4828      	ldr	r0, [pc, #160]	; (4025ac <main+0x1e8>)
  40250a:	4b29      	ldr	r3, [pc, #164]	; (4025b0 <main+0x1ec>)
  40250c:	4798      	blx	r3
				int temp = encoderPosCount;
  40250e:	4b1e      	ldr	r3, [pc, #120]	; (402588 <main+0x1c4>)
  402510:	681b      	ldr	r3, [r3, #0]
  402512:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
				char temp_str[5];
				itoa(temp, temp_str, 10);
  402516:	f107 030c 	add.w	r3, r7, #12
  40251a:	220a      	movs	r2, #10
  40251c:	4619      	mov	r1, r3
  40251e:	f8d7 0414 	ldr.w	r0, [r7, #1044]	; 0x414
  402522:	4b24      	ldr	r3, [pc, #144]	; (4025b4 <main+0x1f0>)
  402524:	4798      	blx	r3
				usart_put_string(UART3, temp_str);
  402526:	f107 030c 	add.w	r3, r7, #12
  40252a:	4619      	mov	r1, r3
  40252c:	4822      	ldr	r0, [pc, #136]	; (4025b8 <main+0x1f4>)
  40252e:	4b0c      	ldr	r3, [pc, #48]	; (402560 <main+0x19c>)
  402530:	4798      	blx	r3
				flag_encoder = 0;
  402532:	4b16      	ldr	r3, [pc, #88]	; (40258c <main+0x1c8>)
  402534:	2200      	movs	r2, #0
  402536:	601a      	str	r2, [r3, #0]
		if (flag_but){
  402538:	e783      	b.n	402442 <main+0x7e>
  40253a:	bf00      	nop
  40253c:	00400d79 	.word	0x00400d79
  402540:	00400945 	.word	0x00400945
  402544:	400e1850 	.word	0x400e1850
  402548:	00401c51 	.word	0x00401c51
  40254c:	10624dd3 	.word	0x10624dd3
  402550:	00401b75 	.word	0x00401b75
  402554:	00401fed 	.word	0x00401fed
  402558:	004070c4 	.word	0x004070c4
  40255c:	40028000 	.word	0x40028000
  402560:	00401ec9 	.word	0x00401ec9
  402564:	004070d8 	.word	0x004070d8
  402568:	00402035 	.word	0x00402035
  40256c:	004020a5 	.word	0x004020a5
  402570:	400e1400 	.word	0x400e1400
  402574:	00400e4d 	.word	0x00400e4d
  402578:	20400aa8 	.word	0x20400aa8
  40257c:	004021e1 	.word	0x004021e1
  402580:	00402301 	.word	0x00402301
  402584:	20400a58 	.word	0x20400a58
  402588:	20400a5c 	.word	0x20400a5c
  40258c:	20400a60 	.word	0x20400a60
  402590:	20400a64 	.word	0x20400a64
  402594:	004070f0 	.word	0x004070f0
  402598:	004029ed 	.word	0x004029ed
  40259c:	004025bd 	.word	0x004025bd
  4025a0:	20400001 	.word	0x20400001
  4025a4:	004070fc 	.word	0x004070fc
  4025a8:	00407108 	.word	0x00407108
  4025ac:	00407110 	.word	0x00407110
  4025b0:	00401f9d 	.word	0x00401f9d
  4025b4:	0040294d 	.word	0x0040294d
  4025b8:	400e1c00 	.word	0x400e1c00

004025bc <__aeabi_uldivmod>:
  4025bc:	b953      	cbnz	r3, 4025d4 <__aeabi_uldivmod+0x18>
  4025be:	b94a      	cbnz	r2, 4025d4 <__aeabi_uldivmod+0x18>
  4025c0:	2900      	cmp	r1, #0
  4025c2:	bf08      	it	eq
  4025c4:	2800      	cmpeq	r0, #0
  4025c6:	bf1c      	itt	ne
  4025c8:	f04f 31ff 	movne.w	r1, #4294967295
  4025cc:	f04f 30ff 	movne.w	r0, #4294967295
  4025d0:	f000 b97a 	b.w	4028c8 <__aeabi_idiv0>
  4025d4:	f1ad 0c08 	sub.w	ip, sp, #8
  4025d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4025dc:	f000 f806 	bl	4025ec <__udivmoddi4>
  4025e0:	f8dd e004 	ldr.w	lr, [sp, #4]
  4025e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4025e8:	b004      	add	sp, #16
  4025ea:	4770      	bx	lr

004025ec <__udivmoddi4>:
  4025ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4025f0:	468c      	mov	ip, r1
  4025f2:	460d      	mov	r5, r1
  4025f4:	4604      	mov	r4, r0
  4025f6:	9e08      	ldr	r6, [sp, #32]
  4025f8:	2b00      	cmp	r3, #0
  4025fa:	d151      	bne.n	4026a0 <__udivmoddi4+0xb4>
  4025fc:	428a      	cmp	r2, r1
  4025fe:	4617      	mov	r7, r2
  402600:	d96d      	bls.n	4026de <__udivmoddi4+0xf2>
  402602:	fab2 fe82 	clz	lr, r2
  402606:	f1be 0f00 	cmp.w	lr, #0
  40260a:	d00b      	beq.n	402624 <__udivmoddi4+0x38>
  40260c:	f1ce 0c20 	rsb	ip, lr, #32
  402610:	fa01 f50e 	lsl.w	r5, r1, lr
  402614:	fa20 fc0c 	lsr.w	ip, r0, ip
  402618:	fa02 f70e 	lsl.w	r7, r2, lr
  40261c:	ea4c 0c05 	orr.w	ip, ip, r5
  402620:	fa00 f40e 	lsl.w	r4, r0, lr
  402624:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  402628:	0c25      	lsrs	r5, r4, #16
  40262a:	fbbc f8fa 	udiv	r8, ip, sl
  40262e:	fa1f f987 	uxth.w	r9, r7
  402632:	fb0a cc18 	mls	ip, sl, r8, ip
  402636:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40263a:	fb08 f309 	mul.w	r3, r8, r9
  40263e:	42ab      	cmp	r3, r5
  402640:	d90a      	bls.n	402658 <__udivmoddi4+0x6c>
  402642:	19ed      	adds	r5, r5, r7
  402644:	f108 32ff 	add.w	r2, r8, #4294967295
  402648:	f080 8123 	bcs.w	402892 <__udivmoddi4+0x2a6>
  40264c:	42ab      	cmp	r3, r5
  40264e:	f240 8120 	bls.w	402892 <__udivmoddi4+0x2a6>
  402652:	f1a8 0802 	sub.w	r8, r8, #2
  402656:	443d      	add	r5, r7
  402658:	1aed      	subs	r5, r5, r3
  40265a:	b2a4      	uxth	r4, r4
  40265c:	fbb5 f0fa 	udiv	r0, r5, sl
  402660:	fb0a 5510 	mls	r5, sl, r0, r5
  402664:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  402668:	fb00 f909 	mul.w	r9, r0, r9
  40266c:	45a1      	cmp	r9, r4
  40266e:	d909      	bls.n	402684 <__udivmoddi4+0x98>
  402670:	19e4      	adds	r4, r4, r7
  402672:	f100 33ff 	add.w	r3, r0, #4294967295
  402676:	f080 810a 	bcs.w	40288e <__udivmoddi4+0x2a2>
  40267a:	45a1      	cmp	r9, r4
  40267c:	f240 8107 	bls.w	40288e <__udivmoddi4+0x2a2>
  402680:	3802      	subs	r0, #2
  402682:	443c      	add	r4, r7
  402684:	eba4 0409 	sub.w	r4, r4, r9
  402688:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40268c:	2100      	movs	r1, #0
  40268e:	2e00      	cmp	r6, #0
  402690:	d061      	beq.n	402756 <__udivmoddi4+0x16a>
  402692:	fa24 f40e 	lsr.w	r4, r4, lr
  402696:	2300      	movs	r3, #0
  402698:	6034      	str	r4, [r6, #0]
  40269a:	6073      	str	r3, [r6, #4]
  40269c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4026a0:	428b      	cmp	r3, r1
  4026a2:	d907      	bls.n	4026b4 <__udivmoddi4+0xc8>
  4026a4:	2e00      	cmp	r6, #0
  4026a6:	d054      	beq.n	402752 <__udivmoddi4+0x166>
  4026a8:	2100      	movs	r1, #0
  4026aa:	e886 0021 	stmia.w	r6, {r0, r5}
  4026ae:	4608      	mov	r0, r1
  4026b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4026b4:	fab3 f183 	clz	r1, r3
  4026b8:	2900      	cmp	r1, #0
  4026ba:	f040 808e 	bne.w	4027da <__udivmoddi4+0x1ee>
  4026be:	42ab      	cmp	r3, r5
  4026c0:	d302      	bcc.n	4026c8 <__udivmoddi4+0xdc>
  4026c2:	4282      	cmp	r2, r0
  4026c4:	f200 80fa 	bhi.w	4028bc <__udivmoddi4+0x2d0>
  4026c8:	1a84      	subs	r4, r0, r2
  4026ca:	eb65 0503 	sbc.w	r5, r5, r3
  4026ce:	2001      	movs	r0, #1
  4026d0:	46ac      	mov	ip, r5
  4026d2:	2e00      	cmp	r6, #0
  4026d4:	d03f      	beq.n	402756 <__udivmoddi4+0x16a>
  4026d6:	e886 1010 	stmia.w	r6, {r4, ip}
  4026da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4026de:	b912      	cbnz	r2, 4026e6 <__udivmoddi4+0xfa>
  4026e0:	2701      	movs	r7, #1
  4026e2:	fbb7 f7f2 	udiv	r7, r7, r2
  4026e6:	fab7 fe87 	clz	lr, r7
  4026ea:	f1be 0f00 	cmp.w	lr, #0
  4026ee:	d134      	bne.n	40275a <__udivmoddi4+0x16e>
  4026f0:	1beb      	subs	r3, r5, r7
  4026f2:	0c3a      	lsrs	r2, r7, #16
  4026f4:	fa1f fc87 	uxth.w	ip, r7
  4026f8:	2101      	movs	r1, #1
  4026fa:	fbb3 f8f2 	udiv	r8, r3, r2
  4026fe:	0c25      	lsrs	r5, r4, #16
  402700:	fb02 3318 	mls	r3, r2, r8, r3
  402704:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  402708:	fb0c f308 	mul.w	r3, ip, r8
  40270c:	42ab      	cmp	r3, r5
  40270e:	d907      	bls.n	402720 <__udivmoddi4+0x134>
  402710:	19ed      	adds	r5, r5, r7
  402712:	f108 30ff 	add.w	r0, r8, #4294967295
  402716:	d202      	bcs.n	40271e <__udivmoddi4+0x132>
  402718:	42ab      	cmp	r3, r5
  40271a:	f200 80d1 	bhi.w	4028c0 <__udivmoddi4+0x2d4>
  40271e:	4680      	mov	r8, r0
  402720:	1aed      	subs	r5, r5, r3
  402722:	b2a3      	uxth	r3, r4
  402724:	fbb5 f0f2 	udiv	r0, r5, r2
  402728:	fb02 5510 	mls	r5, r2, r0, r5
  40272c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  402730:	fb0c fc00 	mul.w	ip, ip, r0
  402734:	45a4      	cmp	ip, r4
  402736:	d907      	bls.n	402748 <__udivmoddi4+0x15c>
  402738:	19e4      	adds	r4, r4, r7
  40273a:	f100 33ff 	add.w	r3, r0, #4294967295
  40273e:	d202      	bcs.n	402746 <__udivmoddi4+0x15a>
  402740:	45a4      	cmp	ip, r4
  402742:	f200 80b8 	bhi.w	4028b6 <__udivmoddi4+0x2ca>
  402746:	4618      	mov	r0, r3
  402748:	eba4 040c 	sub.w	r4, r4, ip
  40274c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  402750:	e79d      	b.n	40268e <__udivmoddi4+0xa2>
  402752:	4631      	mov	r1, r6
  402754:	4630      	mov	r0, r6
  402756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40275a:	f1ce 0420 	rsb	r4, lr, #32
  40275e:	fa05 f30e 	lsl.w	r3, r5, lr
  402762:	fa07 f70e 	lsl.w	r7, r7, lr
  402766:	fa20 f804 	lsr.w	r8, r0, r4
  40276a:	0c3a      	lsrs	r2, r7, #16
  40276c:	fa25 f404 	lsr.w	r4, r5, r4
  402770:	ea48 0803 	orr.w	r8, r8, r3
  402774:	fbb4 f1f2 	udiv	r1, r4, r2
  402778:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40277c:	fb02 4411 	mls	r4, r2, r1, r4
  402780:	fa1f fc87 	uxth.w	ip, r7
  402784:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  402788:	fb01 f30c 	mul.w	r3, r1, ip
  40278c:	42ab      	cmp	r3, r5
  40278e:	fa00 f40e 	lsl.w	r4, r0, lr
  402792:	d909      	bls.n	4027a8 <__udivmoddi4+0x1bc>
  402794:	19ed      	adds	r5, r5, r7
  402796:	f101 30ff 	add.w	r0, r1, #4294967295
  40279a:	f080 808a 	bcs.w	4028b2 <__udivmoddi4+0x2c6>
  40279e:	42ab      	cmp	r3, r5
  4027a0:	f240 8087 	bls.w	4028b2 <__udivmoddi4+0x2c6>
  4027a4:	3902      	subs	r1, #2
  4027a6:	443d      	add	r5, r7
  4027a8:	1aeb      	subs	r3, r5, r3
  4027aa:	fa1f f588 	uxth.w	r5, r8
  4027ae:	fbb3 f0f2 	udiv	r0, r3, r2
  4027b2:	fb02 3310 	mls	r3, r2, r0, r3
  4027b6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4027ba:	fb00 f30c 	mul.w	r3, r0, ip
  4027be:	42ab      	cmp	r3, r5
  4027c0:	d907      	bls.n	4027d2 <__udivmoddi4+0x1e6>
  4027c2:	19ed      	adds	r5, r5, r7
  4027c4:	f100 38ff 	add.w	r8, r0, #4294967295
  4027c8:	d26f      	bcs.n	4028aa <__udivmoddi4+0x2be>
  4027ca:	42ab      	cmp	r3, r5
  4027cc:	d96d      	bls.n	4028aa <__udivmoddi4+0x2be>
  4027ce:	3802      	subs	r0, #2
  4027d0:	443d      	add	r5, r7
  4027d2:	1aeb      	subs	r3, r5, r3
  4027d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4027d8:	e78f      	b.n	4026fa <__udivmoddi4+0x10e>
  4027da:	f1c1 0720 	rsb	r7, r1, #32
  4027de:	fa22 f807 	lsr.w	r8, r2, r7
  4027e2:	408b      	lsls	r3, r1
  4027e4:	fa05 f401 	lsl.w	r4, r5, r1
  4027e8:	ea48 0303 	orr.w	r3, r8, r3
  4027ec:	fa20 fe07 	lsr.w	lr, r0, r7
  4027f0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4027f4:	40fd      	lsrs	r5, r7
  4027f6:	ea4e 0e04 	orr.w	lr, lr, r4
  4027fa:	fbb5 f9fc 	udiv	r9, r5, ip
  4027fe:	ea4f 441e 	mov.w	r4, lr, lsr #16
  402802:	fb0c 5519 	mls	r5, ip, r9, r5
  402806:	fa1f f883 	uxth.w	r8, r3
  40280a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40280e:	fb09 f408 	mul.w	r4, r9, r8
  402812:	42ac      	cmp	r4, r5
  402814:	fa02 f201 	lsl.w	r2, r2, r1
  402818:	fa00 fa01 	lsl.w	sl, r0, r1
  40281c:	d908      	bls.n	402830 <__udivmoddi4+0x244>
  40281e:	18ed      	adds	r5, r5, r3
  402820:	f109 30ff 	add.w	r0, r9, #4294967295
  402824:	d243      	bcs.n	4028ae <__udivmoddi4+0x2c2>
  402826:	42ac      	cmp	r4, r5
  402828:	d941      	bls.n	4028ae <__udivmoddi4+0x2c2>
  40282a:	f1a9 0902 	sub.w	r9, r9, #2
  40282e:	441d      	add	r5, r3
  402830:	1b2d      	subs	r5, r5, r4
  402832:	fa1f fe8e 	uxth.w	lr, lr
  402836:	fbb5 f0fc 	udiv	r0, r5, ip
  40283a:	fb0c 5510 	mls	r5, ip, r0, r5
  40283e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  402842:	fb00 f808 	mul.w	r8, r0, r8
  402846:	45a0      	cmp	r8, r4
  402848:	d907      	bls.n	40285a <__udivmoddi4+0x26e>
  40284a:	18e4      	adds	r4, r4, r3
  40284c:	f100 35ff 	add.w	r5, r0, #4294967295
  402850:	d229      	bcs.n	4028a6 <__udivmoddi4+0x2ba>
  402852:	45a0      	cmp	r8, r4
  402854:	d927      	bls.n	4028a6 <__udivmoddi4+0x2ba>
  402856:	3802      	subs	r0, #2
  402858:	441c      	add	r4, r3
  40285a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40285e:	eba4 0408 	sub.w	r4, r4, r8
  402862:	fba0 8902 	umull	r8, r9, r0, r2
  402866:	454c      	cmp	r4, r9
  402868:	46c6      	mov	lr, r8
  40286a:	464d      	mov	r5, r9
  40286c:	d315      	bcc.n	40289a <__udivmoddi4+0x2ae>
  40286e:	d012      	beq.n	402896 <__udivmoddi4+0x2aa>
  402870:	b156      	cbz	r6, 402888 <__udivmoddi4+0x29c>
  402872:	ebba 030e 	subs.w	r3, sl, lr
  402876:	eb64 0405 	sbc.w	r4, r4, r5
  40287a:	fa04 f707 	lsl.w	r7, r4, r7
  40287e:	40cb      	lsrs	r3, r1
  402880:	431f      	orrs	r7, r3
  402882:	40cc      	lsrs	r4, r1
  402884:	6037      	str	r7, [r6, #0]
  402886:	6074      	str	r4, [r6, #4]
  402888:	2100      	movs	r1, #0
  40288a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40288e:	4618      	mov	r0, r3
  402890:	e6f8      	b.n	402684 <__udivmoddi4+0x98>
  402892:	4690      	mov	r8, r2
  402894:	e6e0      	b.n	402658 <__udivmoddi4+0x6c>
  402896:	45c2      	cmp	sl, r8
  402898:	d2ea      	bcs.n	402870 <__udivmoddi4+0x284>
  40289a:	ebb8 0e02 	subs.w	lr, r8, r2
  40289e:	eb69 0503 	sbc.w	r5, r9, r3
  4028a2:	3801      	subs	r0, #1
  4028a4:	e7e4      	b.n	402870 <__udivmoddi4+0x284>
  4028a6:	4628      	mov	r0, r5
  4028a8:	e7d7      	b.n	40285a <__udivmoddi4+0x26e>
  4028aa:	4640      	mov	r0, r8
  4028ac:	e791      	b.n	4027d2 <__udivmoddi4+0x1e6>
  4028ae:	4681      	mov	r9, r0
  4028b0:	e7be      	b.n	402830 <__udivmoddi4+0x244>
  4028b2:	4601      	mov	r1, r0
  4028b4:	e778      	b.n	4027a8 <__udivmoddi4+0x1bc>
  4028b6:	3802      	subs	r0, #2
  4028b8:	443c      	add	r4, r7
  4028ba:	e745      	b.n	402748 <__udivmoddi4+0x15c>
  4028bc:	4608      	mov	r0, r1
  4028be:	e708      	b.n	4026d2 <__udivmoddi4+0xe6>
  4028c0:	f1a8 0802 	sub.w	r8, r8, #2
  4028c4:	443d      	add	r5, r7
  4028c6:	e72b      	b.n	402720 <__udivmoddi4+0x134>

004028c8 <__aeabi_idiv0>:
  4028c8:	4770      	bx	lr
  4028ca:	bf00      	nop

004028cc <__libc_init_array>:
  4028cc:	b570      	push	{r4, r5, r6, lr}
  4028ce:	4e0f      	ldr	r6, [pc, #60]	; (40290c <__libc_init_array+0x40>)
  4028d0:	4d0f      	ldr	r5, [pc, #60]	; (402910 <__libc_init_array+0x44>)
  4028d2:	1b76      	subs	r6, r6, r5
  4028d4:	10b6      	asrs	r6, r6, #2
  4028d6:	bf18      	it	ne
  4028d8:	2400      	movne	r4, #0
  4028da:	d005      	beq.n	4028e8 <__libc_init_array+0x1c>
  4028dc:	3401      	adds	r4, #1
  4028de:	f855 3b04 	ldr.w	r3, [r5], #4
  4028e2:	4798      	blx	r3
  4028e4:	42a6      	cmp	r6, r4
  4028e6:	d1f9      	bne.n	4028dc <__libc_init_array+0x10>
  4028e8:	4e0a      	ldr	r6, [pc, #40]	; (402914 <__libc_init_array+0x48>)
  4028ea:	4d0b      	ldr	r5, [pc, #44]	; (402918 <__libc_init_array+0x4c>)
  4028ec:	1b76      	subs	r6, r6, r5
  4028ee:	f004 fd6b 	bl	4073c8 <_init>
  4028f2:	10b6      	asrs	r6, r6, #2
  4028f4:	bf18      	it	ne
  4028f6:	2400      	movne	r4, #0
  4028f8:	d006      	beq.n	402908 <__libc_init_array+0x3c>
  4028fa:	3401      	adds	r4, #1
  4028fc:	f855 3b04 	ldr.w	r3, [r5], #4
  402900:	4798      	blx	r3
  402902:	42a6      	cmp	r6, r4
  402904:	d1f9      	bne.n	4028fa <__libc_init_array+0x2e>
  402906:	bd70      	pop	{r4, r5, r6, pc}
  402908:	bd70      	pop	{r4, r5, r6, pc}
  40290a:	bf00      	nop
  40290c:	004073d4 	.word	0x004073d4
  402910:	004073d4 	.word	0x004073d4
  402914:	004073dc 	.word	0x004073dc
  402918:	004073d4 	.word	0x004073d4

0040291c <__itoa>:
  40291c:	1e93      	subs	r3, r2, #2
  40291e:	2b22      	cmp	r3, #34	; 0x22
  402920:	d810      	bhi.n	402944 <__itoa+0x28>
  402922:	2a0a      	cmp	r2, #10
  402924:	b510      	push	{r4, lr}
  402926:	d006      	beq.n	402936 <__itoa+0x1a>
  402928:	2300      	movs	r3, #0
  40292a:	460c      	mov	r4, r1
  40292c:	4419      	add	r1, r3
  40292e:	f001 fb23 	bl	403f78 <__utoa>
  402932:	4620      	mov	r0, r4
  402934:	bd10      	pop	{r4, pc}
  402936:	2800      	cmp	r0, #0
  402938:	daf6      	bge.n	402928 <__itoa+0xc>
  40293a:	232d      	movs	r3, #45	; 0x2d
  40293c:	700b      	strb	r3, [r1, #0]
  40293e:	4240      	negs	r0, r0
  402940:	2301      	movs	r3, #1
  402942:	e7f2      	b.n	40292a <__itoa+0xe>
  402944:	2000      	movs	r0, #0
  402946:	7008      	strb	r0, [r1, #0]
  402948:	4770      	bx	lr
  40294a:	bf00      	nop

0040294c <itoa>:
  40294c:	f7ff bfe6 	b.w	40291c <__itoa>

00402950 <memset>:
  402950:	b470      	push	{r4, r5, r6}
  402952:	0786      	lsls	r6, r0, #30
  402954:	d046      	beq.n	4029e4 <memset+0x94>
  402956:	1e54      	subs	r4, r2, #1
  402958:	2a00      	cmp	r2, #0
  40295a:	d041      	beq.n	4029e0 <memset+0x90>
  40295c:	b2ca      	uxtb	r2, r1
  40295e:	4603      	mov	r3, r0
  402960:	e002      	b.n	402968 <memset+0x18>
  402962:	f114 34ff 	adds.w	r4, r4, #4294967295
  402966:	d33b      	bcc.n	4029e0 <memset+0x90>
  402968:	f803 2b01 	strb.w	r2, [r3], #1
  40296c:	079d      	lsls	r5, r3, #30
  40296e:	d1f8      	bne.n	402962 <memset+0x12>
  402970:	2c03      	cmp	r4, #3
  402972:	d92e      	bls.n	4029d2 <memset+0x82>
  402974:	b2cd      	uxtb	r5, r1
  402976:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40297a:	2c0f      	cmp	r4, #15
  40297c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  402980:	d919      	bls.n	4029b6 <memset+0x66>
  402982:	f103 0210 	add.w	r2, r3, #16
  402986:	4626      	mov	r6, r4
  402988:	3e10      	subs	r6, #16
  40298a:	2e0f      	cmp	r6, #15
  40298c:	f842 5c10 	str.w	r5, [r2, #-16]
  402990:	f842 5c0c 	str.w	r5, [r2, #-12]
  402994:	f842 5c08 	str.w	r5, [r2, #-8]
  402998:	f842 5c04 	str.w	r5, [r2, #-4]
  40299c:	f102 0210 	add.w	r2, r2, #16
  4029a0:	d8f2      	bhi.n	402988 <memset+0x38>
  4029a2:	f1a4 0210 	sub.w	r2, r4, #16
  4029a6:	f022 020f 	bic.w	r2, r2, #15
  4029aa:	f004 040f 	and.w	r4, r4, #15
  4029ae:	3210      	adds	r2, #16
  4029b0:	2c03      	cmp	r4, #3
  4029b2:	4413      	add	r3, r2
  4029b4:	d90d      	bls.n	4029d2 <memset+0x82>
  4029b6:	461e      	mov	r6, r3
  4029b8:	4622      	mov	r2, r4
  4029ba:	3a04      	subs	r2, #4
  4029bc:	2a03      	cmp	r2, #3
  4029be:	f846 5b04 	str.w	r5, [r6], #4
  4029c2:	d8fa      	bhi.n	4029ba <memset+0x6a>
  4029c4:	1f22      	subs	r2, r4, #4
  4029c6:	f022 0203 	bic.w	r2, r2, #3
  4029ca:	3204      	adds	r2, #4
  4029cc:	4413      	add	r3, r2
  4029ce:	f004 0403 	and.w	r4, r4, #3
  4029d2:	b12c      	cbz	r4, 4029e0 <memset+0x90>
  4029d4:	b2c9      	uxtb	r1, r1
  4029d6:	441c      	add	r4, r3
  4029d8:	f803 1b01 	strb.w	r1, [r3], #1
  4029dc:	429c      	cmp	r4, r3
  4029de:	d1fb      	bne.n	4029d8 <memset+0x88>
  4029e0:	bc70      	pop	{r4, r5, r6}
  4029e2:	4770      	bx	lr
  4029e4:	4614      	mov	r4, r2
  4029e6:	4603      	mov	r3, r0
  4029e8:	e7c2      	b.n	402970 <memset+0x20>
  4029ea:	bf00      	nop

004029ec <sprintf>:
  4029ec:	b40e      	push	{r1, r2, r3}
  4029ee:	b5f0      	push	{r4, r5, r6, r7, lr}
  4029f0:	b09c      	sub	sp, #112	; 0x70
  4029f2:	ab21      	add	r3, sp, #132	; 0x84
  4029f4:	490f      	ldr	r1, [pc, #60]	; (402a34 <sprintf+0x48>)
  4029f6:	f853 2b04 	ldr.w	r2, [r3], #4
  4029fa:	9301      	str	r3, [sp, #4]
  4029fc:	4605      	mov	r5, r0
  4029fe:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  402a02:	6808      	ldr	r0, [r1, #0]
  402a04:	9502      	str	r5, [sp, #8]
  402a06:	f44f 7702 	mov.w	r7, #520	; 0x208
  402a0a:	f64f 76ff 	movw	r6, #65535	; 0xffff
  402a0e:	a902      	add	r1, sp, #8
  402a10:	9506      	str	r5, [sp, #24]
  402a12:	f8ad 7014 	strh.w	r7, [sp, #20]
  402a16:	9404      	str	r4, [sp, #16]
  402a18:	9407      	str	r4, [sp, #28]
  402a1a:	f8ad 6016 	strh.w	r6, [sp, #22]
  402a1e:	f000 f87d 	bl	402b1c <_svfprintf_r>
  402a22:	9b02      	ldr	r3, [sp, #8]
  402a24:	2200      	movs	r2, #0
  402a26:	701a      	strb	r2, [r3, #0]
  402a28:	b01c      	add	sp, #112	; 0x70
  402a2a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  402a2e:	b003      	add	sp, #12
  402a30:	4770      	bx	lr
  402a32:	bf00      	nop
  402a34:	20400010 	.word	0x20400010
	...

00402a40 <strlen>:
  402a40:	f890 f000 	pld	[r0]
  402a44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  402a48:	f020 0107 	bic.w	r1, r0, #7
  402a4c:	f06f 0c00 	mvn.w	ip, #0
  402a50:	f010 0407 	ands.w	r4, r0, #7
  402a54:	f891 f020 	pld	[r1, #32]
  402a58:	f040 8049 	bne.w	402aee <strlen+0xae>
  402a5c:	f04f 0400 	mov.w	r4, #0
  402a60:	f06f 0007 	mvn.w	r0, #7
  402a64:	e9d1 2300 	ldrd	r2, r3, [r1]
  402a68:	f891 f040 	pld	[r1, #64]	; 0x40
  402a6c:	f100 0008 	add.w	r0, r0, #8
  402a70:	fa82 f24c 	uadd8	r2, r2, ip
  402a74:	faa4 f28c 	sel	r2, r4, ip
  402a78:	fa83 f34c 	uadd8	r3, r3, ip
  402a7c:	faa2 f38c 	sel	r3, r2, ip
  402a80:	bb4b      	cbnz	r3, 402ad6 <strlen+0x96>
  402a82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  402a86:	fa82 f24c 	uadd8	r2, r2, ip
  402a8a:	f100 0008 	add.w	r0, r0, #8
  402a8e:	faa4 f28c 	sel	r2, r4, ip
  402a92:	fa83 f34c 	uadd8	r3, r3, ip
  402a96:	faa2 f38c 	sel	r3, r2, ip
  402a9a:	b9e3      	cbnz	r3, 402ad6 <strlen+0x96>
  402a9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  402aa0:	fa82 f24c 	uadd8	r2, r2, ip
  402aa4:	f100 0008 	add.w	r0, r0, #8
  402aa8:	faa4 f28c 	sel	r2, r4, ip
  402aac:	fa83 f34c 	uadd8	r3, r3, ip
  402ab0:	faa2 f38c 	sel	r3, r2, ip
  402ab4:	b97b      	cbnz	r3, 402ad6 <strlen+0x96>
  402ab6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  402aba:	f101 0120 	add.w	r1, r1, #32
  402abe:	fa82 f24c 	uadd8	r2, r2, ip
  402ac2:	f100 0008 	add.w	r0, r0, #8
  402ac6:	faa4 f28c 	sel	r2, r4, ip
  402aca:	fa83 f34c 	uadd8	r3, r3, ip
  402ace:	faa2 f38c 	sel	r3, r2, ip
  402ad2:	2b00      	cmp	r3, #0
  402ad4:	d0c6      	beq.n	402a64 <strlen+0x24>
  402ad6:	2a00      	cmp	r2, #0
  402ad8:	bf04      	itt	eq
  402ada:	3004      	addeq	r0, #4
  402adc:	461a      	moveq	r2, r3
  402ade:	ba12      	rev	r2, r2
  402ae0:	fab2 f282 	clz	r2, r2
  402ae4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  402ae8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  402aec:	4770      	bx	lr
  402aee:	e9d1 2300 	ldrd	r2, r3, [r1]
  402af2:	f004 0503 	and.w	r5, r4, #3
  402af6:	f1c4 0000 	rsb	r0, r4, #0
  402afa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  402afe:	f014 0f04 	tst.w	r4, #4
  402b02:	f891 f040 	pld	[r1, #64]	; 0x40
  402b06:	fa0c f505 	lsl.w	r5, ip, r5
  402b0a:	ea62 0205 	orn	r2, r2, r5
  402b0e:	bf1c      	itt	ne
  402b10:	ea63 0305 	ornne	r3, r3, r5
  402b14:	4662      	movne	r2, ip
  402b16:	f04f 0400 	mov.w	r4, #0
  402b1a:	e7a9      	b.n	402a70 <strlen+0x30>

00402b1c <_svfprintf_r>:
  402b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402b20:	b0c3      	sub	sp, #268	; 0x10c
  402b22:	460c      	mov	r4, r1
  402b24:	910b      	str	r1, [sp, #44]	; 0x2c
  402b26:	4692      	mov	sl, r2
  402b28:	930f      	str	r3, [sp, #60]	; 0x3c
  402b2a:	900c      	str	r0, [sp, #48]	; 0x30
  402b2c:	f002 fa4c 	bl	404fc8 <_localeconv_r>
  402b30:	6803      	ldr	r3, [r0, #0]
  402b32:	931a      	str	r3, [sp, #104]	; 0x68
  402b34:	4618      	mov	r0, r3
  402b36:	f7ff ff83 	bl	402a40 <strlen>
  402b3a:	89a3      	ldrh	r3, [r4, #12]
  402b3c:	9019      	str	r0, [sp, #100]	; 0x64
  402b3e:	0619      	lsls	r1, r3, #24
  402b40:	d503      	bpl.n	402b4a <_svfprintf_r+0x2e>
  402b42:	6923      	ldr	r3, [r4, #16]
  402b44:	2b00      	cmp	r3, #0
  402b46:	f001 8003 	beq.w	403b50 <_svfprintf_r+0x1034>
  402b4a:	2300      	movs	r3, #0
  402b4c:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  402b50:	9313      	str	r3, [sp, #76]	; 0x4c
  402b52:	9315      	str	r3, [sp, #84]	; 0x54
  402b54:	9314      	str	r3, [sp, #80]	; 0x50
  402b56:	9327      	str	r3, [sp, #156]	; 0x9c
  402b58:	9326      	str	r3, [sp, #152]	; 0x98
  402b5a:	9318      	str	r3, [sp, #96]	; 0x60
  402b5c:	931b      	str	r3, [sp, #108]	; 0x6c
  402b5e:	9309      	str	r3, [sp, #36]	; 0x24
  402b60:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  402b64:	46c8      	mov	r8, r9
  402b66:	9316      	str	r3, [sp, #88]	; 0x58
  402b68:	9317      	str	r3, [sp, #92]	; 0x5c
  402b6a:	f89a 3000 	ldrb.w	r3, [sl]
  402b6e:	4654      	mov	r4, sl
  402b70:	b1e3      	cbz	r3, 402bac <_svfprintf_r+0x90>
  402b72:	2b25      	cmp	r3, #37	; 0x25
  402b74:	d102      	bne.n	402b7c <_svfprintf_r+0x60>
  402b76:	e019      	b.n	402bac <_svfprintf_r+0x90>
  402b78:	2b25      	cmp	r3, #37	; 0x25
  402b7a:	d003      	beq.n	402b84 <_svfprintf_r+0x68>
  402b7c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  402b80:	2b00      	cmp	r3, #0
  402b82:	d1f9      	bne.n	402b78 <_svfprintf_r+0x5c>
  402b84:	eba4 050a 	sub.w	r5, r4, sl
  402b88:	b185      	cbz	r5, 402bac <_svfprintf_r+0x90>
  402b8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402b8c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  402b8e:	f8c8 a000 	str.w	sl, [r8]
  402b92:	3301      	adds	r3, #1
  402b94:	442a      	add	r2, r5
  402b96:	2b07      	cmp	r3, #7
  402b98:	f8c8 5004 	str.w	r5, [r8, #4]
  402b9c:	9227      	str	r2, [sp, #156]	; 0x9c
  402b9e:	9326      	str	r3, [sp, #152]	; 0x98
  402ba0:	dc7f      	bgt.n	402ca2 <_svfprintf_r+0x186>
  402ba2:	f108 0808 	add.w	r8, r8, #8
  402ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402ba8:	442b      	add	r3, r5
  402baa:	9309      	str	r3, [sp, #36]	; 0x24
  402bac:	7823      	ldrb	r3, [r4, #0]
  402bae:	2b00      	cmp	r3, #0
  402bb0:	d07f      	beq.n	402cb2 <_svfprintf_r+0x196>
  402bb2:	2300      	movs	r3, #0
  402bb4:	461a      	mov	r2, r3
  402bb6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  402bba:	4619      	mov	r1, r3
  402bbc:	930d      	str	r3, [sp, #52]	; 0x34
  402bbe:	469b      	mov	fp, r3
  402bc0:	f04f 30ff 	mov.w	r0, #4294967295
  402bc4:	7863      	ldrb	r3, [r4, #1]
  402bc6:	900a      	str	r0, [sp, #40]	; 0x28
  402bc8:	f104 0a01 	add.w	sl, r4, #1
  402bcc:	f10a 0a01 	add.w	sl, sl, #1
  402bd0:	f1a3 0020 	sub.w	r0, r3, #32
  402bd4:	2858      	cmp	r0, #88	; 0x58
  402bd6:	f200 83c1 	bhi.w	40335c <_svfprintf_r+0x840>
  402bda:	e8df f010 	tbh	[pc, r0, lsl #1]
  402bde:	0238      	.short	0x0238
  402be0:	03bf03bf 	.word	0x03bf03bf
  402be4:	03bf0240 	.word	0x03bf0240
  402be8:	03bf03bf 	.word	0x03bf03bf
  402bec:	03bf03bf 	.word	0x03bf03bf
  402bf0:	024503bf 	.word	0x024503bf
  402bf4:	03bf0203 	.word	0x03bf0203
  402bf8:	026b005d 	.word	0x026b005d
  402bfc:	028603bf 	.word	0x028603bf
  402c00:	039d039d 	.word	0x039d039d
  402c04:	039d039d 	.word	0x039d039d
  402c08:	039d039d 	.word	0x039d039d
  402c0c:	039d039d 	.word	0x039d039d
  402c10:	03bf039d 	.word	0x03bf039d
  402c14:	03bf03bf 	.word	0x03bf03bf
  402c18:	03bf03bf 	.word	0x03bf03bf
  402c1c:	03bf03bf 	.word	0x03bf03bf
  402c20:	03bf03bf 	.word	0x03bf03bf
  402c24:	033703bf 	.word	0x033703bf
  402c28:	03bf0357 	.word	0x03bf0357
  402c2c:	03bf0357 	.word	0x03bf0357
  402c30:	03bf03bf 	.word	0x03bf03bf
  402c34:	039803bf 	.word	0x039803bf
  402c38:	03bf03bf 	.word	0x03bf03bf
  402c3c:	03bf03ad 	.word	0x03bf03ad
  402c40:	03bf03bf 	.word	0x03bf03bf
  402c44:	03bf03bf 	.word	0x03bf03bf
  402c48:	03bf0259 	.word	0x03bf0259
  402c4c:	031e03bf 	.word	0x031e03bf
  402c50:	03bf03bf 	.word	0x03bf03bf
  402c54:	03bf03bf 	.word	0x03bf03bf
  402c58:	03bf03bf 	.word	0x03bf03bf
  402c5c:	03bf03bf 	.word	0x03bf03bf
  402c60:	03bf03bf 	.word	0x03bf03bf
  402c64:	02db02c6 	.word	0x02db02c6
  402c68:	03570357 	.word	0x03570357
  402c6c:	028b0357 	.word	0x028b0357
  402c70:	03bf02db 	.word	0x03bf02db
  402c74:	029003bf 	.word	0x029003bf
  402c78:	029d03bf 	.word	0x029d03bf
  402c7c:	02b401cc 	.word	0x02b401cc
  402c80:	03bf0208 	.word	0x03bf0208
  402c84:	03bf01e1 	.word	0x03bf01e1
  402c88:	03bf007e 	.word	0x03bf007e
  402c8c:	020d03bf 	.word	0x020d03bf
  402c90:	980d      	ldr	r0, [sp, #52]	; 0x34
  402c92:	930f      	str	r3, [sp, #60]	; 0x3c
  402c94:	4240      	negs	r0, r0
  402c96:	900d      	str	r0, [sp, #52]	; 0x34
  402c98:	f04b 0b04 	orr.w	fp, fp, #4
  402c9c:	f89a 3000 	ldrb.w	r3, [sl]
  402ca0:	e794      	b.n	402bcc <_svfprintf_r+0xb0>
  402ca2:	aa25      	add	r2, sp, #148	; 0x94
  402ca4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402ca6:	980c      	ldr	r0, [sp, #48]	; 0x30
  402ca8:	f003 f854 	bl	405d54 <__ssprint_r>
  402cac:	b940      	cbnz	r0, 402cc0 <_svfprintf_r+0x1a4>
  402cae:	46c8      	mov	r8, r9
  402cb0:	e779      	b.n	402ba6 <_svfprintf_r+0x8a>
  402cb2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402cb4:	b123      	cbz	r3, 402cc0 <_svfprintf_r+0x1a4>
  402cb6:	980c      	ldr	r0, [sp, #48]	; 0x30
  402cb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402cba:	aa25      	add	r2, sp, #148	; 0x94
  402cbc:	f003 f84a 	bl	405d54 <__ssprint_r>
  402cc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  402cc2:	899b      	ldrh	r3, [r3, #12]
  402cc4:	f013 0f40 	tst.w	r3, #64	; 0x40
  402cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402cca:	bf18      	it	ne
  402ccc:	f04f 33ff 	movne.w	r3, #4294967295
  402cd0:	9309      	str	r3, [sp, #36]	; 0x24
  402cd2:	9809      	ldr	r0, [sp, #36]	; 0x24
  402cd4:	b043      	add	sp, #268	; 0x10c
  402cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402cda:	f01b 0f20 	tst.w	fp, #32
  402cde:	9311      	str	r3, [sp, #68]	; 0x44
  402ce0:	f040 81dd 	bne.w	40309e <_svfprintf_r+0x582>
  402ce4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402ce6:	f01b 0f10 	tst.w	fp, #16
  402cea:	4613      	mov	r3, r2
  402cec:	f040 856e 	bne.w	4037cc <_svfprintf_r+0xcb0>
  402cf0:	f01b 0f40 	tst.w	fp, #64	; 0x40
  402cf4:	f000 856a 	beq.w	4037cc <_svfprintf_r+0xcb0>
  402cf8:	8814      	ldrh	r4, [r2, #0]
  402cfa:	3204      	adds	r2, #4
  402cfc:	2500      	movs	r5, #0
  402cfe:	2301      	movs	r3, #1
  402d00:	920f      	str	r2, [sp, #60]	; 0x3c
  402d02:	2700      	movs	r7, #0
  402d04:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  402d08:	990a      	ldr	r1, [sp, #40]	; 0x28
  402d0a:	1c4a      	adds	r2, r1, #1
  402d0c:	f000 8265 	beq.w	4031da <_svfprintf_r+0x6be>
  402d10:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  402d14:	9207      	str	r2, [sp, #28]
  402d16:	ea54 0205 	orrs.w	r2, r4, r5
  402d1a:	f040 8264 	bne.w	4031e6 <_svfprintf_r+0x6ca>
  402d1e:	2900      	cmp	r1, #0
  402d20:	f040 843c 	bne.w	40359c <_svfprintf_r+0xa80>
  402d24:	2b00      	cmp	r3, #0
  402d26:	f040 84d7 	bne.w	4036d8 <_svfprintf_r+0xbbc>
  402d2a:	f01b 0301 	ands.w	r3, fp, #1
  402d2e:	930e      	str	r3, [sp, #56]	; 0x38
  402d30:	f000 8604 	beq.w	40393c <_svfprintf_r+0xe20>
  402d34:	ae42      	add	r6, sp, #264	; 0x108
  402d36:	2330      	movs	r3, #48	; 0x30
  402d38:	f806 3d41 	strb.w	r3, [r6, #-65]!
  402d3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402d3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402d40:	4293      	cmp	r3, r2
  402d42:	bfb8      	it	lt
  402d44:	4613      	movlt	r3, r2
  402d46:	9308      	str	r3, [sp, #32]
  402d48:	2300      	movs	r3, #0
  402d4a:	9312      	str	r3, [sp, #72]	; 0x48
  402d4c:	b117      	cbz	r7, 402d54 <_svfprintf_r+0x238>
  402d4e:	9b08      	ldr	r3, [sp, #32]
  402d50:	3301      	adds	r3, #1
  402d52:	9308      	str	r3, [sp, #32]
  402d54:	9b07      	ldr	r3, [sp, #28]
  402d56:	f013 0302 	ands.w	r3, r3, #2
  402d5a:	9310      	str	r3, [sp, #64]	; 0x40
  402d5c:	d002      	beq.n	402d64 <_svfprintf_r+0x248>
  402d5e:	9b08      	ldr	r3, [sp, #32]
  402d60:	3302      	adds	r3, #2
  402d62:	9308      	str	r3, [sp, #32]
  402d64:	9b07      	ldr	r3, [sp, #28]
  402d66:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  402d6a:	f040 830e 	bne.w	40338a <_svfprintf_r+0x86e>
  402d6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402d70:	9a08      	ldr	r2, [sp, #32]
  402d72:	eba3 0b02 	sub.w	fp, r3, r2
  402d76:	f1bb 0f00 	cmp.w	fp, #0
  402d7a:	f340 8306 	ble.w	40338a <_svfprintf_r+0x86e>
  402d7e:	f1bb 0f10 	cmp.w	fp, #16
  402d82:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402d84:	9a26      	ldr	r2, [sp, #152]	; 0x98
  402d86:	dd29      	ble.n	402ddc <_svfprintf_r+0x2c0>
  402d88:	4643      	mov	r3, r8
  402d8a:	4621      	mov	r1, r4
  402d8c:	46a8      	mov	r8, r5
  402d8e:	2710      	movs	r7, #16
  402d90:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  402d92:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  402d94:	e006      	b.n	402da4 <_svfprintf_r+0x288>
  402d96:	f1ab 0b10 	sub.w	fp, fp, #16
  402d9a:	f1bb 0f10 	cmp.w	fp, #16
  402d9e:	f103 0308 	add.w	r3, r3, #8
  402da2:	dd18      	ble.n	402dd6 <_svfprintf_r+0x2ba>
  402da4:	3201      	adds	r2, #1
  402da6:	48b7      	ldr	r0, [pc, #732]	; (403084 <_svfprintf_r+0x568>)
  402da8:	9226      	str	r2, [sp, #152]	; 0x98
  402daa:	3110      	adds	r1, #16
  402dac:	2a07      	cmp	r2, #7
  402dae:	9127      	str	r1, [sp, #156]	; 0x9c
  402db0:	e883 0081 	stmia.w	r3, {r0, r7}
  402db4:	ddef      	ble.n	402d96 <_svfprintf_r+0x27a>
  402db6:	aa25      	add	r2, sp, #148	; 0x94
  402db8:	4629      	mov	r1, r5
  402dba:	4620      	mov	r0, r4
  402dbc:	f002 ffca 	bl	405d54 <__ssprint_r>
  402dc0:	2800      	cmp	r0, #0
  402dc2:	f47f af7d 	bne.w	402cc0 <_svfprintf_r+0x1a4>
  402dc6:	f1ab 0b10 	sub.w	fp, fp, #16
  402dca:	f1bb 0f10 	cmp.w	fp, #16
  402dce:	9927      	ldr	r1, [sp, #156]	; 0x9c
  402dd0:	9a26      	ldr	r2, [sp, #152]	; 0x98
  402dd2:	464b      	mov	r3, r9
  402dd4:	dce6      	bgt.n	402da4 <_svfprintf_r+0x288>
  402dd6:	4645      	mov	r5, r8
  402dd8:	460c      	mov	r4, r1
  402dda:	4698      	mov	r8, r3
  402ddc:	3201      	adds	r2, #1
  402dde:	4ba9      	ldr	r3, [pc, #676]	; (403084 <_svfprintf_r+0x568>)
  402de0:	9226      	str	r2, [sp, #152]	; 0x98
  402de2:	445c      	add	r4, fp
  402de4:	2a07      	cmp	r2, #7
  402de6:	9427      	str	r4, [sp, #156]	; 0x9c
  402de8:	e888 0808 	stmia.w	r8, {r3, fp}
  402dec:	f300 8498 	bgt.w	403720 <_svfprintf_r+0xc04>
  402df0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  402df4:	f108 0808 	add.w	r8, r8, #8
  402df8:	b177      	cbz	r7, 402e18 <_svfprintf_r+0x2fc>
  402dfa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402dfc:	3301      	adds	r3, #1
  402dfe:	3401      	adds	r4, #1
  402e00:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  402e04:	2201      	movs	r2, #1
  402e06:	2b07      	cmp	r3, #7
  402e08:	9427      	str	r4, [sp, #156]	; 0x9c
  402e0a:	9326      	str	r3, [sp, #152]	; 0x98
  402e0c:	e888 0006 	stmia.w	r8, {r1, r2}
  402e10:	f300 83db 	bgt.w	4035ca <_svfprintf_r+0xaae>
  402e14:	f108 0808 	add.w	r8, r8, #8
  402e18:	9b10      	ldr	r3, [sp, #64]	; 0x40
  402e1a:	b16b      	cbz	r3, 402e38 <_svfprintf_r+0x31c>
  402e1c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402e1e:	3301      	adds	r3, #1
  402e20:	3402      	adds	r4, #2
  402e22:	a91e      	add	r1, sp, #120	; 0x78
  402e24:	2202      	movs	r2, #2
  402e26:	2b07      	cmp	r3, #7
  402e28:	9427      	str	r4, [sp, #156]	; 0x9c
  402e2a:	9326      	str	r3, [sp, #152]	; 0x98
  402e2c:	e888 0006 	stmia.w	r8, {r1, r2}
  402e30:	f300 83d6 	bgt.w	4035e0 <_svfprintf_r+0xac4>
  402e34:	f108 0808 	add.w	r8, r8, #8
  402e38:	2d80      	cmp	r5, #128	; 0x80
  402e3a:	f000 8315 	beq.w	403468 <_svfprintf_r+0x94c>
  402e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402e40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402e42:	1a9f      	subs	r7, r3, r2
  402e44:	2f00      	cmp	r7, #0
  402e46:	dd36      	ble.n	402eb6 <_svfprintf_r+0x39a>
  402e48:	2f10      	cmp	r7, #16
  402e4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402e4c:	4d8e      	ldr	r5, [pc, #568]	; (403088 <_svfprintf_r+0x56c>)
  402e4e:	dd27      	ble.n	402ea0 <_svfprintf_r+0x384>
  402e50:	4642      	mov	r2, r8
  402e52:	4621      	mov	r1, r4
  402e54:	46b0      	mov	r8, r6
  402e56:	f04f 0b10 	mov.w	fp, #16
  402e5a:	462e      	mov	r6, r5
  402e5c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  402e5e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  402e60:	e004      	b.n	402e6c <_svfprintf_r+0x350>
  402e62:	3f10      	subs	r7, #16
  402e64:	2f10      	cmp	r7, #16
  402e66:	f102 0208 	add.w	r2, r2, #8
  402e6a:	dd15      	ble.n	402e98 <_svfprintf_r+0x37c>
  402e6c:	3301      	adds	r3, #1
  402e6e:	3110      	adds	r1, #16
  402e70:	2b07      	cmp	r3, #7
  402e72:	9127      	str	r1, [sp, #156]	; 0x9c
  402e74:	9326      	str	r3, [sp, #152]	; 0x98
  402e76:	e882 0840 	stmia.w	r2, {r6, fp}
  402e7a:	ddf2      	ble.n	402e62 <_svfprintf_r+0x346>
  402e7c:	aa25      	add	r2, sp, #148	; 0x94
  402e7e:	4629      	mov	r1, r5
  402e80:	4620      	mov	r0, r4
  402e82:	f002 ff67 	bl	405d54 <__ssprint_r>
  402e86:	2800      	cmp	r0, #0
  402e88:	f47f af1a 	bne.w	402cc0 <_svfprintf_r+0x1a4>
  402e8c:	3f10      	subs	r7, #16
  402e8e:	2f10      	cmp	r7, #16
  402e90:	9927      	ldr	r1, [sp, #156]	; 0x9c
  402e92:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402e94:	464a      	mov	r2, r9
  402e96:	dce9      	bgt.n	402e6c <_svfprintf_r+0x350>
  402e98:	4635      	mov	r5, r6
  402e9a:	460c      	mov	r4, r1
  402e9c:	4646      	mov	r6, r8
  402e9e:	4690      	mov	r8, r2
  402ea0:	3301      	adds	r3, #1
  402ea2:	443c      	add	r4, r7
  402ea4:	2b07      	cmp	r3, #7
  402ea6:	9427      	str	r4, [sp, #156]	; 0x9c
  402ea8:	9326      	str	r3, [sp, #152]	; 0x98
  402eaa:	e888 00a0 	stmia.w	r8, {r5, r7}
  402eae:	f300 8381 	bgt.w	4035b4 <_svfprintf_r+0xa98>
  402eb2:	f108 0808 	add.w	r8, r8, #8
  402eb6:	9b07      	ldr	r3, [sp, #28]
  402eb8:	05df      	lsls	r7, r3, #23
  402eba:	f100 8268 	bmi.w	40338e <_svfprintf_r+0x872>
  402ebe:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402ec0:	990e      	ldr	r1, [sp, #56]	; 0x38
  402ec2:	f8c8 6000 	str.w	r6, [r8]
  402ec6:	3301      	adds	r3, #1
  402ec8:	440c      	add	r4, r1
  402eca:	2b07      	cmp	r3, #7
  402ecc:	9427      	str	r4, [sp, #156]	; 0x9c
  402ece:	f8c8 1004 	str.w	r1, [r8, #4]
  402ed2:	9326      	str	r3, [sp, #152]	; 0x98
  402ed4:	f300 834d 	bgt.w	403572 <_svfprintf_r+0xa56>
  402ed8:	f108 0808 	add.w	r8, r8, #8
  402edc:	9b07      	ldr	r3, [sp, #28]
  402ede:	075b      	lsls	r3, r3, #29
  402ee0:	d53a      	bpl.n	402f58 <_svfprintf_r+0x43c>
  402ee2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402ee4:	9a08      	ldr	r2, [sp, #32]
  402ee6:	1a9d      	subs	r5, r3, r2
  402ee8:	2d00      	cmp	r5, #0
  402eea:	dd35      	ble.n	402f58 <_svfprintf_r+0x43c>
  402eec:	2d10      	cmp	r5, #16
  402eee:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402ef0:	dd20      	ble.n	402f34 <_svfprintf_r+0x418>
  402ef2:	2610      	movs	r6, #16
  402ef4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  402ef6:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  402efa:	e004      	b.n	402f06 <_svfprintf_r+0x3ea>
  402efc:	3d10      	subs	r5, #16
  402efe:	2d10      	cmp	r5, #16
  402f00:	f108 0808 	add.w	r8, r8, #8
  402f04:	dd16      	ble.n	402f34 <_svfprintf_r+0x418>
  402f06:	3301      	adds	r3, #1
  402f08:	4a5e      	ldr	r2, [pc, #376]	; (403084 <_svfprintf_r+0x568>)
  402f0a:	9326      	str	r3, [sp, #152]	; 0x98
  402f0c:	3410      	adds	r4, #16
  402f0e:	2b07      	cmp	r3, #7
  402f10:	9427      	str	r4, [sp, #156]	; 0x9c
  402f12:	e888 0044 	stmia.w	r8, {r2, r6}
  402f16:	ddf1      	ble.n	402efc <_svfprintf_r+0x3e0>
  402f18:	aa25      	add	r2, sp, #148	; 0x94
  402f1a:	4659      	mov	r1, fp
  402f1c:	4638      	mov	r0, r7
  402f1e:	f002 ff19 	bl	405d54 <__ssprint_r>
  402f22:	2800      	cmp	r0, #0
  402f24:	f47f aecc 	bne.w	402cc0 <_svfprintf_r+0x1a4>
  402f28:	3d10      	subs	r5, #16
  402f2a:	2d10      	cmp	r5, #16
  402f2c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402f2e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402f30:	46c8      	mov	r8, r9
  402f32:	dce8      	bgt.n	402f06 <_svfprintf_r+0x3ea>
  402f34:	3301      	adds	r3, #1
  402f36:	4a53      	ldr	r2, [pc, #332]	; (403084 <_svfprintf_r+0x568>)
  402f38:	9326      	str	r3, [sp, #152]	; 0x98
  402f3a:	442c      	add	r4, r5
  402f3c:	2b07      	cmp	r3, #7
  402f3e:	9427      	str	r4, [sp, #156]	; 0x9c
  402f40:	e888 0024 	stmia.w	r8, {r2, r5}
  402f44:	dd08      	ble.n	402f58 <_svfprintf_r+0x43c>
  402f46:	aa25      	add	r2, sp, #148	; 0x94
  402f48:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402f4a:	980c      	ldr	r0, [sp, #48]	; 0x30
  402f4c:	f002 ff02 	bl	405d54 <__ssprint_r>
  402f50:	2800      	cmp	r0, #0
  402f52:	f47f aeb5 	bne.w	402cc0 <_svfprintf_r+0x1a4>
  402f56:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402f5a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  402f5c:	9908      	ldr	r1, [sp, #32]
  402f5e:	428a      	cmp	r2, r1
  402f60:	bfac      	ite	ge
  402f62:	189b      	addge	r3, r3, r2
  402f64:	185b      	addlt	r3, r3, r1
  402f66:	9309      	str	r3, [sp, #36]	; 0x24
  402f68:	2c00      	cmp	r4, #0
  402f6a:	f040 830d 	bne.w	403588 <_svfprintf_r+0xa6c>
  402f6e:	2300      	movs	r3, #0
  402f70:	9326      	str	r3, [sp, #152]	; 0x98
  402f72:	46c8      	mov	r8, r9
  402f74:	e5f9      	b.n	402b6a <_svfprintf_r+0x4e>
  402f76:	9311      	str	r3, [sp, #68]	; 0x44
  402f78:	f01b 0320 	ands.w	r3, fp, #32
  402f7c:	f040 81e3 	bne.w	403346 <_svfprintf_r+0x82a>
  402f80:	f01b 0210 	ands.w	r2, fp, #16
  402f84:	f040 842e 	bne.w	4037e4 <_svfprintf_r+0xcc8>
  402f88:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  402f8c:	f000 842a 	beq.w	4037e4 <_svfprintf_r+0xcc8>
  402f90:	990f      	ldr	r1, [sp, #60]	; 0x3c
  402f92:	4613      	mov	r3, r2
  402f94:	460a      	mov	r2, r1
  402f96:	3204      	adds	r2, #4
  402f98:	880c      	ldrh	r4, [r1, #0]
  402f9a:	920f      	str	r2, [sp, #60]	; 0x3c
  402f9c:	2500      	movs	r5, #0
  402f9e:	e6b0      	b.n	402d02 <_svfprintf_r+0x1e6>
  402fa0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402fa2:	9311      	str	r3, [sp, #68]	; 0x44
  402fa4:	6816      	ldr	r6, [r2, #0]
  402fa6:	2400      	movs	r4, #0
  402fa8:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  402fac:	1d15      	adds	r5, r2, #4
  402fae:	2e00      	cmp	r6, #0
  402fb0:	f000 86a7 	beq.w	403d02 <_svfprintf_r+0x11e6>
  402fb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  402fb6:	1c53      	adds	r3, r2, #1
  402fb8:	f000 8609 	beq.w	403bce <_svfprintf_r+0x10b2>
  402fbc:	4621      	mov	r1, r4
  402fbe:	4630      	mov	r0, r6
  402fc0:	f002 fac6 	bl	405550 <memchr>
  402fc4:	2800      	cmp	r0, #0
  402fc6:	f000 86e1 	beq.w	403d8c <_svfprintf_r+0x1270>
  402fca:	1b83      	subs	r3, r0, r6
  402fcc:	930e      	str	r3, [sp, #56]	; 0x38
  402fce:	940a      	str	r4, [sp, #40]	; 0x28
  402fd0:	950f      	str	r5, [sp, #60]	; 0x3c
  402fd2:	f8cd b01c 	str.w	fp, [sp, #28]
  402fd6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  402fda:	9308      	str	r3, [sp, #32]
  402fdc:	9412      	str	r4, [sp, #72]	; 0x48
  402fde:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  402fe2:	e6b3      	b.n	402d4c <_svfprintf_r+0x230>
  402fe4:	f89a 3000 	ldrb.w	r3, [sl]
  402fe8:	2201      	movs	r2, #1
  402fea:	212b      	movs	r1, #43	; 0x2b
  402fec:	e5ee      	b.n	402bcc <_svfprintf_r+0xb0>
  402fee:	f04b 0b20 	orr.w	fp, fp, #32
  402ff2:	f89a 3000 	ldrb.w	r3, [sl]
  402ff6:	e5e9      	b.n	402bcc <_svfprintf_r+0xb0>
  402ff8:	9311      	str	r3, [sp, #68]	; 0x44
  402ffa:	2a00      	cmp	r2, #0
  402ffc:	f040 8795 	bne.w	403f2a <_svfprintf_r+0x140e>
  403000:	4b22      	ldr	r3, [pc, #136]	; (40308c <_svfprintf_r+0x570>)
  403002:	9318      	str	r3, [sp, #96]	; 0x60
  403004:	f01b 0f20 	tst.w	fp, #32
  403008:	f040 8111 	bne.w	40322e <_svfprintf_r+0x712>
  40300c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40300e:	f01b 0f10 	tst.w	fp, #16
  403012:	4613      	mov	r3, r2
  403014:	f040 83e1 	bne.w	4037da <_svfprintf_r+0xcbe>
  403018:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40301c:	f000 83dd 	beq.w	4037da <_svfprintf_r+0xcbe>
  403020:	3304      	adds	r3, #4
  403022:	8814      	ldrh	r4, [r2, #0]
  403024:	930f      	str	r3, [sp, #60]	; 0x3c
  403026:	2500      	movs	r5, #0
  403028:	f01b 0f01 	tst.w	fp, #1
  40302c:	f000 810c 	beq.w	403248 <_svfprintf_r+0x72c>
  403030:	ea54 0305 	orrs.w	r3, r4, r5
  403034:	f000 8108 	beq.w	403248 <_svfprintf_r+0x72c>
  403038:	2330      	movs	r3, #48	; 0x30
  40303a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  40303e:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  403042:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  403046:	f04b 0b02 	orr.w	fp, fp, #2
  40304a:	2302      	movs	r3, #2
  40304c:	e659      	b.n	402d02 <_svfprintf_r+0x1e6>
  40304e:	f89a 3000 	ldrb.w	r3, [sl]
  403052:	2900      	cmp	r1, #0
  403054:	f47f adba 	bne.w	402bcc <_svfprintf_r+0xb0>
  403058:	2201      	movs	r2, #1
  40305a:	2120      	movs	r1, #32
  40305c:	e5b6      	b.n	402bcc <_svfprintf_r+0xb0>
  40305e:	f04b 0b01 	orr.w	fp, fp, #1
  403062:	f89a 3000 	ldrb.w	r3, [sl]
  403066:	e5b1      	b.n	402bcc <_svfprintf_r+0xb0>
  403068:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  40306a:	6823      	ldr	r3, [r4, #0]
  40306c:	930d      	str	r3, [sp, #52]	; 0x34
  40306e:	4618      	mov	r0, r3
  403070:	2800      	cmp	r0, #0
  403072:	4623      	mov	r3, r4
  403074:	f103 0304 	add.w	r3, r3, #4
  403078:	f6ff ae0a 	blt.w	402c90 <_svfprintf_r+0x174>
  40307c:	930f      	str	r3, [sp, #60]	; 0x3c
  40307e:	f89a 3000 	ldrb.w	r3, [sl]
  403082:	e5a3      	b.n	402bcc <_svfprintf_r+0xb0>
  403084:	00407160 	.word	0x00407160
  403088:	00407170 	.word	0x00407170
  40308c:	00407140 	.word	0x00407140
  403090:	f04b 0b10 	orr.w	fp, fp, #16
  403094:	f01b 0f20 	tst.w	fp, #32
  403098:	9311      	str	r3, [sp, #68]	; 0x44
  40309a:	f43f ae23 	beq.w	402ce4 <_svfprintf_r+0x1c8>
  40309e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4030a0:	3507      	adds	r5, #7
  4030a2:	f025 0307 	bic.w	r3, r5, #7
  4030a6:	f103 0208 	add.w	r2, r3, #8
  4030aa:	e9d3 4500 	ldrd	r4, r5, [r3]
  4030ae:	920f      	str	r2, [sp, #60]	; 0x3c
  4030b0:	2301      	movs	r3, #1
  4030b2:	e626      	b.n	402d02 <_svfprintf_r+0x1e6>
  4030b4:	f89a 3000 	ldrb.w	r3, [sl]
  4030b8:	2b2a      	cmp	r3, #42	; 0x2a
  4030ba:	f10a 0401 	add.w	r4, sl, #1
  4030be:	f000 8727 	beq.w	403f10 <_svfprintf_r+0x13f4>
  4030c2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4030c6:	2809      	cmp	r0, #9
  4030c8:	46a2      	mov	sl, r4
  4030ca:	f200 86ad 	bhi.w	403e28 <_svfprintf_r+0x130c>
  4030ce:	2300      	movs	r3, #0
  4030d0:	461c      	mov	r4, r3
  4030d2:	f81a 3b01 	ldrb.w	r3, [sl], #1
  4030d6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4030da:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4030de:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4030e2:	2809      	cmp	r0, #9
  4030e4:	d9f5      	bls.n	4030d2 <_svfprintf_r+0x5b6>
  4030e6:	940a      	str	r4, [sp, #40]	; 0x28
  4030e8:	e572      	b.n	402bd0 <_svfprintf_r+0xb4>
  4030ea:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  4030ee:	f89a 3000 	ldrb.w	r3, [sl]
  4030f2:	e56b      	b.n	402bcc <_svfprintf_r+0xb0>
  4030f4:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  4030f8:	f89a 3000 	ldrb.w	r3, [sl]
  4030fc:	e566      	b.n	402bcc <_svfprintf_r+0xb0>
  4030fe:	f89a 3000 	ldrb.w	r3, [sl]
  403102:	2b6c      	cmp	r3, #108	; 0x6c
  403104:	bf03      	ittte	eq
  403106:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  40310a:	f04b 0b20 	orreq.w	fp, fp, #32
  40310e:	f10a 0a01 	addeq.w	sl, sl, #1
  403112:	f04b 0b10 	orrne.w	fp, fp, #16
  403116:	e559      	b.n	402bcc <_svfprintf_r+0xb0>
  403118:	2a00      	cmp	r2, #0
  40311a:	f040 8711 	bne.w	403f40 <_svfprintf_r+0x1424>
  40311e:	f01b 0f20 	tst.w	fp, #32
  403122:	f040 84f9 	bne.w	403b18 <_svfprintf_r+0xffc>
  403126:	f01b 0f10 	tst.w	fp, #16
  40312a:	f040 84ac 	bne.w	403a86 <_svfprintf_r+0xf6a>
  40312e:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403132:	f000 84a8 	beq.w	403a86 <_svfprintf_r+0xf6a>
  403136:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403138:	6813      	ldr	r3, [r2, #0]
  40313a:	3204      	adds	r2, #4
  40313c:	920f      	str	r2, [sp, #60]	; 0x3c
  40313e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  403142:	801a      	strh	r2, [r3, #0]
  403144:	e511      	b.n	402b6a <_svfprintf_r+0x4e>
  403146:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403148:	4bb3      	ldr	r3, [pc, #716]	; (403418 <_svfprintf_r+0x8fc>)
  40314a:	680c      	ldr	r4, [r1, #0]
  40314c:	9318      	str	r3, [sp, #96]	; 0x60
  40314e:	2230      	movs	r2, #48	; 0x30
  403150:	2378      	movs	r3, #120	; 0x78
  403152:	3104      	adds	r1, #4
  403154:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  403158:	9311      	str	r3, [sp, #68]	; 0x44
  40315a:	f04b 0b02 	orr.w	fp, fp, #2
  40315e:	910f      	str	r1, [sp, #60]	; 0x3c
  403160:	2500      	movs	r5, #0
  403162:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  403166:	2302      	movs	r3, #2
  403168:	e5cb      	b.n	402d02 <_svfprintf_r+0x1e6>
  40316a:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40316c:	9311      	str	r3, [sp, #68]	; 0x44
  40316e:	680a      	ldr	r2, [r1, #0]
  403170:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  403174:	2300      	movs	r3, #0
  403176:	460a      	mov	r2, r1
  403178:	461f      	mov	r7, r3
  40317a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40317e:	3204      	adds	r2, #4
  403180:	2301      	movs	r3, #1
  403182:	9308      	str	r3, [sp, #32]
  403184:	f8cd b01c 	str.w	fp, [sp, #28]
  403188:	970a      	str	r7, [sp, #40]	; 0x28
  40318a:	9712      	str	r7, [sp, #72]	; 0x48
  40318c:	920f      	str	r2, [sp, #60]	; 0x3c
  40318e:	930e      	str	r3, [sp, #56]	; 0x38
  403190:	ae28      	add	r6, sp, #160	; 0xa0
  403192:	e5df      	b.n	402d54 <_svfprintf_r+0x238>
  403194:	9311      	str	r3, [sp, #68]	; 0x44
  403196:	2a00      	cmp	r2, #0
  403198:	f040 86ea 	bne.w	403f70 <_svfprintf_r+0x1454>
  40319c:	f01b 0f20 	tst.w	fp, #32
  4031a0:	d15d      	bne.n	40325e <_svfprintf_r+0x742>
  4031a2:	f01b 0f10 	tst.w	fp, #16
  4031a6:	f040 8308 	bne.w	4037ba <_svfprintf_r+0xc9e>
  4031aa:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4031ae:	f000 8304 	beq.w	4037ba <_svfprintf_r+0xc9e>
  4031b2:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4031b4:	f9b1 4000 	ldrsh.w	r4, [r1]
  4031b8:	3104      	adds	r1, #4
  4031ba:	17e5      	asrs	r5, r4, #31
  4031bc:	4622      	mov	r2, r4
  4031be:	462b      	mov	r3, r5
  4031c0:	910f      	str	r1, [sp, #60]	; 0x3c
  4031c2:	2a00      	cmp	r2, #0
  4031c4:	f173 0300 	sbcs.w	r3, r3, #0
  4031c8:	db58      	blt.n	40327c <_svfprintf_r+0x760>
  4031ca:	990a      	ldr	r1, [sp, #40]	; 0x28
  4031cc:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4031d0:	1c4a      	adds	r2, r1, #1
  4031d2:	f04f 0301 	mov.w	r3, #1
  4031d6:	f47f ad9b 	bne.w	402d10 <_svfprintf_r+0x1f4>
  4031da:	ea54 0205 	orrs.w	r2, r4, r5
  4031de:	f000 81df 	beq.w	4035a0 <_svfprintf_r+0xa84>
  4031e2:	f8cd b01c 	str.w	fp, [sp, #28]
  4031e6:	2b01      	cmp	r3, #1
  4031e8:	f000 827b 	beq.w	4036e2 <_svfprintf_r+0xbc6>
  4031ec:	2b02      	cmp	r3, #2
  4031ee:	f040 8206 	bne.w	4035fe <_svfprintf_r+0xae2>
  4031f2:	9818      	ldr	r0, [sp, #96]	; 0x60
  4031f4:	464e      	mov	r6, r9
  4031f6:	0923      	lsrs	r3, r4, #4
  4031f8:	f004 010f 	and.w	r1, r4, #15
  4031fc:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  403200:	092a      	lsrs	r2, r5, #4
  403202:	461c      	mov	r4, r3
  403204:	4615      	mov	r5, r2
  403206:	5c43      	ldrb	r3, [r0, r1]
  403208:	f806 3d01 	strb.w	r3, [r6, #-1]!
  40320c:	ea54 0305 	orrs.w	r3, r4, r5
  403210:	d1f1      	bne.n	4031f6 <_svfprintf_r+0x6da>
  403212:	eba9 0306 	sub.w	r3, r9, r6
  403216:	930e      	str	r3, [sp, #56]	; 0x38
  403218:	e590      	b.n	402d3c <_svfprintf_r+0x220>
  40321a:	9311      	str	r3, [sp, #68]	; 0x44
  40321c:	2a00      	cmp	r2, #0
  40321e:	f040 86a3 	bne.w	403f68 <_svfprintf_r+0x144c>
  403222:	4b7e      	ldr	r3, [pc, #504]	; (40341c <_svfprintf_r+0x900>)
  403224:	9318      	str	r3, [sp, #96]	; 0x60
  403226:	f01b 0f20 	tst.w	fp, #32
  40322a:	f43f aeef 	beq.w	40300c <_svfprintf_r+0x4f0>
  40322e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403230:	3507      	adds	r5, #7
  403232:	f025 0307 	bic.w	r3, r5, #7
  403236:	f103 0208 	add.w	r2, r3, #8
  40323a:	f01b 0f01 	tst.w	fp, #1
  40323e:	920f      	str	r2, [sp, #60]	; 0x3c
  403240:	e9d3 4500 	ldrd	r4, r5, [r3]
  403244:	f47f aef4 	bne.w	403030 <_svfprintf_r+0x514>
  403248:	2302      	movs	r3, #2
  40324a:	e55a      	b.n	402d02 <_svfprintf_r+0x1e6>
  40324c:	9311      	str	r3, [sp, #68]	; 0x44
  40324e:	2a00      	cmp	r2, #0
  403250:	f040 8686 	bne.w	403f60 <_svfprintf_r+0x1444>
  403254:	f04b 0b10 	orr.w	fp, fp, #16
  403258:	f01b 0f20 	tst.w	fp, #32
  40325c:	d0a1      	beq.n	4031a2 <_svfprintf_r+0x686>
  40325e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403260:	3507      	adds	r5, #7
  403262:	f025 0507 	bic.w	r5, r5, #7
  403266:	e9d5 2300 	ldrd	r2, r3, [r5]
  40326a:	2a00      	cmp	r2, #0
  40326c:	f105 0108 	add.w	r1, r5, #8
  403270:	461d      	mov	r5, r3
  403272:	f173 0300 	sbcs.w	r3, r3, #0
  403276:	910f      	str	r1, [sp, #60]	; 0x3c
  403278:	4614      	mov	r4, r2
  40327a:	daa6      	bge.n	4031ca <_svfprintf_r+0x6ae>
  40327c:	272d      	movs	r7, #45	; 0x2d
  40327e:	4264      	negs	r4, r4
  403280:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  403284:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  403288:	2301      	movs	r3, #1
  40328a:	e53d      	b.n	402d08 <_svfprintf_r+0x1ec>
  40328c:	9311      	str	r3, [sp, #68]	; 0x44
  40328e:	2a00      	cmp	r2, #0
  403290:	f040 8662 	bne.w	403f58 <_svfprintf_r+0x143c>
  403294:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403296:	3507      	adds	r5, #7
  403298:	f025 0307 	bic.w	r3, r5, #7
  40329c:	f103 0208 	add.w	r2, r3, #8
  4032a0:	920f      	str	r2, [sp, #60]	; 0x3c
  4032a2:	681a      	ldr	r2, [r3, #0]
  4032a4:	9215      	str	r2, [sp, #84]	; 0x54
  4032a6:	685b      	ldr	r3, [r3, #4]
  4032a8:	9314      	str	r3, [sp, #80]	; 0x50
  4032aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4032ac:	9d15      	ldr	r5, [sp, #84]	; 0x54
  4032ae:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  4032b2:	4628      	mov	r0, r5
  4032b4:	4621      	mov	r1, r4
  4032b6:	f04f 32ff 	mov.w	r2, #4294967295
  4032ba:	4b59      	ldr	r3, [pc, #356]	; (403420 <_svfprintf_r+0x904>)
  4032bc:	f003 fe10 	bl	406ee0 <__aeabi_dcmpun>
  4032c0:	2800      	cmp	r0, #0
  4032c2:	f040 834a 	bne.w	40395a <_svfprintf_r+0xe3e>
  4032c6:	4628      	mov	r0, r5
  4032c8:	4621      	mov	r1, r4
  4032ca:	f04f 32ff 	mov.w	r2, #4294967295
  4032ce:	4b54      	ldr	r3, [pc, #336]	; (403420 <_svfprintf_r+0x904>)
  4032d0:	f003 fde8 	bl	406ea4 <__aeabi_dcmple>
  4032d4:	2800      	cmp	r0, #0
  4032d6:	f040 8340 	bne.w	40395a <_svfprintf_r+0xe3e>
  4032da:	a815      	add	r0, sp, #84	; 0x54
  4032dc:	c80d      	ldmia	r0, {r0, r2, r3}
  4032de:	9914      	ldr	r1, [sp, #80]	; 0x50
  4032e0:	f003 fdd6 	bl	406e90 <__aeabi_dcmplt>
  4032e4:	2800      	cmp	r0, #0
  4032e6:	f040 8530 	bne.w	403d4a <_svfprintf_r+0x122e>
  4032ea:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4032ee:	4e4d      	ldr	r6, [pc, #308]	; (403424 <_svfprintf_r+0x908>)
  4032f0:	4b4d      	ldr	r3, [pc, #308]	; (403428 <_svfprintf_r+0x90c>)
  4032f2:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  4032f6:	9007      	str	r0, [sp, #28]
  4032f8:	9811      	ldr	r0, [sp, #68]	; 0x44
  4032fa:	2203      	movs	r2, #3
  4032fc:	2100      	movs	r1, #0
  4032fe:	9208      	str	r2, [sp, #32]
  403300:	910a      	str	r1, [sp, #40]	; 0x28
  403302:	2847      	cmp	r0, #71	; 0x47
  403304:	bfd8      	it	le
  403306:	461e      	movle	r6, r3
  403308:	920e      	str	r2, [sp, #56]	; 0x38
  40330a:	9112      	str	r1, [sp, #72]	; 0x48
  40330c:	e51e      	b.n	402d4c <_svfprintf_r+0x230>
  40330e:	f04b 0b08 	orr.w	fp, fp, #8
  403312:	f89a 3000 	ldrb.w	r3, [sl]
  403316:	e459      	b.n	402bcc <_svfprintf_r+0xb0>
  403318:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40331c:	2300      	movs	r3, #0
  40331e:	461c      	mov	r4, r3
  403320:	f81a 3b01 	ldrb.w	r3, [sl], #1
  403324:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403328:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40332c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403330:	2809      	cmp	r0, #9
  403332:	d9f5      	bls.n	403320 <_svfprintf_r+0x804>
  403334:	940d      	str	r4, [sp, #52]	; 0x34
  403336:	e44b      	b.n	402bd0 <_svfprintf_r+0xb4>
  403338:	f04b 0b10 	orr.w	fp, fp, #16
  40333c:	9311      	str	r3, [sp, #68]	; 0x44
  40333e:	f01b 0320 	ands.w	r3, fp, #32
  403342:	f43f ae1d 	beq.w	402f80 <_svfprintf_r+0x464>
  403346:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403348:	3507      	adds	r5, #7
  40334a:	f025 0307 	bic.w	r3, r5, #7
  40334e:	f103 0208 	add.w	r2, r3, #8
  403352:	e9d3 4500 	ldrd	r4, r5, [r3]
  403356:	920f      	str	r2, [sp, #60]	; 0x3c
  403358:	2300      	movs	r3, #0
  40335a:	e4d2      	b.n	402d02 <_svfprintf_r+0x1e6>
  40335c:	9311      	str	r3, [sp, #68]	; 0x44
  40335e:	2a00      	cmp	r2, #0
  403360:	f040 85e7 	bne.w	403f32 <_svfprintf_r+0x1416>
  403364:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403366:	2a00      	cmp	r2, #0
  403368:	f43f aca3 	beq.w	402cb2 <_svfprintf_r+0x196>
  40336c:	2300      	movs	r3, #0
  40336e:	2101      	movs	r1, #1
  403370:	461f      	mov	r7, r3
  403372:	9108      	str	r1, [sp, #32]
  403374:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  403378:	f8cd b01c 	str.w	fp, [sp, #28]
  40337c:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403380:	930a      	str	r3, [sp, #40]	; 0x28
  403382:	9312      	str	r3, [sp, #72]	; 0x48
  403384:	910e      	str	r1, [sp, #56]	; 0x38
  403386:	ae28      	add	r6, sp, #160	; 0xa0
  403388:	e4e4      	b.n	402d54 <_svfprintf_r+0x238>
  40338a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40338c:	e534      	b.n	402df8 <_svfprintf_r+0x2dc>
  40338e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403390:	2b65      	cmp	r3, #101	; 0x65
  403392:	f340 80a7 	ble.w	4034e4 <_svfprintf_r+0x9c8>
  403396:	a815      	add	r0, sp, #84	; 0x54
  403398:	c80d      	ldmia	r0, {r0, r2, r3}
  40339a:	9914      	ldr	r1, [sp, #80]	; 0x50
  40339c:	f003 fd6e 	bl	406e7c <__aeabi_dcmpeq>
  4033a0:	2800      	cmp	r0, #0
  4033a2:	f000 8150 	beq.w	403646 <_svfprintf_r+0xb2a>
  4033a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4033a8:	4a20      	ldr	r2, [pc, #128]	; (40342c <_svfprintf_r+0x910>)
  4033aa:	f8c8 2000 	str.w	r2, [r8]
  4033ae:	3301      	adds	r3, #1
  4033b0:	3401      	adds	r4, #1
  4033b2:	2201      	movs	r2, #1
  4033b4:	2b07      	cmp	r3, #7
  4033b6:	9427      	str	r4, [sp, #156]	; 0x9c
  4033b8:	9326      	str	r3, [sp, #152]	; 0x98
  4033ba:	f8c8 2004 	str.w	r2, [r8, #4]
  4033be:	f300 836a 	bgt.w	403a96 <_svfprintf_r+0xf7a>
  4033c2:	f108 0808 	add.w	r8, r8, #8
  4033c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4033c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4033ca:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4033cc:	4293      	cmp	r3, r2
  4033ce:	db03      	blt.n	4033d8 <_svfprintf_r+0x8bc>
  4033d0:	9b07      	ldr	r3, [sp, #28]
  4033d2:	07dd      	lsls	r5, r3, #31
  4033d4:	f57f ad82 	bpl.w	402edc <_svfprintf_r+0x3c0>
  4033d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4033da:	9919      	ldr	r1, [sp, #100]	; 0x64
  4033dc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  4033de:	f8c8 2000 	str.w	r2, [r8]
  4033e2:	3301      	adds	r3, #1
  4033e4:	440c      	add	r4, r1
  4033e6:	2b07      	cmp	r3, #7
  4033e8:	f8c8 1004 	str.w	r1, [r8, #4]
  4033ec:	9427      	str	r4, [sp, #156]	; 0x9c
  4033ee:	9326      	str	r3, [sp, #152]	; 0x98
  4033f0:	f300 839e 	bgt.w	403b30 <_svfprintf_r+0x1014>
  4033f4:	f108 0808 	add.w	r8, r8, #8
  4033f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4033fa:	1e5e      	subs	r6, r3, #1
  4033fc:	2e00      	cmp	r6, #0
  4033fe:	f77f ad6d 	ble.w	402edc <_svfprintf_r+0x3c0>
  403402:	2e10      	cmp	r6, #16
  403404:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403406:	4d0a      	ldr	r5, [pc, #40]	; (403430 <_svfprintf_r+0x914>)
  403408:	f340 81f5 	ble.w	4037f6 <_svfprintf_r+0xcda>
  40340c:	4622      	mov	r2, r4
  40340e:	2710      	movs	r7, #16
  403410:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  403414:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  403416:	e013      	b.n	403440 <_svfprintf_r+0x924>
  403418:	00407140 	.word	0x00407140
  40341c:	0040712c 	.word	0x0040712c
  403420:	7fefffff 	.word	0x7fefffff
  403424:	00407120 	.word	0x00407120
  403428:	0040711c 	.word	0x0040711c
  40342c:	0040715c 	.word	0x0040715c
  403430:	00407170 	.word	0x00407170
  403434:	f108 0808 	add.w	r8, r8, #8
  403438:	3e10      	subs	r6, #16
  40343a:	2e10      	cmp	r6, #16
  40343c:	f340 81da 	ble.w	4037f4 <_svfprintf_r+0xcd8>
  403440:	3301      	adds	r3, #1
  403442:	3210      	adds	r2, #16
  403444:	2b07      	cmp	r3, #7
  403446:	9227      	str	r2, [sp, #156]	; 0x9c
  403448:	9326      	str	r3, [sp, #152]	; 0x98
  40344a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40344e:	ddf1      	ble.n	403434 <_svfprintf_r+0x918>
  403450:	aa25      	add	r2, sp, #148	; 0x94
  403452:	4621      	mov	r1, r4
  403454:	4658      	mov	r0, fp
  403456:	f002 fc7d 	bl	405d54 <__ssprint_r>
  40345a:	2800      	cmp	r0, #0
  40345c:	f47f ac30 	bne.w	402cc0 <_svfprintf_r+0x1a4>
  403460:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403462:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403464:	46c8      	mov	r8, r9
  403466:	e7e7      	b.n	403438 <_svfprintf_r+0x91c>
  403468:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40346a:	9a08      	ldr	r2, [sp, #32]
  40346c:	1a9f      	subs	r7, r3, r2
  40346e:	2f00      	cmp	r7, #0
  403470:	f77f ace5 	ble.w	402e3e <_svfprintf_r+0x322>
  403474:	2f10      	cmp	r7, #16
  403476:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403478:	4db6      	ldr	r5, [pc, #728]	; (403754 <_svfprintf_r+0xc38>)
  40347a:	dd27      	ble.n	4034cc <_svfprintf_r+0x9b0>
  40347c:	4642      	mov	r2, r8
  40347e:	4621      	mov	r1, r4
  403480:	46b0      	mov	r8, r6
  403482:	f04f 0b10 	mov.w	fp, #16
  403486:	462e      	mov	r6, r5
  403488:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40348a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40348c:	e004      	b.n	403498 <_svfprintf_r+0x97c>
  40348e:	3f10      	subs	r7, #16
  403490:	2f10      	cmp	r7, #16
  403492:	f102 0208 	add.w	r2, r2, #8
  403496:	dd15      	ble.n	4034c4 <_svfprintf_r+0x9a8>
  403498:	3301      	adds	r3, #1
  40349a:	3110      	adds	r1, #16
  40349c:	2b07      	cmp	r3, #7
  40349e:	9127      	str	r1, [sp, #156]	; 0x9c
  4034a0:	9326      	str	r3, [sp, #152]	; 0x98
  4034a2:	e882 0840 	stmia.w	r2, {r6, fp}
  4034a6:	ddf2      	ble.n	40348e <_svfprintf_r+0x972>
  4034a8:	aa25      	add	r2, sp, #148	; 0x94
  4034aa:	4629      	mov	r1, r5
  4034ac:	4620      	mov	r0, r4
  4034ae:	f002 fc51 	bl	405d54 <__ssprint_r>
  4034b2:	2800      	cmp	r0, #0
  4034b4:	f47f ac04 	bne.w	402cc0 <_svfprintf_r+0x1a4>
  4034b8:	3f10      	subs	r7, #16
  4034ba:	2f10      	cmp	r7, #16
  4034bc:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4034be:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4034c0:	464a      	mov	r2, r9
  4034c2:	dce9      	bgt.n	403498 <_svfprintf_r+0x97c>
  4034c4:	4635      	mov	r5, r6
  4034c6:	460c      	mov	r4, r1
  4034c8:	4646      	mov	r6, r8
  4034ca:	4690      	mov	r8, r2
  4034cc:	3301      	adds	r3, #1
  4034ce:	443c      	add	r4, r7
  4034d0:	2b07      	cmp	r3, #7
  4034d2:	9427      	str	r4, [sp, #156]	; 0x9c
  4034d4:	9326      	str	r3, [sp, #152]	; 0x98
  4034d6:	e888 00a0 	stmia.w	r8, {r5, r7}
  4034da:	f300 8232 	bgt.w	403942 <_svfprintf_r+0xe26>
  4034de:	f108 0808 	add.w	r8, r8, #8
  4034e2:	e4ac      	b.n	402e3e <_svfprintf_r+0x322>
  4034e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4034e6:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4034e8:	2b01      	cmp	r3, #1
  4034ea:	f340 81fe 	ble.w	4038ea <_svfprintf_r+0xdce>
  4034ee:	3701      	adds	r7, #1
  4034f0:	3401      	adds	r4, #1
  4034f2:	2301      	movs	r3, #1
  4034f4:	2f07      	cmp	r7, #7
  4034f6:	9427      	str	r4, [sp, #156]	; 0x9c
  4034f8:	9726      	str	r7, [sp, #152]	; 0x98
  4034fa:	f8c8 6000 	str.w	r6, [r8]
  4034fe:	f8c8 3004 	str.w	r3, [r8, #4]
  403502:	f300 8203 	bgt.w	40390c <_svfprintf_r+0xdf0>
  403506:	f108 0808 	add.w	r8, r8, #8
  40350a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40350c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40350e:	f8c8 3000 	str.w	r3, [r8]
  403512:	3701      	adds	r7, #1
  403514:	4414      	add	r4, r2
  403516:	2f07      	cmp	r7, #7
  403518:	9427      	str	r4, [sp, #156]	; 0x9c
  40351a:	9726      	str	r7, [sp, #152]	; 0x98
  40351c:	f8c8 2004 	str.w	r2, [r8, #4]
  403520:	f300 8200 	bgt.w	403924 <_svfprintf_r+0xe08>
  403524:	f108 0808 	add.w	r8, r8, #8
  403528:	a815      	add	r0, sp, #84	; 0x54
  40352a:	c80d      	ldmia	r0, {r0, r2, r3}
  40352c:	9914      	ldr	r1, [sp, #80]	; 0x50
  40352e:	f003 fca5 	bl	406e7c <__aeabi_dcmpeq>
  403532:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403534:	2800      	cmp	r0, #0
  403536:	f040 8101 	bne.w	40373c <_svfprintf_r+0xc20>
  40353a:	3b01      	subs	r3, #1
  40353c:	3701      	adds	r7, #1
  40353e:	3601      	adds	r6, #1
  403540:	441c      	add	r4, r3
  403542:	2f07      	cmp	r7, #7
  403544:	9726      	str	r7, [sp, #152]	; 0x98
  403546:	9427      	str	r4, [sp, #156]	; 0x9c
  403548:	f8c8 6000 	str.w	r6, [r8]
  40354c:	f8c8 3004 	str.w	r3, [r8, #4]
  403550:	f300 8127 	bgt.w	4037a2 <_svfprintf_r+0xc86>
  403554:	f108 0808 	add.w	r8, r8, #8
  403558:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  40355a:	f8c8 2004 	str.w	r2, [r8, #4]
  40355e:	3701      	adds	r7, #1
  403560:	4414      	add	r4, r2
  403562:	ab21      	add	r3, sp, #132	; 0x84
  403564:	2f07      	cmp	r7, #7
  403566:	9427      	str	r4, [sp, #156]	; 0x9c
  403568:	9726      	str	r7, [sp, #152]	; 0x98
  40356a:	f8c8 3000 	str.w	r3, [r8]
  40356e:	f77f acb3 	ble.w	402ed8 <_svfprintf_r+0x3bc>
  403572:	aa25      	add	r2, sp, #148	; 0x94
  403574:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403576:	980c      	ldr	r0, [sp, #48]	; 0x30
  403578:	f002 fbec 	bl	405d54 <__ssprint_r>
  40357c:	2800      	cmp	r0, #0
  40357e:	f47f ab9f 	bne.w	402cc0 <_svfprintf_r+0x1a4>
  403582:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403584:	46c8      	mov	r8, r9
  403586:	e4a9      	b.n	402edc <_svfprintf_r+0x3c0>
  403588:	aa25      	add	r2, sp, #148	; 0x94
  40358a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40358c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40358e:	f002 fbe1 	bl	405d54 <__ssprint_r>
  403592:	2800      	cmp	r0, #0
  403594:	f43f aceb 	beq.w	402f6e <_svfprintf_r+0x452>
  403598:	f7ff bb92 	b.w	402cc0 <_svfprintf_r+0x1a4>
  40359c:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4035a0:	2b01      	cmp	r3, #1
  4035a2:	f000 8134 	beq.w	40380e <_svfprintf_r+0xcf2>
  4035a6:	2b02      	cmp	r3, #2
  4035a8:	d125      	bne.n	4035f6 <_svfprintf_r+0xada>
  4035aa:	f8cd b01c 	str.w	fp, [sp, #28]
  4035ae:	2400      	movs	r4, #0
  4035b0:	2500      	movs	r5, #0
  4035b2:	e61e      	b.n	4031f2 <_svfprintf_r+0x6d6>
  4035b4:	aa25      	add	r2, sp, #148	; 0x94
  4035b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4035b8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4035ba:	f002 fbcb 	bl	405d54 <__ssprint_r>
  4035be:	2800      	cmp	r0, #0
  4035c0:	f47f ab7e 	bne.w	402cc0 <_svfprintf_r+0x1a4>
  4035c4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4035c6:	46c8      	mov	r8, r9
  4035c8:	e475      	b.n	402eb6 <_svfprintf_r+0x39a>
  4035ca:	aa25      	add	r2, sp, #148	; 0x94
  4035cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4035ce:	980c      	ldr	r0, [sp, #48]	; 0x30
  4035d0:	f002 fbc0 	bl	405d54 <__ssprint_r>
  4035d4:	2800      	cmp	r0, #0
  4035d6:	f47f ab73 	bne.w	402cc0 <_svfprintf_r+0x1a4>
  4035da:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4035dc:	46c8      	mov	r8, r9
  4035de:	e41b      	b.n	402e18 <_svfprintf_r+0x2fc>
  4035e0:	aa25      	add	r2, sp, #148	; 0x94
  4035e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4035e4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4035e6:	f002 fbb5 	bl	405d54 <__ssprint_r>
  4035ea:	2800      	cmp	r0, #0
  4035ec:	f47f ab68 	bne.w	402cc0 <_svfprintf_r+0x1a4>
  4035f0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4035f2:	46c8      	mov	r8, r9
  4035f4:	e420      	b.n	402e38 <_svfprintf_r+0x31c>
  4035f6:	f8cd b01c 	str.w	fp, [sp, #28]
  4035fa:	2400      	movs	r4, #0
  4035fc:	2500      	movs	r5, #0
  4035fe:	4649      	mov	r1, r9
  403600:	e000      	b.n	403604 <_svfprintf_r+0xae8>
  403602:	4631      	mov	r1, r6
  403604:	08e2      	lsrs	r2, r4, #3
  403606:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40360a:	08e8      	lsrs	r0, r5, #3
  40360c:	f004 0307 	and.w	r3, r4, #7
  403610:	4605      	mov	r5, r0
  403612:	4614      	mov	r4, r2
  403614:	3330      	adds	r3, #48	; 0x30
  403616:	ea54 0205 	orrs.w	r2, r4, r5
  40361a:	f801 3c01 	strb.w	r3, [r1, #-1]
  40361e:	f101 36ff 	add.w	r6, r1, #4294967295
  403622:	d1ee      	bne.n	403602 <_svfprintf_r+0xae6>
  403624:	9a07      	ldr	r2, [sp, #28]
  403626:	07d2      	lsls	r2, r2, #31
  403628:	f57f adf3 	bpl.w	403212 <_svfprintf_r+0x6f6>
  40362c:	2b30      	cmp	r3, #48	; 0x30
  40362e:	f43f adf0 	beq.w	403212 <_svfprintf_r+0x6f6>
  403632:	3902      	subs	r1, #2
  403634:	2330      	movs	r3, #48	; 0x30
  403636:	f806 3c01 	strb.w	r3, [r6, #-1]
  40363a:	eba9 0301 	sub.w	r3, r9, r1
  40363e:	930e      	str	r3, [sp, #56]	; 0x38
  403640:	460e      	mov	r6, r1
  403642:	f7ff bb7b 	b.w	402d3c <_svfprintf_r+0x220>
  403646:	991f      	ldr	r1, [sp, #124]	; 0x7c
  403648:	2900      	cmp	r1, #0
  40364a:	f340 822e 	ble.w	403aaa <_svfprintf_r+0xf8e>
  40364e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403650:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  403652:	4293      	cmp	r3, r2
  403654:	bfa8      	it	ge
  403656:	4613      	movge	r3, r2
  403658:	2b00      	cmp	r3, #0
  40365a:	461f      	mov	r7, r3
  40365c:	dd0d      	ble.n	40367a <_svfprintf_r+0xb5e>
  40365e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403660:	f8c8 6000 	str.w	r6, [r8]
  403664:	3301      	adds	r3, #1
  403666:	443c      	add	r4, r7
  403668:	2b07      	cmp	r3, #7
  40366a:	9427      	str	r4, [sp, #156]	; 0x9c
  40366c:	f8c8 7004 	str.w	r7, [r8, #4]
  403670:	9326      	str	r3, [sp, #152]	; 0x98
  403672:	f300 831f 	bgt.w	403cb4 <_svfprintf_r+0x1198>
  403676:	f108 0808 	add.w	r8, r8, #8
  40367a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40367c:	2f00      	cmp	r7, #0
  40367e:	bfa8      	it	ge
  403680:	1bdb      	subge	r3, r3, r7
  403682:	2b00      	cmp	r3, #0
  403684:	461f      	mov	r7, r3
  403686:	f340 80d6 	ble.w	403836 <_svfprintf_r+0xd1a>
  40368a:	2f10      	cmp	r7, #16
  40368c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40368e:	4d31      	ldr	r5, [pc, #196]	; (403754 <_svfprintf_r+0xc38>)
  403690:	f340 81ed 	ble.w	403a6e <_svfprintf_r+0xf52>
  403694:	4642      	mov	r2, r8
  403696:	4621      	mov	r1, r4
  403698:	46b0      	mov	r8, r6
  40369a:	f04f 0b10 	mov.w	fp, #16
  40369e:	462e      	mov	r6, r5
  4036a0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4036a2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4036a4:	e004      	b.n	4036b0 <_svfprintf_r+0xb94>
  4036a6:	3208      	adds	r2, #8
  4036a8:	3f10      	subs	r7, #16
  4036aa:	2f10      	cmp	r7, #16
  4036ac:	f340 81db 	ble.w	403a66 <_svfprintf_r+0xf4a>
  4036b0:	3301      	adds	r3, #1
  4036b2:	3110      	adds	r1, #16
  4036b4:	2b07      	cmp	r3, #7
  4036b6:	9127      	str	r1, [sp, #156]	; 0x9c
  4036b8:	9326      	str	r3, [sp, #152]	; 0x98
  4036ba:	e882 0840 	stmia.w	r2, {r6, fp}
  4036be:	ddf2      	ble.n	4036a6 <_svfprintf_r+0xb8a>
  4036c0:	aa25      	add	r2, sp, #148	; 0x94
  4036c2:	4629      	mov	r1, r5
  4036c4:	4620      	mov	r0, r4
  4036c6:	f002 fb45 	bl	405d54 <__ssprint_r>
  4036ca:	2800      	cmp	r0, #0
  4036cc:	f47f aaf8 	bne.w	402cc0 <_svfprintf_r+0x1a4>
  4036d0:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4036d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4036d4:	464a      	mov	r2, r9
  4036d6:	e7e7      	b.n	4036a8 <_svfprintf_r+0xb8c>
  4036d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4036da:	930e      	str	r3, [sp, #56]	; 0x38
  4036dc:	464e      	mov	r6, r9
  4036de:	f7ff bb2d 	b.w	402d3c <_svfprintf_r+0x220>
  4036e2:	2d00      	cmp	r5, #0
  4036e4:	bf08      	it	eq
  4036e6:	2c0a      	cmpeq	r4, #10
  4036e8:	f0c0 808f 	bcc.w	40380a <_svfprintf_r+0xcee>
  4036ec:	464e      	mov	r6, r9
  4036ee:	4620      	mov	r0, r4
  4036f0:	4629      	mov	r1, r5
  4036f2:	220a      	movs	r2, #10
  4036f4:	2300      	movs	r3, #0
  4036f6:	f7fe ff61 	bl	4025bc <__aeabi_uldivmod>
  4036fa:	3230      	adds	r2, #48	; 0x30
  4036fc:	f806 2d01 	strb.w	r2, [r6, #-1]!
  403700:	4620      	mov	r0, r4
  403702:	4629      	mov	r1, r5
  403704:	2300      	movs	r3, #0
  403706:	220a      	movs	r2, #10
  403708:	f7fe ff58 	bl	4025bc <__aeabi_uldivmod>
  40370c:	4604      	mov	r4, r0
  40370e:	460d      	mov	r5, r1
  403710:	ea54 0305 	orrs.w	r3, r4, r5
  403714:	d1eb      	bne.n	4036ee <_svfprintf_r+0xbd2>
  403716:	eba9 0306 	sub.w	r3, r9, r6
  40371a:	930e      	str	r3, [sp, #56]	; 0x38
  40371c:	f7ff bb0e 	b.w	402d3c <_svfprintf_r+0x220>
  403720:	aa25      	add	r2, sp, #148	; 0x94
  403722:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403724:	980c      	ldr	r0, [sp, #48]	; 0x30
  403726:	f002 fb15 	bl	405d54 <__ssprint_r>
  40372a:	2800      	cmp	r0, #0
  40372c:	f47f aac8 	bne.w	402cc0 <_svfprintf_r+0x1a4>
  403730:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403734:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403736:	46c8      	mov	r8, r9
  403738:	f7ff bb5e 	b.w	402df8 <_svfprintf_r+0x2dc>
  40373c:	1e5e      	subs	r6, r3, #1
  40373e:	2e00      	cmp	r6, #0
  403740:	f77f af0a 	ble.w	403558 <_svfprintf_r+0xa3c>
  403744:	2e10      	cmp	r6, #16
  403746:	4d03      	ldr	r5, [pc, #12]	; (403754 <_svfprintf_r+0xc38>)
  403748:	dd22      	ble.n	403790 <_svfprintf_r+0xc74>
  40374a:	4622      	mov	r2, r4
  40374c:	f04f 0b10 	mov.w	fp, #16
  403750:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403752:	e006      	b.n	403762 <_svfprintf_r+0xc46>
  403754:	00407170 	.word	0x00407170
  403758:	3e10      	subs	r6, #16
  40375a:	2e10      	cmp	r6, #16
  40375c:	f108 0808 	add.w	r8, r8, #8
  403760:	dd15      	ble.n	40378e <_svfprintf_r+0xc72>
  403762:	3701      	adds	r7, #1
  403764:	3210      	adds	r2, #16
  403766:	2f07      	cmp	r7, #7
  403768:	9227      	str	r2, [sp, #156]	; 0x9c
  40376a:	9726      	str	r7, [sp, #152]	; 0x98
  40376c:	e888 0820 	stmia.w	r8, {r5, fp}
  403770:	ddf2      	ble.n	403758 <_svfprintf_r+0xc3c>
  403772:	aa25      	add	r2, sp, #148	; 0x94
  403774:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403776:	4620      	mov	r0, r4
  403778:	f002 faec 	bl	405d54 <__ssprint_r>
  40377c:	2800      	cmp	r0, #0
  40377e:	f47f aa9f 	bne.w	402cc0 <_svfprintf_r+0x1a4>
  403782:	3e10      	subs	r6, #16
  403784:	2e10      	cmp	r6, #16
  403786:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403788:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40378a:	46c8      	mov	r8, r9
  40378c:	dce9      	bgt.n	403762 <_svfprintf_r+0xc46>
  40378e:	4614      	mov	r4, r2
  403790:	3701      	adds	r7, #1
  403792:	4434      	add	r4, r6
  403794:	2f07      	cmp	r7, #7
  403796:	9427      	str	r4, [sp, #156]	; 0x9c
  403798:	9726      	str	r7, [sp, #152]	; 0x98
  40379a:	e888 0060 	stmia.w	r8, {r5, r6}
  40379e:	f77f aed9 	ble.w	403554 <_svfprintf_r+0xa38>
  4037a2:	aa25      	add	r2, sp, #148	; 0x94
  4037a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4037a6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4037a8:	f002 fad4 	bl	405d54 <__ssprint_r>
  4037ac:	2800      	cmp	r0, #0
  4037ae:	f47f aa87 	bne.w	402cc0 <_svfprintf_r+0x1a4>
  4037b2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4037b4:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4037b6:	46c8      	mov	r8, r9
  4037b8:	e6ce      	b.n	403558 <_svfprintf_r+0xa3c>
  4037ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4037bc:	6814      	ldr	r4, [r2, #0]
  4037be:	4613      	mov	r3, r2
  4037c0:	3304      	adds	r3, #4
  4037c2:	17e5      	asrs	r5, r4, #31
  4037c4:	930f      	str	r3, [sp, #60]	; 0x3c
  4037c6:	4622      	mov	r2, r4
  4037c8:	462b      	mov	r3, r5
  4037ca:	e4fa      	b.n	4031c2 <_svfprintf_r+0x6a6>
  4037cc:	3204      	adds	r2, #4
  4037ce:	681c      	ldr	r4, [r3, #0]
  4037d0:	920f      	str	r2, [sp, #60]	; 0x3c
  4037d2:	2301      	movs	r3, #1
  4037d4:	2500      	movs	r5, #0
  4037d6:	f7ff ba94 	b.w	402d02 <_svfprintf_r+0x1e6>
  4037da:	681c      	ldr	r4, [r3, #0]
  4037dc:	3304      	adds	r3, #4
  4037de:	930f      	str	r3, [sp, #60]	; 0x3c
  4037e0:	2500      	movs	r5, #0
  4037e2:	e421      	b.n	403028 <_svfprintf_r+0x50c>
  4037e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4037e6:	460a      	mov	r2, r1
  4037e8:	3204      	adds	r2, #4
  4037ea:	680c      	ldr	r4, [r1, #0]
  4037ec:	920f      	str	r2, [sp, #60]	; 0x3c
  4037ee:	2500      	movs	r5, #0
  4037f0:	f7ff ba87 	b.w	402d02 <_svfprintf_r+0x1e6>
  4037f4:	4614      	mov	r4, r2
  4037f6:	3301      	adds	r3, #1
  4037f8:	4434      	add	r4, r6
  4037fa:	2b07      	cmp	r3, #7
  4037fc:	9427      	str	r4, [sp, #156]	; 0x9c
  4037fe:	9326      	str	r3, [sp, #152]	; 0x98
  403800:	e888 0060 	stmia.w	r8, {r5, r6}
  403804:	f77f ab68 	ble.w	402ed8 <_svfprintf_r+0x3bc>
  403808:	e6b3      	b.n	403572 <_svfprintf_r+0xa56>
  40380a:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40380e:	f8cd b01c 	str.w	fp, [sp, #28]
  403812:	ae42      	add	r6, sp, #264	; 0x108
  403814:	3430      	adds	r4, #48	; 0x30
  403816:	2301      	movs	r3, #1
  403818:	f806 4d41 	strb.w	r4, [r6, #-65]!
  40381c:	930e      	str	r3, [sp, #56]	; 0x38
  40381e:	f7ff ba8d 	b.w	402d3c <_svfprintf_r+0x220>
  403822:	aa25      	add	r2, sp, #148	; 0x94
  403824:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403826:	980c      	ldr	r0, [sp, #48]	; 0x30
  403828:	f002 fa94 	bl	405d54 <__ssprint_r>
  40382c:	2800      	cmp	r0, #0
  40382e:	f47f aa47 	bne.w	402cc0 <_svfprintf_r+0x1a4>
  403832:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403834:	46c8      	mov	r8, r9
  403836:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  403838:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40383a:	429a      	cmp	r2, r3
  40383c:	db44      	blt.n	4038c8 <_svfprintf_r+0xdac>
  40383e:	9b07      	ldr	r3, [sp, #28]
  403840:	07d9      	lsls	r1, r3, #31
  403842:	d441      	bmi.n	4038c8 <_svfprintf_r+0xdac>
  403844:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403846:	9812      	ldr	r0, [sp, #72]	; 0x48
  403848:	1a9a      	subs	r2, r3, r2
  40384a:	1a1d      	subs	r5, r3, r0
  40384c:	4295      	cmp	r5, r2
  40384e:	bfa8      	it	ge
  403850:	4615      	movge	r5, r2
  403852:	2d00      	cmp	r5, #0
  403854:	dd0e      	ble.n	403874 <_svfprintf_r+0xd58>
  403856:	9926      	ldr	r1, [sp, #152]	; 0x98
  403858:	f8c8 5004 	str.w	r5, [r8, #4]
  40385c:	3101      	adds	r1, #1
  40385e:	4406      	add	r6, r0
  403860:	442c      	add	r4, r5
  403862:	2907      	cmp	r1, #7
  403864:	f8c8 6000 	str.w	r6, [r8]
  403868:	9427      	str	r4, [sp, #156]	; 0x9c
  40386a:	9126      	str	r1, [sp, #152]	; 0x98
  40386c:	f300 823b 	bgt.w	403ce6 <_svfprintf_r+0x11ca>
  403870:	f108 0808 	add.w	r8, r8, #8
  403874:	2d00      	cmp	r5, #0
  403876:	bfac      	ite	ge
  403878:	1b56      	subge	r6, r2, r5
  40387a:	4616      	movlt	r6, r2
  40387c:	2e00      	cmp	r6, #0
  40387e:	f77f ab2d 	ble.w	402edc <_svfprintf_r+0x3c0>
  403882:	2e10      	cmp	r6, #16
  403884:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403886:	4db0      	ldr	r5, [pc, #704]	; (403b48 <_svfprintf_r+0x102c>)
  403888:	ddb5      	ble.n	4037f6 <_svfprintf_r+0xcda>
  40388a:	4622      	mov	r2, r4
  40388c:	2710      	movs	r7, #16
  40388e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  403892:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  403894:	e004      	b.n	4038a0 <_svfprintf_r+0xd84>
  403896:	f108 0808 	add.w	r8, r8, #8
  40389a:	3e10      	subs	r6, #16
  40389c:	2e10      	cmp	r6, #16
  40389e:	dda9      	ble.n	4037f4 <_svfprintf_r+0xcd8>
  4038a0:	3301      	adds	r3, #1
  4038a2:	3210      	adds	r2, #16
  4038a4:	2b07      	cmp	r3, #7
  4038a6:	9227      	str	r2, [sp, #156]	; 0x9c
  4038a8:	9326      	str	r3, [sp, #152]	; 0x98
  4038aa:	e888 00a0 	stmia.w	r8, {r5, r7}
  4038ae:	ddf2      	ble.n	403896 <_svfprintf_r+0xd7a>
  4038b0:	aa25      	add	r2, sp, #148	; 0x94
  4038b2:	4621      	mov	r1, r4
  4038b4:	4658      	mov	r0, fp
  4038b6:	f002 fa4d 	bl	405d54 <__ssprint_r>
  4038ba:	2800      	cmp	r0, #0
  4038bc:	f47f aa00 	bne.w	402cc0 <_svfprintf_r+0x1a4>
  4038c0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4038c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4038c4:	46c8      	mov	r8, r9
  4038c6:	e7e8      	b.n	40389a <_svfprintf_r+0xd7e>
  4038c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4038ca:	9819      	ldr	r0, [sp, #100]	; 0x64
  4038cc:	991a      	ldr	r1, [sp, #104]	; 0x68
  4038ce:	f8c8 1000 	str.w	r1, [r8]
  4038d2:	3301      	adds	r3, #1
  4038d4:	4404      	add	r4, r0
  4038d6:	2b07      	cmp	r3, #7
  4038d8:	9427      	str	r4, [sp, #156]	; 0x9c
  4038da:	f8c8 0004 	str.w	r0, [r8, #4]
  4038de:	9326      	str	r3, [sp, #152]	; 0x98
  4038e0:	f300 81f5 	bgt.w	403cce <_svfprintf_r+0x11b2>
  4038e4:	f108 0808 	add.w	r8, r8, #8
  4038e8:	e7ac      	b.n	403844 <_svfprintf_r+0xd28>
  4038ea:	9b07      	ldr	r3, [sp, #28]
  4038ec:	07da      	lsls	r2, r3, #31
  4038ee:	f53f adfe 	bmi.w	4034ee <_svfprintf_r+0x9d2>
  4038f2:	3701      	adds	r7, #1
  4038f4:	3401      	adds	r4, #1
  4038f6:	2301      	movs	r3, #1
  4038f8:	2f07      	cmp	r7, #7
  4038fa:	9427      	str	r4, [sp, #156]	; 0x9c
  4038fc:	9726      	str	r7, [sp, #152]	; 0x98
  4038fe:	f8c8 6000 	str.w	r6, [r8]
  403902:	f8c8 3004 	str.w	r3, [r8, #4]
  403906:	f77f ae25 	ble.w	403554 <_svfprintf_r+0xa38>
  40390a:	e74a      	b.n	4037a2 <_svfprintf_r+0xc86>
  40390c:	aa25      	add	r2, sp, #148	; 0x94
  40390e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403910:	980c      	ldr	r0, [sp, #48]	; 0x30
  403912:	f002 fa1f 	bl	405d54 <__ssprint_r>
  403916:	2800      	cmp	r0, #0
  403918:	f47f a9d2 	bne.w	402cc0 <_svfprintf_r+0x1a4>
  40391c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40391e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  403920:	46c8      	mov	r8, r9
  403922:	e5f2      	b.n	40350a <_svfprintf_r+0x9ee>
  403924:	aa25      	add	r2, sp, #148	; 0x94
  403926:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403928:	980c      	ldr	r0, [sp, #48]	; 0x30
  40392a:	f002 fa13 	bl	405d54 <__ssprint_r>
  40392e:	2800      	cmp	r0, #0
  403930:	f47f a9c6 	bne.w	402cc0 <_svfprintf_r+0x1a4>
  403934:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403936:	9f26      	ldr	r7, [sp, #152]	; 0x98
  403938:	46c8      	mov	r8, r9
  40393a:	e5f5      	b.n	403528 <_svfprintf_r+0xa0c>
  40393c:	464e      	mov	r6, r9
  40393e:	f7ff b9fd 	b.w	402d3c <_svfprintf_r+0x220>
  403942:	aa25      	add	r2, sp, #148	; 0x94
  403944:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403946:	980c      	ldr	r0, [sp, #48]	; 0x30
  403948:	f002 fa04 	bl	405d54 <__ssprint_r>
  40394c:	2800      	cmp	r0, #0
  40394e:	f47f a9b7 	bne.w	402cc0 <_svfprintf_r+0x1a4>
  403952:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403954:	46c8      	mov	r8, r9
  403956:	f7ff ba72 	b.w	402e3e <_svfprintf_r+0x322>
  40395a:	9c15      	ldr	r4, [sp, #84]	; 0x54
  40395c:	4622      	mov	r2, r4
  40395e:	4620      	mov	r0, r4
  403960:	9c14      	ldr	r4, [sp, #80]	; 0x50
  403962:	4623      	mov	r3, r4
  403964:	4621      	mov	r1, r4
  403966:	f003 fabb 	bl	406ee0 <__aeabi_dcmpun>
  40396a:	2800      	cmp	r0, #0
  40396c:	f040 8286 	bne.w	403e7c <_svfprintf_r+0x1360>
  403970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403972:	3301      	adds	r3, #1
  403974:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403976:	f023 0320 	bic.w	r3, r3, #32
  40397a:	930e      	str	r3, [sp, #56]	; 0x38
  40397c:	f000 81e2 	beq.w	403d44 <_svfprintf_r+0x1228>
  403980:	2b47      	cmp	r3, #71	; 0x47
  403982:	f000 811e 	beq.w	403bc2 <_svfprintf_r+0x10a6>
  403986:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  40398a:	9307      	str	r3, [sp, #28]
  40398c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40398e:	1e1f      	subs	r7, r3, #0
  403990:	9b15      	ldr	r3, [sp, #84]	; 0x54
  403992:	9308      	str	r3, [sp, #32]
  403994:	bfbb      	ittet	lt
  403996:	463b      	movlt	r3, r7
  403998:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  40399c:	2300      	movge	r3, #0
  40399e:	232d      	movlt	r3, #45	; 0x2d
  4039a0:	9310      	str	r3, [sp, #64]	; 0x40
  4039a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4039a4:	2b66      	cmp	r3, #102	; 0x66
  4039a6:	f000 81bb 	beq.w	403d20 <_svfprintf_r+0x1204>
  4039aa:	2b46      	cmp	r3, #70	; 0x46
  4039ac:	f000 80df 	beq.w	403b6e <_svfprintf_r+0x1052>
  4039b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4039b2:	9a08      	ldr	r2, [sp, #32]
  4039b4:	2b45      	cmp	r3, #69	; 0x45
  4039b6:	bf0c      	ite	eq
  4039b8:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  4039ba:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  4039bc:	a823      	add	r0, sp, #140	; 0x8c
  4039be:	a920      	add	r1, sp, #128	; 0x80
  4039c0:	bf08      	it	eq
  4039c2:	1c5d      	addeq	r5, r3, #1
  4039c4:	9004      	str	r0, [sp, #16]
  4039c6:	9103      	str	r1, [sp, #12]
  4039c8:	a81f      	add	r0, sp, #124	; 0x7c
  4039ca:	2102      	movs	r1, #2
  4039cc:	463b      	mov	r3, r7
  4039ce:	9002      	str	r0, [sp, #8]
  4039d0:	9501      	str	r5, [sp, #4]
  4039d2:	9100      	str	r1, [sp, #0]
  4039d4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4039d6:	f000 fbb3 	bl	404140 <_dtoa_r>
  4039da:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4039dc:	2b67      	cmp	r3, #103	; 0x67
  4039de:	4606      	mov	r6, r0
  4039e0:	f040 81e0 	bne.w	403da4 <_svfprintf_r+0x1288>
  4039e4:	f01b 0f01 	tst.w	fp, #1
  4039e8:	f000 8246 	beq.w	403e78 <_svfprintf_r+0x135c>
  4039ec:	1974      	adds	r4, r6, r5
  4039ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4039f0:	9808      	ldr	r0, [sp, #32]
  4039f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4039f4:	4639      	mov	r1, r7
  4039f6:	f003 fa41 	bl	406e7c <__aeabi_dcmpeq>
  4039fa:	2800      	cmp	r0, #0
  4039fc:	f040 8165 	bne.w	403cca <_svfprintf_r+0x11ae>
  403a00:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  403a02:	42a3      	cmp	r3, r4
  403a04:	d206      	bcs.n	403a14 <_svfprintf_r+0xef8>
  403a06:	2130      	movs	r1, #48	; 0x30
  403a08:	1c5a      	adds	r2, r3, #1
  403a0a:	9223      	str	r2, [sp, #140]	; 0x8c
  403a0c:	7019      	strb	r1, [r3, #0]
  403a0e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  403a10:	429c      	cmp	r4, r3
  403a12:	d8f9      	bhi.n	403a08 <_svfprintf_r+0xeec>
  403a14:	1b9b      	subs	r3, r3, r6
  403a16:	9313      	str	r3, [sp, #76]	; 0x4c
  403a18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403a1a:	2b47      	cmp	r3, #71	; 0x47
  403a1c:	f000 80e9 	beq.w	403bf2 <_svfprintf_r+0x10d6>
  403a20:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403a22:	2b65      	cmp	r3, #101	; 0x65
  403a24:	f340 81cd 	ble.w	403dc2 <_svfprintf_r+0x12a6>
  403a28:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403a2a:	2b66      	cmp	r3, #102	; 0x66
  403a2c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403a2e:	9312      	str	r3, [sp, #72]	; 0x48
  403a30:	f000 819e 	beq.w	403d70 <_svfprintf_r+0x1254>
  403a34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403a36:	9a12      	ldr	r2, [sp, #72]	; 0x48
  403a38:	4619      	mov	r1, r3
  403a3a:	4291      	cmp	r1, r2
  403a3c:	f300 818a 	bgt.w	403d54 <_svfprintf_r+0x1238>
  403a40:	f01b 0f01 	tst.w	fp, #1
  403a44:	f040 8213 	bne.w	403e6e <_svfprintf_r+0x1352>
  403a48:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  403a4c:	9308      	str	r3, [sp, #32]
  403a4e:	2367      	movs	r3, #103	; 0x67
  403a50:	920e      	str	r2, [sp, #56]	; 0x38
  403a52:	9311      	str	r3, [sp, #68]	; 0x44
  403a54:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403a56:	2b00      	cmp	r3, #0
  403a58:	f040 80c4 	bne.w	403be4 <_svfprintf_r+0x10c8>
  403a5c:	930a      	str	r3, [sp, #40]	; 0x28
  403a5e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403a62:	f7ff b973 	b.w	402d4c <_svfprintf_r+0x230>
  403a66:	4635      	mov	r5, r6
  403a68:	460c      	mov	r4, r1
  403a6a:	4646      	mov	r6, r8
  403a6c:	4690      	mov	r8, r2
  403a6e:	3301      	adds	r3, #1
  403a70:	443c      	add	r4, r7
  403a72:	2b07      	cmp	r3, #7
  403a74:	9427      	str	r4, [sp, #156]	; 0x9c
  403a76:	9326      	str	r3, [sp, #152]	; 0x98
  403a78:	e888 00a0 	stmia.w	r8, {r5, r7}
  403a7c:	f73f aed1 	bgt.w	403822 <_svfprintf_r+0xd06>
  403a80:	f108 0808 	add.w	r8, r8, #8
  403a84:	e6d7      	b.n	403836 <_svfprintf_r+0xd1a>
  403a86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403a88:	6813      	ldr	r3, [r2, #0]
  403a8a:	3204      	adds	r2, #4
  403a8c:	920f      	str	r2, [sp, #60]	; 0x3c
  403a8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403a90:	601a      	str	r2, [r3, #0]
  403a92:	f7ff b86a 	b.w	402b6a <_svfprintf_r+0x4e>
  403a96:	aa25      	add	r2, sp, #148	; 0x94
  403a98:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403a9a:	980c      	ldr	r0, [sp, #48]	; 0x30
  403a9c:	f002 f95a 	bl	405d54 <__ssprint_r>
  403aa0:	2800      	cmp	r0, #0
  403aa2:	f47f a90d 	bne.w	402cc0 <_svfprintf_r+0x1a4>
  403aa6:	46c8      	mov	r8, r9
  403aa8:	e48d      	b.n	4033c6 <_svfprintf_r+0x8aa>
  403aaa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403aac:	4a27      	ldr	r2, [pc, #156]	; (403b4c <_svfprintf_r+0x1030>)
  403aae:	f8c8 2000 	str.w	r2, [r8]
  403ab2:	3301      	adds	r3, #1
  403ab4:	3401      	adds	r4, #1
  403ab6:	2201      	movs	r2, #1
  403ab8:	2b07      	cmp	r3, #7
  403aba:	9427      	str	r4, [sp, #156]	; 0x9c
  403abc:	9326      	str	r3, [sp, #152]	; 0x98
  403abe:	f8c8 2004 	str.w	r2, [r8, #4]
  403ac2:	dc72      	bgt.n	403baa <_svfprintf_r+0x108e>
  403ac4:	f108 0808 	add.w	r8, r8, #8
  403ac8:	b929      	cbnz	r1, 403ad6 <_svfprintf_r+0xfba>
  403aca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403acc:	b91b      	cbnz	r3, 403ad6 <_svfprintf_r+0xfba>
  403ace:	9b07      	ldr	r3, [sp, #28]
  403ad0:	07d8      	lsls	r0, r3, #31
  403ad2:	f57f aa03 	bpl.w	402edc <_svfprintf_r+0x3c0>
  403ad6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403ad8:	9819      	ldr	r0, [sp, #100]	; 0x64
  403ada:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  403adc:	f8c8 2000 	str.w	r2, [r8]
  403ae0:	3301      	adds	r3, #1
  403ae2:	4602      	mov	r2, r0
  403ae4:	4422      	add	r2, r4
  403ae6:	2b07      	cmp	r3, #7
  403ae8:	9227      	str	r2, [sp, #156]	; 0x9c
  403aea:	f8c8 0004 	str.w	r0, [r8, #4]
  403aee:	9326      	str	r3, [sp, #152]	; 0x98
  403af0:	f300 818d 	bgt.w	403e0e <_svfprintf_r+0x12f2>
  403af4:	f108 0808 	add.w	r8, r8, #8
  403af8:	2900      	cmp	r1, #0
  403afa:	f2c0 8165 	blt.w	403dc8 <_svfprintf_r+0x12ac>
  403afe:	9913      	ldr	r1, [sp, #76]	; 0x4c
  403b00:	f8c8 6000 	str.w	r6, [r8]
  403b04:	3301      	adds	r3, #1
  403b06:	188c      	adds	r4, r1, r2
  403b08:	2b07      	cmp	r3, #7
  403b0a:	9427      	str	r4, [sp, #156]	; 0x9c
  403b0c:	9326      	str	r3, [sp, #152]	; 0x98
  403b0e:	f8c8 1004 	str.w	r1, [r8, #4]
  403b12:	f77f a9e1 	ble.w	402ed8 <_svfprintf_r+0x3bc>
  403b16:	e52c      	b.n	403572 <_svfprintf_r+0xa56>
  403b18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403b1a:	9909      	ldr	r1, [sp, #36]	; 0x24
  403b1c:	6813      	ldr	r3, [r2, #0]
  403b1e:	17cd      	asrs	r5, r1, #31
  403b20:	4608      	mov	r0, r1
  403b22:	3204      	adds	r2, #4
  403b24:	4629      	mov	r1, r5
  403b26:	920f      	str	r2, [sp, #60]	; 0x3c
  403b28:	e9c3 0100 	strd	r0, r1, [r3]
  403b2c:	f7ff b81d 	b.w	402b6a <_svfprintf_r+0x4e>
  403b30:	aa25      	add	r2, sp, #148	; 0x94
  403b32:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403b34:	980c      	ldr	r0, [sp, #48]	; 0x30
  403b36:	f002 f90d 	bl	405d54 <__ssprint_r>
  403b3a:	2800      	cmp	r0, #0
  403b3c:	f47f a8c0 	bne.w	402cc0 <_svfprintf_r+0x1a4>
  403b40:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403b42:	46c8      	mov	r8, r9
  403b44:	e458      	b.n	4033f8 <_svfprintf_r+0x8dc>
  403b46:	bf00      	nop
  403b48:	00407170 	.word	0x00407170
  403b4c:	0040715c 	.word	0x0040715c
  403b50:	2140      	movs	r1, #64	; 0x40
  403b52:	980c      	ldr	r0, [sp, #48]	; 0x30
  403b54:	f001 fa4a 	bl	404fec <_malloc_r>
  403b58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  403b5a:	6010      	str	r0, [r2, #0]
  403b5c:	6110      	str	r0, [r2, #16]
  403b5e:	2800      	cmp	r0, #0
  403b60:	f000 81f2 	beq.w	403f48 <_svfprintf_r+0x142c>
  403b64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  403b66:	2340      	movs	r3, #64	; 0x40
  403b68:	6153      	str	r3, [r2, #20]
  403b6a:	f7fe bfee 	b.w	402b4a <_svfprintf_r+0x2e>
  403b6e:	a823      	add	r0, sp, #140	; 0x8c
  403b70:	a920      	add	r1, sp, #128	; 0x80
  403b72:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  403b74:	9004      	str	r0, [sp, #16]
  403b76:	9103      	str	r1, [sp, #12]
  403b78:	a81f      	add	r0, sp, #124	; 0x7c
  403b7a:	2103      	movs	r1, #3
  403b7c:	9002      	str	r0, [sp, #8]
  403b7e:	9a08      	ldr	r2, [sp, #32]
  403b80:	9401      	str	r4, [sp, #4]
  403b82:	463b      	mov	r3, r7
  403b84:	9100      	str	r1, [sp, #0]
  403b86:	980c      	ldr	r0, [sp, #48]	; 0x30
  403b88:	f000 fada 	bl	404140 <_dtoa_r>
  403b8c:	4625      	mov	r5, r4
  403b8e:	4606      	mov	r6, r0
  403b90:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403b92:	2b46      	cmp	r3, #70	; 0x46
  403b94:	eb06 0405 	add.w	r4, r6, r5
  403b98:	f47f af29 	bne.w	4039ee <_svfprintf_r+0xed2>
  403b9c:	7833      	ldrb	r3, [r6, #0]
  403b9e:	2b30      	cmp	r3, #48	; 0x30
  403ba0:	f000 8178 	beq.w	403e94 <_svfprintf_r+0x1378>
  403ba4:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  403ba6:	442c      	add	r4, r5
  403ba8:	e721      	b.n	4039ee <_svfprintf_r+0xed2>
  403baa:	aa25      	add	r2, sp, #148	; 0x94
  403bac:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403bae:	980c      	ldr	r0, [sp, #48]	; 0x30
  403bb0:	f002 f8d0 	bl	405d54 <__ssprint_r>
  403bb4:	2800      	cmp	r0, #0
  403bb6:	f47f a883 	bne.w	402cc0 <_svfprintf_r+0x1a4>
  403bba:	991f      	ldr	r1, [sp, #124]	; 0x7c
  403bbc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403bbe:	46c8      	mov	r8, r9
  403bc0:	e782      	b.n	403ac8 <_svfprintf_r+0xfac>
  403bc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403bc4:	2b00      	cmp	r3, #0
  403bc6:	bf08      	it	eq
  403bc8:	2301      	moveq	r3, #1
  403bca:	930a      	str	r3, [sp, #40]	; 0x28
  403bcc:	e6db      	b.n	403986 <_svfprintf_r+0xe6a>
  403bce:	4630      	mov	r0, r6
  403bd0:	940a      	str	r4, [sp, #40]	; 0x28
  403bd2:	f7fe ff35 	bl	402a40 <strlen>
  403bd6:	950f      	str	r5, [sp, #60]	; 0x3c
  403bd8:	900e      	str	r0, [sp, #56]	; 0x38
  403bda:	f8cd b01c 	str.w	fp, [sp, #28]
  403bde:	4603      	mov	r3, r0
  403be0:	f7ff b9f9 	b.w	402fd6 <_svfprintf_r+0x4ba>
  403be4:	272d      	movs	r7, #45	; 0x2d
  403be6:	2300      	movs	r3, #0
  403be8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  403bec:	930a      	str	r3, [sp, #40]	; 0x28
  403bee:	f7ff b8ae 	b.w	402d4e <_svfprintf_r+0x232>
  403bf2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403bf4:	9312      	str	r3, [sp, #72]	; 0x48
  403bf6:	461a      	mov	r2, r3
  403bf8:	3303      	adds	r3, #3
  403bfa:	db04      	blt.n	403c06 <_svfprintf_r+0x10ea>
  403bfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403bfe:	4619      	mov	r1, r3
  403c00:	4291      	cmp	r1, r2
  403c02:	f6bf af17 	bge.w	403a34 <_svfprintf_r+0xf18>
  403c06:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403c08:	3b02      	subs	r3, #2
  403c0a:	9311      	str	r3, [sp, #68]	; 0x44
  403c0c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  403c10:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  403c14:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403c16:	3b01      	subs	r3, #1
  403c18:	2b00      	cmp	r3, #0
  403c1a:	931f      	str	r3, [sp, #124]	; 0x7c
  403c1c:	bfbd      	ittte	lt
  403c1e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  403c20:	f1c3 0301 	rsblt	r3, r3, #1
  403c24:	222d      	movlt	r2, #45	; 0x2d
  403c26:	222b      	movge	r2, #43	; 0x2b
  403c28:	2b09      	cmp	r3, #9
  403c2a:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  403c2e:	f340 8116 	ble.w	403e5e <_svfprintf_r+0x1342>
  403c32:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  403c36:	4620      	mov	r0, r4
  403c38:	4dab      	ldr	r5, [pc, #684]	; (403ee8 <_svfprintf_r+0x13cc>)
  403c3a:	e000      	b.n	403c3e <_svfprintf_r+0x1122>
  403c3c:	4610      	mov	r0, r2
  403c3e:	fb85 1203 	smull	r1, r2, r5, r3
  403c42:	17d9      	asrs	r1, r3, #31
  403c44:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  403c48:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  403c4c:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  403c50:	3230      	adds	r2, #48	; 0x30
  403c52:	2909      	cmp	r1, #9
  403c54:	f800 2c01 	strb.w	r2, [r0, #-1]
  403c58:	460b      	mov	r3, r1
  403c5a:	f100 32ff 	add.w	r2, r0, #4294967295
  403c5e:	dced      	bgt.n	403c3c <_svfprintf_r+0x1120>
  403c60:	3330      	adds	r3, #48	; 0x30
  403c62:	3802      	subs	r0, #2
  403c64:	b2d9      	uxtb	r1, r3
  403c66:	4284      	cmp	r4, r0
  403c68:	f802 1c01 	strb.w	r1, [r2, #-1]
  403c6c:	f240 8165 	bls.w	403f3a <_svfprintf_r+0x141e>
  403c70:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  403c74:	4613      	mov	r3, r2
  403c76:	e001      	b.n	403c7c <_svfprintf_r+0x1160>
  403c78:	f813 1b01 	ldrb.w	r1, [r3], #1
  403c7c:	f800 1b01 	strb.w	r1, [r0], #1
  403c80:	42a3      	cmp	r3, r4
  403c82:	d1f9      	bne.n	403c78 <_svfprintf_r+0x115c>
  403c84:	3301      	adds	r3, #1
  403c86:	1a9b      	subs	r3, r3, r2
  403c88:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  403c8c:	4413      	add	r3, r2
  403c8e:	aa21      	add	r2, sp, #132	; 0x84
  403c90:	1a9b      	subs	r3, r3, r2
  403c92:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  403c94:	931b      	str	r3, [sp, #108]	; 0x6c
  403c96:	2a01      	cmp	r2, #1
  403c98:	4413      	add	r3, r2
  403c9a:	930e      	str	r3, [sp, #56]	; 0x38
  403c9c:	f340 8119 	ble.w	403ed2 <_svfprintf_r+0x13b6>
  403ca0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403ca2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403ca4:	4413      	add	r3, r2
  403ca6:	930e      	str	r3, [sp, #56]	; 0x38
  403ca8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403cac:	9308      	str	r3, [sp, #32]
  403cae:	2300      	movs	r3, #0
  403cb0:	9312      	str	r3, [sp, #72]	; 0x48
  403cb2:	e6cf      	b.n	403a54 <_svfprintf_r+0xf38>
  403cb4:	aa25      	add	r2, sp, #148	; 0x94
  403cb6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403cb8:	980c      	ldr	r0, [sp, #48]	; 0x30
  403cba:	f002 f84b 	bl	405d54 <__ssprint_r>
  403cbe:	2800      	cmp	r0, #0
  403cc0:	f47e affe 	bne.w	402cc0 <_svfprintf_r+0x1a4>
  403cc4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403cc6:	46c8      	mov	r8, r9
  403cc8:	e4d7      	b.n	40367a <_svfprintf_r+0xb5e>
  403cca:	4623      	mov	r3, r4
  403ccc:	e6a2      	b.n	403a14 <_svfprintf_r+0xef8>
  403cce:	aa25      	add	r2, sp, #148	; 0x94
  403cd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403cd2:	980c      	ldr	r0, [sp, #48]	; 0x30
  403cd4:	f002 f83e 	bl	405d54 <__ssprint_r>
  403cd8:	2800      	cmp	r0, #0
  403cda:	f47e aff1 	bne.w	402cc0 <_svfprintf_r+0x1a4>
  403cde:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  403ce0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403ce2:	46c8      	mov	r8, r9
  403ce4:	e5ae      	b.n	403844 <_svfprintf_r+0xd28>
  403ce6:	aa25      	add	r2, sp, #148	; 0x94
  403ce8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403cea:	980c      	ldr	r0, [sp, #48]	; 0x30
  403cec:	f002 f832 	bl	405d54 <__ssprint_r>
  403cf0:	2800      	cmp	r0, #0
  403cf2:	f47e afe5 	bne.w	402cc0 <_svfprintf_r+0x1a4>
  403cf6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  403cf8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403cfa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403cfc:	1a9a      	subs	r2, r3, r2
  403cfe:	46c8      	mov	r8, r9
  403d00:	e5b8      	b.n	403874 <_svfprintf_r+0xd58>
  403d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403d04:	9612      	str	r6, [sp, #72]	; 0x48
  403d06:	2b06      	cmp	r3, #6
  403d08:	bf28      	it	cs
  403d0a:	2306      	movcs	r3, #6
  403d0c:	960a      	str	r6, [sp, #40]	; 0x28
  403d0e:	4637      	mov	r7, r6
  403d10:	9308      	str	r3, [sp, #32]
  403d12:	950f      	str	r5, [sp, #60]	; 0x3c
  403d14:	f8cd b01c 	str.w	fp, [sp, #28]
  403d18:	930e      	str	r3, [sp, #56]	; 0x38
  403d1a:	4e74      	ldr	r6, [pc, #464]	; (403eec <_svfprintf_r+0x13d0>)
  403d1c:	f7ff b816 	b.w	402d4c <_svfprintf_r+0x230>
  403d20:	a823      	add	r0, sp, #140	; 0x8c
  403d22:	a920      	add	r1, sp, #128	; 0x80
  403d24:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  403d26:	9004      	str	r0, [sp, #16]
  403d28:	9103      	str	r1, [sp, #12]
  403d2a:	a81f      	add	r0, sp, #124	; 0x7c
  403d2c:	2103      	movs	r1, #3
  403d2e:	9002      	str	r0, [sp, #8]
  403d30:	9a08      	ldr	r2, [sp, #32]
  403d32:	9501      	str	r5, [sp, #4]
  403d34:	463b      	mov	r3, r7
  403d36:	9100      	str	r1, [sp, #0]
  403d38:	980c      	ldr	r0, [sp, #48]	; 0x30
  403d3a:	f000 fa01 	bl	404140 <_dtoa_r>
  403d3e:	4606      	mov	r6, r0
  403d40:	1944      	adds	r4, r0, r5
  403d42:	e72b      	b.n	403b9c <_svfprintf_r+0x1080>
  403d44:	2306      	movs	r3, #6
  403d46:	930a      	str	r3, [sp, #40]	; 0x28
  403d48:	e61d      	b.n	403986 <_svfprintf_r+0xe6a>
  403d4a:	272d      	movs	r7, #45	; 0x2d
  403d4c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  403d50:	f7ff bacd 	b.w	4032ee <_svfprintf_r+0x7d2>
  403d54:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403d56:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403d58:	4413      	add	r3, r2
  403d5a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  403d5c:	930e      	str	r3, [sp, #56]	; 0x38
  403d5e:	2a00      	cmp	r2, #0
  403d60:	f340 80b0 	ble.w	403ec4 <_svfprintf_r+0x13a8>
  403d64:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403d68:	9308      	str	r3, [sp, #32]
  403d6a:	2367      	movs	r3, #103	; 0x67
  403d6c:	9311      	str	r3, [sp, #68]	; 0x44
  403d6e:	e671      	b.n	403a54 <_svfprintf_r+0xf38>
  403d70:	2b00      	cmp	r3, #0
  403d72:	f340 80c3 	ble.w	403efc <_svfprintf_r+0x13e0>
  403d76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403d78:	2a00      	cmp	r2, #0
  403d7a:	f040 8099 	bne.w	403eb0 <_svfprintf_r+0x1394>
  403d7e:	f01b 0f01 	tst.w	fp, #1
  403d82:	f040 8095 	bne.w	403eb0 <_svfprintf_r+0x1394>
  403d86:	9308      	str	r3, [sp, #32]
  403d88:	930e      	str	r3, [sp, #56]	; 0x38
  403d8a:	e663      	b.n	403a54 <_svfprintf_r+0xf38>
  403d8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403d8e:	9308      	str	r3, [sp, #32]
  403d90:	930e      	str	r3, [sp, #56]	; 0x38
  403d92:	900a      	str	r0, [sp, #40]	; 0x28
  403d94:	950f      	str	r5, [sp, #60]	; 0x3c
  403d96:	f8cd b01c 	str.w	fp, [sp, #28]
  403d9a:	9012      	str	r0, [sp, #72]	; 0x48
  403d9c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403da0:	f7fe bfd4 	b.w	402d4c <_svfprintf_r+0x230>
  403da4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403da6:	2b47      	cmp	r3, #71	; 0x47
  403da8:	f47f ae20 	bne.w	4039ec <_svfprintf_r+0xed0>
  403dac:	f01b 0f01 	tst.w	fp, #1
  403db0:	f47f aeee 	bne.w	403b90 <_svfprintf_r+0x1074>
  403db4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  403db6:	1b9b      	subs	r3, r3, r6
  403db8:	9313      	str	r3, [sp, #76]	; 0x4c
  403dba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403dbc:	2b47      	cmp	r3, #71	; 0x47
  403dbe:	f43f af18 	beq.w	403bf2 <_svfprintf_r+0x10d6>
  403dc2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403dc4:	9312      	str	r3, [sp, #72]	; 0x48
  403dc6:	e721      	b.n	403c0c <_svfprintf_r+0x10f0>
  403dc8:	424f      	negs	r7, r1
  403dca:	3110      	adds	r1, #16
  403dcc:	4d48      	ldr	r5, [pc, #288]	; (403ef0 <_svfprintf_r+0x13d4>)
  403dce:	da2f      	bge.n	403e30 <_svfprintf_r+0x1314>
  403dd0:	2410      	movs	r4, #16
  403dd2:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  403dd6:	e004      	b.n	403de2 <_svfprintf_r+0x12c6>
  403dd8:	f108 0808 	add.w	r8, r8, #8
  403ddc:	3f10      	subs	r7, #16
  403dde:	2f10      	cmp	r7, #16
  403de0:	dd26      	ble.n	403e30 <_svfprintf_r+0x1314>
  403de2:	3301      	adds	r3, #1
  403de4:	3210      	adds	r2, #16
  403de6:	2b07      	cmp	r3, #7
  403de8:	9227      	str	r2, [sp, #156]	; 0x9c
  403dea:	9326      	str	r3, [sp, #152]	; 0x98
  403dec:	f8c8 5000 	str.w	r5, [r8]
  403df0:	f8c8 4004 	str.w	r4, [r8, #4]
  403df4:	ddf0      	ble.n	403dd8 <_svfprintf_r+0x12bc>
  403df6:	aa25      	add	r2, sp, #148	; 0x94
  403df8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403dfa:	4658      	mov	r0, fp
  403dfc:	f001 ffaa 	bl	405d54 <__ssprint_r>
  403e00:	2800      	cmp	r0, #0
  403e02:	f47e af5d 	bne.w	402cc0 <_svfprintf_r+0x1a4>
  403e06:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403e08:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403e0a:	46c8      	mov	r8, r9
  403e0c:	e7e6      	b.n	403ddc <_svfprintf_r+0x12c0>
  403e0e:	aa25      	add	r2, sp, #148	; 0x94
  403e10:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403e12:	980c      	ldr	r0, [sp, #48]	; 0x30
  403e14:	f001 ff9e 	bl	405d54 <__ssprint_r>
  403e18:	2800      	cmp	r0, #0
  403e1a:	f47e af51 	bne.w	402cc0 <_svfprintf_r+0x1a4>
  403e1e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  403e20:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403e22:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403e24:	46c8      	mov	r8, r9
  403e26:	e667      	b.n	403af8 <_svfprintf_r+0xfdc>
  403e28:	2000      	movs	r0, #0
  403e2a:	900a      	str	r0, [sp, #40]	; 0x28
  403e2c:	f7fe bed0 	b.w	402bd0 <_svfprintf_r+0xb4>
  403e30:	3301      	adds	r3, #1
  403e32:	443a      	add	r2, r7
  403e34:	2b07      	cmp	r3, #7
  403e36:	e888 00a0 	stmia.w	r8, {r5, r7}
  403e3a:	9227      	str	r2, [sp, #156]	; 0x9c
  403e3c:	9326      	str	r3, [sp, #152]	; 0x98
  403e3e:	f108 0808 	add.w	r8, r8, #8
  403e42:	f77f ae5c 	ble.w	403afe <_svfprintf_r+0xfe2>
  403e46:	aa25      	add	r2, sp, #148	; 0x94
  403e48:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403e4a:	980c      	ldr	r0, [sp, #48]	; 0x30
  403e4c:	f001 ff82 	bl	405d54 <__ssprint_r>
  403e50:	2800      	cmp	r0, #0
  403e52:	f47e af35 	bne.w	402cc0 <_svfprintf_r+0x1a4>
  403e56:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403e58:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403e5a:	46c8      	mov	r8, r9
  403e5c:	e64f      	b.n	403afe <_svfprintf_r+0xfe2>
  403e5e:	3330      	adds	r3, #48	; 0x30
  403e60:	2230      	movs	r2, #48	; 0x30
  403e62:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  403e66:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  403e6a:	ab22      	add	r3, sp, #136	; 0x88
  403e6c:	e70f      	b.n	403c8e <_svfprintf_r+0x1172>
  403e6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403e70:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403e72:	4413      	add	r3, r2
  403e74:	930e      	str	r3, [sp, #56]	; 0x38
  403e76:	e775      	b.n	403d64 <_svfprintf_r+0x1248>
  403e78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  403e7a:	e5cb      	b.n	403a14 <_svfprintf_r+0xef8>
  403e7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  403e7e:	4e1d      	ldr	r6, [pc, #116]	; (403ef4 <_svfprintf_r+0x13d8>)
  403e80:	2b00      	cmp	r3, #0
  403e82:	bfb6      	itet	lt
  403e84:	272d      	movlt	r7, #45	; 0x2d
  403e86:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  403e8a:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  403e8e:	4b1a      	ldr	r3, [pc, #104]	; (403ef8 <_svfprintf_r+0x13dc>)
  403e90:	f7ff ba2f 	b.w	4032f2 <_svfprintf_r+0x7d6>
  403e94:	9a16      	ldr	r2, [sp, #88]	; 0x58
  403e96:	9808      	ldr	r0, [sp, #32]
  403e98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  403e9a:	4639      	mov	r1, r7
  403e9c:	f002 ffee 	bl	406e7c <__aeabi_dcmpeq>
  403ea0:	2800      	cmp	r0, #0
  403ea2:	f47f ae7f 	bne.w	403ba4 <_svfprintf_r+0x1088>
  403ea6:	f1c5 0501 	rsb	r5, r5, #1
  403eaa:	951f      	str	r5, [sp, #124]	; 0x7c
  403eac:	442c      	add	r4, r5
  403eae:	e59e      	b.n	4039ee <_svfprintf_r+0xed2>
  403eb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403eb2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403eb4:	4413      	add	r3, r2
  403eb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403eb8:	441a      	add	r2, r3
  403eba:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  403ebe:	920e      	str	r2, [sp, #56]	; 0x38
  403ec0:	9308      	str	r3, [sp, #32]
  403ec2:	e5c7      	b.n	403a54 <_svfprintf_r+0xf38>
  403ec4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403ec6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403ec8:	f1c3 0301 	rsb	r3, r3, #1
  403ecc:	441a      	add	r2, r3
  403ece:	4613      	mov	r3, r2
  403ed0:	e7d0      	b.n	403e74 <_svfprintf_r+0x1358>
  403ed2:	f01b 0301 	ands.w	r3, fp, #1
  403ed6:	9312      	str	r3, [sp, #72]	; 0x48
  403ed8:	f47f aee2 	bne.w	403ca0 <_svfprintf_r+0x1184>
  403edc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403ede:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403ee2:	9308      	str	r3, [sp, #32]
  403ee4:	e5b6      	b.n	403a54 <_svfprintf_r+0xf38>
  403ee6:	bf00      	nop
  403ee8:	66666667 	.word	0x66666667
  403eec:	00407154 	.word	0x00407154
  403ef0:	00407170 	.word	0x00407170
  403ef4:	00407128 	.word	0x00407128
  403ef8:	00407124 	.word	0x00407124
  403efc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403efe:	b913      	cbnz	r3, 403f06 <_svfprintf_r+0x13ea>
  403f00:	f01b 0f01 	tst.w	fp, #1
  403f04:	d002      	beq.n	403f0c <_svfprintf_r+0x13f0>
  403f06:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403f08:	3301      	adds	r3, #1
  403f0a:	e7d4      	b.n	403eb6 <_svfprintf_r+0x139a>
  403f0c:	2301      	movs	r3, #1
  403f0e:	e73a      	b.n	403d86 <_svfprintf_r+0x126a>
  403f10:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403f12:	f89a 3001 	ldrb.w	r3, [sl, #1]
  403f16:	6828      	ldr	r0, [r5, #0]
  403f18:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  403f1c:	900a      	str	r0, [sp, #40]	; 0x28
  403f1e:	4628      	mov	r0, r5
  403f20:	3004      	adds	r0, #4
  403f22:	46a2      	mov	sl, r4
  403f24:	900f      	str	r0, [sp, #60]	; 0x3c
  403f26:	f7fe be51 	b.w	402bcc <_svfprintf_r+0xb0>
  403f2a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403f2e:	f7ff b867 	b.w	403000 <_svfprintf_r+0x4e4>
  403f32:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403f36:	f7ff ba15 	b.w	403364 <_svfprintf_r+0x848>
  403f3a:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  403f3e:	e6a6      	b.n	403c8e <_svfprintf_r+0x1172>
  403f40:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403f44:	f7ff b8eb 	b.w	40311e <_svfprintf_r+0x602>
  403f48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  403f4a:	230c      	movs	r3, #12
  403f4c:	6013      	str	r3, [r2, #0]
  403f4e:	f04f 33ff 	mov.w	r3, #4294967295
  403f52:	9309      	str	r3, [sp, #36]	; 0x24
  403f54:	f7fe bebd 	b.w	402cd2 <_svfprintf_r+0x1b6>
  403f58:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403f5c:	f7ff b99a 	b.w	403294 <_svfprintf_r+0x778>
  403f60:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403f64:	f7ff b976 	b.w	403254 <_svfprintf_r+0x738>
  403f68:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403f6c:	f7ff b959 	b.w	403222 <_svfprintf_r+0x706>
  403f70:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403f74:	f7ff b912 	b.w	40319c <_svfprintf_r+0x680>

00403f78 <__utoa>:
  403f78:	b5f0      	push	{r4, r5, r6, r7, lr}
  403f7a:	f8df e078 	ldr.w	lr, [pc, #120]	; 403ff4 <__utoa+0x7c>
  403f7e:	4616      	mov	r6, r2
  403f80:	4604      	mov	r4, r0
  403f82:	460f      	mov	r7, r1
  403f84:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
  403f88:	b08b      	sub	sp, #44	; 0x2c
  403f8a:	466d      	mov	r5, sp
  403f8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  403f8e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
  403f92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  403f94:	e89e 0003 	ldmia.w	lr, {r0, r1}
  403f98:	1eb3      	subs	r3, r6, #2
  403f9a:	f845 0b04 	str.w	r0, [r5], #4
  403f9e:	2b22      	cmp	r3, #34	; 0x22
  403fa0:	7029      	strb	r1, [r5, #0]
  403fa2:	d822      	bhi.n	403fea <__utoa+0x72>
  403fa4:	1e7d      	subs	r5, r7, #1
  403fa6:	4628      	mov	r0, r5
  403fa8:	2200      	movs	r2, #0
  403faa:	e000      	b.n	403fae <__utoa+0x36>
  403fac:	461a      	mov	r2, r3
  403fae:	fbb4 f1f6 	udiv	r1, r4, r6
  403fb2:	ab0a      	add	r3, sp, #40	; 0x28
  403fb4:	fb06 4411 	mls	r4, r6, r1, r4
  403fb8:	4423      	add	r3, r4
  403fba:	460c      	mov	r4, r1
  403fbc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
  403fc0:	f800 3f01 	strb.w	r3, [r0, #1]!
  403fc4:	1c53      	adds	r3, r2, #1
  403fc6:	2900      	cmp	r1, #0
  403fc8:	d1f0      	bne.n	403fac <__utoa+0x34>
  403fca:	54f9      	strb	r1, [r7, r3]
  403fcc:	18bb      	adds	r3, r7, r2
  403fce:	b14a      	cbz	r2, 403fe4 <__utoa+0x6c>
  403fd0:	7819      	ldrb	r1, [r3, #0]
  403fd2:	7868      	ldrb	r0, [r5, #1]
  403fd4:	f805 1f01 	strb.w	r1, [r5, #1]!
  403fd8:	3401      	adds	r4, #1
  403fda:	1b11      	subs	r1, r2, r4
  403fdc:	428c      	cmp	r4, r1
  403fde:	f803 0901 	strb.w	r0, [r3], #-1
  403fe2:	dbf5      	blt.n	403fd0 <__utoa+0x58>
  403fe4:	4638      	mov	r0, r7
  403fe6:	b00b      	add	sp, #44	; 0x2c
  403fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403fea:	2000      	movs	r0, #0
  403fec:	7038      	strb	r0, [r7, #0]
  403fee:	b00b      	add	sp, #44	; 0x2c
  403ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403ff2:	bf00      	nop
  403ff4:	00407180 	.word	0x00407180

00403ff8 <register_fini>:
  403ff8:	4b02      	ldr	r3, [pc, #8]	; (404004 <register_fini+0xc>)
  403ffa:	b113      	cbz	r3, 404002 <register_fini+0xa>
  403ffc:	4802      	ldr	r0, [pc, #8]	; (404008 <register_fini+0x10>)
  403ffe:	f000 b805 	b.w	40400c <atexit>
  404002:	4770      	bx	lr
  404004:	00000000 	.word	0x00000000
  404008:	00404f95 	.word	0x00404f95

0040400c <atexit>:
  40400c:	2300      	movs	r3, #0
  40400e:	4601      	mov	r1, r0
  404010:	461a      	mov	r2, r3
  404012:	4618      	mov	r0, r3
  404014:	f001 bf1c 	b.w	405e50 <__register_exitproc>

00404018 <quorem>:
  404018:	6902      	ldr	r2, [r0, #16]
  40401a:	690b      	ldr	r3, [r1, #16]
  40401c:	4293      	cmp	r3, r2
  40401e:	f300 808d 	bgt.w	40413c <quorem+0x124>
  404022:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404026:	f103 38ff 	add.w	r8, r3, #4294967295
  40402a:	f101 0714 	add.w	r7, r1, #20
  40402e:	f100 0b14 	add.w	fp, r0, #20
  404032:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  404036:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  40403a:	ea4f 0488 	mov.w	r4, r8, lsl #2
  40403e:	b083      	sub	sp, #12
  404040:	3201      	adds	r2, #1
  404042:	fbb3 f9f2 	udiv	r9, r3, r2
  404046:	eb0b 0304 	add.w	r3, fp, r4
  40404a:	9400      	str	r4, [sp, #0]
  40404c:	eb07 0a04 	add.w	sl, r7, r4
  404050:	9301      	str	r3, [sp, #4]
  404052:	f1b9 0f00 	cmp.w	r9, #0
  404056:	d039      	beq.n	4040cc <quorem+0xb4>
  404058:	2500      	movs	r5, #0
  40405a:	462e      	mov	r6, r5
  40405c:	46bc      	mov	ip, r7
  40405e:	46de      	mov	lr, fp
  404060:	f85c 4b04 	ldr.w	r4, [ip], #4
  404064:	f8de 3000 	ldr.w	r3, [lr]
  404068:	b2a2      	uxth	r2, r4
  40406a:	fb09 5502 	mla	r5, r9, r2, r5
  40406e:	0c22      	lsrs	r2, r4, #16
  404070:	0c2c      	lsrs	r4, r5, #16
  404072:	fb09 4202 	mla	r2, r9, r2, r4
  404076:	b2ad      	uxth	r5, r5
  404078:	1b75      	subs	r5, r6, r5
  40407a:	b296      	uxth	r6, r2
  40407c:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  404080:	fa15 f383 	uxtah	r3, r5, r3
  404084:	eb06 4623 	add.w	r6, r6, r3, asr #16
  404088:	b29b      	uxth	r3, r3
  40408a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  40408e:	45e2      	cmp	sl, ip
  404090:	ea4f 4512 	mov.w	r5, r2, lsr #16
  404094:	f84e 3b04 	str.w	r3, [lr], #4
  404098:	ea4f 4626 	mov.w	r6, r6, asr #16
  40409c:	d2e0      	bcs.n	404060 <quorem+0x48>
  40409e:	9b00      	ldr	r3, [sp, #0]
  4040a0:	f85b 3003 	ldr.w	r3, [fp, r3]
  4040a4:	b993      	cbnz	r3, 4040cc <quorem+0xb4>
  4040a6:	9c01      	ldr	r4, [sp, #4]
  4040a8:	1f23      	subs	r3, r4, #4
  4040aa:	459b      	cmp	fp, r3
  4040ac:	d20c      	bcs.n	4040c8 <quorem+0xb0>
  4040ae:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4040b2:	b94b      	cbnz	r3, 4040c8 <quorem+0xb0>
  4040b4:	f1a4 0308 	sub.w	r3, r4, #8
  4040b8:	e002      	b.n	4040c0 <quorem+0xa8>
  4040ba:	681a      	ldr	r2, [r3, #0]
  4040bc:	3b04      	subs	r3, #4
  4040be:	b91a      	cbnz	r2, 4040c8 <quorem+0xb0>
  4040c0:	459b      	cmp	fp, r3
  4040c2:	f108 38ff 	add.w	r8, r8, #4294967295
  4040c6:	d3f8      	bcc.n	4040ba <quorem+0xa2>
  4040c8:	f8c0 8010 	str.w	r8, [r0, #16]
  4040cc:	4604      	mov	r4, r0
  4040ce:	f001 fd33 	bl	405b38 <__mcmp>
  4040d2:	2800      	cmp	r0, #0
  4040d4:	db2e      	blt.n	404134 <quorem+0x11c>
  4040d6:	f109 0901 	add.w	r9, r9, #1
  4040da:	465d      	mov	r5, fp
  4040dc:	2300      	movs	r3, #0
  4040de:	f857 1b04 	ldr.w	r1, [r7], #4
  4040e2:	6828      	ldr	r0, [r5, #0]
  4040e4:	b28a      	uxth	r2, r1
  4040e6:	1a9a      	subs	r2, r3, r2
  4040e8:	0c0b      	lsrs	r3, r1, #16
  4040ea:	fa12 f280 	uxtah	r2, r2, r0
  4040ee:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  4040f2:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4040f6:	b292      	uxth	r2, r2
  4040f8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4040fc:	45ba      	cmp	sl, r7
  4040fe:	f845 2b04 	str.w	r2, [r5], #4
  404102:	ea4f 4323 	mov.w	r3, r3, asr #16
  404106:	d2ea      	bcs.n	4040de <quorem+0xc6>
  404108:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  40410c:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  404110:	b982      	cbnz	r2, 404134 <quorem+0x11c>
  404112:	1f1a      	subs	r2, r3, #4
  404114:	4593      	cmp	fp, r2
  404116:	d20b      	bcs.n	404130 <quorem+0x118>
  404118:	f853 2c04 	ldr.w	r2, [r3, #-4]
  40411c:	b942      	cbnz	r2, 404130 <quorem+0x118>
  40411e:	3b08      	subs	r3, #8
  404120:	e002      	b.n	404128 <quorem+0x110>
  404122:	681a      	ldr	r2, [r3, #0]
  404124:	3b04      	subs	r3, #4
  404126:	b91a      	cbnz	r2, 404130 <quorem+0x118>
  404128:	459b      	cmp	fp, r3
  40412a:	f108 38ff 	add.w	r8, r8, #4294967295
  40412e:	d3f8      	bcc.n	404122 <quorem+0x10a>
  404130:	f8c4 8010 	str.w	r8, [r4, #16]
  404134:	4648      	mov	r0, r9
  404136:	b003      	add	sp, #12
  404138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40413c:	2000      	movs	r0, #0
  40413e:	4770      	bx	lr

00404140 <_dtoa_r>:
  404140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404144:	6c01      	ldr	r1, [r0, #64]	; 0x40
  404146:	b09b      	sub	sp, #108	; 0x6c
  404148:	4604      	mov	r4, r0
  40414a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  40414c:	4692      	mov	sl, r2
  40414e:	469b      	mov	fp, r3
  404150:	b141      	cbz	r1, 404164 <_dtoa_r+0x24>
  404152:	6c42      	ldr	r2, [r0, #68]	; 0x44
  404154:	604a      	str	r2, [r1, #4]
  404156:	2301      	movs	r3, #1
  404158:	4093      	lsls	r3, r2
  40415a:	608b      	str	r3, [r1, #8]
  40415c:	f001 fb14 	bl	405788 <_Bfree>
  404160:	2300      	movs	r3, #0
  404162:	6423      	str	r3, [r4, #64]	; 0x40
  404164:	f1bb 0f00 	cmp.w	fp, #0
  404168:	465d      	mov	r5, fp
  40416a:	db35      	blt.n	4041d8 <_dtoa_r+0x98>
  40416c:	2300      	movs	r3, #0
  40416e:	6033      	str	r3, [r6, #0]
  404170:	4b9d      	ldr	r3, [pc, #628]	; (4043e8 <_dtoa_r+0x2a8>)
  404172:	43ab      	bics	r3, r5
  404174:	d015      	beq.n	4041a2 <_dtoa_r+0x62>
  404176:	4650      	mov	r0, sl
  404178:	4659      	mov	r1, fp
  40417a:	2200      	movs	r2, #0
  40417c:	2300      	movs	r3, #0
  40417e:	f002 fe7d 	bl	406e7c <__aeabi_dcmpeq>
  404182:	4680      	mov	r8, r0
  404184:	2800      	cmp	r0, #0
  404186:	d02d      	beq.n	4041e4 <_dtoa_r+0xa4>
  404188:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40418a:	2301      	movs	r3, #1
  40418c:	6013      	str	r3, [r2, #0]
  40418e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  404190:	2b00      	cmp	r3, #0
  404192:	f000 80bd 	beq.w	404310 <_dtoa_r+0x1d0>
  404196:	4895      	ldr	r0, [pc, #596]	; (4043ec <_dtoa_r+0x2ac>)
  404198:	6018      	str	r0, [r3, #0]
  40419a:	3801      	subs	r0, #1
  40419c:	b01b      	add	sp, #108	; 0x6c
  40419e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4041a2:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4041a4:	f242 730f 	movw	r3, #9999	; 0x270f
  4041a8:	6013      	str	r3, [r2, #0]
  4041aa:	f1ba 0f00 	cmp.w	sl, #0
  4041ae:	d10d      	bne.n	4041cc <_dtoa_r+0x8c>
  4041b0:	f3c5 0513 	ubfx	r5, r5, #0, #20
  4041b4:	b955      	cbnz	r5, 4041cc <_dtoa_r+0x8c>
  4041b6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4041b8:	488d      	ldr	r0, [pc, #564]	; (4043f0 <_dtoa_r+0x2b0>)
  4041ba:	2b00      	cmp	r3, #0
  4041bc:	d0ee      	beq.n	40419c <_dtoa_r+0x5c>
  4041be:	f100 0308 	add.w	r3, r0, #8
  4041c2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  4041c4:	6013      	str	r3, [r2, #0]
  4041c6:	b01b      	add	sp, #108	; 0x6c
  4041c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4041cc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4041ce:	4889      	ldr	r0, [pc, #548]	; (4043f4 <_dtoa_r+0x2b4>)
  4041d0:	2b00      	cmp	r3, #0
  4041d2:	d0e3      	beq.n	40419c <_dtoa_r+0x5c>
  4041d4:	1cc3      	adds	r3, r0, #3
  4041d6:	e7f4      	b.n	4041c2 <_dtoa_r+0x82>
  4041d8:	2301      	movs	r3, #1
  4041da:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  4041de:	6033      	str	r3, [r6, #0]
  4041e0:	46ab      	mov	fp, r5
  4041e2:	e7c5      	b.n	404170 <_dtoa_r+0x30>
  4041e4:	aa18      	add	r2, sp, #96	; 0x60
  4041e6:	ab19      	add	r3, sp, #100	; 0x64
  4041e8:	9201      	str	r2, [sp, #4]
  4041ea:	9300      	str	r3, [sp, #0]
  4041ec:	4652      	mov	r2, sl
  4041ee:	465b      	mov	r3, fp
  4041f0:	4620      	mov	r0, r4
  4041f2:	f001 fd41 	bl	405c78 <__d2b>
  4041f6:	0d2b      	lsrs	r3, r5, #20
  4041f8:	4681      	mov	r9, r0
  4041fa:	d071      	beq.n	4042e0 <_dtoa_r+0x1a0>
  4041fc:	f3cb 0213 	ubfx	r2, fp, #0, #20
  404200:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  404204:	9f18      	ldr	r7, [sp, #96]	; 0x60
  404206:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  40420a:	4650      	mov	r0, sl
  40420c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  404210:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  404214:	2200      	movs	r2, #0
  404216:	4b78      	ldr	r3, [pc, #480]	; (4043f8 <_dtoa_r+0x2b8>)
  404218:	f002 fa14 	bl	406644 <__aeabi_dsub>
  40421c:	a36c      	add	r3, pc, #432	; (adr r3, 4043d0 <_dtoa_r+0x290>)
  40421e:	e9d3 2300 	ldrd	r2, r3, [r3]
  404222:	f002 fbc3 	bl	4069ac <__aeabi_dmul>
  404226:	a36c      	add	r3, pc, #432	; (adr r3, 4043d8 <_dtoa_r+0x298>)
  404228:	e9d3 2300 	ldrd	r2, r3, [r3]
  40422c:	f002 fa0c 	bl	406648 <__adddf3>
  404230:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404234:	4630      	mov	r0, r6
  404236:	f002 fb53 	bl	4068e0 <__aeabi_i2d>
  40423a:	a369      	add	r3, pc, #420	; (adr r3, 4043e0 <_dtoa_r+0x2a0>)
  40423c:	e9d3 2300 	ldrd	r2, r3, [r3]
  404240:	f002 fbb4 	bl	4069ac <__aeabi_dmul>
  404244:	4602      	mov	r2, r0
  404246:	460b      	mov	r3, r1
  404248:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40424c:	f002 f9fc 	bl	406648 <__adddf3>
  404250:	e9cd 0104 	strd	r0, r1, [sp, #16]
  404254:	f002 fe5a 	bl	406f0c <__aeabi_d2iz>
  404258:	2200      	movs	r2, #0
  40425a:	9002      	str	r0, [sp, #8]
  40425c:	2300      	movs	r3, #0
  40425e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404262:	f002 fe15 	bl	406e90 <__aeabi_dcmplt>
  404266:	2800      	cmp	r0, #0
  404268:	f040 8173 	bne.w	404552 <_dtoa_r+0x412>
  40426c:	9d02      	ldr	r5, [sp, #8]
  40426e:	2d16      	cmp	r5, #22
  404270:	f200 815d 	bhi.w	40452e <_dtoa_r+0x3ee>
  404274:	4b61      	ldr	r3, [pc, #388]	; (4043fc <_dtoa_r+0x2bc>)
  404276:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  40427a:	e9d3 0100 	ldrd	r0, r1, [r3]
  40427e:	4652      	mov	r2, sl
  404280:	465b      	mov	r3, fp
  404282:	f002 fe23 	bl	406ecc <__aeabi_dcmpgt>
  404286:	2800      	cmp	r0, #0
  404288:	f000 81c5 	beq.w	404616 <_dtoa_r+0x4d6>
  40428c:	1e6b      	subs	r3, r5, #1
  40428e:	9302      	str	r3, [sp, #8]
  404290:	2300      	movs	r3, #0
  404292:	930e      	str	r3, [sp, #56]	; 0x38
  404294:	1bbf      	subs	r7, r7, r6
  404296:	1e7b      	subs	r3, r7, #1
  404298:	9306      	str	r3, [sp, #24]
  40429a:	f100 8154 	bmi.w	404546 <_dtoa_r+0x406>
  40429e:	2300      	movs	r3, #0
  4042a0:	9308      	str	r3, [sp, #32]
  4042a2:	9b02      	ldr	r3, [sp, #8]
  4042a4:	2b00      	cmp	r3, #0
  4042a6:	f2c0 8145 	blt.w	404534 <_dtoa_r+0x3f4>
  4042aa:	9a06      	ldr	r2, [sp, #24]
  4042ac:	930d      	str	r3, [sp, #52]	; 0x34
  4042ae:	4611      	mov	r1, r2
  4042b0:	4419      	add	r1, r3
  4042b2:	2300      	movs	r3, #0
  4042b4:	9106      	str	r1, [sp, #24]
  4042b6:	930c      	str	r3, [sp, #48]	; 0x30
  4042b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4042ba:	2b09      	cmp	r3, #9
  4042bc:	d82a      	bhi.n	404314 <_dtoa_r+0x1d4>
  4042be:	2b05      	cmp	r3, #5
  4042c0:	f340 865b 	ble.w	404f7a <_dtoa_r+0xe3a>
  4042c4:	3b04      	subs	r3, #4
  4042c6:	9324      	str	r3, [sp, #144]	; 0x90
  4042c8:	2500      	movs	r5, #0
  4042ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4042cc:	3b02      	subs	r3, #2
  4042ce:	2b03      	cmp	r3, #3
  4042d0:	f200 8642 	bhi.w	404f58 <_dtoa_r+0xe18>
  4042d4:	e8df f013 	tbh	[pc, r3, lsl #1]
  4042d8:	02c903d4 	.word	0x02c903d4
  4042dc:	046103df 	.word	0x046103df
  4042e0:	9f18      	ldr	r7, [sp, #96]	; 0x60
  4042e2:	9e19      	ldr	r6, [sp, #100]	; 0x64
  4042e4:	443e      	add	r6, r7
  4042e6:	f206 4332 	addw	r3, r6, #1074	; 0x432
  4042ea:	2b20      	cmp	r3, #32
  4042ec:	f340 818e 	ble.w	40460c <_dtoa_r+0x4cc>
  4042f0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  4042f4:	f206 4012 	addw	r0, r6, #1042	; 0x412
  4042f8:	409d      	lsls	r5, r3
  4042fa:	fa2a f000 	lsr.w	r0, sl, r0
  4042fe:	4328      	orrs	r0, r5
  404300:	f002 fade 	bl	4068c0 <__aeabi_ui2d>
  404304:	2301      	movs	r3, #1
  404306:	3e01      	subs	r6, #1
  404308:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40430c:	9314      	str	r3, [sp, #80]	; 0x50
  40430e:	e781      	b.n	404214 <_dtoa_r+0xd4>
  404310:	483b      	ldr	r0, [pc, #236]	; (404400 <_dtoa_r+0x2c0>)
  404312:	e743      	b.n	40419c <_dtoa_r+0x5c>
  404314:	2100      	movs	r1, #0
  404316:	6461      	str	r1, [r4, #68]	; 0x44
  404318:	4620      	mov	r0, r4
  40431a:	9125      	str	r1, [sp, #148]	; 0x94
  40431c:	f001 fa0e 	bl	40573c <_Balloc>
  404320:	f04f 33ff 	mov.w	r3, #4294967295
  404324:	930a      	str	r3, [sp, #40]	; 0x28
  404326:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404328:	930f      	str	r3, [sp, #60]	; 0x3c
  40432a:	2301      	movs	r3, #1
  40432c:	9004      	str	r0, [sp, #16]
  40432e:	6420      	str	r0, [r4, #64]	; 0x40
  404330:	9224      	str	r2, [sp, #144]	; 0x90
  404332:	930b      	str	r3, [sp, #44]	; 0x2c
  404334:	9b19      	ldr	r3, [sp, #100]	; 0x64
  404336:	2b00      	cmp	r3, #0
  404338:	f2c0 80d9 	blt.w	4044ee <_dtoa_r+0x3ae>
  40433c:	9a02      	ldr	r2, [sp, #8]
  40433e:	2a0e      	cmp	r2, #14
  404340:	f300 80d5 	bgt.w	4044ee <_dtoa_r+0x3ae>
  404344:	4b2d      	ldr	r3, [pc, #180]	; (4043fc <_dtoa_r+0x2bc>)
  404346:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40434a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40434e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  404352:	9b25      	ldr	r3, [sp, #148]	; 0x94
  404354:	2b00      	cmp	r3, #0
  404356:	f2c0 83ba 	blt.w	404ace <_dtoa_r+0x98e>
  40435a:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  40435e:	4650      	mov	r0, sl
  404360:	462a      	mov	r2, r5
  404362:	4633      	mov	r3, r6
  404364:	4659      	mov	r1, fp
  404366:	f002 fc4b 	bl	406c00 <__aeabi_ddiv>
  40436a:	f002 fdcf 	bl	406f0c <__aeabi_d2iz>
  40436e:	4680      	mov	r8, r0
  404370:	f002 fab6 	bl	4068e0 <__aeabi_i2d>
  404374:	462a      	mov	r2, r5
  404376:	4633      	mov	r3, r6
  404378:	f002 fb18 	bl	4069ac <__aeabi_dmul>
  40437c:	460b      	mov	r3, r1
  40437e:	4602      	mov	r2, r0
  404380:	4659      	mov	r1, fp
  404382:	4650      	mov	r0, sl
  404384:	f002 f95e 	bl	406644 <__aeabi_dsub>
  404388:	9d04      	ldr	r5, [sp, #16]
  40438a:	f108 0330 	add.w	r3, r8, #48	; 0x30
  40438e:	702b      	strb	r3, [r5, #0]
  404390:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404392:	2b01      	cmp	r3, #1
  404394:	4606      	mov	r6, r0
  404396:	460f      	mov	r7, r1
  404398:	f105 0501 	add.w	r5, r5, #1
  40439c:	d068      	beq.n	404470 <_dtoa_r+0x330>
  40439e:	2200      	movs	r2, #0
  4043a0:	4b18      	ldr	r3, [pc, #96]	; (404404 <_dtoa_r+0x2c4>)
  4043a2:	f002 fb03 	bl	4069ac <__aeabi_dmul>
  4043a6:	2200      	movs	r2, #0
  4043a8:	2300      	movs	r3, #0
  4043aa:	4606      	mov	r6, r0
  4043ac:	460f      	mov	r7, r1
  4043ae:	f002 fd65 	bl	406e7c <__aeabi_dcmpeq>
  4043b2:	2800      	cmp	r0, #0
  4043b4:	f040 8088 	bne.w	4044c8 <_dtoa_r+0x388>
  4043b8:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  4043bc:	f04f 0a00 	mov.w	sl, #0
  4043c0:	f8df b040 	ldr.w	fp, [pc, #64]	; 404404 <_dtoa_r+0x2c4>
  4043c4:	940c      	str	r4, [sp, #48]	; 0x30
  4043c6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  4043ca:	e028      	b.n	40441e <_dtoa_r+0x2de>
  4043cc:	f3af 8000 	nop.w
  4043d0:	636f4361 	.word	0x636f4361
  4043d4:	3fd287a7 	.word	0x3fd287a7
  4043d8:	8b60c8b3 	.word	0x8b60c8b3
  4043dc:	3fc68a28 	.word	0x3fc68a28
  4043e0:	509f79fb 	.word	0x509f79fb
  4043e4:	3fd34413 	.word	0x3fd34413
  4043e8:	7ff00000 	.word	0x7ff00000
  4043ec:	0040715d 	.word	0x0040715d
  4043f0:	004071a8 	.word	0x004071a8
  4043f4:	004071b4 	.word	0x004071b4
  4043f8:	3ff80000 	.word	0x3ff80000
  4043fc:	004071e0 	.word	0x004071e0
  404400:	0040715c 	.word	0x0040715c
  404404:	40240000 	.word	0x40240000
  404408:	f002 fad0 	bl	4069ac <__aeabi_dmul>
  40440c:	2200      	movs	r2, #0
  40440e:	2300      	movs	r3, #0
  404410:	4606      	mov	r6, r0
  404412:	460f      	mov	r7, r1
  404414:	f002 fd32 	bl	406e7c <__aeabi_dcmpeq>
  404418:	2800      	cmp	r0, #0
  40441a:	f040 83c1 	bne.w	404ba0 <_dtoa_r+0xa60>
  40441e:	4642      	mov	r2, r8
  404420:	464b      	mov	r3, r9
  404422:	4630      	mov	r0, r6
  404424:	4639      	mov	r1, r7
  404426:	f002 fbeb 	bl	406c00 <__aeabi_ddiv>
  40442a:	f002 fd6f 	bl	406f0c <__aeabi_d2iz>
  40442e:	4604      	mov	r4, r0
  404430:	f002 fa56 	bl	4068e0 <__aeabi_i2d>
  404434:	4642      	mov	r2, r8
  404436:	464b      	mov	r3, r9
  404438:	f002 fab8 	bl	4069ac <__aeabi_dmul>
  40443c:	4602      	mov	r2, r0
  40443e:	460b      	mov	r3, r1
  404440:	4630      	mov	r0, r6
  404442:	4639      	mov	r1, r7
  404444:	f002 f8fe 	bl	406644 <__aeabi_dsub>
  404448:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  40444c:	9e04      	ldr	r6, [sp, #16]
  40444e:	f805 eb01 	strb.w	lr, [r5], #1
  404452:	eba5 0e06 	sub.w	lr, r5, r6
  404456:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  404458:	45b6      	cmp	lr, r6
  40445a:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40445e:	4652      	mov	r2, sl
  404460:	465b      	mov	r3, fp
  404462:	d1d1      	bne.n	404408 <_dtoa_r+0x2c8>
  404464:	46a0      	mov	r8, r4
  404466:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40446a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40446c:	4606      	mov	r6, r0
  40446e:	460f      	mov	r7, r1
  404470:	4632      	mov	r2, r6
  404472:	463b      	mov	r3, r7
  404474:	4630      	mov	r0, r6
  404476:	4639      	mov	r1, r7
  404478:	f002 f8e6 	bl	406648 <__adddf3>
  40447c:	4606      	mov	r6, r0
  40447e:	460f      	mov	r7, r1
  404480:	4602      	mov	r2, r0
  404482:	460b      	mov	r3, r1
  404484:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  404488:	f002 fd02 	bl	406e90 <__aeabi_dcmplt>
  40448c:	b948      	cbnz	r0, 4044a2 <_dtoa_r+0x362>
  40448e:	4632      	mov	r2, r6
  404490:	463b      	mov	r3, r7
  404492:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  404496:	f002 fcf1 	bl	406e7c <__aeabi_dcmpeq>
  40449a:	b1a8      	cbz	r0, 4044c8 <_dtoa_r+0x388>
  40449c:	f018 0f01 	tst.w	r8, #1
  4044a0:	d012      	beq.n	4044c8 <_dtoa_r+0x388>
  4044a2:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4044a6:	9a04      	ldr	r2, [sp, #16]
  4044a8:	1e6b      	subs	r3, r5, #1
  4044aa:	e004      	b.n	4044b6 <_dtoa_r+0x376>
  4044ac:	429a      	cmp	r2, r3
  4044ae:	f000 8401 	beq.w	404cb4 <_dtoa_r+0xb74>
  4044b2:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  4044b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  4044ba:	f103 0501 	add.w	r5, r3, #1
  4044be:	d0f5      	beq.n	4044ac <_dtoa_r+0x36c>
  4044c0:	f108 0801 	add.w	r8, r8, #1
  4044c4:	f883 8000 	strb.w	r8, [r3]
  4044c8:	4649      	mov	r1, r9
  4044ca:	4620      	mov	r0, r4
  4044cc:	f001 f95c 	bl	405788 <_Bfree>
  4044d0:	2200      	movs	r2, #0
  4044d2:	9b02      	ldr	r3, [sp, #8]
  4044d4:	702a      	strb	r2, [r5, #0]
  4044d6:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4044d8:	3301      	adds	r3, #1
  4044da:	6013      	str	r3, [r2, #0]
  4044dc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4044de:	2b00      	cmp	r3, #0
  4044e0:	f000 839e 	beq.w	404c20 <_dtoa_r+0xae0>
  4044e4:	9804      	ldr	r0, [sp, #16]
  4044e6:	601d      	str	r5, [r3, #0]
  4044e8:	b01b      	add	sp, #108	; 0x6c
  4044ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4044ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4044f0:	2a00      	cmp	r2, #0
  4044f2:	d03e      	beq.n	404572 <_dtoa_r+0x432>
  4044f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4044f6:	2a01      	cmp	r2, #1
  4044f8:	f340 8311 	ble.w	404b1e <_dtoa_r+0x9de>
  4044fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4044fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404500:	1e5f      	subs	r7, r3, #1
  404502:	42ba      	cmp	r2, r7
  404504:	f2c0 838f 	blt.w	404c26 <_dtoa_r+0xae6>
  404508:	1bd7      	subs	r7, r2, r7
  40450a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40450c:	2b00      	cmp	r3, #0
  40450e:	f2c0 848b 	blt.w	404e28 <_dtoa_r+0xce8>
  404512:	9d08      	ldr	r5, [sp, #32]
  404514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404516:	9a08      	ldr	r2, [sp, #32]
  404518:	441a      	add	r2, r3
  40451a:	9208      	str	r2, [sp, #32]
  40451c:	9a06      	ldr	r2, [sp, #24]
  40451e:	2101      	movs	r1, #1
  404520:	441a      	add	r2, r3
  404522:	4620      	mov	r0, r4
  404524:	9206      	str	r2, [sp, #24]
  404526:	f001 f9c9 	bl	4058bc <__i2b>
  40452a:	4606      	mov	r6, r0
  40452c:	e024      	b.n	404578 <_dtoa_r+0x438>
  40452e:	2301      	movs	r3, #1
  404530:	930e      	str	r3, [sp, #56]	; 0x38
  404532:	e6af      	b.n	404294 <_dtoa_r+0x154>
  404534:	9a08      	ldr	r2, [sp, #32]
  404536:	9b02      	ldr	r3, [sp, #8]
  404538:	1ad2      	subs	r2, r2, r3
  40453a:	425b      	negs	r3, r3
  40453c:	930c      	str	r3, [sp, #48]	; 0x30
  40453e:	2300      	movs	r3, #0
  404540:	9208      	str	r2, [sp, #32]
  404542:	930d      	str	r3, [sp, #52]	; 0x34
  404544:	e6b8      	b.n	4042b8 <_dtoa_r+0x178>
  404546:	f1c7 0301 	rsb	r3, r7, #1
  40454a:	9308      	str	r3, [sp, #32]
  40454c:	2300      	movs	r3, #0
  40454e:	9306      	str	r3, [sp, #24]
  404550:	e6a7      	b.n	4042a2 <_dtoa_r+0x162>
  404552:	9d02      	ldr	r5, [sp, #8]
  404554:	4628      	mov	r0, r5
  404556:	f002 f9c3 	bl	4068e0 <__aeabi_i2d>
  40455a:	4602      	mov	r2, r0
  40455c:	460b      	mov	r3, r1
  40455e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404562:	f002 fc8b 	bl	406e7c <__aeabi_dcmpeq>
  404566:	2800      	cmp	r0, #0
  404568:	f47f ae80 	bne.w	40426c <_dtoa_r+0x12c>
  40456c:	1e6b      	subs	r3, r5, #1
  40456e:	9302      	str	r3, [sp, #8]
  404570:	e67c      	b.n	40426c <_dtoa_r+0x12c>
  404572:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404574:	9d08      	ldr	r5, [sp, #32]
  404576:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  404578:	2d00      	cmp	r5, #0
  40457a:	dd0c      	ble.n	404596 <_dtoa_r+0x456>
  40457c:	9906      	ldr	r1, [sp, #24]
  40457e:	2900      	cmp	r1, #0
  404580:	460b      	mov	r3, r1
  404582:	dd08      	ble.n	404596 <_dtoa_r+0x456>
  404584:	42a9      	cmp	r1, r5
  404586:	9a08      	ldr	r2, [sp, #32]
  404588:	bfa8      	it	ge
  40458a:	462b      	movge	r3, r5
  40458c:	1ad2      	subs	r2, r2, r3
  40458e:	1aed      	subs	r5, r5, r3
  404590:	1acb      	subs	r3, r1, r3
  404592:	9208      	str	r2, [sp, #32]
  404594:	9306      	str	r3, [sp, #24]
  404596:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404598:	b1d3      	cbz	r3, 4045d0 <_dtoa_r+0x490>
  40459a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40459c:	2b00      	cmp	r3, #0
  40459e:	f000 82b7 	beq.w	404b10 <_dtoa_r+0x9d0>
  4045a2:	2f00      	cmp	r7, #0
  4045a4:	dd10      	ble.n	4045c8 <_dtoa_r+0x488>
  4045a6:	4631      	mov	r1, r6
  4045a8:	463a      	mov	r2, r7
  4045aa:	4620      	mov	r0, r4
  4045ac:	f001 fa22 	bl	4059f4 <__pow5mult>
  4045b0:	464a      	mov	r2, r9
  4045b2:	4601      	mov	r1, r0
  4045b4:	4606      	mov	r6, r0
  4045b6:	4620      	mov	r0, r4
  4045b8:	f001 f98a 	bl	4058d0 <__multiply>
  4045bc:	4649      	mov	r1, r9
  4045be:	4680      	mov	r8, r0
  4045c0:	4620      	mov	r0, r4
  4045c2:	f001 f8e1 	bl	405788 <_Bfree>
  4045c6:	46c1      	mov	r9, r8
  4045c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4045ca:	1bda      	subs	r2, r3, r7
  4045cc:	f040 82a1 	bne.w	404b12 <_dtoa_r+0x9d2>
  4045d0:	2101      	movs	r1, #1
  4045d2:	4620      	mov	r0, r4
  4045d4:	f001 f972 	bl	4058bc <__i2b>
  4045d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4045da:	2b00      	cmp	r3, #0
  4045dc:	4680      	mov	r8, r0
  4045de:	dd1c      	ble.n	40461a <_dtoa_r+0x4da>
  4045e0:	4601      	mov	r1, r0
  4045e2:	461a      	mov	r2, r3
  4045e4:	4620      	mov	r0, r4
  4045e6:	f001 fa05 	bl	4059f4 <__pow5mult>
  4045ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4045ec:	2b01      	cmp	r3, #1
  4045ee:	4680      	mov	r8, r0
  4045f0:	f340 8254 	ble.w	404a9c <_dtoa_r+0x95c>
  4045f4:	2300      	movs	r3, #0
  4045f6:	930c      	str	r3, [sp, #48]	; 0x30
  4045f8:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4045fc:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  404600:	6918      	ldr	r0, [r3, #16]
  404602:	f001 f90b 	bl	40581c <__hi0bits>
  404606:	f1c0 0020 	rsb	r0, r0, #32
  40460a:	e010      	b.n	40462e <_dtoa_r+0x4ee>
  40460c:	f1c3 0520 	rsb	r5, r3, #32
  404610:	fa0a f005 	lsl.w	r0, sl, r5
  404614:	e674      	b.n	404300 <_dtoa_r+0x1c0>
  404616:	900e      	str	r0, [sp, #56]	; 0x38
  404618:	e63c      	b.n	404294 <_dtoa_r+0x154>
  40461a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40461c:	2b01      	cmp	r3, #1
  40461e:	f340 8287 	ble.w	404b30 <_dtoa_r+0x9f0>
  404622:	2300      	movs	r3, #0
  404624:	930c      	str	r3, [sp, #48]	; 0x30
  404626:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404628:	2001      	movs	r0, #1
  40462a:	2b00      	cmp	r3, #0
  40462c:	d1e4      	bne.n	4045f8 <_dtoa_r+0x4b8>
  40462e:	9a06      	ldr	r2, [sp, #24]
  404630:	4410      	add	r0, r2
  404632:	f010 001f 	ands.w	r0, r0, #31
  404636:	f000 80a1 	beq.w	40477c <_dtoa_r+0x63c>
  40463a:	f1c0 0320 	rsb	r3, r0, #32
  40463e:	2b04      	cmp	r3, #4
  404640:	f340 849e 	ble.w	404f80 <_dtoa_r+0xe40>
  404644:	9b08      	ldr	r3, [sp, #32]
  404646:	f1c0 001c 	rsb	r0, r0, #28
  40464a:	4403      	add	r3, r0
  40464c:	9308      	str	r3, [sp, #32]
  40464e:	4613      	mov	r3, r2
  404650:	4403      	add	r3, r0
  404652:	4405      	add	r5, r0
  404654:	9306      	str	r3, [sp, #24]
  404656:	9b08      	ldr	r3, [sp, #32]
  404658:	2b00      	cmp	r3, #0
  40465a:	dd05      	ble.n	404668 <_dtoa_r+0x528>
  40465c:	4649      	mov	r1, r9
  40465e:	461a      	mov	r2, r3
  404660:	4620      	mov	r0, r4
  404662:	f001 fa17 	bl	405a94 <__lshift>
  404666:	4681      	mov	r9, r0
  404668:	9b06      	ldr	r3, [sp, #24]
  40466a:	2b00      	cmp	r3, #0
  40466c:	dd05      	ble.n	40467a <_dtoa_r+0x53a>
  40466e:	4641      	mov	r1, r8
  404670:	461a      	mov	r2, r3
  404672:	4620      	mov	r0, r4
  404674:	f001 fa0e 	bl	405a94 <__lshift>
  404678:	4680      	mov	r8, r0
  40467a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40467c:	2b00      	cmp	r3, #0
  40467e:	f040 8086 	bne.w	40478e <_dtoa_r+0x64e>
  404682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404684:	2b00      	cmp	r3, #0
  404686:	f340 8266 	ble.w	404b56 <_dtoa_r+0xa16>
  40468a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40468c:	2b00      	cmp	r3, #0
  40468e:	f000 8098 	beq.w	4047c2 <_dtoa_r+0x682>
  404692:	2d00      	cmp	r5, #0
  404694:	dd05      	ble.n	4046a2 <_dtoa_r+0x562>
  404696:	4631      	mov	r1, r6
  404698:	462a      	mov	r2, r5
  40469a:	4620      	mov	r0, r4
  40469c:	f001 f9fa 	bl	405a94 <__lshift>
  4046a0:	4606      	mov	r6, r0
  4046a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4046a4:	2b00      	cmp	r3, #0
  4046a6:	f040 8337 	bne.w	404d18 <_dtoa_r+0xbd8>
  4046aa:	9606      	str	r6, [sp, #24]
  4046ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4046ae:	9a04      	ldr	r2, [sp, #16]
  4046b0:	f8dd b018 	ldr.w	fp, [sp, #24]
  4046b4:	3b01      	subs	r3, #1
  4046b6:	18d3      	adds	r3, r2, r3
  4046b8:	930b      	str	r3, [sp, #44]	; 0x2c
  4046ba:	f00a 0301 	and.w	r3, sl, #1
  4046be:	930c      	str	r3, [sp, #48]	; 0x30
  4046c0:	4617      	mov	r7, r2
  4046c2:	46c2      	mov	sl, r8
  4046c4:	4651      	mov	r1, sl
  4046c6:	4648      	mov	r0, r9
  4046c8:	f7ff fca6 	bl	404018 <quorem>
  4046cc:	4631      	mov	r1, r6
  4046ce:	4605      	mov	r5, r0
  4046d0:	4648      	mov	r0, r9
  4046d2:	f001 fa31 	bl	405b38 <__mcmp>
  4046d6:	465a      	mov	r2, fp
  4046d8:	900a      	str	r0, [sp, #40]	; 0x28
  4046da:	4651      	mov	r1, sl
  4046dc:	4620      	mov	r0, r4
  4046de:	f001 fa47 	bl	405b70 <__mdiff>
  4046e2:	68c2      	ldr	r2, [r0, #12]
  4046e4:	4680      	mov	r8, r0
  4046e6:	f105 0330 	add.w	r3, r5, #48	; 0x30
  4046ea:	2a00      	cmp	r2, #0
  4046ec:	f040 822b 	bne.w	404b46 <_dtoa_r+0xa06>
  4046f0:	4601      	mov	r1, r0
  4046f2:	4648      	mov	r0, r9
  4046f4:	9308      	str	r3, [sp, #32]
  4046f6:	f001 fa1f 	bl	405b38 <__mcmp>
  4046fa:	4641      	mov	r1, r8
  4046fc:	9006      	str	r0, [sp, #24]
  4046fe:	4620      	mov	r0, r4
  404700:	f001 f842 	bl	405788 <_Bfree>
  404704:	9a06      	ldr	r2, [sp, #24]
  404706:	9b08      	ldr	r3, [sp, #32]
  404708:	b932      	cbnz	r2, 404718 <_dtoa_r+0x5d8>
  40470a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40470c:	b921      	cbnz	r1, 404718 <_dtoa_r+0x5d8>
  40470e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404710:	2a00      	cmp	r2, #0
  404712:	f000 83ef 	beq.w	404ef4 <_dtoa_r+0xdb4>
  404716:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404718:	990a      	ldr	r1, [sp, #40]	; 0x28
  40471a:	2900      	cmp	r1, #0
  40471c:	f2c0 829f 	blt.w	404c5e <_dtoa_r+0xb1e>
  404720:	d105      	bne.n	40472e <_dtoa_r+0x5ee>
  404722:	9924      	ldr	r1, [sp, #144]	; 0x90
  404724:	b919      	cbnz	r1, 40472e <_dtoa_r+0x5ee>
  404726:	990c      	ldr	r1, [sp, #48]	; 0x30
  404728:	2900      	cmp	r1, #0
  40472a:	f000 8298 	beq.w	404c5e <_dtoa_r+0xb1e>
  40472e:	2a00      	cmp	r2, #0
  404730:	f300 8306 	bgt.w	404d40 <_dtoa_r+0xc00>
  404734:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404736:	703b      	strb	r3, [r7, #0]
  404738:	f107 0801 	add.w	r8, r7, #1
  40473c:	4297      	cmp	r7, r2
  40473e:	4645      	mov	r5, r8
  404740:	f000 830c 	beq.w	404d5c <_dtoa_r+0xc1c>
  404744:	4649      	mov	r1, r9
  404746:	2300      	movs	r3, #0
  404748:	220a      	movs	r2, #10
  40474a:	4620      	mov	r0, r4
  40474c:	f001 f826 	bl	40579c <__multadd>
  404750:	455e      	cmp	r6, fp
  404752:	4681      	mov	r9, r0
  404754:	4631      	mov	r1, r6
  404756:	f04f 0300 	mov.w	r3, #0
  40475a:	f04f 020a 	mov.w	r2, #10
  40475e:	4620      	mov	r0, r4
  404760:	f000 81eb 	beq.w	404b3a <_dtoa_r+0x9fa>
  404764:	f001 f81a 	bl	40579c <__multadd>
  404768:	4659      	mov	r1, fp
  40476a:	4606      	mov	r6, r0
  40476c:	2300      	movs	r3, #0
  40476e:	220a      	movs	r2, #10
  404770:	4620      	mov	r0, r4
  404772:	f001 f813 	bl	40579c <__multadd>
  404776:	4647      	mov	r7, r8
  404778:	4683      	mov	fp, r0
  40477a:	e7a3      	b.n	4046c4 <_dtoa_r+0x584>
  40477c:	201c      	movs	r0, #28
  40477e:	9b08      	ldr	r3, [sp, #32]
  404780:	4403      	add	r3, r0
  404782:	9308      	str	r3, [sp, #32]
  404784:	9b06      	ldr	r3, [sp, #24]
  404786:	4403      	add	r3, r0
  404788:	4405      	add	r5, r0
  40478a:	9306      	str	r3, [sp, #24]
  40478c:	e763      	b.n	404656 <_dtoa_r+0x516>
  40478e:	4641      	mov	r1, r8
  404790:	4648      	mov	r0, r9
  404792:	f001 f9d1 	bl	405b38 <__mcmp>
  404796:	2800      	cmp	r0, #0
  404798:	f6bf af73 	bge.w	404682 <_dtoa_r+0x542>
  40479c:	9f02      	ldr	r7, [sp, #8]
  40479e:	4649      	mov	r1, r9
  4047a0:	2300      	movs	r3, #0
  4047a2:	220a      	movs	r2, #10
  4047a4:	4620      	mov	r0, r4
  4047a6:	3f01      	subs	r7, #1
  4047a8:	9702      	str	r7, [sp, #8]
  4047aa:	f000 fff7 	bl	40579c <__multadd>
  4047ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4047b0:	4681      	mov	r9, r0
  4047b2:	2b00      	cmp	r3, #0
  4047b4:	f040 83b6 	bne.w	404f24 <_dtoa_r+0xde4>
  4047b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4047ba:	2b00      	cmp	r3, #0
  4047bc:	f340 83bf 	ble.w	404f3e <_dtoa_r+0xdfe>
  4047c0:	930a      	str	r3, [sp, #40]	; 0x28
  4047c2:	f8dd b010 	ldr.w	fp, [sp, #16]
  4047c6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4047c8:	465d      	mov	r5, fp
  4047ca:	e002      	b.n	4047d2 <_dtoa_r+0x692>
  4047cc:	f000 ffe6 	bl	40579c <__multadd>
  4047d0:	4681      	mov	r9, r0
  4047d2:	4641      	mov	r1, r8
  4047d4:	4648      	mov	r0, r9
  4047d6:	f7ff fc1f 	bl	404018 <quorem>
  4047da:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  4047de:	f805 ab01 	strb.w	sl, [r5], #1
  4047e2:	eba5 030b 	sub.w	r3, r5, fp
  4047e6:	42bb      	cmp	r3, r7
  4047e8:	f04f 020a 	mov.w	r2, #10
  4047ec:	f04f 0300 	mov.w	r3, #0
  4047f0:	4649      	mov	r1, r9
  4047f2:	4620      	mov	r0, r4
  4047f4:	dbea      	blt.n	4047cc <_dtoa_r+0x68c>
  4047f6:	9b04      	ldr	r3, [sp, #16]
  4047f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4047fa:	2a01      	cmp	r2, #1
  4047fc:	bfac      	ite	ge
  4047fe:	189b      	addge	r3, r3, r2
  404800:	3301      	addlt	r3, #1
  404802:	461d      	mov	r5, r3
  404804:	f04f 0b00 	mov.w	fp, #0
  404808:	4649      	mov	r1, r9
  40480a:	2201      	movs	r2, #1
  40480c:	4620      	mov	r0, r4
  40480e:	f001 f941 	bl	405a94 <__lshift>
  404812:	4641      	mov	r1, r8
  404814:	4681      	mov	r9, r0
  404816:	f001 f98f 	bl	405b38 <__mcmp>
  40481a:	2800      	cmp	r0, #0
  40481c:	f340 823d 	ble.w	404c9a <_dtoa_r+0xb5a>
  404820:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  404824:	9904      	ldr	r1, [sp, #16]
  404826:	1e6b      	subs	r3, r5, #1
  404828:	e004      	b.n	404834 <_dtoa_r+0x6f4>
  40482a:	428b      	cmp	r3, r1
  40482c:	f000 81ae 	beq.w	404b8c <_dtoa_r+0xa4c>
  404830:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  404834:	2a39      	cmp	r2, #57	; 0x39
  404836:	f103 0501 	add.w	r5, r3, #1
  40483a:	d0f6      	beq.n	40482a <_dtoa_r+0x6ea>
  40483c:	3201      	adds	r2, #1
  40483e:	701a      	strb	r2, [r3, #0]
  404840:	4641      	mov	r1, r8
  404842:	4620      	mov	r0, r4
  404844:	f000 ffa0 	bl	405788 <_Bfree>
  404848:	2e00      	cmp	r6, #0
  40484a:	f43f ae3d 	beq.w	4044c8 <_dtoa_r+0x388>
  40484e:	f1bb 0f00 	cmp.w	fp, #0
  404852:	d005      	beq.n	404860 <_dtoa_r+0x720>
  404854:	45b3      	cmp	fp, r6
  404856:	d003      	beq.n	404860 <_dtoa_r+0x720>
  404858:	4659      	mov	r1, fp
  40485a:	4620      	mov	r0, r4
  40485c:	f000 ff94 	bl	405788 <_Bfree>
  404860:	4631      	mov	r1, r6
  404862:	4620      	mov	r0, r4
  404864:	f000 ff90 	bl	405788 <_Bfree>
  404868:	e62e      	b.n	4044c8 <_dtoa_r+0x388>
  40486a:	2300      	movs	r3, #0
  40486c:	930b      	str	r3, [sp, #44]	; 0x2c
  40486e:	9b02      	ldr	r3, [sp, #8]
  404870:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404872:	4413      	add	r3, r2
  404874:	930f      	str	r3, [sp, #60]	; 0x3c
  404876:	3301      	adds	r3, #1
  404878:	2b01      	cmp	r3, #1
  40487a:	461f      	mov	r7, r3
  40487c:	461e      	mov	r6, r3
  40487e:	930a      	str	r3, [sp, #40]	; 0x28
  404880:	bfb8      	it	lt
  404882:	2701      	movlt	r7, #1
  404884:	2100      	movs	r1, #0
  404886:	2f17      	cmp	r7, #23
  404888:	6461      	str	r1, [r4, #68]	; 0x44
  40488a:	d90a      	bls.n	4048a2 <_dtoa_r+0x762>
  40488c:	2201      	movs	r2, #1
  40488e:	2304      	movs	r3, #4
  404890:	005b      	lsls	r3, r3, #1
  404892:	f103 0014 	add.w	r0, r3, #20
  404896:	4287      	cmp	r7, r0
  404898:	4611      	mov	r1, r2
  40489a:	f102 0201 	add.w	r2, r2, #1
  40489e:	d2f7      	bcs.n	404890 <_dtoa_r+0x750>
  4048a0:	6461      	str	r1, [r4, #68]	; 0x44
  4048a2:	4620      	mov	r0, r4
  4048a4:	f000 ff4a 	bl	40573c <_Balloc>
  4048a8:	2e0e      	cmp	r6, #14
  4048aa:	9004      	str	r0, [sp, #16]
  4048ac:	6420      	str	r0, [r4, #64]	; 0x40
  4048ae:	f63f ad41 	bhi.w	404334 <_dtoa_r+0x1f4>
  4048b2:	2d00      	cmp	r5, #0
  4048b4:	f43f ad3e 	beq.w	404334 <_dtoa_r+0x1f4>
  4048b8:	9902      	ldr	r1, [sp, #8]
  4048ba:	2900      	cmp	r1, #0
  4048bc:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  4048c0:	f340 8202 	ble.w	404cc8 <_dtoa_r+0xb88>
  4048c4:	4bb8      	ldr	r3, [pc, #736]	; (404ba8 <_dtoa_r+0xa68>)
  4048c6:	f001 020f 	and.w	r2, r1, #15
  4048ca:	110d      	asrs	r5, r1, #4
  4048cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4048d0:	06e9      	lsls	r1, r5, #27
  4048d2:	e9d3 6700 	ldrd	r6, r7, [r3]
  4048d6:	f140 81ae 	bpl.w	404c36 <_dtoa_r+0xaf6>
  4048da:	4bb4      	ldr	r3, [pc, #720]	; (404bac <_dtoa_r+0xa6c>)
  4048dc:	4650      	mov	r0, sl
  4048de:	4659      	mov	r1, fp
  4048e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  4048e4:	f002 f98c 	bl	406c00 <__aeabi_ddiv>
  4048e8:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  4048ec:	f005 050f 	and.w	r5, r5, #15
  4048f0:	f04f 0a03 	mov.w	sl, #3
  4048f4:	b18d      	cbz	r5, 40491a <_dtoa_r+0x7da>
  4048f6:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 404bac <_dtoa_r+0xa6c>
  4048fa:	07ea      	lsls	r2, r5, #31
  4048fc:	d509      	bpl.n	404912 <_dtoa_r+0x7d2>
  4048fe:	4630      	mov	r0, r6
  404900:	4639      	mov	r1, r7
  404902:	e9d8 2300 	ldrd	r2, r3, [r8]
  404906:	f002 f851 	bl	4069ac <__aeabi_dmul>
  40490a:	f10a 0a01 	add.w	sl, sl, #1
  40490e:	4606      	mov	r6, r0
  404910:	460f      	mov	r7, r1
  404912:	106d      	asrs	r5, r5, #1
  404914:	f108 0808 	add.w	r8, r8, #8
  404918:	d1ef      	bne.n	4048fa <_dtoa_r+0x7ba>
  40491a:	463b      	mov	r3, r7
  40491c:	4632      	mov	r2, r6
  40491e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  404922:	f002 f96d 	bl	406c00 <__aeabi_ddiv>
  404926:	4607      	mov	r7, r0
  404928:	4688      	mov	r8, r1
  40492a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40492c:	b143      	cbz	r3, 404940 <_dtoa_r+0x800>
  40492e:	2200      	movs	r2, #0
  404930:	4b9f      	ldr	r3, [pc, #636]	; (404bb0 <_dtoa_r+0xa70>)
  404932:	4638      	mov	r0, r7
  404934:	4641      	mov	r1, r8
  404936:	f002 faab 	bl	406e90 <__aeabi_dcmplt>
  40493a:	2800      	cmp	r0, #0
  40493c:	f040 8286 	bne.w	404e4c <_dtoa_r+0xd0c>
  404940:	4650      	mov	r0, sl
  404942:	f001 ffcd 	bl	4068e0 <__aeabi_i2d>
  404946:	463a      	mov	r2, r7
  404948:	4643      	mov	r3, r8
  40494a:	f002 f82f 	bl	4069ac <__aeabi_dmul>
  40494e:	4b99      	ldr	r3, [pc, #612]	; (404bb4 <_dtoa_r+0xa74>)
  404950:	2200      	movs	r2, #0
  404952:	f001 fe79 	bl	406648 <__adddf3>
  404956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404958:	4605      	mov	r5, r0
  40495a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40495e:	2b00      	cmp	r3, #0
  404960:	f000 813e 	beq.w	404be0 <_dtoa_r+0xaa0>
  404964:	9b02      	ldr	r3, [sp, #8]
  404966:	9315      	str	r3, [sp, #84]	; 0x54
  404968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40496a:	9312      	str	r3, [sp, #72]	; 0x48
  40496c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40496e:	2b00      	cmp	r3, #0
  404970:	f000 81fa 	beq.w	404d68 <_dtoa_r+0xc28>
  404974:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404976:	4b8c      	ldr	r3, [pc, #560]	; (404ba8 <_dtoa_r+0xa68>)
  404978:	498f      	ldr	r1, [pc, #572]	; (404bb8 <_dtoa_r+0xa78>)
  40497a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40497e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  404982:	2000      	movs	r0, #0
  404984:	f002 f93c 	bl	406c00 <__aeabi_ddiv>
  404988:	462a      	mov	r2, r5
  40498a:	4633      	mov	r3, r6
  40498c:	f001 fe5a 	bl	406644 <__aeabi_dsub>
  404990:	4682      	mov	sl, r0
  404992:	468b      	mov	fp, r1
  404994:	4638      	mov	r0, r7
  404996:	4641      	mov	r1, r8
  404998:	f002 fab8 	bl	406f0c <__aeabi_d2iz>
  40499c:	4605      	mov	r5, r0
  40499e:	f001 ff9f 	bl	4068e0 <__aeabi_i2d>
  4049a2:	4602      	mov	r2, r0
  4049a4:	460b      	mov	r3, r1
  4049a6:	4638      	mov	r0, r7
  4049a8:	4641      	mov	r1, r8
  4049aa:	f001 fe4b 	bl	406644 <__aeabi_dsub>
  4049ae:	3530      	adds	r5, #48	; 0x30
  4049b0:	fa5f f885 	uxtb.w	r8, r5
  4049b4:	9d04      	ldr	r5, [sp, #16]
  4049b6:	4606      	mov	r6, r0
  4049b8:	460f      	mov	r7, r1
  4049ba:	f885 8000 	strb.w	r8, [r5]
  4049be:	4602      	mov	r2, r0
  4049c0:	460b      	mov	r3, r1
  4049c2:	4650      	mov	r0, sl
  4049c4:	4659      	mov	r1, fp
  4049c6:	3501      	adds	r5, #1
  4049c8:	f002 fa80 	bl	406ecc <__aeabi_dcmpgt>
  4049cc:	2800      	cmp	r0, #0
  4049ce:	d154      	bne.n	404a7a <_dtoa_r+0x93a>
  4049d0:	4632      	mov	r2, r6
  4049d2:	463b      	mov	r3, r7
  4049d4:	2000      	movs	r0, #0
  4049d6:	4976      	ldr	r1, [pc, #472]	; (404bb0 <_dtoa_r+0xa70>)
  4049d8:	f001 fe34 	bl	406644 <__aeabi_dsub>
  4049dc:	4602      	mov	r2, r0
  4049de:	460b      	mov	r3, r1
  4049e0:	4650      	mov	r0, sl
  4049e2:	4659      	mov	r1, fp
  4049e4:	f002 fa72 	bl	406ecc <__aeabi_dcmpgt>
  4049e8:	2800      	cmp	r0, #0
  4049ea:	f040 8270 	bne.w	404ece <_dtoa_r+0xd8e>
  4049ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4049f0:	2a01      	cmp	r2, #1
  4049f2:	f000 8111 	beq.w	404c18 <_dtoa_r+0xad8>
  4049f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4049f8:	9a04      	ldr	r2, [sp, #16]
  4049fa:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  4049fe:	4413      	add	r3, r2
  404a00:	4699      	mov	r9, r3
  404a02:	e00d      	b.n	404a20 <_dtoa_r+0x8e0>
  404a04:	2000      	movs	r0, #0
  404a06:	496a      	ldr	r1, [pc, #424]	; (404bb0 <_dtoa_r+0xa70>)
  404a08:	f001 fe1c 	bl	406644 <__aeabi_dsub>
  404a0c:	4652      	mov	r2, sl
  404a0e:	465b      	mov	r3, fp
  404a10:	f002 fa3e 	bl	406e90 <__aeabi_dcmplt>
  404a14:	2800      	cmp	r0, #0
  404a16:	f040 8258 	bne.w	404eca <_dtoa_r+0xd8a>
  404a1a:	454d      	cmp	r5, r9
  404a1c:	f000 80fa 	beq.w	404c14 <_dtoa_r+0xad4>
  404a20:	4650      	mov	r0, sl
  404a22:	4659      	mov	r1, fp
  404a24:	2200      	movs	r2, #0
  404a26:	4b65      	ldr	r3, [pc, #404]	; (404bbc <_dtoa_r+0xa7c>)
  404a28:	f001 ffc0 	bl	4069ac <__aeabi_dmul>
  404a2c:	2200      	movs	r2, #0
  404a2e:	4b63      	ldr	r3, [pc, #396]	; (404bbc <_dtoa_r+0xa7c>)
  404a30:	4682      	mov	sl, r0
  404a32:	468b      	mov	fp, r1
  404a34:	4630      	mov	r0, r6
  404a36:	4639      	mov	r1, r7
  404a38:	f001 ffb8 	bl	4069ac <__aeabi_dmul>
  404a3c:	460f      	mov	r7, r1
  404a3e:	4606      	mov	r6, r0
  404a40:	f002 fa64 	bl	406f0c <__aeabi_d2iz>
  404a44:	4680      	mov	r8, r0
  404a46:	f001 ff4b 	bl	4068e0 <__aeabi_i2d>
  404a4a:	4602      	mov	r2, r0
  404a4c:	460b      	mov	r3, r1
  404a4e:	4630      	mov	r0, r6
  404a50:	4639      	mov	r1, r7
  404a52:	f001 fdf7 	bl	406644 <__aeabi_dsub>
  404a56:	f108 0830 	add.w	r8, r8, #48	; 0x30
  404a5a:	fa5f f888 	uxtb.w	r8, r8
  404a5e:	4652      	mov	r2, sl
  404a60:	465b      	mov	r3, fp
  404a62:	f805 8b01 	strb.w	r8, [r5], #1
  404a66:	4606      	mov	r6, r0
  404a68:	460f      	mov	r7, r1
  404a6a:	f002 fa11 	bl	406e90 <__aeabi_dcmplt>
  404a6e:	4632      	mov	r2, r6
  404a70:	463b      	mov	r3, r7
  404a72:	2800      	cmp	r0, #0
  404a74:	d0c6      	beq.n	404a04 <_dtoa_r+0x8c4>
  404a76:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  404a7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404a7c:	9302      	str	r3, [sp, #8]
  404a7e:	e523      	b.n	4044c8 <_dtoa_r+0x388>
  404a80:	2300      	movs	r3, #0
  404a82:	930b      	str	r3, [sp, #44]	; 0x2c
  404a84:	9b25      	ldr	r3, [sp, #148]	; 0x94
  404a86:	2b00      	cmp	r3, #0
  404a88:	f340 80dc 	ble.w	404c44 <_dtoa_r+0xb04>
  404a8c:	461f      	mov	r7, r3
  404a8e:	461e      	mov	r6, r3
  404a90:	930f      	str	r3, [sp, #60]	; 0x3c
  404a92:	930a      	str	r3, [sp, #40]	; 0x28
  404a94:	e6f6      	b.n	404884 <_dtoa_r+0x744>
  404a96:	2301      	movs	r3, #1
  404a98:	930b      	str	r3, [sp, #44]	; 0x2c
  404a9a:	e7f3      	b.n	404a84 <_dtoa_r+0x944>
  404a9c:	f1ba 0f00 	cmp.w	sl, #0
  404aa0:	f47f ada8 	bne.w	4045f4 <_dtoa_r+0x4b4>
  404aa4:	f3cb 0313 	ubfx	r3, fp, #0, #20
  404aa8:	2b00      	cmp	r3, #0
  404aaa:	f47f adba 	bne.w	404622 <_dtoa_r+0x4e2>
  404aae:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  404ab2:	0d3f      	lsrs	r7, r7, #20
  404ab4:	053f      	lsls	r7, r7, #20
  404ab6:	2f00      	cmp	r7, #0
  404ab8:	f000 820d 	beq.w	404ed6 <_dtoa_r+0xd96>
  404abc:	9b08      	ldr	r3, [sp, #32]
  404abe:	3301      	adds	r3, #1
  404ac0:	9308      	str	r3, [sp, #32]
  404ac2:	9b06      	ldr	r3, [sp, #24]
  404ac4:	3301      	adds	r3, #1
  404ac6:	9306      	str	r3, [sp, #24]
  404ac8:	2301      	movs	r3, #1
  404aca:	930c      	str	r3, [sp, #48]	; 0x30
  404acc:	e5ab      	b.n	404626 <_dtoa_r+0x4e6>
  404ace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404ad0:	2b00      	cmp	r3, #0
  404ad2:	f73f ac42 	bgt.w	40435a <_dtoa_r+0x21a>
  404ad6:	f040 8221 	bne.w	404f1c <_dtoa_r+0xddc>
  404ada:	2200      	movs	r2, #0
  404adc:	4b38      	ldr	r3, [pc, #224]	; (404bc0 <_dtoa_r+0xa80>)
  404ade:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  404ae2:	f001 ff63 	bl	4069ac <__aeabi_dmul>
  404ae6:	4652      	mov	r2, sl
  404ae8:	465b      	mov	r3, fp
  404aea:	f002 f9e5 	bl	406eb8 <__aeabi_dcmpge>
  404aee:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  404af2:	4646      	mov	r6, r8
  404af4:	2800      	cmp	r0, #0
  404af6:	d041      	beq.n	404b7c <_dtoa_r+0xa3c>
  404af8:	9b25      	ldr	r3, [sp, #148]	; 0x94
  404afa:	9d04      	ldr	r5, [sp, #16]
  404afc:	43db      	mvns	r3, r3
  404afe:	9302      	str	r3, [sp, #8]
  404b00:	4641      	mov	r1, r8
  404b02:	4620      	mov	r0, r4
  404b04:	f000 fe40 	bl	405788 <_Bfree>
  404b08:	2e00      	cmp	r6, #0
  404b0a:	f43f acdd 	beq.w	4044c8 <_dtoa_r+0x388>
  404b0e:	e6a7      	b.n	404860 <_dtoa_r+0x720>
  404b10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404b12:	4649      	mov	r1, r9
  404b14:	4620      	mov	r0, r4
  404b16:	f000 ff6d 	bl	4059f4 <__pow5mult>
  404b1a:	4681      	mov	r9, r0
  404b1c:	e558      	b.n	4045d0 <_dtoa_r+0x490>
  404b1e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  404b20:	2a00      	cmp	r2, #0
  404b22:	f000 8187 	beq.w	404e34 <_dtoa_r+0xcf4>
  404b26:	f203 4333 	addw	r3, r3, #1075	; 0x433
  404b2a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404b2c:	9d08      	ldr	r5, [sp, #32]
  404b2e:	e4f2      	b.n	404516 <_dtoa_r+0x3d6>
  404b30:	f1ba 0f00 	cmp.w	sl, #0
  404b34:	f47f ad75 	bne.w	404622 <_dtoa_r+0x4e2>
  404b38:	e7b4      	b.n	404aa4 <_dtoa_r+0x964>
  404b3a:	f000 fe2f 	bl	40579c <__multadd>
  404b3e:	4647      	mov	r7, r8
  404b40:	4606      	mov	r6, r0
  404b42:	4683      	mov	fp, r0
  404b44:	e5be      	b.n	4046c4 <_dtoa_r+0x584>
  404b46:	4601      	mov	r1, r0
  404b48:	4620      	mov	r0, r4
  404b4a:	9306      	str	r3, [sp, #24]
  404b4c:	f000 fe1c 	bl	405788 <_Bfree>
  404b50:	2201      	movs	r2, #1
  404b52:	9b06      	ldr	r3, [sp, #24]
  404b54:	e5e0      	b.n	404718 <_dtoa_r+0x5d8>
  404b56:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404b58:	2b02      	cmp	r3, #2
  404b5a:	f77f ad96 	ble.w	40468a <_dtoa_r+0x54a>
  404b5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404b60:	2b00      	cmp	r3, #0
  404b62:	d1c9      	bne.n	404af8 <_dtoa_r+0x9b8>
  404b64:	4641      	mov	r1, r8
  404b66:	2205      	movs	r2, #5
  404b68:	4620      	mov	r0, r4
  404b6a:	f000 fe17 	bl	40579c <__multadd>
  404b6e:	4601      	mov	r1, r0
  404b70:	4680      	mov	r8, r0
  404b72:	4648      	mov	r0, r9
  404b74:	f000 ffe0 	bl	405b38 <__mcmp>
  404b78:	2800      	cmp	r0, #0
  404b7a:	ddbd      	ble.n	404af8 <_dtoa_r+0x9b8>
  404b7c:	9a02      	ldr	r2, [sp, #8]
  404b7e:	9904      	ldr	r1, [sp, #16]
  404b80:	2331      	movs	r3, #49	; 0x31
  404b82:	3201      	adds	r2, #1
  404b84:	9202      	str	r2, [sp, #8]
  404b86:	700b      	strb	r3, [r1, #0]
  404b88:	1c4d      	adds	r5, r1, #1
  404b8a:	e7b9      	b.n	404b00 <_dtoa_r+0x9c0>
  404b8c:	9a02      	ldr	r2, [sp, #8]
  404b8e:	3201      	adds	r2, #1
  404b90:	9202      	str	r2, [sp, #8]
  404b92:	9a04      	ldr	r2, [sp, #16]
  404b94:	2331      	movs	r3, #49	; 0x31
  404b96:	7013      	strb	r3, [r2, #0]
  404b98:	e652      	b.n	404840 <_dtoa_r+0x700>
  404b9a:	2301      	movs	r3, #1
  404b9c:	930b      	str	r3, [sp, #44]	; 0x2c
  404b9e:	e666      	b.n	40486e <_dtoa_r+0x72e>
  404ba0:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  404ba4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404ba6:	e48f      	b.n	4044c8 <_dtoa_r+0x388>
  404ba8:	004071e0 	.word	0x004071e0
  404bac:	004071b8 	.word	0x004071b8
  404bb0:	3ff00000 	.word	0x3ff00000
  404bb4:	401c0000 	.word	0x401c0000
  404bb8:	3fe00000 	.word	0x3fe00000
  404bbc:	40240000 	.word	0x40240000
  404bc0:	40140000 	.word	0x40140000
  404bc4:	4650      	mov	r0, sl
  404bc6:	f001 fe8b 	bl	4068e0 <__aeabi_i2d>
  404bca:	463a      	mov	r2, r7
  404bcc:	4643      	mov	r3, r8
  404bce:	f001 feed 	bl	4069ac <__aeabi_dmul>
  404bd2:	2200      	movs	r2, #0
  404bd4:	4bc1      	ldr	r3, [pc, #772]	; (404edc <_dtoa_r+0xd9c>)
  404bd6:	f001 fd37 	bl	406648 <__adddf3>
  404bda:	4605      	mov	r5, r0
  404bdc:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  404be0:	4641      	mov	r1, r8
  404be2:	2200      	movs	r2, #0
  404be4:	4bbe      	ldr	r3, [pc, #760]	; (404ee0 <_dtoa_r+0xda0>)
  404be6:	4638      	mov	r0, r7
  404be8:	f001 fd2c 	bl	406644 <__aeabi_dsub>
  404bec:	462a      	mov	r2, r5
  404bee:	4633      	mov	r3, r6
  404bf0:	4682      	mov	sl, r0
  404bf2:	468b      	mov	fp, r1
  404bf4:	f002 f96a 	bl	406ecc <__aeabi_dcmpgt>
  404bf8:	4680      	mov	r8, r0
  404bfa:	2800      	cmp	r0, #0
  404bfc:	f040 8110 	bne.w	404e20 <_dtoa_r+0xce0>
  404c00:	462a      	mov	r2, r5
  404c02:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  404c06:	4650      	mov	r0, sl
  404c08:	4659      	mov	r1, fp
  404c0a:	f002 f941 	bl	406e90 <__aeabi_dcmplt>
  404c0e:	b118      	cbz	r0, 404c18 <_dtoa_r+0xad8>
  404c10:	4646      	mov	r6, r8
  404c12:	e771      	b.n	404af8 <_dtoa_r+0x9b8>
  404c14:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  404c18:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  404c1c:	f7ff bb8a 	b.w	404334 <_dtoa_r+0x1f4>
  404c20:	9804      	ldr	r0, [sp, #16]
  404c22:	f7ff babb 	b.w	40419c <_dtoa_r+0x5c>
  404c26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404c28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  404c2a:	970c      	str	r7, [sp, #48]	; 0x30
  404c2c:	1afb      	subs	r3, r7, r3
  404c2e:	441a      	add	r2, r3
  404c30:	920d      	str	r2, [sp, #52]	; 0x34
  404c32:	2700      	movs	r7, #0
  404c34:	e469      	b.n	40450a <_dtoa_r+0x3ca>
  404c36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  404c3a:	f04f 0a02 	mov.w	sl, #2
  404c3e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  404c42:	e657      	b.n	4048f4 <_dtoa_r+0x7b4>
  404c44:	2100      	movs	r1, #0
  404c46:	2301      	movs	r3, #1
  404c48:	6461      	str	r1, [r4, #68]	; 0x44
  404c4a:	4620      	mov	r0, r4
  404c4c:	9325      	str	r3, [sp, #148]	; 0x94
  404c4e:	f000 fd75 	bl	40573c <_Balloc>
  404c52:	9b25      	ldr	r3, [sp, #148]	; 0x94
  404c54:	9004      	str	r0, [sp, #16]
  404c56:	6420      	str	r0, [r4, #64]	; 0x40
  404c58:	930a      	str	r3, [sp, #40]	; 0x28
  404c5a:	930f      	str	r3, [sp, #60]	; 0x3c
  404c5c:	e629      	b.n	4048b2 <_dtoa_r+0x772>
  404c5e:	2a00      	cmp	r2, #0
  404c60:	46d0      	mov	r8, sl
  404c62:	f8cd b018 	str.w	fp, [sp, #24]
  404c66:	469a      	mov	sl, r3
  404c68:	dd11      	ble.n	404c8e <_dtoa_r+0xb4e>
  404c6a:	4649      	mov	r1, r9
  404c6c:	2201      	movs	r2, #1
  404c6e:	4620      	mov	r0, r4
  404c70:	f000 ff10 	bl	405a94 <__lshift>
  404c74:	4641      	mov	r1, r8
  404c76:	4681      	mov	r9, r0
  404c78:	f000 ff5e 	bl	405b38 <__mcmp>
  404c7c:	2800      	cmp	r0, #0
  404c7e:	f340 8146 	ble.w	404f0e <_dtoa_r+0xdce>
  404c82:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  404c86:	f000 8106 	beq.w	404e96 <_dtoa_r+0xd56>
  404c8a:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  404c8e:	46b3      	mov	fp, r6
  404c90:	f887 a000 	strb.w	sl, [r7]
  404c94:	1c7d      	adds	r5, r7, #1
  404c96:	9e06      	ldr	r6, [sp, #24]
  404c98:	e5d2      	b.n	404840 <_dtoa_r+0x700>
  404c9a:	d104      	bne.n	404ca6 <_dtoa_r+0xb66>
  404c9c:	f01a 0f01 	tst.w	sl, #1
  404ca0:	d001      	beq.n	404ca6 <_dtoa_r+0xb66>
  404ca2:	e5bd      	b.n	404820 <_dtoa_r+0x6e0>
  404ca4:	4615      	mov	r5, r2
  404ca6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404caa:	2b30      	cmp	r3, #48	; 0x30
  404cac:	f105 32ff 	add.w	r2, r5, #4294967295
  404cb0:	d0f8      	beq.n	404ca4 <_dtoa_r+0xb64>
  404cb2:	e5c5      	b.n	404840 <_dtoa_r+0x700>
  404cb4:	9904      	ldr	r1, [sp, #16]
  404cb6:	2230      	movs	r2, #48	; 0x30
  404cb8:	700a      	strb	r2, [r1, #0]
  404cba:	9a02      	ldr	r2, [sp, #8]
  404cbc:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  404cc0:	3201      	adds	r2, #1
  404cc2:	9202      	str	r2, [sp, #8]
  404cc4:	f7ff bbfc 	b.w	4044c0 <_dtoa_r+0x380>
  404cc8:	f000 80bb 	beq.w	404e42 <_dtoa_r+0xd02>
  404ccc:	9b02      	ldr	r3, [sp, #8]
  404cce:	425d      	negs	r5, r3
  404cd0:	4b84      	ldr	r3, [pc, #528]	; (404ee4 <_dtoa_r+0xda4>)
  404cd2:	f005 020f 	and.w	r2, r5, #15
  404cd6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  404cda:	e9d3 2300 	ldrd	r2, r3, [r3]
  404cde:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  404ce2:	f001 fe63 	bl	4069ac <__aeabi_dmul>
  404ce6:	112d      	asrs	r5, r5, #4
  404ce8:	4607      	mov	r7, r0
  404cea:	4688      	mov	r8, r1
  404cec:	f000 812c 	beq.w	404f48 <_dtoa_r+0xe08>
  404cf0:	4e7d      	ldr	r6, [pc, #500]	; (404ee8 <_dtoa_r+0xda8>)
  404cf2:	f04f 0a02 	mov.w	sl, #2
  404cf6:	07eb      	lsls	r3, r5, #31
  404cf8:	d509      	bpl.n	404d0e <_dtoa_r+0xbce>
  404cfa:	4638      	mov	r0, r7
  404cfc:	4641      	mov	r1, r8
  404cfe:	e9d6 2300 	ldrd	r2, r3, [r6]
  404d02:	f001 fe53 	bl	4069ac <__aeabi_dmul>
  404d06:	f10a 0a01 	add.w	sl, sl, #1
  404d0a:	4607      	mov	r7, r0
  404d0c:	4688      	mov	r8, r1
  404d0e:	106d      	asrs	r5, r5, #1
  404d10:	f106 0608 	add.w	r6, r6, #8
  404d14:	d1ef      	bne.n	404cf6 <_dtoa_r+0xbb6>
  404d16:	e608      	b.n	40492a <_dtoa_r+0x7ea>
  404d18:	6871      	ldr	r1, [r6, #4]
  404d1a:	4620      	mov	r0, r4
  404d1c:	f000 fd0e 	bl	40573c <_Balloc>
  404d20:	6933      	ldr	r3, [r6, #16]
  404d22:	3302      	adds	r3, #2
  404d24:	009a      	lsls	r2, r3, #2
  404d26:	4605      	mov	r5, r0
  404d28:	f106 010c 	add.w	r1, r6, #12
  404d2c:	300c      	adds	r0, #12
  404d2e:	f000 fc5f 	bl	4055f0 <memcpy>
  404d32:	4629      	mov	r1, r5
  404d34:	2201      	movs	r2, #1
  404d36:	4620      	mov	r0, r4
  404d38:	f000 feac 	bl	405a94 <__lshift>
  404d3c:	9006      	str	r0, [sp, #24]
  404d3e:	e4b5      	b.n	4046ac <_dtoa_r+0x56c>
  404d40:	2b39      	cmp	r3, #57	; 0x39
  404d42:	f8cd b018 	str.w	fp, [sp, #24]
  404d46:	46d0      	mov	r8, sl
  404d48:	f000 80a5 	beq.w	404e96 <_dtoa_r+0xd56>
  404d4c:	f103 0a01 	add.w	sl, r3, #1
  404d50:	46b3      	mov	fp, r6
  404d52:	f887 a000 	strb.w	sl, [r7]
  404d56:	1c7d      	adds	r5, r7, #1
  404d58:	9e06      	ldr	r6, [sp, #24]
  404d5a:	e571      	b.n	404840 <_dtoa_r+0x700>
  404d5c:	465a      	mov	r2, fp
  404d5e:	46d0      	mov	r8, sl
  404d60:	46b3      	mov	fp, r6
  404d62:	469a      	mov	sl, r3
  404d64:	4616      	mov	r6, r2
  404d66:	e54f      	b.n	404808 <_dtoa_r+0x6c8>
  404d68:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404d6a:	495e      	ldr	r1, [pc, #376]	; (404ee4 <_dtoa_r+0xda4>)
  404d6c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  404d70:	462a      	mov	r2, r5
  404d72:	4633      	mov	r3, r6
  404d74:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  404d78:	f001 fe18 	bl	4069ac <__aeabi_dmul>
  404d7c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  404d80:	4638      	mov	r0, r7
  404d82:	4641      	mov	r1, r8
  404d84:	f002 f8c2 	bl	406f0c <__aeabi_d2iz>
  404d88:	4605      	mov	r5, r0
  404d8a:	f001 fda9 	bl	4068e0 <__aeabi_i2d>
  404d8e:	460b      	mov	r3, r1
  404d90:	4602      	mov	r2, r0
  404d92:	4641      	mov	r1, r8
  404d94:	4638      	mov	r0, r7
  404d96:	f001 fc55 	bl	406644 <__aeabi_dsub>
  404d9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404d9c:	460f      	mov	r7, r1
  404d9e:	9904      	ldr	r1, [sp, #16]
  404da0:	3530      	adds	r5, #48	; 0x30
  404da2:	2b01      	cmp	r3, #1
  404da4:	700d      	strb	r5, [r1, #0]
  404da6:	4606      	mov	r6, r0
  404da8:	f101 0501 	add.w	r5, r1, #1
  404dac:	d026      	beq.n	404dfc <_dtoa_r+0xcbc>
  404dae:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404db0:	9a04      	ldr	r2, [sp, #16]
  404db2:	f8df b13c 	ldr.w	fp, [pc, #316]	; 404ef0 <_dtoa_r+0xdb0>
  404db6:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  404dba:	4413      	add	r3, r2
  404dbc:	f04f 0a00 	mov.w	sl, #0
  404dc0:	4699      	mov	r9, r3
  404dc2:	4652      	mov	r2, sl
  404dc4:	465b      	mov	r3, fp
  404dc6:	4630      	mov	r0, r6
  404dc8:	4639      	mov	r1, r7
  404dca:	f001 fdef 	bl	4069ac <__aeabi_dmul>
  404dce:	460f      	mov	r7, r1
  404dd0:	4606      	mov	r6, r0
  404dd2:	f002 f89b 	bl	406f0c <__aeabi_d2iz>
  404dd6:	4680      	mov	r8, r0
  404dd8:	f001 fd82 	bl	4068e0 <__aeabi_i2d>
  404ddc:	f108 0830 	add.w	r8, r8, #48	; 0x30
  404de0:	4602      	mov	r2, r0
  404de2:	460b      	mov	r3, r1
  404de4:	4630      	mov	r0, r6
  404de6:	4639      	mov	r1, r7
  404de8:	f001 fc2c 	bl	406644 <__aeabi_dsub>
  404dec:	f805 8b01 	strb.w	r8, [r5], #1
  404df0:	454d      	cmp	r5, r9
  404df2:	4606      	mov	r6, r0
  404df4:	460f      	mov	r7, r1
  404df6:	d1e4      	bne.n	404dc2 <_dtoa_r+0xc82>
  404df8:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  404dfc:	4b3b      	ldr	r3, [pc, #236]	; (404eec <_dtoa_r+0xdac>)
  404dfe:	2200      	movs	r2, #0
  404e00:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  404e04:	f001 fc20 	bl	406648 <__adddf3>
  404e08:	4632      	mov	r2, r6
  404e0a:	463b      	mov	r3, r7
  404e0c:	f002 f840 	bl	406e90 <__aeabi_dcmplt>
  404e10:	2800      	cmp	r0, #0
  404e12:	d046      	beq.n	404ea2 <_dtoa_r+0xd62>
  404e14:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404e16:	9302      	str	r3, [sp, #8]
  404e18:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  404e1c:	f7ff bb43 	b.w	4044a6 <_dtoa_r+0x366>
  404e20:	f04f 0800 	mov.w	r8, #0
  404e24:	4646      	mov	r6, r8
  404e26:	e6a9      	b.n	404b7c <_dtoa_r+0xa3c>
  404e28:	9b08      	ldr	r3, [sp, #32]
  404e2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404e2c:	1a9d      	subs	r5, r3, r2
  404e2e:	2300      	movs	r3, #0
  404e30:	f7ff bb71 	b.w	404516 <_dtoa_r+0x3d6>
  404e34:	9b18      	ldr	r3, [sp, #96]	; 0x60
  404e36:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404e38:	9d08      	ldr	r5, [sp, #32]
  404e3a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  404e3e:	f7ff bb6a 	b.w	404516 <_dtoa_r+0x3d6>
  404e42:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  404e46:	f04f 0a02 	mov.w	sl, #2
  404e4a:	e56e      	b.n	40492a <_dtoa_r+0x7ea>
  404e4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404e4e:	2b00      	cmp	r3, #0
  404e50:	f43f aeb8 	beq.w	404bc4 <_dtoa_r+0xa84>
  404e54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404e56:	2b00      	cmp	r3, #0
  404e58:	f77f aede 	ble.w	404c18 <_dtoa_r+0xad8>
  404e5c:	2200      	movs	r2, #0
  404e5e:	4b24      	ldr	r3, [pc, #144]	; (404ef0 <_dtoa_r+0xdb0>)
  404e60:	4638      	mov	r0, r7
  404e62:	4641      	mov	r1, r8
  404e64:	f001 fda2 	bl	4069ac <__aeabi_dmul>
  404e68:	4607      	mov	r7, r0
  404e6a:	4688      	mov	r8, r1
  404e6c:	f10a 0001 	add.w	r0, sl, #1
  404e70:	f001 fd36 	bl	4068e0 <__aeabi_i2d>
  404e74:	463a      	mov	r2, r7
  404e76:	4643      	mov	r3, r8
  404e78:	f001 fd98 	bl	4069ac <__aeabi_dmul>
  404e7c:	2200      	movs	r2, #0
  404e7e:	4b17      	ldr	r3, [pc, #92]	; (404edc <_dtoa_r+0xd9c>)
  404e80:	f001 fbe2 	bl	406648 <__adddf3>
  404e84:	9a02      	ldr	r2, [sp, #8]
  404e86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404e88:	9312      	str	r3, [sp, #72]	; 0x48
  404e8a:	3a01      	subs	r2, #1
  404e8c:	4605      	mov	r5, r0
  404e8e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  404e92:	9215      	str	r2, [sp, #84]	; 0x54
  404e94:	e56a      	b.n	40496c <_dtoa_r+0x82c>
  404e96:	2239      	movs	r2, #57	; 0x39
  404e98:	46b3      	mov	fp, r6
  404e9a:	703a      	strb	r2, [r7, #0]
  404e9c:	9e06      	ldr	r6, [sp, #24]
  404e9e:	1c7d      	adds	r5, r7, #1
  404ea0:	e4c0      	b.n	404824 <_dtoa_r+0x6e4>
  404ea2:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  404ea6:	2000      	movs	r0, #0
  404ea8:	4910      	ldr	r1, [pc, #64]	; (404eec <_dtoa_r+0xdac>)
  404eaa:	f001 fbcb 	bl	406644 <__aeabi_dsub>
  404eae:	4632      	mov	r2, r6
  404eb0:	463b      	mov	r3, r7
  404eb2:	f002 f80b 	bl	406ecc <__aeabi_dcmpgt>
  404eb6:	b908      	cbnz	r0, 404ebc <_dtoa_r+0xd7c>
  404eb8:	e6ae      	b.n	404c18 <_dtoa_r+0xad8>
  404eba:	4615      	mov	r5, r2
  404ebc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404ec0:	2b30      	cmp	r3, #48	; 0x30
  404ec2:	f105 32ff 	add.w	r2, r5, #4294967295
  404ec6:	d0f8      	beq.n	404eba <_dtoa_r+0xd7a>
  404ec8:	e5d7      	b.n	404a7a <_dtoa_r+0x93a>
  404eca:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  404ece:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404ed0:	9302      	str	r3, [sp, #8]
  404ed2:	f7ff bae8 	b.w	4044a6 <_dtoa_r+0x366>
  404ed6:	970c      	str	r7, [sp, #48]	; 0x30
  404ed8:	f7ff bba5 	b.w	404626 <_dtoa_r+0x4e6>
  404edc:	401c0000 	.word	0x401c0000
  404ee0:	40140000 	.word	0x40140000
  404ee4:	004071e0 	.word	0x004071e0
  404ee8:	004071b8 	.word	0x004071b8
  404eec:	3fe00000 	.word	0x3fe00000
  404ef0:	40240000 	.word	0x40240000
  404ef4:	2b39      	cmp	r3, #57	; 0x39
  404ef6:	f8cd b018 	str.w	fp, [sp, #24]
  404efa:	46d0      	mov	r8, sl
  404efc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  404f00:	469a      	mov	sl, r3
  404f02:	d0c8      	beq.n	404e96 <_dtoa_r+0xd56>
  404f04:	f1bb 0f00 	cmp.w	fp, #0
  404f08:	f73f aebf 	bgt.w	404c8a <_dtoa_r+0xb4a>
  404f0c:	e6bf      	b.n	404c8e <_dtoa_r+0xb4e>
  404f0e:	f47f aebe 	bne.w	404c8e <_dtoa_r+0xb4e>
  404f12:	f01a 0f01 	tst.w	sl, #1
  404f16:	f43f aeba 	beq.w	404c8e <_dtoa_r+0xb4e>
  404f1a:	e6b2      	b.n	404c82 <_dtoa_r+0xb42>
  404f1c:	f04f 0800 	mov.w	r8, #0
  404f20:	4646      	mov	r6, r8
  404f22:	e5e9      	b.n	404af8 <_dtoa_r+0x9b8>
  404f24:	4631      	mov	r1, r6
  404f26:	2300      	movs	r3, #0
  404f28:	220a      	movs	r2, #10
  404f2a:	4620      	mov	r0, r4
  404f2c:	f000 fc36 	bl	40579c <__multadd>
  404f30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404f32:	2b00      	cmp	r3, #0
  404f34:	4606      	mov	r6, r0
  404f36:	dd0a      	ble.n	404f4e <_dtoa_r+0xe0e>
  404f38:	930a      	str	r3, [sp, #40]	; 0x28
  404f3a:	f7ff bbaa 	b.w	404692 <_dtoa_r+0x552>
  404f3e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404f40:	2b02      	cmp	r3, #2
  404f42:	dc23      	bgt.n	404f8c <_dtoa_r+0xe4c>
  404f44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404f46:	e43b      	b.n	4047c0 <_dtoa_r+0x680>
  404f48:	f04f 0a02 	mov.w	sl, #2
  404f4c:	e4ed      	b.n	40492a <_dtoa_r+0x7ea>
  404f4e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404f50:	2b02      	cmp	r3, #2
  404f52:	dc1b      	bgt.n	404f8c <_dtoa_r+0xe4c>
  404f54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404f56:	e7ef      	b.n	404f38 <_dtoa_r+0xdf8>
  404f58:	2500      	movs	r5, #0
  404f5a:	6465      	str	r5, [r4, #68]	; 0x44
  404f5c:	4629      	mov	r1, r5
  404f5e:	4620      	mov	r0, r4
  404f60:	f000 fbec 	bl	40573c <_Balloc>
  404f64:	f04f 33ff 	mov.w	r3, #4294967295
  404f68:	930a      	str	r3, [sp, #40]	; 0x28
  404f6a:	930f      	str	r3, [sp, #60]	; 0x3c
  404f6c:	2301      	movs	r3, #1
  404f6e:	9004      	str	r0, [sp, #16]
  404f70:	9525      	str	r5, [sp, #148]	; 0x94
  404f72:	6420      	str	r0, [r4, #64]	; 0x40
  404f74:	930b      	str	r3, [sp, #44]	; 0x2c
  404f76:	f7ff b9dd 	b.w	404334 <_dtoa_r+0x1f4>
  404f7a:	2501      	movs	r5, #1
  404f7c:	f7ff b9a5 	b.w	4042ca <_dtoa_r+0x18a>
  404f80:	f43f ab69 	beq.w	404656 <_dtoa_r+0x516>
  404f84:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  404f88:	f7ff bbf9 	b.w	40477e <_dtoa_r+0x63e>
  404f8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404f8e:	930a      	str	r3, [sp, #40]	; 0x28
  404f90:	e5e5      	b.n	404b5e <_dtoa_r+0xa1e>
  404f92:	bf00      	nop

00404f94 <__libc_fini_array>:
  404f94:	b538      	push	{r3, r4, r5, lr}
  404f96:	4c0a      	ldr	r4, [pc, #40]	; (404fc0 <__libc_fini_array+0x2c>)
  404f98:	4d0a      	ldr	r5, [pc, #40]	; (404fc4 <__libc_fini_array+0x30>)
  404f9a:	1b64      	subs	r4, r4, r5
  404f9c:	10a4      	asrs	r4, r4, #2
  404f9e:	d00a      	beq.n	404fb6 <__libc_fini_array+0x22>
  404fa0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  404fa4:	3b01      	subs	r3, #1
  404fa6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  404faa:	3c01      	subs	r4, #1
  404fac:	f855 3904 	ldr.w	r3, [r5], #-4
  404fb0:	4798      	blx	r3
  404fb2:	2c00      	cmp	r4, #0
  404fb4:	d1f9      	bne.n	404faa <__libc_fini_array+0x16>
  404fb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404fba:	f002 ba0f 	b.w	4073dc <_fini>
  404fbe:	bf00      	nop
  404fc0:	004073ec 	.word	0x004073ec
  404fc4:	004073e8 	.word	0x004073e8

00404fc8 <_localeconv_r>:
  404fc8:	4a04      	ldr	r2, [pc, #16]	; (404fdc <_localeconv_r+0x14>)
  404fca:	4b05      	ldr	r3, [pc, #20]	; (404fe0 <_localeconv_r+0x18>)
  404fcc:	6812      	ldr	r2, [r2, #0]
  404fce:	6b50      	ldr	r0, [r2, #52]	; 0x34
  404fd0:	2800      	cmp	r0, #0
  404fd2:	bf08      	it	eq
  404fd4:	4618      	moveq	r0, r3
  404fd6:	30f0      	adds	r0, #240	; 0xf0
  404fd8:	4770      	bx	lr
  404fda:	bf00      	nop
  404fdc:	20400010 	.word	0x20400010
  404fe0:	20400854 	.word	0x20400854

00404fe4 <__retarget_lock_acquire_recursive>:
  404fe4:	4770      	bx	lr
  404fe6:	bf00      	nop

00404fe8 <__retarget_lock_release_recursive>:
  404fe8:	4770      	bx	lr
  404fea:	bf00      	nop

00404fec <_malloc_r>:
  404fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404ff0:	f101 060b 	add.w	r6, r1, #11
  404ff4:	2e16      	cmp	r6, #22
  404ff6:	b083      	sub	sp, #12
  404ff8:	4605      	mov	r5, r0
  404ffa:	f240 809e 	bls.w	40513a <_malloc_r+0x14e>
  404ffe:	f036 0607 	bics.w	r6, r6, #7
  405002:	f100 80bd 	bmi.w	405180 <_malloc_r+0x194>
  405006:	42b1      	cmp	r1, r6
  405008:	f200 80ba 	bhi.w	405180 <_malloc_r+0x194>
  40500c:	f000 fb8a 	bl	405724 <__malloc_lock>
  405010:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  405014:	f0c0 8293 	bcc.w	40553e <_malloc_r+0x552>
  405018:	0a73      	lsrs	r3, r6, #9
  40501a:	f000 80b8 	beq.w	40518e <_malloc_r+0x1a2>
  40501e:	2b04      	cmp	r3, #4
  405020:	f200 8179 	bhi.w	405316 <_malloc_r+0x32a>
  405024:	09b3      	lsrs	r3, r6, #6
  405026:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40502a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40502e:	00c3      	lsls	r3, r0, #3
  405030:	4fbf      	ldr	r7, [pc, #764]	; (405330 <_malloc_r+0x344>)
  405032:	443b      	add	r3, r7
  405034:	f1a3 0108 	sub.w	r1, r3, #8
  405038:	685c      	ldr	r4, [r3, #4]
  40503a:	42a1      	cmp	r1, r4
  40503c:	d106      	bne.n	40504c <_malloc_r+0x60>
  40503e:	e00c      	b.n	40505a <_malloc_r+0x6e>
  405040:	2a00      	cmp	r2, #0
  405042:	f280 80aa 	bge.w	40519a <_malloc_r+0x1ae>
  405046:	68e4      	ldr	r4, [r4, #12]
  405048:	42a1      	cmp	r1, r4
  40504a:	d006      	beq.n	40505a <_malloc_r+0x6e>
  40504c:	6863      	ldr	r3, [r4, #4]
  40504e:	f023 0303 	bic.w	r3, r3, #3
  405052:	1b9a      	subs	r2, r3, r6
  405054:	2a0f      	cmp	r2, #15
  405056:	ddf3      	ble.n	405040 <_malloc_r+0x54>
  405058:	4670      	mov	r0, lr
  40505a:	693c      	ldr	r4, [r7, #16]
  40505c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 405344 <_malloc_r+0x358>
  405060:	4574      	cmp	r4, lr
  405062:	f000 81ab 	beq.w	4053bc <_malloc_r+0x3d0>
  405066:	6863      	ldr	r3, [r4, #4]
  405068:	f023 0303 	bic.w	r3, r3, #3
  40506c:	1b9a      	subs	r2, r3, r6
  40506e:	2a0f      	cmp	r2, #15
  405070:	f300 8190 	bgt.w	405394 <_malloc_r+0x3a8>
  405074:	2a00      	cmp	r2, #0
  405076:	f8c7 e014 	str.w	lr, [r7, #20]
  40507a:	f8c7 e010 	str.w	lr, [r7, #16]
  40507e:	f280 809d 	bge.w	4051bc <_malloc_r+0x1d0>
  405082:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405086:	f080 8161 	bcs.w	40534c <_malloc_r+0x360>
  40508a:	08db      	lsrs	r3, r3, #3
  40508c:	f103 0c01 	add.w	ip, r3, #1
  405090:	1099      	asrs	r1, r3, #2
  405092:	687a      	ldr	r2, [r7, #4]
  405094:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  405098:	f8c4 8008 	str.w	r8, [r4, #8]
  40509c:	2301      	movs	r3, #1
  40509e:	408b      	lsls	r3, r1
  4050a0:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4050a4:	4313      	orrs	r3, r2
  4050a6:	3908      	subs	r1, #8
  4050a8:	60e1      	str	r1, [r4, #12]
  4050aa:	607b      	str	r3, [r7, #4]
  4050ac:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4050b0:	f8c8 400c 	str.w	r4, [r8, #12]
  4050b4:	1082      	asrs	r2, r0, #2
  4050b6:	2401      	movs	r4, #1
  4050b8:	4094      	lsls	r4, r2
  4050ba:	429c      	cmp	r4, r3
  4050bc:	f200 808b 	bhi.w	4051d6 <_malloc_r+0x1ea>
  4050c0:	421c      	tst	r4, r3
  4050c2:	d106      	bne.n	4050d2 <_malloc_r+0xe6>
  4050c4:	f020 0003 	bic.w	r0, r0, #3
  4050c8:	0064      	lsls	r4, r4, #1
  4050ca:	421c      	tst	r4, r3
  4050cc:	f100 0004 	add.w	r0, r0, #4
  4050d0:	d0fa      	beq.n	4050c8 <_malloc_r+0xdc>
  4050d2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4050d6:	46cc      	mov	ip, r9
  4050d8:	4680      	mov	r8, r0
  4050da:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4050de:	459c      	cmp	ip, r3
  4050e0:	d107      	bne.n	4050f2 <_malloc_r+0x106>
  4050e2:	e16d      	b.n	4053c0 <_malloc_r+0x3d4>
  4050e4:	2a00      	cmp	r2, #0
  4050e6:	f280 817b 	bge.w	4053e0 <_malloc_r+0x3f4>
  4050ea:	68db      	ldr	r3, [r3, #12]
  4050ec:	459c      	cmp	ip, r3
  4050ee:	f000 8167 	beq.w	4053c0 <_malloc_r+0x3d4>
  4050f2:	6859      	ldr	r1, [r3, #4]
  4050f4:	f021 0103 	bic.w	r1, r1, #3
  4050f8:	1b8a      	subs	r2, r1, r6
  4050fa:	2a0f      	cmp	r2, #15
  4050fc:	ddf2      	ble.n	4050e4 <_malloc_r+0xf8>
  4050fe:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  405102:	f8d3 8008 	ldr.w	r8, [r3, #8]
  405106:	9300      	str	r3, [sp, #0]
  405108:	199c      	adds	r4, r3, r6
  40510a:	4628      	mov	r0, r5
  40510c:	f046 0601 	orr.w	r6, r6, #1
  405110:	f042 0501 	orr.w	r5, r2, #1
  405114:	605e      	str	r6, [r3, #4]
  405116:	f8c8 c00c 	str.w	ip, [r8, #12]
  40511a:	f8cc 8008 	str.w	r8, [ip, #8]
  40511e:	617c      	str	r4, [r7, #20]
  405120:	613c      	str	r4, [r7, #16]
  405122:	f8c4 e00c 	str.w	lr, [r4, #12]
  405126:	f8c4 e008 	str.w	lr, [r4, #8]
  40512a:	6065      	str	r5, [r4, #4]
  40512c:	505a      	str	r2, [r3, r1]
  40512e:	f000 faff 	bl	405730 <__malloc_unlock>
  405132:	9b00      	ldr	r3, [sp, #0]
  405134:	f103 0408 	add.w	r4, r3, #8
  405138:	e01e      	b.n	405178 <_malloc_r+0x18c>
  40513a:	2910      	cmp	r1, #16
  40513c:	d820      	bhi.n	405180 <_malloc_r+0x194>
  40513e:	f000 faf1 	bl	405724 <__malloc_lock>
  405142:	2610      	movs	r6, #16
  405144:	2318      	movs	r3, #24
  405146:	2002      	movs	r0, #2
  405148:	4f79      	ldr	r7, [pc, #484]	; (405330 <_malloc_r+0x344>)
  40514a:	443b      	add	r3, r7
  40514c:	f1a3 0208 	sub.w	r2, r3, #8
  405150:	685c      	ldr	r4, [r3, #4]
  405152:	4294      	cmp	r4, r2
  405154:	f000 813d 	beq.w	4053d2 <_malloc_r+0x3e6>
  405158:	6863      	ldr	r3, [r4, #4]
  40515a:	68e1      	ldr	r1, [r4, #12]
  40515c:	68a6      	ldr	r6, [r4, #8]
  40515e:	f023 0303 	bic.w	r3, r3, #3
  405162:	4423      	add	r3, r4
  405164:	4628      	mov	r0, r5
  405166:	685a      	ldr	r2, [r3, #4]
  405168:	60f1      	str	r1, [r6, #12]
  40516a:	f042 0201 	orr.w	r2, r2, #1
  40516e:	608e      	str	r6, [r1, #8]
  405170:	605a      	str	r2, [r3, #4]
  405172:	f000 fadd 	bl	405730 <__malloc_unlock>
  405176:	3408      	adds	r4, #8
  405178:	4620      	mov	r0, r4
  40517a:	b003      	add	sp, #12
  40517c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405180:	2400      	movs	r4, #0
  405182:	230c      	movs	r3, #12
  405184:	4620      	mov	r0, r4
  405186:	602b      	str	r3, [r5, #0]
  405188:	b003      	add	sp, #12
  40518a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40518e:	2040      	movs	r0, #64	; 0x40
  405190:	f44f 7300 	mov.w	r3, #512	; 0x200
  405194:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  405198:	e74a      	b.n	405030 <_malloc_r+0x44>
  40519a:	4423      	add	r3, r4
  40519c:	68e1      	ldr	r1, [r4, #12]
  40519e:	685a      	ldr	r2, [r3, #4]
  4051a0:	68a6      	ldr	r6, [r4, #8]
  4051a2:	f042 0201 	orr.w	r2, r2, #1
  4051a6:	60f1      	str	r1, [r6, #12]
  4051a8:	4628      	mov	r0, r5
  4051aa:	608e      	str	r6, [r1, #8]
  4051ac:	605a      	str	r2, [r3, #4]
  4051ae:	f000 fabf 	bl	405730 <__malloc_unlock>
  4051b2:	3408      	adds	r4, #8
  4051b4:	4620      	mov	r0, r4
  4051b6:	b003      	add	sp, #12
  4051b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4051bc:	4423      	add	r3, r4
  4051be:	4628      	mov	r0, r5
  4051c0:	685a      	ldr	r2, [r3, #4]
  4051c2:	f042 0201 	orr.w	r2, r2, #1
  4051c6:	605a      	str	r2, [r3, #4]
  4051c8:	f000 fab2 	bl	405730 <__malloc_unlock>
  4051cc:	3408      	adds	r4, #8
  4051ce:	4620      	mov	r0, r4
  4051d0:	b003      	add	sp, #12
  4051d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4051d6:	68bc      	ldr	r4, [r7, #8]
  4051d8:	6863      	ldr	r3, [r4, #4]
  4051da:	f023 0803 	bic.w	r8, r3, #3
  4051de:	45b0      	cmp	r8, r6
  4051e0:	d304      	bcc.n	4051ec <_malloc_r+0x200>
  4051e2:	eba8 0306 	sub.w	r3, r8, r6
  4051e6:	2b0f      	cmp	r3, #15
  4051e8:	f300 8085 	bgt.w	4052f6 <_malloc_r+0x30a>
  4051ec:	f8df 9158 	ldr.w	r9, [pc, #344]	; 405348 <_malloc_r+0x35c>
  4051f0:	4b50      	ldr	r3, [pc, #320]	; (405334 <_malloc_r+0x348>)
  4051f2:	f8d9 2000 	ldr.w	r2, [r9]
  4051f6:	681b      	ldr	r3, [r3, #0]
  4051f8:	3201      	adds	r2, #1
  4051fa:	4433      	add	r3, r6
  4051fc:	eb04 0a08 	add.w	sl, r4, r8
  405200:	f000 8155 	beq.w	4054ae <_malloc_r+0x4c2>
  405204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  405208:	330f      	adds	r3, #15
  40520a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40520e:	f02b 0b0f 	bic.w	fp, fp, #15
  405212:	4659      	mov	r1, fp
  405214:	4628      	mov	r0, r5
  405216:	f000 fd8b 	bl	405d30 <_sbrk_r>
  40521a:	1c41      	adds	r1, r0, #1
  40521c:	4602      	mov	r2, r0
  40521e:	f000 80fc 	beq.w	40541a <_malloc_r+0x42e>
  405222:	4582      	cmp	sl, r0
  405224:	f200 80f7 	bhi.w	405416 <_malloc_r+0x42a>
  405228:	4b43      	ldr	r3, [pc, #268]	; (405338 <_malloc_r+0x34c>)
  40522a:	6819      	ldr	r1, [r3, #0]
  40522c:	4459      	add	r1, fp
  40522e:	6019      	str	r1, [r3, #0]
  405230:	f000 814d 	beq.w	4054ce <_malloc_r+0x4e2>
  405234:	f8d9 0000 	ldr.w	r0, [r9]
  405238:	3001      	adds	r0, #1
  40523a:	bf1b      	ittet	ne
  40523c:	eba2 0a0a 	subne.w	sl, r2, sl
  405240:	4451      	addne	r1, sl
  405242:	f8c9 2000 	streq.w	r2, [r9]
  405246:	6019      	strne	r1, [r3, #0]
  405248:	f012 0107 	ands.w	r1, r2, #7
  40524c:	f000 8115 	beq.w	40547a <_malloc_r+0x48e>
  405250:	f1c1 0008 	rsb	r0, r1, #8
  405254:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  405258:	4402      	add	r2, r0
  40525a:	3108      	adds	r1, #8
  40525c:	eb02 090b 	add.w	r9, r2, fp
  405260:	f3c9 090b 	ubfx	r9, r9, #0, #12
  405264:	eba1 0909 	sub.w	r9, r1, r9
  405268:	4649      	mov	r1, r9
  40526a:	4628      	mov	r0, r5
  40526c:	9301      	str	r3, [sp, #4]
  40526e:	9200      	str	r2, [sp, #0]
  405270:	f000 fd5e 	bl	405d30 <_sbrk_r>
  405274:	1c43      	adds	r3, r0, #1
  405276:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40527a:	f000 8143 	beq.w	405504 <_malloc_r+0x518>
  40527e:	1a80      	subs	r0, r0, r2
  405280:	4448      	add	r0, r9
  405282:	f040 0001 	orr.w	r0, r0, #1
  405286:	6819      	ldr	r1, [r3, #0]
  405288:	60ba      	str	r2, [r7, #8]
  40528a:	4449      	add	r1, r9
  40528c:	42bc      	cmp	r4, r7
  40528e:	6050      	str	r0, [r2, #4]
  405290:	6019      	str	r1, [r3, #0]
  405292:	d017      	beq.n	4052c4 <_malloc_r+0x2d8>
  405294:	f1b8 0f0f 	cmp.w	r8, #15
  405298:	f240 80fb 	bls.w	405492 <_malloc_r+0x4a6>
  40529c:	6860      	ldr	r0, [r4, #4]
  40529e:	f1a8 020c 	sub.w	r2, r8, #12
  4052a2:	f022 0207 	bic.w	r2, r2, #7
  4052a6:	eb04 0e02 	add.w	lr, r4, r2
  4052aa:	f000 0001 	and.w	r0, r0, #1
  4052ae:	f04f 0c05 	mov.w	ip, #5
  4052b2:	4310      	orrs	r0, r2
  4052b4:	2a0f      	cmp	r2, #15
  4052b6:	6060      	str	r0, [r4, #4]
  4052b8:	f8ce c004 	str.w	ip, [lr, #4]
  4052bc:	f8ce c008 	str.w	ip, [lr, #8]
  4052c0:	f200 8117 	bhi.w	4054f2 <_malloc_r+0x506>
  4052c4:	4b1d      	ldr	r3, [pc, #116]	; (40533c <_malloc_r+0x350>)
  4052c6:	68bc      	ldr	r4, [r7, #8]
  4052c8:	681a      	ldr	r2, [r3, #0]
  4052ca:	4291      	cmp	r1, r2
  4052cc:	bf88      	it	hi
  4052ce:	6019      	strhi	r1, [r3, #0]
  4052d0:	4b1b      	ldr	r3, [pc, #108]	; (405340 <_malloc_r+0x354>)
  4052d2:	681a      	ldr	r2, [r3, #0]
  4052d4:	4291      	cmp	r1, r2
  4052d6:	6862      	ldr	r2, [r4, #4]
  4052d8:	bf88      	it	hi
  4052da:	6019      	strhi	r1, [r3, #0]
  4052dc:	f022 0203 	bic.w	r2, r2, #3
  4052e0:	4296      	cmp	r6, r2
  4052e2:	eba2 0306 	sub.w	r3, r2, r6
  4052e6:	d801      	bhi.n	4052ec <_malloc_r+0x300>
  4052e8:	2b0f      	cmp	r3, #15
  4052ea:	dc04      	bgt.n	4052f6 <_malloc_r+0x30a>
  4052ec:	4628      	mov	r0, r5
  4052ee:	f000 fa1f 	bl	405730 <__malloc_unlock>
  4052f2:	2400      	movs	r4, #0
  4052f4:	e740      	b.n	405178 <_malloc_r+0x18c>
  4052f6:	19a2      	adds	r2, r4, r6
  4052f8:	f043 0301 	orr.w	r3, r3, #1
  4052fc:	f046 0601 	orr.w	r6, r6, #1
  405300:	6066      	str	r6, [r4, #4]
  405302:	4628      	mov	r0, r5
  405304:	60ba      	str	r2, [r7, #8]
  405306:	6053      	str	r3, [r2, #4]
  405308:	f000 fa12 	bl	405730 <__malloc_unlock>
  40530c:	3408      	adds	r4, #8
  40530e:	4620      	mov	r0, r4
  405310:	b003      	add	sp, #12
  405312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405316:	2b14      	cmp	r3, #20
  405318:	d971      	bls.n	4053fe <_malloc_r+0x412>
  40531a:	2b54      	cmp	r3, #84	; 0x54
  40531c:	f200 80a3 	bhi.w	405466 <_malloc_r+0x47a>
  405320:	0b33      	lsrs	r3, r6, #12
  405322:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  405326:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40532a:	00c3      	lsls	r3, r0, #3
  40532c:	e680      	b.n	405030 <_malloc_r+0x44>
  40532e:	bf00      	nop
  405330:	20400444 	.word	0x20400444
  405334:	20400aa4 	.word	0x20400aa4
  405338:	20400a74 	.word	0x20400a74
  40533c:	20400a9c 	.word	0x20400a9c
  405340:	20400aa0 	.word	0x20400aa0
  405344:	2040044c 	.word	0x2040044c
  405348:	2040084c 	.word	0x2040084c
  40534c:	0a5a      	lsrs	r2, r3, #9
  40534e:	2a04      	cmp	r2, #4
  405350:	d95b      	bls.n	40540a <_malloc_r+0x41e>
  405352:	2a14      	cmp	r2, #20
  405354:	f200 80ae 	bhi.w	4054b4 <_malloc_r+0x4c8>
  405358:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40535c:	00c9      	lsls	r1, r1, #3
  40535e:	325b      	adds	r2, #91	; 0x5b
  405360:	eb07 0c01 	add.w	ip, r7, r1
  405364:	5879      	ldr	r1, [r7, r1]
  405366:	f1ac 0c08 	sub.w	ip, ip, #8
  40536a:	458c      	cmp	ip, r1
  40536c:	f000 8088 	beq.w	405480 <_malloc_r+0x494>
  405370:	684a      	ldr	r2, [r1, #4]
  405372:	f022 0203 	bic.w	r2, r2, #3
  405376:	4293      	cmp	r3, r2
  405378:	d273      	bcs.n	405462 <_malloc_r+0x476>
  40537a:	6889      	ldr	r1, [r1, #8]
  40537c:	458c      	cmp	ip, r1
  40537e:	d1f7      	bne.n	405370 <_malloc_r+0x384>
  405380:	f8dc 200c 	ldr.w	r2, [ip, #12]
  405384:	687b      	ldr	r3, [r7, #4]
  405386:	60e2      	str	r2, [r4, #12]
  405388:	f8c4 c008 	str.w	ip, [r4, #8]
  40538c:	6094      	str	r4, [r2, #8]
  40538e:	f8cc 400c 	str.w	r4, [ip, #12]
  405392:	e68f      	b.n	4050b4 <_malloc_r+0xc8>
  405394:	19a1      	adds	r1, r4, r6
  405396:	f046 0c01 	orr.w	ip, r6, #1
  40539a:	f042 0601 	orr.w	r6, r2, #1
  40539e:	f8c4 c004 	str.w	ip, [r4, #4]
  4053a2:	4628      	mov	r0, r5
  4053a4:	6179      	str	r1, [r7, #20]
  4053a6:	6139      	str	r1, [r7, #16]
  4053a8:	f8c1 e00c 	str.w	lr, [r1, #12]
  4053ac:	f8c1 e008 	str.w	lr, [r1, #8]
  4053b0:	604e      	str	r6, [r1, #4]
  4053b2:	50e2      	str	r2, [r4, r3]
  4053b4:	f000 f9bc 	bl	405730 <__malloc_unlock>
  4053b8:	3408      	adds	r4, #8
  4053ba:	e6dd      	b.n	405178 <_malloc_r+0x18c>
  4053bc:	687b      	ldr	r3, [r7, #4]
  4053be:	e679      	b.n	4050b4 <_malloc_r+0xc8>
  4053c0:	f108 0801 	add.w	r8, r8, #1
  4053c4:	f018 0f03 	tst.w	r8, #3
  4053c8:	f10c 0c08 	add.w	ip, ip, #8
  4053cc:	f47f ae85 	bne.w	4050da <_malloc_r+0xee>
  4053d0:	e02d      	b.n	40542e <_malloc_r+0x442>
  4053d2:	68dc      	ldr	r4, [r3, #12]
  4053d4:	42a3      	cmp	r3, r4
  4053d6:	bf08      	it	eq
  4053d8:	3002      	addeq	r0, #2
  4053da:	f43f ae3e 	beq.w	40505a <_malloc_r+0x6e>
  4053de:	e6bb      	b.n	405158 <_malloc_r+0x16c>
  4053e0:	4419      	add	r1, r3
  4053e2:	461c      	mov	r4, r3
  4053e4:	684a      	ldr	r2, [r1, #4]
  4053e6:	68db      	ldr	r3, [r3, #12]
  4053e8:	f854 6f08 	ldr.w	r6, [r4, #8]!
  4053ec:	f042 0201 	orr.w	r2, r2, #1
  4053f0:	604a      	str	r2, [r1, #4]
  4053f2:	4628      	mov	r0, r5
  4053f4:	60f3      	str	r3, [r6, #12]
  4053f6:	609e      	str	r6, [r3, #8]
  4053f8:	f000 f99a 	bl	405730 <__malloc_unlock>
  4053fc:	e6bc      	b.n	405178 <_malloc_r+0x18c>
  4053fe:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  405402:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  405406:	00c3      	lsls	r3, r0, #3
  405408:	e612      	b.n	405030 <_malloc_r+0x44>
  40540a:	099a      	lsrs	r2, r3, #6
  40540c:	f102 0139 	add.w	r1, r2, #57	; 0x39
  405410:	00c9      	lsls	r1, r1, #3
  405412:	3238      	adds	r2, #56	; 0x38
  405414:	e7a4      	b.n	405360 <_malloc_r+0x374>
  405416:	42bc      	cmp	r4, r7
  405418:	d054      	beq.n	4054c4 <_malloc_r+0x4d8>
  40541a:	68bc      	ldr	r4, [r7, #8]
  40541c:	6862      	ldr	r2, [r4, #4]
  40541e:	f022 0203 	bic.w	r2, r2, #3
  405422:	e75d      	b.n	4052e0 <_malloc_r+0x2f4>
  405424:	f859 3908 	ldr.w	r3, [r9], #-8
  405428:	4599      	cmp	r9, r3
  40542a:	f040 8086 	bne.w	40553a <_malloc_r+0x54e>
  40542e:	f010 0f03 	tst.w	r0, #3
  405432:	f100 30ff 	add.w	r0, r0, #4294967295
  405436:	d1f5      	bne.n	405424 <_malloc_r+0x438>
  405438:	687b      	ldr	r3, [r7, #4]
  40543a:	ea23 0304 	bic.w	r3, r3, r4
  40543e:	607b      	str	r3, [r7, #4]
  405440:	0064      	lsls	r4, r4, #1
  405442:	429c      	cmp	r4, r3
  405444:	f63f aec7 	bhi.w	4051d6 <_malloc_r+0x1ea>
  405448:	2c00      	cmp	r4, #0
  40544a:	f43f aec4 	beq.w	4051d6 <_malloc_r+0x1ea>
  40544e:	421c      	tst	r4, r3
  405450:	4640      	mov	r0, r8
  405452:	f47f ae3e 	bne.w	4050d2 <_malloc_r+0xe6>
  405456:	0064      	lsls	r4, r4, #1
  405458:	421c      	tst	r4, r3
  40545a:	f100 0004 	add.w	r0, r0, #4
  40545e:	d0fa      	beq.n	405456 <_malloc_r+0x46a>
  405460:	e637      	b.n	4050d2 <_malloc_r+0xe6>
  405462:	468c      	mov	ip, r1
  405464:	e78c      	b.n	405380 <_malloc_r+0x394>
  405466:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40546a:	d815      	bhi.n	405498 <_malloc_r+0x4ac>
  40546c:	0bf3      	lsrs	r3, r6, #15
  40546e:	f103 0078 	add.w	r0, r3, #120	; 0x78
  405472:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  405476:	00c3      	lsls	r3, r0, #3
  405478:	e5da      	b.n	405030 <_malloc_r+0x44>
  40547a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40547e:	e6ed      	b.n	40525c <_malloc_r+0x270>
  405480:	687b      	ldr	r3, [r7, #4]
  405482:	1092      	asrs	r2, r2, #2
  405484:	2101      	movs	r1, #1
  405486:	fa01 f202 	lsl.w	r2, r1, r2
  40548a:	4313      	orrs	r3, r2
  40548c:	607b      	str	r3, [r7, #4]
  40548e:	4662      	mov	r2, ip
  405490:	e779      	b.n	405386 <_malloc_r+0x39a>
  405492:	2301      	movs	r3, #1
  405494:	6053      	str	r3, [r2, #4]
  405496:	e729      	b.n	4052ec <_malloc_r+0x300>
  405498:	f240 5254 	movw	r2, #1364	; 0x554
  40549c:	4293      	cmp	r3, r2
  40549e:	d822      	bhi.n	4054e6 <_malloc_r+0x4fa>
  4054a0:	0cb3      	lsrs	r3, r6, #18
  4054a2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4054a6:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4054aa:	00c3      	lsls	r3, r0, #3
  4054ac:	e5c0      	b.n	405030 <_malloc_r+0x44>
  4054ae:	f103 0b10 	add.w	fp, r3, #16
  4054b2:	e6ae      	b.n	405212 <_malloc_r+0x226>
  4054b4:	2a54      	cmp	r2, #84	; 0x54
  4054b6:	d829      	bhi.n	40550c <_malloc_r+0x520>
  4054b8:	0b1a      	lsrs	r2, r3, #12
  4054ba:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4054be:	00c9      	lsls	r1, r1, #3
  4054c0:	326e      	adds	r2, #110	; 0x6e
  4054c2:	e74d      	b.n	405360 <_malloc_r+0x374>
  4054c4:	4b20      	ldr	r3, [pc, #128]	; (405548 <_malloc_r+0x55c>)
  4054c6:	6819      	ldr	r1, [r3, #0]
  4054c8:	4459      	add	r1, fp
  4054ca:	6019      	str	r1, [r3, #0]
  4054cc:	e6b2      	b.n	405234 <_malloc_r+0x248>
  4054ce:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4054d2:	2800      	cmp	r0, #0
  4054d4:	f47f aeae 	bne.w	405234 <_malloc_r+0x248>
  4054d8:	eb08 030b 	add.w	r3, r8, fp
  4054dc:	68ba      	ldr	r2, [r7, #8]
  4054de:	f043 0301 	orr.w	r3, r3, #1
  4054e2:	6053      	str	r3, [r2, #4]
  4054e4:	e6ee      	b.n	4052c4 <_malloc_r+0x2d8>
  4054e6:	207f      	movs	r0, #127	; 0x7f
  4054e8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4054ec:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4054f0:	e59e      	b.n	405030 <_malloc_r+0x44>
  4054f2:	f104 0108 	add.w	r1, r4, #8
  4054f6:	4628      	mov	r0, r5
  4054f8:	9300      	str	r3, [sp, #0]
  4054fa:	f000 fd8b 	bl	406014 <_free_r>
  4054fe:	9b00      	ldr	r3, [sp, #0]
  405500:	6819      	ldr	r1, [r3, #0]
  405502:	e6df      	b.n	4052c4 <_malloc_r+0x2d8>
  405504:	2001      	movs	r0, #1
  405506:	f04f 0900 	mov.w	r9, #0
  40550a:	e6bc      	b.n	405286 <_malloc_r+0x29a>
  40550c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405510:	d805      	bhi.n	40551e <_malloc_r+0x532>
  405512:	0bda      	lsrs	r2, r3, #15
  405514:	f102 0178 	add.w	r1, r2, #120	; 0x78
  405518:	00c9      	lsls	r1, r1, #3
  40551a:	3277      	adds	r2, #119	; 0x77
  40551c:	e720      	b.n	405360 <_malloc_r+0x374>
  40551e:	f240 5154 	movw	r1, #1364	; 0x554
  405522:	428a      	cmp	r2, r1
  405524:	d805      	bhi.n	405532 <_malloc_r+0x546>
  405526:	0c9a      	lsrs	r2, r3, #18
  405528:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40552c:	00c9      	lsls	r1, r1, #3
  40552e:	327c      	adds	r2, #124	; 0x7c
  405530:	e716      	b.n	405360 <_malloc_r+0x374>
  405532:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  405536:	227e      	movs	r2, #126	; 0x7e
  405538:	e712      	b.n	405360 <_malloc_r+0x374>
  40553a:	687b      	ldr	r3, [r7, #4]
  40553c:	e780      	b.n	405440 <_malloc_r+0x454>
  40553e:	08f0      	lsrs	r0, r6, #3
  405540:	f106 0308 	add.w	r3, r6, #8
  405544:	e600      	b.n	405148 <_malloc_r+0x15c>
  405546:	bf00      	nop
  405548:	20400a74 	.word	0x20400a74
  40554c:	00000000 	.word	0x00000000

00405550 <memchr>:
  405550:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405554:	2a10      	cmp	r2, #16
  405556:	db2b      	blt.n	4055b0 <memchr+0x60>
  405558:	f010 0f07 	tst.w	r0, #7
  40555c:	d008      	beq.n	405570 <memchr+0x20>
  40555e:	f810 3b01 	ldrb.w	r3, [r0], #1
  405562:	3a01      	subs	r2, #1
  405564:	428b      	cmp	r3, r1
  405566:	d02d      	beq.n	4055c4 <memchr+0x74>
  405568:	f010 0f07 	tst.w	r0, #7
  40556c:	b342      	cbz	r2, 4055c0 <memchr+0x70>
  40556e:	d1f6      	bne.n	40555e <memchr+0xe>
  405570:	b4f0      	push	{r4, r5, r6, r7}
  405572:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  405576:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40557a:	f022 0407 	bic.w	r4, r2, #7
  40557e:	f07f 0700 	mvns.w	r7, #0
  405582:	2300      	movs	r3, #0
  405584:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  405588:	3c08      	subs	r4, #8
  40558a:	ea85 0501 	eor.w	r5, r5, r1
  40558e:	ea86 0601 	eor.w	r6, r6, r1
  405592:	fa85 f547 	uadd8	r5, r5, r7
  405596:	faa3 f587 	sel	r5, r3, r7
  40559a:	fa86 f647 	uadd8	r6, r6, r7
  40559e:	faa5 f687 	sel	r6, r5, r7
  4055a2:	b98e      	cbnz	r6, 4055c8 <memchr+0x78>
  4055a4:	d1ee      	bne.n	405584 <memchr+0x34>
  4055a6:	bcf0      	pop	{r4, r5, r6, r7}
  4055a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4055ac:	f002 0207 	and.w	r2, r2, #7
  4055b0:	b132      	cbz	r2, 4055c0 <memchr+0x70>
  4055b2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4055b6:	3a01      	subs	r2, #1
  4055b8:	ea83 0301 	eor.w	r3, r3, r1
  4055bc:	b113      	cbz	r3, 4055c4 <memchr+0x74>
  4055be:	d1f8      	bne.n	4055b2 <memchr+0x62>
  4055c0:	2000      	movs	r0, #0
  4055c2:	4770      	bx	lr
  4055c4:	3801      	subs	r0, #1
  4055c6:	4770      	bx	lr
  4055c8:	2d00      	cmp	r5, #0
  4055ca:	bf06      	itte	eq
  4055cc:	4635      	moveq	r5, r6
  4055ce:	3803      	subeq	r0, #3
  4055d0:	3807      	subne	r0, #7
  4055d2:	f015 0f01 	tst.w	r5, #1
  4055d6:	d107      	bne.n	4055e8 <memchr+0x98>
  4055d8:	3001      	adds	r0, #1
  4055da:	f415 7f80 	tst.w	r5, #256	; 0x100
  4055de:	bf02      	ittt	eq
  4055e0:	3001      	addeq	r0, #1
  4055e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4055e6:	3001      	addeq	r0, #1
  4055e8:	bcf0      	pop	{r4, r5, r6, r7}
  4055ea:	3801      	subs	r0, #1
  4055ec:	4770      	bx	lr
  4055ee:	bf00      	nop

004055f0 <memcpy>:
  4055f0:	4684      	mov	ip, r0
  4055f2:	ea41 0300 	orr.w	r3, r1, r0
  4055f6:	f013 0303 	ands.w	r3, r3, #3
  4055fa:	d16d      	bne.n	4056d8 <memcpy+0xe8>
  4055fc:	3a40      	subs	r2, #64	; 0x40
  4055fe:	d341      	bcc.n	405684 <memcpy+0x94>
  405600:	f851 3b04 	ldr.w	r3, [r1], #4
  405604:	f840 3b04 	str.w	r3, [r0], #4
  405608:	f851 3b04 	ldr.w	r3, [r1], #4
  40560c:	f840 3b04 	str.w	r3, [r0], #4
  405610:	f851 3b04 	ldr.w	r3, [r1], #4
  405614:	f840 3b04 	str.w	r3, [r0], #4
  405618:	f851 3b04 	ldr.w	r3, [r1], #4
  40561c:	f840 3b04 	str.w	r3, [r0], #4
  405620:	f851 3b04 	ldr.w	r3, [r1], #4
  405624:	f840 3b04 	str.w	r3, [r0], #4
  405628:	f851 3b04 	ldr.w	r3, [r1], #4
  40562c:	f840 3b04 	str.w	r3, [r0], #4
  405630:	f851 3b04 	ldr.w	r3, [r1], #4
  405634:	f840 3b04 	str.w	r3, [r0], #4
  405638:	f851 3b04 	ldr.w	r3, [r1], #4
  40563c:	f840 3b04 	str.w	r3, [r0], #4
  405640:	f851 3b04 	ldr.w	r3, [r1], #4
  405644:	f840 3b04 	str.w	r3, [r0], #4
  405648:	f851 3b04 	ldr.w	r3, [r1], #4
  40564c:	f840 3b04 	str.w	r3, [r0], #4
  405650:	f851 3b04 	ldr.w	r3, [r1], #4
  405654:	f840 3b04 	str.w	r3, [r0], #4
  405658:	f851 3b04 	ldr.w	r3, [r1], #4
  40565c:	f840 3b04 	str.w	r3, [r0], #4
  405660:	f851 3b04 	ldr.w	r3, [r1], #4
  405664:	f840 3b04 	str.w	r3, [r0], #4
  405668:	f851 3b04 	ldr.w	r3, [r1], #4
  40566c:	f840 3b04 	str.w	r3, [r0], #4
  405670:	f851 3b04 	ldr.w	r3, [r1], #4
  405674:	f840 3b04 	str.w	r3, [r0], #4
  405678:	f851 3b04 	ldr.w	r3, [r1], #4
  40567c:	f840 3b04 	str.w	r3, [r0], #4
  405680:	3a40      	subs	r2, #64	; 0x40
  405682:	d2bd      	bcs.n	405600 <memcpy+0x10>
  405684:	3230      	adds	r2, #48	; 0x30
  405686:	d311      	bcc.n	4056ac <memcpy+0xbc>
  405688:	f851 3b04 	ldr.w	r3, [r1], #4
  40568c:	f840 3b04 	str.w	r3, [r0], #4
  405690:	f851 3b04 	ldr.w	r3, [r1], #4
  405694:	f840 3b04 	str.w	r3, [r0], #4
  405698:	f851 3b04 	ldr.w	r3, [r1], #4
  40569c:	f840 3b04 	str.w	r3, [r0], #4
  4056a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4056a4:	f840 3b04 	str.w	r3, [r0], #4
  4056a8:	3a10      	subs	r2, #16
  4056aa:	d2ed      	bcs.n	405688 <memcpy+0x98>
  4056ac:	320c      	adds	r2, #12
  4056ae:	d305      	bcc.n	4056bc <memcpy+0xcc>
  4056b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4056b4:	f840 3b04 	str.w	r3, [r0], #4
  4056b8:	3a04      	subs	r2, #4
  4056ba:	d2f9      	bcs.n	4056b0 <memcpy+0xc0>
  4056bc:	3204      	adds	r2, #4
  4056be:	d008      	beq.n	4056d2 <memcpy+0xe2>
  4056c0:	07d2      	lsls	r2, r2, #31
  4056c2:	bf1c      	itt	ne
  4056c4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4056c8:	f800 3b01 	strbne.w	r3, [r0], #1
  4056cc:	d301      	bcc.n	4056d2 <memcpy+0xe2>
  4056ce:	880b      	ldrh	r3, [r1, #0]
  4056d0:	8003      	strh	r3, [r0, #0]
  4056d2:	4660      	mov	r0, ip
  4056d4:	4770      	bx	lr
  4056d6:	bf00      	nop
  4056d8:	2a08      	cmp	r2, #8
  4056da:	d313      	bcc.n	405704 <memcpy+0x114>
  4056dc:	078b      	lsls	r3, r1, #30
  4056de:	d08d      	beq.n	4055fc <memcpy+0xc>
  4056e0:	f010 0303 	ands.w	r3, r0, #3
  4056e4:	d08a      	beq.n	4055fc <memcpy+0xc>
  4056e6:	f1c3 0304 	rsb	r3, r3, #4
  4056ea:	1ad2      	subs	r2, r2, r3
  4056ec:	07db      	lsls	r3, r3, #31
  4056ee:	bf1c      	itt	ne
  4056f0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4056f4:	f800 3b01 	strbne.w	r3, [r0], #1
  4056f8:	d380      	bcc.n	4055fc <memcpy+0xc>
  4056fa:	f831 3b02 	ldrh.w	r3, [r1], #2
  4056fe:	f820 3b02 	strh.w	r3, [r0], #2
  405702:	e77b      	b.n	4055fc <memcpy+0xc>
  405704:	3a04      	subs	r2, #4
  405706:	d3d9      	bcc.n	4056bc <memcpy+0xcc>
  405708:	3a01      	subs	r2, #1
  40570a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40570e:	f800 3b01 	strb.w	r3, [r0], #1
  405712:	d2f9      	bcs.n	405708 <memcpy+0x118>
  405714:	780b      	ldrb	r3, [r1, #0]
  405716:	7003      	strb	r3, [r0, #0]
  405718:	784b      	ldrb	r3, [r1, #1]
  40571a:	7043      	strb	r3, [r0, #1]
  40571c:	788b      	ldrb	r3, [r1, #2]
  40571e:	7083      	strb	r3, [r0, #2]
  405720:	4660      	mov	r0, ip
  405722:	4770      	bx	lr

00405724 <__malloc_lock>:
  405724:	4801      	ldr	r0, [pc, #4]	; (40572c <__malloc_lock+0x8>)
  405726:	f7ff bc5d 	b.w	404fe4 <__retarget_lock_acquire_recursive>
  40572a:	bf00      	nop
  40572c:	20400abc 	.word	0x20400abc

00405730 <__malloc_unlock>:
  405730:	4801      	ldr	r0, [pc, #4]	; (405738 <__malloc_unlock+0x8>)
  405732:	f7ff bc59 	b.w	404fe8 <__retarget_lock_release_recursive>
  405736:	bf00      	nop
  405738:	20400abc 	.word	0x20400abc

0040573c <_Balloc>:
  40573c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40573e:	b570      	push	{r4, r5, r6, lr}
  405740:	4605      	mov	r5, r0
  405742:	460c      	mov	r4, r1
  405744:	b14b      	cbz	r3, 40575a <_Balloc+0x1e>
  405746:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  40574a:	b180      	cbz	r0, 40576e <_Balloc+0x32>
  40574c:	6802      	ldr	r2, [r0, #0]
  40574e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  405752:	2300      	movs	r3, #0
  405754:	6103      	str	r3, [r0, #16]
  405756:	60c3      	str	r3, [r0, #12]
  405758:	bd70      	pop	{r4, r5, r6, pc}
  40575a:	2221      	movs	r2, #33	; 0x21
  40575c:	2104      	movs	r1, #4
  40575e:	f000 fbd9 	bl	405f14 <_calloc_r>
  405762:	64e8      	str	r0, [r5, #76]	; 0x4c
  405764:	4603      	mov	r3, r0
  405766:	2800      	cmp	r0, #0
  405768:	d1ed      	bne.n	405746 <_Balloc+0xa>
  40576a:	2000      	movs	r0, #0
  40576c:	bd70      	pop	{r4, r5, r6, pc}
  40576e:	2101      	movs	r1, #1
  405770:	fa01 f604 	lsl.w	r6, r1, r4
  405774:	1d72      	adds	r2, r6, #5
  405776:	4628      	mov	r0, r5
  405778:	0092      	lsls	r2, r2, #2
  40577a:	f000 fbcb 	bl	405f14 <_calloc_r>
  40577e:	2800      	cmp	r0, #0
  405780:	d0f3      	beq.n	40576a <_Balloc+0x2e>
  405782:	6044      	str	r4, [r0, #4]
  405784:	6086      	str	r6, [r0, #8]
  405786:	e7e4      	b.n	405752 <_Balloc+0x16>

00405788 <_Bfree>:
  405788:	b131      	cbz	r1, 405798 <_Bfree+0x10>
  40578a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40578c:	684a      	ldr	r2, [r1, #4]
  40578e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  405792:	6008      	str	r0, [r1, #0]
  405794:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  405798:	4770      	bx	lr
  40579a:	bf00      	nop

0040579c <__multadd>:
  40579c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40579e:	690c      	ldr	r4, [r1, #16]
  4057a0:	b083      	sub	sp, #12
  4057a2:	460d      	mov	r5, r1
  4057a4:	4606      	mov	r6, r0
  4057a6:	f101 0e14 	add.w	lr, r1, #20
  4057aa:	2700      	movs	r7, #0
  4057ac:	f8de 0000 	ldr.w	r0, [lr]
  4057b0:	b281      	uxth	r1, r0
  4057b2:	fb02 3301 	mla	r3, r2, r1, r3
  4057b6:	0c01      	lsrs	r1, r0, #16
  4057b8:	0c18      	lsrs	r0, r3, #16
  4057ba:	fb02 0101 	mla	r1, r2, r1, r0
  4057be:	b29b      	uxth	r3, r3
  4057c0:	3701      	adds	r7, #1
  4057c2:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  4057c6:	42bc      	cmp	r4, r7
  4057c8:	f84e 3b04 	str.w	r3, [lr], #4
  4057cc:	ea4f 4311 	mov.w	r3, r1, lsr #16
  4057d0:	dcec      	bgt.n	4057ac <__multadd+0x10>
  4057d2:	b13b      	cbz	r3, 4057e4 <__multadd+0x48>
  4057d4:	68aa      	ldr	r2, [r5, #8]
  4057d6:	4294      	cmp	r4, r2
  4057d8:	da07      	bge.n	4057ea <__multadd+0x4e>
  4057da:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  4057de:	3401      	adds	r4, #1
  4057e0:	6153      	str	r3, [r2, #20]
  4057e2:	612c      	str	r4, [r5, #16]
  4057e4:	4628      	mov	r0, r5
  4057e6:	b003      	add	sp, #12
  4057e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4057ea:	6869      	ldr	r1, [r5, #4]
  4057ec:	9301      	str	r3, [sp, #4]
  4057ee:	3101      	adds	r1, #1
  4057f0:	4630      	mov	r0, r6
  4057f2:	f7ff ffa3 	bl	40573c <_Balloc>
  4057f6:	692a      	ldr	r2, [r5, #16]
  4057f8:	3202      	adds	r2, #2
  4057fa:	f105 010c 	add.w	r1, r5, #12
  4057fe:	4607      	mov	r7, r0
  405800:	0092      	lsls	r2, r2, #2
  405802:	300c      	adds	r0, #12
  405804:	f7ff fef4 	bl	4055f0 <memcpy>
  405808:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40580a:	6869      	ldr	r1, [r5, #4]
  40580c:	9b01      	ldr	r3, [sp, #4]
  40580e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  405812:	6028      	str	r0, [r5, #0]
  405814:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  405818:	463d      	mov	r5, r7
  40581a:	e7de      	b.n	4057da <__multadd+0x3e>

0040581c <__hi0bits>:
  40581c:	0c02      	lsrs	r2, r0, #16
  40581e:	0412      	lsls	r2, r2, #16
  405820:	4603      	mov	r3, r0
  405822:	b9b2      	cbnz	r2, 405852 <__hi0bits+0x36>
  405824:	0403      	lsls	r3, r0, #16
  405826:	2010      	movs	r0, #16
  405828:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40582c:	bf04      	itt	eq
  40582e:	021b      	lsleq	r3, r3, #8
  405830:	3008      	addeq	r0, #8
  405832:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  405836:	bf04      	itt	eq
  405838:	011b      	lsleq	r3, r3, #4
  40583a:	3004      	addeq	r0, #4
  40583c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  405840:	bf04      	itt	eq
  405842:	009b      	lsleq	r3, r3, #2
  405844:	3002      	addeq	r0, #2
  405846:	2b00      	cmp	r3, #0
  405848:	db02      	blt.n	405850 <__hi0bits+0x34>
  40584a:	005b      	lsls	r3, r3, #1
  40584c:	d403      	bmi.n	405856 <__hi0bits+0x3a>
  40584e:	2020      	movs	r0, #32
  405850:	4770      	bx	lr
  405852:	2000      	movs	r0, #0
  405854:	e7e8      	b.n	405828 <__hi0bits+0xc>
  405856:	3001      	adds	r0, #1
  405858:	4770      	bx	lr
  40585a:	bf00      	nop

0040585c <__lo0bits>:
  40585c:	6803      	ldr	r3, [r0, #0]
  40585e:	f013 0207 	ands.w	r2, r3, #7
  405862:	4601      	mov	r1, r0
  405864:	d007      	beq.n	405876 <__lo0bits+0x1a>
  405866:	07da      	lsls	r2, r3, #31
  405868:	d421      	bmi.n	4058ae <__lo0bits+0x52>
  40586a:	0798      	lsls	r0, r3, #30
  40586c:	d421      	bmi.n	4058b2 <__lo0bits+0x56>
  40586e:	089b      	lsrs	r3, r3, #2
  405870:	600b      	str	r3, [r1, #0]
  405872:	2002      	movs	r0, #2
  405874:	4770      	bx	lr
  405876:	b298      	uxth	r0, r3
  405878:	b198      	cbz	r0, 4058a2 <__lo0bits+0x46>
  40587a:	4610      	mov	r0, r2
  40587c:	f013 0fff 	tst.w	r3, #255	; 0xff
  405880:	bf04      	itt	eq
  405882:	0a1b      	lsreq	r3, r3, #8
  405884:	3008      	addeq	r0, #8
  405886:	071a      	lsls	r2, r3, #28
  405888:	bf04      	itt	eq
  40588a:	091b      	lsreq	r3, r3, #4
  40588c:	3004      	addeq	r0, #4
  40588e:	079a      	lsls	r2, r3, #30
  405890:	bf04      	itt	eq
  405892:	089b      	lsreq	r3, r3, #2
  405894:	3002      	addeq	r0, #2
  405896:	07da      	lsls	r2, r3, #31
  405898:	d407      	bmi.n	4058aa <__lo0bits+0x4e>
  40589a:	085b      	lsrs	r3, r3, #1
  40589c:	d104      	bne.n	4058a8 <__lo0bits+0x4c>
  40589e:	2020      	movs	r0, #32
  4058a0:	4770      	bx	lr
  4058a2:	0c1b      	lsrs	r3, r3, #16
  4058a4:	2010      	movs	r0, #16
  4058a6:	e7e9      	b.n	40587c <__lo0bits+0x20>
  4058a8:	3001      	adds	r0, #1
  4058aa:	600b      	str	r3, [r1, #0]
  4058ac:	4770      	bx	lr
  4058ae:	2000      	movs	r0, #0
  4058b0:	4770      	bx	lr
  4058b2:	085b      	lsrs	r3, r3, #1
  4058b4:	600b      	str	r3, [r1, #0]
  4058b6:	2001      	movs	r0, #1
  4058b8:	4770      	bx	lr
  4058ba:	bf00      	nop

004058bc <__i2b>:
  4058bc:	b510      	push	{r4, lr}
  4058be:	460c      	mov	r4, r1
  4058c0:	2101      	movs	r1, #1
  4058c2:	f7ff ff3b 	bl	40573c <_Balloc>
  4058c6:	2201      	movs	r2, #1
  4058c8:	6144      	str	r4, [r0, #20]
  4058ca:	6102      	str	r2, [r0, #16]
  4058cc:	bd10      	pop	{r4, pc}
  4058ce:	bf00      	nop

004058d0 <__multiply>:
  4058d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4058d4:	690c      	ldr	r4, [r1, #16]
  4058d6:	6915      	ldr	r5, [r2, #16]
  4058d8:	42ac      	cmp	r4, r5
  4058da:	b083      	sub	sp, #12
  4058dc:	468b      	mov	fp, r1
  4058de:	4616      	mov	r6, r2
  4058e0:	da04      	bge.n	4058ec <__multiply+0x1c>
  4058e2:	4622      	mov	r2, r4
  4058e4:	46b3      	mov	fp, r6
  4058e6:	462c      	mov	r4, r5
  4058e8:	460e      	mov	r6, r1
  4058ea:	4615      	mov	r5, r2
  4058ec:	f8db 3008 	ldr.w	r3, [fp, #8]
  4058f0:	f8db 1004 	ldr.w	r1, [fp, #4]
  4058f4:	eb04 0805 	add.w	r8, r4, r5
  4058f8:	4598      	cmp	r8, r3
  4058fa:	bfc8      	it	gt
  4058fc:	3101      	addgt	r1, #1
  4058fe:	f7ff ff1d 	bl	40573c <_Balloc>
  405902:	f100 0914 	add.w	r9, r0, #20
  405906:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  40590a:	45d1      	cmp	r9, sl
  40590c:	9000      	str	r0, [sp, #0]
  40590e:	d205      	bcs.n	40591c <__multiply+0x4c>
  405910:	464b      	mov	r3, r9
  405912:	2100      	movs	r1, #0
  405914:	f843 1b04 	str.w	r1, [r3], #4
  405918:	459a      	cmp	sl, r3
  40591a:	d8fb      	bhi.n	405914 <__multiply+0x44>
  40591c:	f106 0c14 	add.w	ip, r6, #20
  405920:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  405924:	f10b 0b14 	add.w	fp, fp, #20
  405928:	459c      	cmp	ip, r3
  40592a:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40592e:	d24c      	bcs.n	4059ca <__multiply+0xfa>
  405930:	f8cd a004 	str.w	sl, [sp, #4]
  405934:	469a      	mov	sl, r3
  405936:	f8dc 5000 	ldr.w	r5, [ip]
  40593a:	b2af      	uxth	r7, r5
  40593c:	b1ef      	cbz	r7, 40597a <__multiply+0xaa>
  40593e:	2100      	movs	r1, #0
  405940:	464d      	mov	r5, r9
  405942:	465e      	mov	r6, fp
  405944:	460c      	mov	r4, r1
  405946:	f856 2b04 	ldr.w	r2, [r6], #4
  40594a:	6828      	ldr	r0, [r5, #0]
  40594c:	b293      	uxth	r3, r2
  40594e:	b281      	uxth	r1, r0
  405950:	fb07 1303 	mla	r3, r7, r3, r1
  405954:	0c12      	lsrs	r2, r2, #16
  405956:	0c01      	lsrs	r1, r0, #16
  405958:	4423      	add	r3, r4
  40595a:	fb07 1102 	mla	r1, r7, r2, r1
  40595e:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  405962:	b29b      	uxth	r3, r3
  405964:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  405968:	45b6      	cmp	lr, r6
  40596a:	f845 3b04 	str.w	r3, [r5], #4
  40596e:	ea4f 4411 	mov.w	r4, r1, lsr #16
  405972:	d8e8      	bhi.n	405946 <__multiply+0x76>
  405974:	602c      	str	r4, [r5, #0]
  405976:	f8dc 5000 	ldr.w	r5, [ip]
  40597a:	0c2d      	lsrs	r5, r5, #16
  40597c:	d01d      	beq.n	4059ba <__multiply+0xea>
  40597e:	f8d9 3000 	ldr.w	r3, [r9]
  405982:	4648      	mov	r0, r9
  405984:	461c      	mov	r4, r3
  405986:	4659      	mov	r1, fp
  405988:	2200      	movs	r2, #0
  40598a:	880e      	ldrh	r6, [r1, #0]
  40598c:	0c24      	lsrs	r4, r4, #16
  40598e:	fb05 4406 	mla	r4, r5, r6, r4
  405992:	4422      	add	r2, r4
  405994:	b29b      	uxth	r3, r3
  405996:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40599a:	f840 3b04 	str.w	r3, [r0], #4
  40599e:	f851 3b04 	ldr.w	r3, [r1], #4
  4059a2:	6804      	ldr	r4, [r0, #0]
  4059a4:	0c1b      	lsrs	r3, r3, #16
  4059a6:	b2a6      	uxth	r6, r4
  4059a8:	fb05 6303 	mla	r3, r5, r3, r6
  4059ac:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  4059b0:	458e      	cmp	lr, r1
  4059b2:	ea4f 4213 	mov.w	r2, r3, lsr #16
  4059b6:	d8e8      	bhi.n	40598a <__multiply+0xba>
  4059b8:	6003      	str	r3, [r0, #0]
  4059ba:	f10c 0c04 	add.w	ip, ip, #4
  4059be:	45e2      	cmp	sl, ip
  4059c0:	f109 0904 	add.w	r9, r9, #4
  4059c4:	d8b7      	bhi.n	405936 <__multiply+0x66>
  4059c6:	f8dd a004 	ldr.w	sl, [sp, #4]
  4059ca:	f1b8 0f00 	cmp.w	r8, #0
  4059ce:	dd0b      	ble.n	4059e8 <__multiply+0x118>
  4059d0:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  4059d4:	f1aa 0a04 	sub.w	sl, sl, #4
  4059d8:	b11b      	cbz	r3, 4059e2 <__multiply+0x112>
  4059da:	e005      	b.n	4059e8 <__multiply+0x118>
  4059dc:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  4059e0:	b913      	cbnz	r3, 4059e8 <__multiply+0x118>
  4059e2:	f1b8 0801 	subs.w	r8, r8, #1
  4059e6:	d1f9      	bne.n	4059dc <__multiply+0x10c>
  4059e8:	9800      	ldr	r0, [sp, #0]
  4059ea:	f8c0 8010 	str.w	r8, [r0, #16]
  4059ee:	b003      	add	sp, #12
  4059f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004059f4 <__pow5mult>:
  4059f4:	f012 0303 	ands.w	r3, r2, #3
  4059f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4059fc:	4614      	mov	r4, r2
  4059fe:	4607      	mov	r7, r0
  405a00:	d12e      	bne.n	405a60 <__pow5mult+0x6c>
  405a02:	460d      	mov	r5, r1
  405a04:	10a4      	asrs	r4, r4, #2
  405a06:	d01c      	beq.n	405a42 <__pow5mult+0x4e>
  405a08:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  405a0a:	b396      	cbz	r6, 405a72 <__pow5mult+0x7e>
  405a0c:	07e3      	lsls	r3, r4, #31
  405a0e:	f04f 0800 	mov.w	r8, #0
  405a12:	d406      	bmi.n	405a22 <__pow5mult+0x2e>
  405a14:	1064      	asrs	r4, r4, #1
  405a16:	d014      	beq.n	405a42 <__pow5mult+0x4e>
  405a18:	6830      	ldr	r0, [r6, #0]
  405a1a:	b1a8      	cbz	r0, 405a48 <__pow5mult+0x54>
  405a1c:	4606      	mov	r6, r0
  405a1e:	07e3      	lsls	r3, r4, #31
  405a20:	d5f8      	bpl.n	405a14 <__pow5mult+0x20>
  405a22:	4632      	mov	r2, r6
  405a24:	4629      	mov	r1, r5
  405a26:	4638      	mov	r0, r7
  405a28:	f7ff ff52 	bl	4058d0 <__multiply>
  405a2c:	b1b5      	cbz	r5, 405a5c <__pow5mult+0x68>
  405a2e:	686a      	ldr	r2, [r5, #4]
  405a30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  405a32:	1064      	asrs	r4, r4, #1
  405a34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  405a38:	6029      	str	r1, [r5, #0]
  405a3a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  405a3e:	4605      	mov	r5, r0
  405a40:	d1ea      	bne.n	405a18 <__pow5mult+0x24>
  405a42:	4628      	mov	r0, r5
  405a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405a48:	4632      	mov	r2, r6
  405a4a:	4631      	mov	r1, r6
  405a4c:	4638      	mov	r0, r7
  405a4e:	f7ff ff3f 	bl	4058d0 <__multiply>
  405a52:	6030      	str	r0, [r6, #0]
  405a54:	f8c0 8000 	str.w	r8, [r0]
  405a58:	4606      	mov	r6, r0
  405a5a:	e7e0      	b.n	405a1e <__pow5mult+0x2a>
  405a5c:	4605      	mov	r5, r0
  405a5e:	e7d9      	b.n	405a14 <__pow5mult+0x20>
  405a60:	1e5a      	subs	r2, r3, #1
  405a62:	4d0b      	ldr	r5, [pc, #44]	; (405a90 <__pow5mult+0x9c>)
  405a64:	2300      	movs	r3, #0
  405a66:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  405a6a:	f7ff fe97 	bl	40579c <__multadd>
  405a6e:	4605      	mov	r5, r0
  405a70:	e7c8      	b.n	405a04 <__pow5mult+0x10>
  405a72:	2101      	movs	r1, #1
  405a74:	4638      	mov	r0, r7
  405a76:	f7ff fe61 	bl	40573c <_Balloc>
  405a7a:	f240 2171 	movw	r1, #625	; 0x271
  405a7e:	2201      	movs	r2, #1
  405a80:	2300      	movs	r3, #0
  405a82:	6141      	str	r1, [r0, #20]
  405a84:	6102      	str	r2, [r0, #16]
  405a86:	4606      	mov	r6, r0
  405a88:	64b8      	str	r0, [r7, #72]	; 0x48
  405a8a:	6003      	str	r3, [r0, #0]
  405a8c:	e7be      	b.n	405a0c <__pow5mult+0x18>
  405a8e:	bf00      	nop
  405a90:	004072a8 	.word	0x004072a8

00405a94 <__lshift>:
  405a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405a98:	4691      	mov	r9, r2
  405a9a:	690a      	ldr	r2, [r1, #16]
  405a9c:	688b      	ldr	r3, [r1, #8]
  405a9e:	ea4f 1469 	mov.w	r4, r9, asr #5
  405aa2:	eb04 0802 	add.w	r8, r4, r2
  405aa6:	f108 0501 	add.w	r5, r8, #1
  405aaa:	429d      	cmp	r5, r3
  405aac:	460e      	mov	r6, r1
  405aae:	4607      	mov	r7, r0
  405ab0:	6849      	ldr	r1, [r1, #4]
  405ab2:	dd04      	ble.n	405abe <__lshift+0x2a>
  405ab4:	005b      	lsls	r3, r3, #1
  405ab6:	429d      	cmp	r5, r3
  405ab8:	f101 0101 	add.w	r1, r1, #1
  405abc:	dcfa      	bgt.n	405ab4 <__lshift+0x20>
  405abe:	4638      	mov	r0, r7
  405ac0:	f7ff fe3c 	bl	40573c <_Balloc>
  405ac4:	2c00      	cmp	r4, #0
  405ac6:	f100 0314 	add.w	r3, r0, #20
  405aca:	dd06      	ble.n	405ada <__lshift+0x46>
  405acc:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  405ad0:	2100      	movs	r1, #0
  405ad2:	f843 1b04 	str.w	r1, [r3], #4
  405ad6:	429a      	cmp	r2, r3
  405ad8:	d1fb      	bne.n	405ad2 <__lshift+0x3e>
  405ada:	6934      	ldr	r4, [r6, #16]
  405adc:	f106 0114 	add.w	r1, r6, #20
  405ae0:	f019 091f 	ands.w	r9, r9, #31
  405ae4:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  405ae8:	d01d      	beq.n	405b26 <__lshift+0x92>
  405aea:	f1c9 0c20 	rsb	ip, r9, #32
  405aee:	2200      	movs	r2, #0
  405af0:	680c      	ldr	r4, [r1, #0]
  405af2:	fa04 f409 	lsl.w	r4, r4, r9
  405af6:	4314      	orrs	r4, r2
  405af8:	f843 4b04 	str.w	r4, [r3], #4
  405afc:	f851 2b04 	ldr.w	r2, [r1], #4
  405b00:	458e      	cmp	lr, r1
  405b02:	fa22 f20c 	lsr.w	r2, r2, ip
  405b06:	d8f3      	bhi.n	405af0 <__lshift+0x5c>
  405b08:	601a      	str	r2, [r3, #0]
  405b0a:	b10a      	cbz	r2, 405b10 <__lshift+0x7c>
  405b0c:	f108 0502 	add.w	r5, r8, #2
  405b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  405b12:	6872      	ldr	r2, [r6, #4]
  405b14:	3d01      	subs	r5, #1
  405b16:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  405b1a:	6105      	str	r5, [r0, #16]
  405b1c:	6031      	str	r1, [r6, #0]
  405b1e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  405b22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405b26:	3b04      	subs	r3, #4
  405b28:	f851 2b04 	ldr.w	r2, [r1], #4
  405b2c:	f843 2f04 	str.w	r2, [r3, #4]!
  405b30:	458e      	cmp	lr, r1
  405b32:	d8f9      	bhi.n	405b28 <__lshift+0x94>
  405b34:	e7ec      	b.n	405b10 <__lshift+0x7c>
  405b36:	bf00      	nop

00405b38 <__mcmp>:
  405b38:	b430      	push	{r4, r5}
  405b3a:	690b      	ldr	r3, [r1, #16]
  405b3c:	4605      	mov	r5, r0
  405b3e:	6900      	ldr	r0, [r0, #16]
  405b40:	1ac0      	subs	r0, r0, r3
  405b42:	d10f      	bne.n	405b64 <__mcmp+0x2c>
  405b44:	009b      	lsls	r3, r3, #2
  405b46:	3514      	adds	r5, #20
  405b48:	3114      	adds	r1, #20
  405b4a:	4419      	add	r1, r3
  405b4c:	442b      	add	r3, r5
  405b4e:	e001      	b.n	405b54 <__mcmp+0x1c>
  405b50:	429d      	cmp	r5, r3
  405b52:	d207      	bcs.n	405b64 <__mcmp+0x2c>
  405b54:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  405b58:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  405b5c:	4294      	cmp	r4, r2
  405b5e:	d0f7      	beq.n	405b50 <__mcmp+0x18>
  405b60:	d302      	bcc.n	405b68 <__mcmp+0x30>
  405b62:	2001      	movs	r0, #1
  405b64:	bc30      	pop	{r4, r5}
  405b66:	4770      	bx	lr
  405b68:	f04f 30ff 	mov.w	r0, #4294967295
  405b6c:	e7fa      	b.n	405b64 <__mcmp+0x2c>
  405b6e:	bf00      	nop

00405b70 <__mdiff>:
  405b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405b74:	690f      	ldr	r7, [r1, #16]
  405b76:	460e      	mov	r6, r1
  405b78:	6911      	ldr	r1, [r2, #16]
  405b7a:	1a7f      	subs	r7, r7, r1
  405b7c:	2f00      	cmp	r7, #0
  405b7e:	4690      	mov	r8, r2
  405b80:	d117      	bne.n	405bb2 <__mdiff+0x42>
  405b82:	0089      	lsls	r1, r1, #2
  405b84:	f106 0514 	add.w	r5, r6, #20
  405b88:	f102 0e14 	add.w	lr, r2, #20
  405b8c:	186b      	adds	r3, r5, r1
  405b8e:	4471      	add	r1, lr
  405b90:	e001      	b.n	405b96 <__mdiff+0x26>
  405b92:	429d      	cmp	r5, r3
  405b94:	d25c      	bcs.n	405c50 <__mdiff+0xe0>
  405b96:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  405b9a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  405b9e:	42a2      	cmp	r2, r4
  405ba0:	d0f7      	beq.n	405b92 <__mdiff+0x22>
  405ba2:	d25e      	bcs.n	405c62 <__mdiff+0xf2>
  405ba4:	4633      	mov	r3, r6
  405ba6:	462c      	mov	r4, r5
  405ba8:	4646      	mov	r6, r8
  405baa:	4675      	mov	r5, lr
  405bac:	4698      	mov	r8, r3
  405bae:	2701      	movs	r7, #1
  405bb0:	e005      	b.n	405bbe <__mdiff+0x4e>
  405bb2:	db58      	blt.n	405c66 <__mdiff+0xf6>
  405bb4:	f106 0514 	add.w	r5, r6, #20
  405bb8:	f108 0414 	add.w	r4, r8, #20
  405bbc:	2700      	movs	r7, #0
  405bbe:	6871      	ldr	r1, [r6, #4]
  405bc0:	f7ff fdbc 	bl	40573c <_Balloc>
  405bc4:	f8d8 3010 	ldr.w	r3, [r8, #16]
  405bc8:	6936      	ldr	r6, [r6, #16]
  405bca:	60c7      	str	r7, [r0, #12]
  405bcc:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  405bd0:	46a6      	mov	lr, r4
  405bd2:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  405bd6:	f100 0414 	add.w	r4, r0, #20
  405bda:	2300      	movs	r3, #0
  405bdc:	f85e 1b04 	ldr.w	r1, [lr], #4
  405be0:	f855 8b04 	ldr.w	r8, [r5], #4
  405be4:	b28a      	uxth	r2, r1
  405be6:	fa13 f388 	uxtah	r3, r3, r8
  405bea:	0c09      	lsrs	r1, r1, #16
  405bec:	1a9a      	subs	r2, r3, r2
  405bee:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  405bf2:	eb03 4322 	add.w	r3, r3, r2, asr #16
  405bf6:	b292      	uxth	r2, r2
  405bf8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  405bfc:	45f4      	cmp	ip, lr
  405bfe:	f844 2b04 	str.w	r2, [r4], #4
  405c02:	ea4f 4323 	mov.w	r3, r3, asr #16
  405c06:	d8e9      	bhi.n	405bdc <__mdiff+0x6c>
  405c08:	42af      	cmp	r7, r5
  405c0a:	d917      	bls.n	405c3c <__mdiff+0xcc>
  405c0c:	46a4      	mov	ip, r4
  405c0e:	46ae      	mov	lr, r5
  405c10:	f85e 2b04 	ldr.w	r2, [lr], #4
  405c14:	fa13 f382 	uxtah	r3, r3, r2
  405c18:	1419      	asrs	r1, r3, #16
  405c1a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  405c1e:	b29b      	uxth	r3, r3
  405c20:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  405c24:	4577      	cmp	r7, lr
  405c26:	f84c 2b04 	str.w	r2, [ip], #4
  405c2a:	ea4f 4321 	mov.w	r3, r1, asr #16
  405c2e:	d8ef      	bhi.n	405c10 <__mdiff+0xa0>
  405c30:	43ed      	mvns	r5, r5
  405c32:	442f      	add	r7, r5
  405c34:	f027 0703 	bic.w	r7, r7, #3
  405c38:	3704      	adds	r7, #4
  405c3a:	443c      	add	r4, r7
  405c3c:	3c04      	subs	r4, #4
  405c3e:	b922      	cbnz	r2, 405c4a <__mdiff+0xda>
  405c40:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  405c44:	3e01      	subs	r6, #1
  405c46:	2b00      	cmp	r3, #0
  405c48:	d0fa      	beq.n	405c40 <__mdiff+0xd0>
  405c4a:	6106      	str	r6, [r0, #16]
  405c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405c50:	2100      	movs	r1, #0
  405c52:	f7ff fd73 	bl	40573c <_Balloc>
  405c56:	2201      	movs	r2, #1
  405c58:	2300      	movs	r3, #0
  405c5a:	6102      	str	r2, [r0, #16]
  405c5c:	6143      	str	r3, [r0, #20]
  405c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405c62:	4674      	mov	r4, lr
  405c64:	e7ab      	b.n	405bbe <__mdiff+0x4e>
  405c66:	4633      	mov	r3, r6
  405c68:	f106 0414 	add.w	r4, r6, #20
  405c6c:	f102 0514 	add.w	r5, r2, #20
  405c70:	4616      	mov	r6, r2
  405c72:	2701      	movs	r7, #1
  405c74:	4698      	mov	r8, r3
  405c76:	e7a2      	b.n	405bbe <__mdiff+0x4e>

00405c78 <__d2b>:
  405c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405c7c:	b082      	sub	sp, #8
  405c7e:	2101      	movs	r1, #1
  405c80:	461c      	mov	r4, r3
  405c82:	f3c3 570a 	ubfx	r7, r3, #20, #11
  405c86:	4615      	mov	r5, r2
  405c88:	9e08      	ldr	r6, [sp, #32]
  405c8a:	f7ff fd57 	bl	40573c <_Balloc>
  405c8e:	f3c4 0413 	ubfx	r4, r4, #0, #20
  405c92:	4680      	mov	r8, r0
  405c94:	b10f      	cbz	r7, 405c9a <__d2b+0x22>
  405c96:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  405c9a:	9401      	str	r4, [sp, #4]
  405c9c:	b31d      	cbz	r5, 405ce6 <__d2b+0x6e>
  405c9e:	a802      	add	r0, sp, #8
  405ca0:	f840 5d08 	str.w	r5, [r0, #-8]!
  405ca4:	f7ff fdda 	bl	40585c <__lo0bits>
  405ca8:	2800      	cmp	r0, #0
  405caa:	d134      	bne.n	405d16 <__d2b+0x9e>
  405cac:	e89d 000c 	ldmia.w	sp, {r2, r3}
  405cb0:	f8c8 2014 	str.w	r2, [r8, #20]
  405cb4:	2b00      	cmp	r3, #0
  405cb6:	bf0c      	ite	eq
  405cb8:	2101      	moveq	r1, #1
  405cba:	2102      	movne	r1, #2
  405cbc:	f8c8 3018 	str.w	r3, [r8, #24]
  405cc0:	f8c8 1010 	str.w	r1, [r8, #16]
  405cc4:	b9df      	cbnz	r7, 405cfe <__d2b+0x86>
  405cc6:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  405cca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  405cce:	6030      	str	r0, [r6, #0]
  405cd0:	6918      	ldr	r0, [r3, #16]
  405cd2:	f7ff fda3 	bl	40581c <__hi0bits>
  405cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405cd8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  405cdc:	6018      	str	r0, [r3, #0]
  405cde:	4640      	mov	r0, r8
  405ce0:	b002      	add	sp, #8
  405ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405ce6:	a801      	add	r0, sp, #4
  405ce8:	f7ff fdb8 	bl	40585c <__lo0bits>
  405cec:	9b01      	ldr	r3, [sp, #4]
  405cee:	f8c8 3014 	str.w	r3, [r8, #20]
  405cf2:	2101      	movs	r1, #1
  405cf4:	3020      	adds	r0, #32
  405cf6:	f8c8 1010 	str.w	r1, [r8, #16]
  405cfa:	2f00      	cmp	r7, #0
  405cfc:	d0e3      	beq.n	405cc6 <__d2b+0x4e>
  405cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405d00:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  405d04:	4407      	add	r7, r0
  405d06:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  405d0a:	6037      	str	r7, [r6, #0]
  405d0c:	6018      	str	r0, [r3, #0]
  405d0e:	4640      	mov	r0, r8
  405d10:	b002      	add	sp, #8
  405d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405d16:	e89d 000a 	ldmia.w	sp, {r1, r3}
  405d1a:	f1c0 0220 	rsb	r2, r0, #32
  405d1e:	fa03 f202 	lsl.w	r2, r3, r2
  405d22:	430a      	orrs	r2, r1
  405d24:	40c3      	lsrs	r3, r0
  405d26:	9301      	str	r3, [sp, #4]
  405d28:	f8c8 2014 	str.w	r2, [r8, #20]
  405d2c:	e7c2      	b.n	405cb4 <__d2b+0x3c>
  405d2e:	bf00      	nop

00405d30 <_sbrk_r>:
  405d30:	b538      	push	{r3, r4, r5, lr}
  405d32:	4c07      	ldr	r4, [pc, #28]	; (405d50 <_sbrk_r+0x20>)
  405d34:	2300      	movs	r3, #0
  405d36:	4605      	mov	r5, r0
  405d38:	4608      	mov	r0, r1
  405d3a:	6023      	str	r3, [r4, #0]
  405d3c:	f7fb feaa 	bl	401a94 <_sbrk>
  405d40:	1c43      	adds	r3, r0, #1
  405d42:	d000      	beq.n	405d46 <_sbrk_r+0x16>
  405d44:	bd38      	pop	{r3, r4, r5, pc}
  405d46:	6823      	ldr	r3, [r4, #0]
  405d48:	2b00      	cmp	r3, #0
  405d4a:	d0fb      	beq.n	405d44 <_sbrk_r+0x14>
  405d4c:	602b      	str	r3, [r5, #0]
  405d4e:	bd38      	pop	{r3, r4, r5, pc}
  405d50:	20400ad0 	.word	0x20400ad0

00405d54 <__ssprint_r>:
  405d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405d58:	6893      	ldr	r3, [r2, #8]
  405d5a:	b083      	sub	sp, #12
  405d5c:	4690      	mov	r8, r2
  405d5e:	2b00      	cmp	r3, #0
  405d60:	d070      	beq.n	405e44 <__ssprint_r+0xf0>
  405d62:	4682      	mov	sl, r0
  405d64:	460c      	mov	r4, r1
  405d66:	6817      	ldr	r7, [r2, #0]
  405d68:	688d      	ldr	r5, [r1, #8]
  405d6a:	6808      	ldr	r0, [r1, #0]
  405d6c:	e042      	b.n	405df4 <__ssprint_r+0xa0>
  405d6e:	89a3      	ldrh	r3, [r4, #12]
  405d70:	f413 6f90 	tst.w	r3, #1152	; 0x480
  405d74:	d02e      	beq.n	405dd4 <__ssprint_r+0x80>
  405d76:	6965      	ldr	r5, [r4, #20]
  405d78:	6921      	ldr	r1, [r4, #16]
  405d7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  405d7e:	eba0 0b01 	sub.w	fp, r0, r1
  405d82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  405d86:	f10b 0001 	add.w	r0, fp, #1
  405d8a:	106d      	asrs	r5, r5, #1
  405d8c:	4430      	add	r0, r6
  405d8e:	42a8      	cmp	r0, r5
  405d90:	462a      	mov	r2, r5
  405d92:	bf84      	itt	hi
  405d94:	4605      	movhi	r5, r0
  405d96:	462a      	movhi	r2, r5
  405d98:	055b      	lsls	r3, r3, #21
  405d9a:	d538      	bpl.n	405e0e <__ssprint_r+0xba>
  405d9c:	4611      	mov	r1, r2
  405d9e:	4650      	mov	r0, sl
  405da0:	f7ff f924 	bl	404fec <_malloc_r>
  405da4:	2800      	cmp	r0, #0
  405da6:	d03c      	beq.n	405e22 <__ssprint_r+0xce>
  405da8:	465a      	mov	r2, fp
  405daa:	6921      	ldr	r1, [r4, #16]
  405dac:	9001      	str	r0, [sp, #4]
  405dae:	f7ff fc1f 	bl	4055f0 <memcpy>
  405db2:	89a2      	ldrh	r2, [r4, #12]
  405db4:	9b01      	ldr	r3, [sp, #4]
  405db6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  405dba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  405dbe:	81a2      	strh	r2, [r4, #12]
  405dc0:	eba5 020b 	sub.w	r2, r5, fp
  405dc4:	eb03 000b 	add.w	r0, r3, fp
  405dc8:	6165      	str	r5, [r4, #20]
  405dca:	6123      	str	r3, [r4, #16]
  405dcc:	6020      	str	r0, [r4, #0]
  405dce:	60a2      	str	r2, [r4, #8]
  405dd0:	4635      	mov	r5, r6
  405dd2:	46b3      	mov	fp, r6
  405dd4:	465a      	mov	r2, fp
  405dd6:	4649      	mov	r1, r9
  405dd8:	f000 fa18 	bl	40620c <memmove>
  405ddc:	f8d8 3008 	ldr.w	r3, [r8, #8]
  405de0:	68a2      	ldr	r2, [r4, #8]
  405de2:	6820      	ldr	r0, [r4, #0]
  405de4:	1b55      	subs	r5, r2, r5
  405de6:	4458      	add	r0, fp
  405de8:	1b9e      	subs	r6, r3, r6
  405dea:	60a5      	str	r5, [r4, #8]
  405dec:	6020      	str	r0, [r4, #0]
  405dee:	f8c8 6008 	str.w	r6, [r8, #8]
  405df2:	b33e      	cbz	r6, 405e44 <__ssprint_r+0xf0>
  405df4:	687e      	ldr	r6, [r7, #4]
  405df6:	463b      	mov	r3, r7
  405df8:	3708      	adds	r7, #8
  405dfa:	2e00      	cmp	r6, #0
  405dfc:	d0fa      	beq.n	405df4 <__ssprint_r+0xa0>
  405dfe:	42ae      	cmp	r6, r5
  405e00:	f8d3 9000 	ldr.w	r9, [r3]
  405e04:	46ab      	mov	fp, r5
  405e06:	d2b2      	bcs.n	405d6e <__ssprint_r+0x1a>
  405e08:	4635      	mov	r5, r6
  405e0a:	46b3      	mov	fp, r6
  405e0c:	e7e2      	b.n	405dd4 <__ssprint_r+0x80>
  405e0e:	4650      	mov	r0, sl
  405e10:	f000 fa60 	bl	4062d4 <_realloc_r>
  405e14:	4603      	mov	r3, r0
  405e16:	2800      	cmp	r0, #0
  405e18:	d1d2      	bne.n	405dc0 <__ssprint_r+0x6c>
  405e1a:	6921      	ldr	r1, [r4, #16]
  405e1c:	4650      	mov	r0, sl
  405e1e:	f000 f8f9 	bl	406014 <_free_r>
  405e22:	230c      	movs	r3, #12
  405e24:	f8ca 3000 	str.w	r3, [sl]
  405e28:	89a3      	ldrh	r3, [r4, #12]
  405e2a:	2200      	movs	r2, #0
  405e2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405e30:	f04f 30ff 	mov.w	r0, #4294967295
  405e34:	81a3      	strh	r3, [r4, #12]
  405e36:	f8c8 2008 	str.w	r2, [r8, #8]
  405e3a:	f8c8 2004 	str.w	r2, [r8, #4]
  405e3e:	b003      	add	sp, #12
  405e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e44:	2000      	movs	r0, #0
  405e46:	f8c8 0004 	str.w	r0, [r8, #4]
  405e4a:	b003      	add	sp, #12
  405e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00405e50 <__register_exitproc>:
  405e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405e54:	4d2c      	ldr	r5, [pc, #176]	; (405f08 <__register_exitproc+0xb8>)
  405e56:	4606      	mov	r6, r0
  405e58:	6828      	ldr	r0, [r5, #0]
  405e5a:	4698      	mov	r8, r3
  405e5c:	460f      	mov	r7, r1
  405e5e:	4691      	mov	r9, r2
  405e60:	f7ff f8c0 	bl	404fe4 <__retarget_lock_acquire_recursive>
  405e64:	4b29      	ldr	r3, [pc, #164]	; (405f0c <__register_exitproc+0xbc>)
  405e66:	681c      	ldr	r4, [r3, #0]
  405e68:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  405e6c:	2b00      	cmp	r3, #0
  405e6e:	d03e      	beq.n	405eee <__register_exitproc+0x9e>
  405e70:	685a      	ldr	r2, [r3, #4]
  405e72:	2a1f      	cmp	r2, #31
  405e74:	dc1c      	bgt.n	405eb0 <__register_exitproc+0x60>
  405e76:	f102 0e01 	add.w	lr, r2, #1
  405e7a:	b176      	cbz	r6, 405e9a <__register_exitproc+0x4a>
  405e7c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  405e80:	2401      	movs	r4, #1
  405e82:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  405e86:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  405e8a:	4094      	lsls	r4, r2
  405e8c:	4320      	orrs	r0, r4
  405e8e:	2e02      	cmp	r6, #2
  405e90:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  405e94:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  405e98:	d023      	beq.n	405ee2 <__register_exitproc+0x92>
  405e9a:	3202      	adds	r2, #2
  405e9c:	f8c3 e004 	str.w	lr, [r3, #4]
  405ea0:	6828      	ldr	r0, [r5, #0]
  405ea2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  405ea6:	f7ff f89f 	bl	404fe8 <__retarget_lock_release_recursive>
  405eaa:	2000      	movs	r0, #0
  405eac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405eb0:	4b17      	ldr	r3, [pc, #92]	; (405f10 <__register_exitproc+0xc0>)
  405eb2:	b30b      	cbz	r3, 405ef8 <__register_exitproc+0xa8>
  405eb4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  405eb8:	f3af 8000 	nop.w
  405ebc:	4603      	mov	r3, r0
  405ebe:	b1d8      	cbz	r0, 405ef8 <__register_exitproc+0xa8>
  405ec0:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  405ec4:	6002      	str	r2, [r0, #0]
  405ec6:	2100      	movs	r1, #0
  405ec8:	6041      	str	r1, [r0, #4]
  405eca:	460a      	mov	r2, r1
  405ecc:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  405ed0:	f04f 0e01 	mov.w	lr, #1
  405ed4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  405ed8:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  405edc:	2e00      	cmp	r6, #0
  405ede:	d0dc      	beq.n	405e9a <__register_exitproc+0x4a>
  405ee0:	e7cc      	b.n	405e7c <__register_exitproc+0x2c>
  405ee2:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  405ee6:	430c      	orrs	r4, r1
  405ee8:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  405eec:	e7d5      	b.n	405e9a <__register_exitproc+0x4a>
  405eee:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  405ef2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  405ef6:	e7bb      	b.n	405e70 <__register_exitproc+0x20>
  405ef8:	6828      	ldr	r0, [r5, #0]
  405efa:	f7ff f875 	bl	404fe8 <__retarget_lock_release_recursive>
  405efe:	f04f 30ff 	mov.w	r0, #4294967295
  405f02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405f06:	bf00      	nop
  405f08:	20400440 	.word	0x20400440
  405f0c:	00407118 	.word	0x00407118
  405f10:	00000000 	.word	0x00000000

00405f14 <_calloc_r>:
  405f14:	b510      	push	{r4, lr}
  405f16:	fb02 f101 	mul.w	r1, r2, r1
  405f1a:	f7ff f867 	bl	404fec <_malloc_r>
  405f1e:	4604      	mov	r4, r0
  405f20:	b1d8      	cbz	r0, 405f5a <_calloc_r+0x46>
  405f22:	f850 2c04 	ldr.w	r2, [r0, #-4]
  405f26:	f022 0203 	bic.w	r2, r2, #3
  405f2a:	3a04      	subs	r2, #4
  405f2c:	2a24      	cmp	r2, #36	; 0x24
  405f2e:	d818      	bhi.n	405f62 <_calloc_r+0x4e>
  405f30:	2a13      	cmp	r2, #19
  405f32:	d914      	bls.n	405f5e <_calloc_r+0x4a>
  405f34:	2300      	movs	r3, #0
  405f36:	2a1b      	cmp	r2, #27
  405f38:	6003      	str	r3, [r0, #0]
  405f3a:	6043      	str	r3, [r0, #4]
  405f3c:	d916      	bls.n	405f6c <_calloc_r+0x58>
  405f3e:	2a24      	cmp	r2, #36	; 0x24
  405f40:	6083      	str	r3, [r0, #8]
  405f42:	60c3      	str	r3, [r0, #12]
  405f44:	bf11      	iteee	ne
  405f46:	f100 0210 	addne.w	r2, r0, #16
  405f4a:	6103      	streq	r3, [r0, #16]
  405f4c:	6143      	streq	r3, [r0, #20]
  405f4e:	f100 0218 	addeq.w	r2, r0, #24
  405f52:	2300      	movs	r3, #0
  405f54:	6013      	str	r3, [r2, #0]
  405f56:	6053      	str	r3, [r2, #4]
  405f58:	6093      	str	r3, [r2, #8]
  405f5a:	4620      	mov	r0, r4
  405f5c:	bd10      	pop	{r4, pc}
  405f5e:	4602      	mov	r2, r0
  405f60:	e7f7      	b.n	405f52 <_calloc_r+0x3e>
  405f62:	2100      	movs	r1, #0
  405f64:	f7fc fcf4 	bl	402950 <memset>
  405f68:	4620      	mov	r0, r4
  405f6a:	bd10      	pop	{r4, pc}
  405f6c:	f100 0208 	add.w	r2, r0, #8
  405f70:	e7ef      	b.n	405f52 <_calloc_r+0x3e>
  405f72:	bf00      	nop

00405f74 <_malloc_trim_r>:
  405f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405f76:	4f24      	ldr	r7, [pc, #144]	; (406008 <_malloc_trim_r+0x94>)
  405f78:	460c      	mov	r4, r1
  405f7a:	4606      	mov	r6, r0
  405f7c:	f7ff fbd2 	bl	405724 <__malloc_lock>
  405f80:	68bb      	ldr	r3, [r7, #8]
  405f82:	685d      	ldr	r5, [r3, #4]
  405f84:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  405f88:	310f      	adds	r1, #15
  405f8a:	f025 0503 	bic.w	r5, r5, #3
  405f8e:	4429      	add	r1, r5
  405f90:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  405f94:	f021 010f 	bic.w	r1, r1, #15
  405f98:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  405f9c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  405fa0:	db07      	blt.n	405fb2 <_malloc_trim_r+0x3e>
  405fa2:	2100      	movs	r1, #0
  405fa4:	4630      	mov	r0, r6
  405fa6:	f7ff fec3 	bl	405d30 <_sbrk_r>
  405faa:	68bb      	ldr	r3, [r7, #8]
  405fac:	442b      	add	r3, r5
  405fae:	4298      	cmp	r0, r3
  405fb0:	d004      	beq.n	405fbc <_malloc_trim_r+0x48>
  405fb2:	4630      	mov	r0, r6
  405fb4:	f7ff fbbc 	bl	405730 <__malloc_unlock>
  405fb8:	2000      	movs	r0, #0
  405fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405fbc:	4261      	negs	r1, r4
  405fbe:	4630      	mov	r0, r6
  405fc0:	f7ff feb6 	bl	405d30 <_sbrk_r>
  405fc4:	3001      	adds	r0, #1
  405fc6:	d00d      	beq.n	405fe4 <_malloc_trim_r+0x70>
  405fc8:	4b10      	ldr	r3, [pc, #64]	; (40600c <_malloc_trim_r+0x98>)
  405fca:	68ba      	ldr	r2, [r7, #8]
  405fcc:	6819      	ldr	r1, [r3, #0]
  405fce:	1b2d      	subs	r5, r5, r4
  405fd0:	f045 0501 	orr.w	r5, r5, #1
  405fd4:	4630      	mov	r0, r6
  405fd6:	1b09      	subs	r1, r1, r4
  405fd8:	6055      	str	r5, [r2, #4]
  405fda:	6019      	str	r1, [r3, #0]
  405fdc:	f7ff fba8 	bl	405730 <__malloc_unlock>
  405fe0:	2001      	movs	r0, #1
  405fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405fe4:	2100      	movs	r1, #0
  405fe6:	4630      	mov	r0, r6
  405fe8:	f7ff fea2 	bl	405d30 <_sbrk_r>
  405fec:	68ba      	ldr	r2, [r7, #8]
  405fee:	1a83      	subs	r3, r0, r2
  405ff0:	2b0f      	cmp	r3, #15
  405ff2:	ddde      	ble.n	405fb2 <_malloc_trim_r+0x3e>
  405ff4:	4c06      	ldr	r4, [pc, #24]	; (406010 <_malloc_trim_r+0x9c>)
  405ff6:	4905      	ldr	r1, [pc, #20]	; (40600c <_malloc_trim_r+0x98>)
  405ff8:	6824      	ldr	r4, [r4, #0]
  405ffa:	f043 0301 	orr.w	r3, r3, #1
  405ffe:	1b00      	subs	r0, r0, r4
  406000:	6053      	str	r3, [r2, #4]
  406002:	6008      	str	r0, [r1, #0]
  406004:	e7d5      	b.n	405fb2 <_malloc_trim_r+0x3e>
  406006:	bf00      	nop
  406008:	20400444 	.word	0x20400444
  40600c:	20400a74 	.word	0x20400a74
  406010:	2040084c 	.word	0x2040084c

00406014 <_free_r>:
  406014:	2900      	cmp	r1, #0
  406016:	d044      	beq.n	4060a2 <_free_r+0x8e>
  406018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40601c:	460d      	mov	r5, r1
  40601e:	4680      	mov	r8, r0
  406020:	f7ff fb80 	bl	405724 <__malloc_lock>
  406024:	f855 7c04 	ldr.w	r7, [r5, #-4]
  406028:	4969      	ldr	r1, [pc, #420]	; (4061d0 <_free_r+0x1bc>)
  40602a:	f027 0301 	bic.w	r3, r7, #1
  40602e:	f1a5 0408 	sub.w	r4, r5, #8
  406032:	18e2      	adds	r2, r4, r3
  406034:	688e      	ldr	r6, [r1, #8]
  406036:	6850      	ldr	r0, [r2, #4]
  406038:	42b2      	cmp	r2, r6
  40603a:	f020 0003 	bic.w	r0, r0, #3
  40603e:	d05e      	beq.n	4060fe <_free_r+0xea>
  406040:	07fe      	lsls	r6, r7, #31
  406042:	6050      	str	r0, [r2, #4]
  406044:	d40b      	bmi.n	40605e <_free_r+0x4a>
  406046:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40604a:	1be4      	subs	r4, r4, r7
  40604c:	f101 0e08 	add.w	lr, r1, #8
  406050:	68a5      	ldr	r5, [r4, #8]
  406052:	4575      	cmp	r5, lr
  406054:	443b      	add	r3, r7
  406056:	d06d      	beq.n	406134 <_free_r+0x120>
  406058:	68e7      	ldr	r7, [r4, #12]
  40605a:	60ef      	str	r7, [r5, #12]
  40605c:	60bd      	str	r5, [r7, #8]
  40605e:	1815      	adds	r5, r2, r0
  406060:	686d      	ldr	r5, [r5, #4]
  406062:	07ed      	lsls	r5, r5, #31
  406064:	d53e      	bpl.n	4060e4 <_free_r+0xd0>
  406066:	f043 0201 	orr.w	r2, r3, #1
  40606a:	6062      	str	r2, [r4, #4]
  40606c:	50e3      	str	r3, [r4, r3]
  40606e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406072:	d217      	bcs.n	4060a4 <_free_r+0x90>
  406074:	08db      	lsrs	r3, r3, #3
  406076:	1c58      	adds	r0, r3, #1
  406078:	109a      	asrs	r2, r3, #2
  40607a:	684d      	ldr	r5, [r1, #4]
  40607c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  406080:	60a7      	str	r7, [r4, #8]
  406082:	2301      	movs	r3, #1
  406084:	4093      	lsls	r3, r2
  406086:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40608a:	432b      	orrs	r3, r5
  40608c:	3a08      	subs	r2, #8
  40608e:	60e2      	str	r2, [r4, #12]
  406090:	604b      	str	r3, [r1, #4]
  406092:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  406096:	60fc      	str	r4, [r7, #12]
  406098:	4640      	mov	r0, r8
  40609a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40609e:	f7ff bb47 	b.w	405730 <__malloc_unlock>
  4060a2:	4770      	bx	lr
  4060a4:	0a5a      	lsrs	r2, r3, #9
  4060a6:	2a04      	cmp	r2, #4
  4060a8:	d852      	bhi.n	406150 <_free_r+0x13c>
  4060aa:	099a      	lsrs	r2, r3, #6
  4060ac:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4060b0:	00ff      	lsls	r7, r7, #3
  4060b2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4060b6:	19c8      	adds	r0, r1, r7
  4060b8:	59ca      	ldr	r2, [r1, r7]
  4060ba:	3808      	subs	r0, #8
  4060bc:	4290      	cmp	r0, r2
  4060be:	d04f      	beq.n	406160 <_free_r+0x14c>
  4060c0:	6851      	ldr	r1, [r2, #4]
  4060c2:	f021 0103 	bic.w	r1, r1, #3
  4060c6:	428b      	cmp	r3, r1
  4060c8:	d232      	bcs.n	406130 <_free_r+0x11c>
  4060ca:	6892      	ldr	r2, [r2, #8]
  4060cc:	4290      	cmp	r0, r2
  4060ce:	d1f7      	bne.n	4060c0 <_free_r+0xac>
  4060d0:	68c3      	ldr	r3, [r0, #12]
  4060d2:	60a0      	str	r0, [r4, #8]
  4060d4:	60e3      	str	r3, [r4, #12]
  4060d6:	609c      	str	r4, [r3, #8]
  4060d8:	60c4      	str	r4, [r0, #12]
  4060da:	4640      	mov	r0, r8
  4060dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4060e0:	f7ff bb26 	b.w	405730 <__malloc_unlock>
  4060e4:	6895      	ldr	r5, [r2, #8]
  4060e6:	4f3b      	ldr	r7, [pc, #236]	; (4061d4 <_free_r+0x1c0>)
  4060e8:	42bd      	cmp	r5, r7
  4060ea:	4403      	add	r3, r0
  4060ec:	d040      	beq.n	406170 <_free_r+0x15c>
  4060ee:	68d0      	ldr	r0, [r2, #12]
  4060f0:	60e8      	str	r0, [r5, #12]
  4060f2:	f043 0201 	orr.w	r2, r3, #1
  4060f6:	6085      	str	r5, [r0, #8]
  4060f8:	6062      	str	r2, [r4, #4]
  4060fa:	50e3      	str	r3, [r4, r3]
  4060fc:	e7b7      	b.n	40606e <_free_r+0x5a>
  4060fe:	07ff      	lsls	r7, r7, #31
  406100:	4403      	add	r3, r0
  406102:	d407      	bmi.n	406114 <_free_r+0x100>
  406104:	f855 2c08 	ldr.w	r2, [r5, #-8]
  406108:	1aa4      	subs	r4, r4, r2
  40610a:	4413      	add	r3, r2
  40610c:	68a0      	ldr	r0, [r4, #8]
  40610e:	68e2      	ldr	r2, [r4, #12]
  406110:	60c2      	str	r2, [r0, #12]
  406112:	6090      	str	r0, [r2, #8]
  406114:	4a30      	ldr	r2, [pc, #192]	; (4061d8 <_free_r+0x1c4>)
  406116:	6812      	ldr	r2, [r2, #0]
  406118:	f043 0001 	orr.w	r0, r3, #1
  40611c:	4293      	cmp	r3, r2
  40611e:	6060      	str	r0, [r4, #4]
  406120:	608c      	str	r4, [r1, #8]
  406122:	d3b9      	bcc.n	406098 <_free_r+0x84>
  406124:	4b2d      	ldr	r3, [pc, #180]	; (4061dc <_free_r+0x1c8>)
  406126:	4640      	mov	r0, r8
  406128:	6819      	ldr	r1, [r3, #0]
  40612a:	f7ff ff23 	bl	405f74 <_malloc_trim_r>
  40612e:	e7b3      	b.n	406098 <_free_r+0x84>
  406130:	4610      	mov	r0, r2
  406132:	e7cd      	b.n	4060d0 <_free_r+0xbc>
  406134:	1811      	adds	r1, r2, r0
  406136:	6849      	ldr	r1, [r1, #4]
  406138:	07c9      	lsls	r1, r1, #31
  40613a:	d444      	bmi.n	4061c6 <_free_r+0x1b2>
  40613c:	6891      	ldr	r1, [r2, #8]
  40613e:	68d2      	ldr	r2, [r2, #12]
  406140:	60ca      	str	r2, [r1, #12]
  406142:	4403      	add	r3, r0
  406144:	f043 0001 	orr.w	r0, r3, #1
  406148:	6091      	str	r1, [r2, #8]
  40614a:	6060      	str	r0, [r4, #4]
  40614c:	50e3      	str	r3, [r4, r3]
  40614e:	e7a3      	b.n	406098 <_free_r+0x84>
  406150:	2a14      	cmp	r2, #20
  406152:	d816      	bhi.n	406182 <_free_r+0x16e>
  406154:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  406158:	00ff      	lsls	r7, r7, #3
  40615a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40615e:	e7aa      	b.n	4060b6 <_free_r+0xa2>
  406160:	10aa      	asrs	r2, r5, #2
  406162:	2301      	movs	r3, #1
  406164:	684d      	ldr	r5, [r1, #4]
  406166:	4093      	lsls	r3, r2
  406168:	432b      	orrs	r3, r5
  40616a:	604b      	str	r3, [r1, #4]
  40616c:	4603      	mov	r3, r0
  40616e:	e7b0      	b.n	4060d2 <_free_r+0xbe>
  406170:	f043 0201 	orr.w	r2, r3, #1
  406174:	614c      	str	r4, [r1, #20]
  406176:	610c      	str	r4, [r1, #16]
  406178:	60e5      	str	r5, [r4, #12]
  40617a:	60a5      	str	r5, [r4, #8]
  40617c:	6062      	str	r2, [r4, #4]
  40617e:	50e3      	str	r3, [r4, r3]
  406180:	e78a      	b.n	406098 <_free_r+0x84>
  406182:	2a54      	cmp	r2, #84	; 0x54
  406184:	d806      	bhi.n	406194 <_free_r+0x180>
  406186:	0b1a      	lsrs	r2, r3, #12
  406188:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40618c:	00ff      	lsls	r7, r7, #3
  40618e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  406192:	e790      	b.n	4060b6 <_free_r+0xa2>
  406194:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406198:	d806      	bhi.n	4061a8 <_free_r+0x194>
  40619a:	0bda      	lsrs	r2, r3, #15
  40619c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4061a0:	00ff      	lsls	r7, r7, #3
  4061a2:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4061a6:	e786      	b.n	4060b6 <_free_r+0xa2>
  4061a8:	f240 5054 	movw	r0, #1364	; 0x554
  4061ac:	4282      	cmp	r2, r0
  4061ae:	d806      	bhi.n	4061be <_free_r+0x1aa>
  4061b0:	0c9a      	lsrs	r2, r3, #18
  4061b2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4061b6:	00ff      	lsls	r7, r7, #3
  4061b8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4061bc:	e77b      	b.n	4060b6 <_free_r+0xa2>
  4061be:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4061c2:	257e      	movs	r5, #126	; 0x7e
  4061c4:	e777      	b.n	4060b6 <_free_r+0xa2>
  4061c6:	f043 0101 	orr.w	r1, r3, #1
  4061ca:	6061      	str	r1, [r4, #4]
  4061cc:	6013      	str	r3, [r2, #0]
  4061ce:	e763      	b.n	406098 <_free_r+0x84>
  4061d0:	20400444 	.word	0x20400444
  4061d4:	2040044c 	.word	0x2040044c
  4061d8:	20400850 	.word	0x20400850
  4061dc:	20400aa4 	.word	0x20400aa4

004061e0 <__ascii_mbtowc>:
  4061e0:	b082      	sub	sp, #8
  4061e2:	b149      	cbz	r1, 4061f8 <__ascii_mbtowc+0x18>
  4061e4:	b15a      	cbz	r2, 4061fe <__ascii_mbtowc+0x1e>
  4061e6:	b16b      	cbz	r3, 406204 <__ascii_mbtowc+0x24>
  4061e8:	7813      	ldrb	r3, [r2, #0]
  4061ea:	600b      	str	r3, [r1, #0]
  4061ec:	7812      	ldrb	r2, [r2, #0]
  4061ee:	1c10      	adds	r0, r2, #0
  4061f0:	bf18      	it	ne
  4061f2:	2001      	movne	r0, #1
  4061f4:	b002      	add	sp, #8
  4061f6:	4770      	bx	lr
  4061f8:	a901      	add	r1, sp, #4
  4061fa:	2a00      	cmp	r2, #0
  4061fc:	d1f3      	bne.n	4061e6 <__ascii_mbtowc+0x6>
  4061fe:	4610      	mov	r0, r2
  406200:	b002      	add	sp, #8
  406202:	4770      	bx	lr
  406204:	f06f 0001 	mvn.w	r0, #1
  406208:	e7f4      	b.n	4061f4 <__ascii_mbtowc+0x14>
  40620a:	bf00      	nop

0040620c <memmove>:
  40620c:	4288      	cmp	r0, r1
  40620e:	b5f0      	push	{r4, r5, r6, r7, lr}
  406210:	d90d      	bls.n	40622e <memmove+0x22>
  406212:	188b      	adds	r3, r1, r2
  406214:	4298      	cmp	r0, r3
  406216:	d20a      	bcs.n	40622e <memmove+0x22>
  406218:	1884      	adds	r4, r0, r2
  40621a:	2a00      	cmp	r2, #0
  40621c:	d051      	beq.n	4062c2 <memmove+0xb6>
  40621e:	4622      	mov	r2, r4
  406220:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  406224:	f802 4d01 	strb.w	r4, [r2, #-1]!
  406228:	4299      	cmp	r1, r3
  40622a:	d1f9      	bne.n	406220 <memmove+0x14>
  40622c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40622e:	2a0f      	cmp	r2, #15
  406230:	d948      	bls.n	4062c4 <memmove+0xb8>
  406232:	ea41 0300 	orr.w	r3, r1, r0
  406236:	079b      	lsls	r3, r3, #30
  406238:	d146      	bne.n	4062c8 <memmove+0xbc>
  40623a:	f100 0410 	add.w	r4, r0, #16
  40623e:	f101 0310 	add.w	r3, r1, #16
  406242:	4615      	mov	r5, r2
  406244:	f853 6c10 	ldr.w	r6, [r3, #-16]
  406248:	f844 6c10 	str.w	r6, [r4, #-16]
  40624c:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  406250:	f844 6c0c 	str.w	r6, [r4, #-12]
  406254:	f853 6c08 	ldr.w	r6, [r3, #-8]
  406258:	f844 6c08 	str.w	r6, [r4, #-8]
  40625c:	3d10      	subs	r5, #16
  40625e:	f853 6c04 	ldr.w	r6, [r3, #-4]
  406262:	f844 6c04 	str.w	r6, [r4, #-4]
  406266:	2d0f      	cmp	r5, #15
  406268:	f103 0310 	add.w	r3, r3, #16
  40626c:	f104 0410 	add.w	r4, r4, #16
  406270:	d8e8      	bhi.n	406244 <memmove+0x38>
  406272:	f1a2 0310 	sub.w	r3, r2, #16
  406276:	f023 030f 	bic.w	r3, r3, #15
  40627a:	f002 0e0f 	and.w	lr, r2, #15
  40627e:	3310      	adds	r3, #16
  406280:	f1be 0f03 	cmp.w	lr, #3
  406284:	4419      	add	r1, r3
  406286:	4403      	add	r3, r0
  406288:	d921      	bls.n	4062ce <memmove+0xc2>
  40628a:	1f1e      	subs	r6, r3, #4
  40628c:	460d      	mov	r5, r1
  40628e:	4674      	mov	r4, lr
  406290:	3c04      	subs	r4, #4
  406292:	f855 7b04 	ldr.w	r7, [r5], #4
  406296:	f846 7f04 	str.w	r7, [r6, #4]!
  40629a:	2c03      	cmp	r4, #3
  40629c:	d8f8      	bhi.n	406290 <memmove+0x84>
  40629e:	f1ae 0404 	sub.w	r4, lr, #4
  4062a2:	f024 0403 	bic.w	r4, r4, #3
  4062a6:	3404      	adds	r4, #4
  4062a8:	4421      	add	r1, r4
  4062aa:	4423      	add	r3, r4
  4062ac:	f002 0203 	and.w	r2, r2, #3
  4062b0:	b162      	cbz	r2, 4062cc <memmove+0xc0>
  4062b2:	3b01      	subs	r3, #1
  4062b4:	440a      	add	r2, r1
  4062b6:	f811 4b01 	ldrb.w	r4, [r1], #1
  4062ba:	f803 4f01 	strb.w	r4, [r3, #1]!
  4062be:	428a      	cmp	r2, r1
  4062c0:	d1f9      	bne.n	4062b6 <memmove+0xaa>
  4062c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4062c4:	4603      	mov	r3, r0
  4062c6:	e7f3      	b.n	4062b0 <memmove+0xa4>
  4062c8:	4603      	mov	r3, r0
  4062ca:	e7f2      	b.n	4062b2 <memmove+0xa6>
  4062cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4062ce:	4672      	mov	r2, lr
  4062d0:	e7ee      	b.n	4062b0 <memmove+0xa4>
  4062d2:	bf00      	nop

004062d4 <_realloc_r>:
  4062d4:	2900      	cmp	r1, #0
  4062d6:	f000 8095 	beq.w	406404 <_realloc_r+0x130>
  4062da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4062de:	460d      	mov	r5, r1
  4062e0:	4616      	mov	r6, r2
  4062e2:	b083      	sub	sp, #12
  4062e4:	4680      	mov	r8, r0
  4062e6:	f106 070b 	add.w	r7, r6, #11
  4062ea:	f7ff fa1b 	bl	405724 <__malloc_lock>
  4062ee:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4062f2:	2f16      	cmp	r7, #22
  4062f4:	f02e 0403 	bic.w	r4, lr, #3
  4062f8:	f1a5 0908 	sub.w	r9, r5, #8
  4062fc:	d83c      	bhi.n	406378 <_realloc_r+0xa4>
  4062fe:	2210      	movs	r2, #16
  406300:	4617      	mov	r7, r2
  406302:	42be      	cmp	r6, r7
  406304:	d83d      	bhi.n	406382 <_realloc_r+0xae>
  406306:	4294      	cmp	r4, r2
  406308:	da43      	bge.n	406392 <_realloc_r+0xbe>
  40630a:	4bc4      	ldr	r3, [pc, #784]	; (40661c <_realloc_r+0x348>)
  40630c:	6899      	ldr	r1, [r3, #8]
  40630e:	eb09 0004 	add.w	r0, r9, r4
  406312:	4288      	cmp	r0, r1
  406314:	f000 80b4 	beq.w	406480 <_realloc_r+0x1ac>
  406318:	6843      	ldr	r3, [r0, #4]
  40631a:	f023 0101 	bic.w	r1, r3, #1
  40631e:	4401      	add	r1, r0
  406320:	6849      	ldr	r1, [r1, #4]
  406322:	07c9      	lsls	r1, r1, #31
  406324:	d54c      	bpl.n	4063c0 <_realloc_r+0xec>
  406326:	f01e 0f01 	tst.w	lr, #1
  40632a:	f000 809b 	beq.w	406464 <_realloc_r+0x190>
  40632e:	4631      	mov	r1, r6
  406330:	4640      	mov	r0, r8
  406332:	f7fe fe5b 	bl	404fec <_malloc_r>
  406336:	4606      	mov	r6, r0
  406338:	2800      	cmp	r0, #0
  40633a:	d03a      	beq.n	4063b2 <_realloc_r+0xde>
  40633c:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406340:	f023 0301 	bic.w	r3, r3, #1
  406344:	444b      	add	r3, r9
  406346:	f1a0 0208 	sub.w	r2, r0, #8
  40634a:	429a      	cmp	r2, r3
  40634c:	f000 8121 	beq.w	406592 <_realloc_r+0x2be>
  406350:	1f22      	subs	r2, r4, #4
  406352:	2a24      	cmp	r2, #36	; 0x24
  406354:	f200 8107 	bhi.w	406566 <_realloc_r+0x292>
  406358:	2a13      	cmp	r2, #19
  40635a:	f200 80db 	bhi.w	406514 <_realloc_r+0x240>
  40635e:	4603      	mov	r3, r0
  406360:	462a      	mov	r2, r5
  406362:	6811      	ldr	r1, [r2, #0]
  406364:	6019      	str	r1, [r3, #0]
  406366:	6851      	ldr	r1, [r2, #4]
  406368:	6059      	str	r1, [r3, #4]
  40636a:	6892      	ldr	r2, [r2, #8]
  40636c:	609a      	str	r2, [r3, #8]
  40636e:	4629      	mov	r1, r5
  406370:	4640      	mov	r0, r8
  406372:	f7ff fe4f 	bl	406014 <_free_r>
  406376:	e01c      	b.n	4063b2 <_realloc_r+0xde>
  406378:	f027 0707 	bic.w	r7, r7, #7
  40637c:	2f00      	cmp	r7, #0
  40637e:	463a      	mov	r2, r7
  406380:	dabf      	bge.n	406302 <_realloc_r+0x2e>
  406382:	2600      	movs	r6, #0
  406384:	230c      	movs	r3, #12
  406386:	4630      	mov	r0, r6
  406388:	f8c8 3000 	str.w	r3, [r8]
  40638c:	b003      	add	sp, #12
  40638e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406392:	462e      	mov	r6, r5
  406394:	1be3      	subs	r3, r4, r7
  406396:	2b0f      	cmp	r3, #15
  406398:	d81e      	bhi.n	4063d8 <_realloc_r+0x104>
  40639a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40639e:	f003 0301 	and.w	r3, r3, #1
  4063a2:	4323      	orrs	r3, r4
  4063a4:	444c      	add	r4, r9
  4063a6:	f8c9 3004 	str.w	r3, [r9, #4]
  4063aa:	6863      	ldr	r3, [r4, #4]
  4063ac:	f043 0301 	orr.w	r3, r3, #1
  4063b0:	6063      	str	r3, [r4, #4]
  4063b2:	4640      	mov	r0, r8
  4063b4:	f7ff f9bc 	bl	405730 <__malloc_unlock>
  4063b8:	4630      	mov	r0, r6
  4063ba:	b003      	add	sp, #12
  4063bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4063c0:	f023 0303 	bic.w	r3, r3, #3
  4063c4:	18e1      	adds	r1, r4, r3
  4063c6:	4291      	cmp	r1, r2
  4063c8:	db1f      	blt.n	40640a <_realloc_r+0x136>
  4063ca:	68c3      	ldr	r3, [r0, #12]
  4063cc:	6882      	ldr	r2, [r0, #8]
  4063ce:	462e      	mov	r6, r5
  4063d0:	60d3      	str	r3, [r2, #12]
  4063d2:	460c      	mov	r4, r1
  4063d4:	609a      	str	r2, [r3, #8]
  4063d6:	e7dd      	b.n	406394 <_realloc_r+0xc0>
  4063d8:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4063dc:	eb09 0107 	add.w	r1, r9, r7
  4063e0:	f002 0201 	and.w	r2, r2, #1
  4063e4:	444c      	add	r4, r9
  4063e6:	f043 0301 	orr.w	r3, r3, #1
  4063ea:	4317      	orrs	r7, r2
  4063ec:	f8c9 7004 	str.w	r7, [r9, #4]
  4063f0:	604b      	str	r3, [r1, #4]
  4063f2:	6863      	ldr	r3, [r4, #4]
  4063f4:	f043 0301 	orr.w	r3, r3, #1
  4063f8:	3108      	adds	r1, #8
  4063fa:	6063      	str	r3, [r4, #4]
  4063fc:	4640      	mov	r0, r8
  4063fe:	f7ff fe09 	bl	406014 <_free_r>
  406402:	e7d6      	b.n	4063b2 <_realloc_r+0xde>
  406404:	4611      	mov	r1, r2
  406406:	f7fe bdf1 	b.w	404fec <_malloc_r>
  40640a:	f01e 0f01 	tst.w	lr, #1
  40640e:	d18e      	bne.n	40632e <_realloc_r+0x5a>
  406410:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406414:	eba9 0a01 	sub.w	sl, r9, r1
  406418:	f8da 1004 	ldr.w	r1, [sl, #4]
  40641c:	f021 0103 	bic.w	r1, r1, #3
  406420:	440b      	add	r3, r1
  406422:	4423      	add	r3, r4
  406424:	4293      	cmp	r3, r2
  406426:	db25      	blt.n	406474 <_realloc_r+0x1a0>
  406428:	68c2      	ldr	r2, [r0, #12]
  40642a:	6881      	ldr	r1, [r0, #8]
  40642c:	4656      	mov	r6, sl
  40642e:	60ca      	str	r2, [r1, #12]
  406430:	6091      	str	r1, [r2, #8]
  406432:	f8da 100c 	ldr.w	r1, [sl, #12]
  406436:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40643a:	1f22      	subs	r2, r4, #4
  40643c:	2a24      	cmp	r2, #36	; 0x24
  40643e:	60c1      	str	r1, [r0, #12]
  406440:	6088      	str	r0, [r1, #8]
  406442:	f200 8094 	bhi.w	40656e <_realloc_r+0x29a>
  406446:	2a13      	cmp	r2, #19
  406448:	d96f      	bls.n	40652a <_realloc_r+0x256>
  40644a:	6829      	ldr	r1, [r5, #0]
  40644c:	f8ca 1008 	str.w	r1, [sl, #8]
  406450:	6869      	ldr	r1, [r5, #4]
  406452:	f8ca 100c 	str.w	r1, [sl, #12]
  406456:	2a1b      	cmp	r2, #27
  406458:	f200 80a2 	bhi.w	4065a0 <_realloc_r+0x2cc>
  40645c:	3508      	adds	r5, #8
  40645e:	f10a 0210 	add.w	r2, sl, #16
  406462:	e063      	b.n	40652c <_realloc_r+0x258>
  406464:	f855 3c08 	ldr.w	r3, [r5, #-8]
  406468:	eba9 0a03 	sub.w	sl, r9, r3
  40646c:	f8da 1004 	ldr.w	r1, [sl, #4]
  406470:	f021 0103 	bic.w	r1, r1, #3
  406474:	1863      	adds	r3, r4, r1
  406476:	4293      	cmp	r3, r2
  406478:	f6ff af59 	blt.w	40632e <_realloc_r+0x5a>
  40647c:	4656      	mov	r6, sl
  40647e:	e7d8      	b.n	406432 <_realloc_r+0x15e>
  406480:	6841      	ldr	r1, [r0, #4]
  406482:	f021 0b03 	bic.w	fp, r1, #3
  406486:	44a3      	add	fp, r4
  406488:	f107 0010 	add.w	r0, r7, #16
  40648c:	4583      	cmp	fp, r0
  40648e:	da56      	bge.n	40653e <_realloc_r+0x26a>
  406490:	f01e 0f01 	tst.w	lr, #1
  406494:	f47f af4b 	bne.w	40632e <_realloc_r+0x5a>
  406498:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40649c:	eba9 0a01 	sub.w	sl, r9, r1
  4064a0:	f8da 1004 	ldr.w	r1, [sl, #4]
  4064a4:	f021 0103 	bic.w	r1, r1, #3
  4064a8:	448b      	add	fp, r1
  4064aa:	4558      	cmp	r0, fp
  4064ac:	dce2      	bgt.n	406474 <_realloc_r+0x1a0>
  4064ae:	4656      	mov	r6, sl
  4064b0:	f8da 100c 	ldr.w	r1, [sl, #12]
  4064b4:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4064b8:	1f22      	subs	r2, r4, #4
  4064ba:	2a24      	cmp	r2, #36	; 0x24
  4064bc:	60c1      	str	r1, [r0, #12]
  4064be:	6088      	str	r0, [r1, #8]
  4064c0:	f200 808f 	bhi.w	4065e2 <_realloc_r+0x30e>
  4064c4:	2a13      	cmp	r2, #19
  4064c6:	f240 808a 	bls.w	4065de <_realloc_r+0x30a>
  4064ca:	6829      	ldr	r1, [r5, #0]
  4064cc:	f8ca 1008 	str.w	r1, [sl, #8]
  4064d0:	6869      	ldr	r1, [r5, #4]
  4064d2:	f8ca 100c 	str.w	r1, [sl, #12]
  4064d6:	2a1b      	cmp	r2, #27
  4064d8:	f200 808a 	bhi.w	4065f0 <_realloc_r+0x31c>
  4064dc:	3508      	adds	r5, #8
  4064de:	f10a 0210 	add.w	r2, sl, #16
  4064e2:	6829      	ldr	r1, [r5, #0]
  4064e4:	6011      	str	r1, [r2, #0]
  4064e6:	6869      	ldr	r1, [r5, #4]
  4064e8:	6051      	str	r1, [r2, #4]
  4064ea:	68a9      	ldr	r1, [r5, #8]
  4064ec:	6091      	str	r1, [r2, #8]
  4064ee:	eb0a 0107 	add.w	r1, sl, r7
  4064f2:	ebab 0207 	sub.w	r2, fp, r7
  4064f6:	f042 0201 	orr.w	r2, r2, #1
  4064fa:	6099      	str	r1, [r3, #8]
  4064fc:	604a      	str	r2, [r1, #4]
  4064fe:	f8da 3004 	ldr.w	r3, [sl, #4]
  406502:	f003 0301 	and.w	r3, r3, #1
  406506:	431f      	orrs	r7, r3
  406508:	4640      	mov	r0, r8
  40650a:	f8ca 7004 	str.w	r7, [sl, #4]
  40650e:	f7ff f90f 	bl	405730 <__malloc_unlock>
  406512:	e751      	b.n	4063b8 <_realloc_r+0xe4>
  406514:	682b      	ldr	r3, [r5, #0]
  406516:	6003      	str	r3, [r0, #0]
  406518:	686b      	ldr	r3, [r5, #4]
  40651a:	6043      	str	r3, [r0, #4]
  40651c:	2a1b      	cmp	r2, #27
  40651e:	d82d      	bhi.n	40657c <_realloc_r+0x2a8>
  406520:	f100 0308 	add.w	r3, r0, #8
  406524:	f105 0208 	add.w	r2, r5, #8
  406528:	e71b      	b.n	406362 <_realloc_r+0x8e>
  40652a:	4632      	mov	r2, r6
  40652c:	6829      	ldr	r1, [r5, #0]
  40652e:	6011      	str	r1, [r2, #0]
  406530:	6869      	ldr	r1, [r5, #4]
  406532:	6051      	str	r1, [r2, #4]
  406534:	68a9      	ldr	r1, [r5, #8]
  406536:	6091      	str	r1, [r2, #8]
  406538:	461c      	mov	r4, r3
  40653a:	46d1      	mov	r9, sl
  40653c:	e72a      	b.n	406394 <_realloc_r+0xc0>
  40653e:	eb09 0107 	add.w	r1, r9, r7
  406542:	ebab 0b07 	sub.w	fp, fp, r7
  406546:	f04b 0201 	orr.w	r2, fp, #1
  40654a:	6099      	str	r1, [r3, #8]
  40654c:	604a      	str	r2, [r1, #4]
  40654e:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406552:	f003 0301 	and.w	r3, r3, #1
  406556:	431f      	orrs	r7, r3
  406558:	4640      	mov	r0, r8
  40655a:	f845 7c04 	str.w	r7, [r5, #-4]
  40655e:	f7ff f8e7 	bl	405730 <__malloc_unlock>
  406562:	462e      	mov	r6, r5
  406564:	e728      	b.n	4063b8 <_realloc_r+0xe4>
  406566:	4629      	mov	r1, r5
  406568:	f7ff fe50 	bl	40620c <memmove>
  40656c:	e6ff      	b.n	40636e <_realloc_r+0x9a>
  40656e:	4629      	mov	r1, r5
  406570:	4630      	mov	r0, r6
  406572:	461c      	mov	r4, r3
  406574:	46d1      	mov	r9, sl
  406576:	f7ff fe49 	bl	40620c <memmove>
  40657a:	e70b      	b.n	406394 <_realloc_r+0xc0>
  40657c:	68ab      	ldr	r3, [r5, #8]
  40657e:	6083      	str	r3, [r0, #8]
  406580:	68eb      	ldr	r3, [r5, #12]
  406582:	60c3      	str	r3, [r0, #12]
  406584:	2a24      	cmp	r2, #36	; 0x24
  406586:	d017      	beq.n	4065b8 <_realloc_r+0x2e4>
  406588:	f100 0310 	add.w	r3, r0, #16
  40658c:	f105 0210 	add.w	r2, r5, #16
  406590:	e6e7      	b.n	406362 <_realloc_r+0x8e>
  406592:	f850 3c04 	ldr.w	r3, [r0, #-4]
  406596:	f023 0303 	bic.w	r3, r3, #3
  40659a:	441c      	add	r4, r3
  40659c:	462e      	mov	r6, r5
  40659e:	e6f9      	b.n	406394 <_realloc_r+0xc0>
  4065a0:	68a9      	ldr	r1, [r5, #8]
  4065a2:	f8ca 1010 	str.w	r1, [sl, #16]
  4065a6:	68e9      	ldr	r1, [r5, #12]
  4065a8:	f8ca 1014 	str.w	r1, [sl, #20]
  4065ac:	2a24      	cmp	r2, #36	; 0x24
  4065ae:	d00c      	beq.n	4065ca <_realloc_r+0x2f6>
  4065b0:	3510      	adds	r5, #16
  4065b2:	f10a 0218 	add.w	r2, sl, #24
  4065b6:	e7b9      	b.n	40652c <_realloc_r+0x258>
  4065b8:	692b      	ldr	r3, [r5, #16]
  4065ba:	6103      	str	r3, [r0, #16]
  4065bc:	696b      	ldr	r3, [r5, #20]
  4065be:	6143      	str	r3, [r0, #20]
  4065c0:	f105 0218 	add.w	r2, r5, #24
  4065c4:	f100 0318 	add.w	r3, r0, #24
  4065c8:	e6cb      	b.n	406362 <_realloc_r+0x8e>
  4065ca:	692a      	ldr	r2, [r5, #16]
  4065cc:	f8ca 2018 	str.w	r2, [sl, #24]
  4065d0:	696a      	ldr	r2, [r5, #20]
  4065d2:	f8ca 201c 	str.w	r2, [sl, #28]
  4065d6:	3518      	adds	r5, #24
  4065d8:	f10a 0220 	add.w	r2, sl, #32
  4065dc:	e7a6      	b.n	40652c <_realloc_r+0x258>
  4065de:	4632      	mov	r2, r6
  4065e0:	e77f      	b.n	4064e2 <_realloc_r+0x20e>
  4065e2:	4629      	mov	r1, r5
  4065e4:	4630      	mov	r0, r6
  4065e6:	9301      	str	r3, [sp, #4]
  4065e8:	f7ff fe10 	bl	40620c <memmove>
  4065ec:	9b01      	ldr	r3, [sp, #4]
  4065ee:	e77e      	b.n	4064ee <_realloc_r+0x21a>
  4065f0:	68a9      	ldr	r1, [r5, #8]
  4065f2:	f8ca 1010 	str.w	r1, [sl, #16]
  4065f6:	68e9      	ldr	r1, [r5, #12]
  4065f8:	f8ca 1014 	str.w	r1, [sl, #20]
  4065fc:	2a24      	cmp	r2, #36	; 0x24
  4065fe:	d003      	beq.n	406608 <_realloc_r+0x334>
  406600:	3510      	adds	r5, #16
  406602:	f10a 0218 	add.w	r2, sl, #24
  406606:	e76c      	b.n	4064e2 <_realloc_r+0x20e>
  406608:	692a      	ldr	r2, [r5, #16]
  40660a:	f8ca 2018 	str.w	r2, [sl, #24]
  40660e:	696a      	ldr	r2, [r5, #20]
  406610:	f8ca 201c 	str.w	r2, [sl, #28]
  406614:	3518      	adds	r5, #24
  406616:	f10a 0220 	add.w	r2, sl, #32
  40661a:	e762      	b.n	4064e2 <_realloc_r+0x20e>
  40661c:	20400444 	.word	0x20400444

00406620 <__ascii_wctomb>:
  406620:	b121      	cbz	r1, 40662c <__ascii_wctomb+0xc>
  406622:	2aff      	cmp	r2, #255	; 0xff
  406624:	d804      	bhi.n	406630 <__ascii_wctomb+0x10>
  406626:	700a      	strb	r2, [r1, #0]
  406628:	2001      	movs	r0, #1
  40662a:	4770      	bx	lr
  40662c:	4608      	mov	r0, r1
  40662e:	4770      	bx	lr
  406630:	238a      	movs	r3, #138	; 0x8a
  406632:	6003      	str	r3, [r0, #0]
  406634:	f04f 30ff 	mov.w	r0, #4294967295
  406638:	4770      	bx	lr
  40663a:	bf00      	nop

0040663c <__aeabi_drsub>:
  40663c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  406640:	e002      	b.n	406648 <__adddf3>
  406642:	bf00      	nop

00406644 <__aeabi_dsub>:
  406644:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00406648 <__adddf3>:
  406648:	b530      	push	{r4, r5, lr}
  40664a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40664e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  406652:	ea94 0f05 	teq	r4, r5
  406656:	bf08      	it	eq
  406658:	ea90 0f02 	teqeq	r0, r2
  40665c:	bf1f      	itttt	ne
  40665e:	ea54 0c00 	orrsne.w	ip, r4, r0
  406662:	ea55 0c02 	orrsne.w	ip, r5, r2
  406666:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40666a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40666e:	f000 80e2 	beq.w	406836 <__adddf3+0x1ee>
  406672:	ea4f 5454 	mov.w	r4, r4, lsr #21
  406676:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40667a:	bfb8      	it	lt
  40667c:	426d      	neglt	r5, r5
  40667e:	dd0c      	ble.n	40669a <__adddf3+0x52>
  406680:	442c      	add	r4, r5
  406682:	ea80 0202 	eor.w	r2, r0, r2
  406686:	ea81 0303 	eor.w	r3, r1, r3
  40668a:	ea82 0000 	eor.w	r0, r2, r0
  40668e:	ea83 0101 	eor.w	r1, r3, r1
  406692:	ea80 0202 	eor.w	r2, r0, r2
  406696:	ea81 0303 	eor.w	r3, r1, r3
  40669a:	2d36      	cmp	r5, #54	; 0x36
  40669c:	bf88      	it	hi
  40669e:	bd30      	pophi	{r4, r5, pc}
  4066a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4066a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4066a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4066ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4066b0:	d002      	beq.n	4066b8 <__adddf3+0x70>
  4066b2:	4240      	negs	r0, r0
  4066b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4066b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4066bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4066c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4066c4:	d002      	beq.n	4066cc <__adddf3+0x84>
  4066c6:	4252      	negs	r2, r2
  4066c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4066cc:	ea94 0f05 	teq	r4, r5
  4066d0:	f000 80a7 	beq.w	406822 <__adddf3+0x1da>
  4066d4:	f1a4 0401 	sub.w	r4, r4, #1
  4066d8:	f1d5 0e20 	rsbs	lr, r5, #32
  4066dc:	db0d      	blt.n	4066fa <__adddf3+0xb2>
  4066de:	fa02 fc0e 	lsl.w	ip, r2, lr
  4066e2:	fa22 f205 	lsr.w	r2, r2, r5
  4066e6:	1880      	adds	r0, r0, r2
  4066e8:	f141 0100 	adc.w	r1, r1, #0
  4066ec:	fa03 f20e 	lsl.w	r2, r3, lr
  4066f0:	1880      	adds	r0, r0, r2
  4066f2:	fa43 f305 	asr.w	r3, r3, r5
  4066f6:	4159      	adcs	r1, r3
  4066f8:	e00e      	b.n	406718 <__adddf3+0xd0>
  4066fa:	f1a5 0520 	sub.w	r5, r5, #32
  4066fe:	f10e 0e20 	add.w	lr, lr, #32
  406702:	2a01      	cmp	r2, #1
  406704:	fa03 fc0e 	lsl.w	ip, r3, lr
  406708:	bf28      	it	cs
  40670a:	f04c 0c02 	orrcs.w	ip, ip, #2
  40670e:	fa43 f305 	asr.w	r3, r3, r5
  406712:	18c0      	adds	r0, r0, r3
  406714:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  406718:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40671c:	d507      	bpl.n	40672e <__adddf3+0xe6>
  40671e:	f04f 0e00 	mov.w	lr, #0
  406722:	f1dc 0c00 	rsbs	ip, ip, #0
  406726:	eb7e 0000 	sbcs.w	r0, lr, r0
  40672a:	eb6e 0101 	sbc.w	r1, lr, r1
  40672e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  406732:	d31b      	bcc.n	40676c <__adddf3+0x124>
  406734:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  406738:	d30c      	bcc.n	406754 <__adddf3+0x10c>
  40673a:	0849      	lsrs	r1, r1, #1
  40673c:	ea5f 0030 	movs.w	r0, r0, rrx
  406740:	ea4f 0c3c 	mov.w	ip, ip, rrx
  406744:	f104 0401 	add.w	r4, r4, #1
  406748:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40674c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  406750:	f080 809a 	bcs.w	406888 <__adddf3+0x240>
  406754:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  406758:	bf08      	it	eq
  40675a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40675e:	f150 0000 	adcs.w	r0, r0, #0
  406762:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  406766:	ea41 0105 	orr.w	r1, r1, r5
  40676a:	bd30      	pop	{r4, r5, pc}
  40676c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  406770:	4140      	adcs	r0, r0
  406772:	eb41 0101 	adc.w	r1, r1, r1
  406776:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40677a:	f1a4 0401 	sub.w	r4, r4, #1
  40677e:	d1e9      	bne.n	406754 <__adddf3+0x10c>
  406780:	f091 0f00 	teq	r1, #0
  406784:	bf04      	itt	eq
  406786:	4601      	moveq	r1, r0
  406788:	2000      	moveq	r0, #0
  40678a:	fab1 f381 	clz	r3, r1
  40678e:	bf08      	it	eq
  406790:	3320      	addeq	r3, #32
  406792:	f1a3 030b 	sub.w	r3, r3, #11
  406796:	f1b3 0220 	subs.w	r2, r3, #32
  40679a:	da0c      	bge.n	4067b6 <__adddf3+0x16e>
  40679c:	320c      	adds	r2, #12
  40679e:	dd08      	ble.n	4067b2 <__adddf3+0x16a>
  4067a0:	f102 0c14 	add.w	ip, r2, #20
  4067a4:	f1c2 020c 	rsb	r2, r2, #12
  4067a8:	fa01 f00c 	lsl.w	r0, r1, ip
  4067ac:	fa21 f102 	lsr.w	r1, r1, r2
  4067b0:	e00c      	b.n	4067cc <__adddf3+0x184>
  4067b2:	f102 0214 	add.w	r2, r2, #20
  4067b6:	bfd8      	it	le
  4067b8:	f1c2 0c20 	rsble	ip, r2, #32
  4067bc:	fa01 f102 	lsl.w	r1, r1, r2
  4067c0:	fa20 fc0c 	lsr.w	ip, r0, ip
  4067c4:	bfdc      	itt	le
  4067c6:	ea41 010c 	orrle.w	r1, r1, ip
  4067ca:	4090      	lslle	r0, r2
  4067cc:	1ae4      	subs	r4, r4, r3
  4067ce:	bfa2      	ittt	ge
  4067d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4067d4:	4329      	orrge	r1, r5
  4067d6:	bd30      	popge	{r4, r5, pc}
  4067d8:	ea6f 0404 	mvn.w	r4, r4
  4067dc:	3c1f      	subs	r4, #31
  4067de:	da1c      	bge.n	40681a <__adddf3+0x1d2>
  4067e0:	340c      	adds	r4, #12
  4067e2:	dc0e      	bgt.n	406802 <__adddf3+0x1ba>
  4067e4:	f104 0414 	add.w	r4, r4, #20
  4067e8:	f1c4 0220 	rsb	r2, r4, #32
  4067ec:	fa20 f004 	lsr.w	r0, r0, r4
  4067f0:	fa01 f302 	lsl.w	r3, r1, r2
  4067f4:	ea40 0003 	orr.w	r0, r0, r3
  4067f8:	fa21 f304 	lsr.w	r3, r1, r4
  4067fc:	ea45 0103 	orr.w	r1, r5, r3
  406800:	bd30      	pop	{r4, r5, pc}
  406802:	f1c4 040c 	rsb	r4, r4, #12
  406806:	f1c4 0220 	rsb	r2, r4, #32
  40680a:	fa20 f002 	lsr.w	r0, r0, r2
  40680e:	fa01 f304 	lsl.w	r3, r1, r4
  406812:	ea40 0003 	orr.w	r0, r0, r3
  406816:	4629      	mov	r1, r5
  406818:	bd30      	pop	{r4, r5, pc}
  40681a:	fa21 f004 	lsr.w	r0, r1, r4
  40681e:	4629      	mov	r1, r5
  406820:	bd30      	pop	{r4, r5, pc}
  406822:	f094 0f00 	teq	r4, #0
  406826:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40682a:	bf06      	itte	eq
  40682c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  406830:	3401      	addeq	r4, #1
  406832:	3d01      	subne	r5, #1
  406834:	e74e      	b.n	4066d4 <__adddf3+0x8c>
  406836:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40683a:	bf18      	it	ne
  40683c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  406840:	d029      	beq.n	406896 <__adddf3+0x24e>
  406842:	ea94 0f05 	teq	r4, r5
  406846:	bf08      	it	eq
  406848:	ea90 0f02 	teqeq	r0, r2
  40684c:	d005      	beq.n	40685a <__adddf3+0x212>
  40684e:	ea54 0c00 	orrs.w	ip, r4, r0
  406852:	bf04      	itt	eq
  406854:	4619      	moveq	r1, r3
  406856:	4610      	moveq	r0, r2
  406858:	bd30      	pop	{r4, r5, pc}
  40685a:	ea91 0f03 	teq	r1, r3
  40685e:	bf1e      	ittt	ne
  406860:	2100      	movne	r1, #0
  406862:	2000      	movne	r0, #0
  406864:	bd30      	popne	{r4, r5, pc}
  406866:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40686a:	d105      	bne.n	406878 <__adddf3+0x230>
  40686c:	0040      	lsls	r0, r0, #1
  40686e:	4149      	adcs	r1, r1
  406870:	bf28      	it	cs
  406872:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  406876:	bd30      	pop	{r4, r5, pc}
  406878:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40687c:	bf3c      	itt	cc
  40687e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  406882:	bd30      	popcc	{r4, r5, pc}
  406884:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  406888:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40688c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  406890:	f04f 0000 	mov.w	r0, #0
  406894:	bd30      	pop	{r4, r5, pc}
  406896:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40689a:	bf1a      	itte	ne
  40689c:	4619      	movne	r1, r3
  40689e:	4610      	movne	r0, r2
  4068a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4068a4:	bf1c      	itt	ne
  4068a6:	460b      	movne	r3, r1
  4068a8:	4602      	movne	r2, r0
  4068aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4068ae:	bf06      	itte	eq
  4068b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4068b4:	ea91 0f03 	teqeq	r1, r3
  4068b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4068bc:	bd30      	pop	{r4, r5, pc}
  4068be:	bf00      	nop

004068c0 <__aeabi_ui2d>:
  4068c0:	f090 0f00 	teq	r0, #0
  4068c4:	bf04      	itt	eq
  4068c6:	2100      	moveq	r1, #0
  4068c8:	4770      	bxeq	lr
  4068ca:	b530      	push	{r4, r5, lr}
  4068cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4068d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4068d4:	f04f 0500 	mov.w	r5, #0
  4068d8:	f04f 0100 	mov.w	r1, #0
  4068dc:	e750      	b.n	406780 <__adddf3+0x138>
  4068de:	bf00      	nop

004068e0 <__aeabi_i2d>:
  4068e0:	f090 0f00 	teq	r0, #0
  4068e4:	bf04      	itt	eq
  4068e6:	2100      	moveq	r1, #0
  4068e8:	4770      	bxeq	lr
  4068ea:	b530      	push	{r4, r5, lr}
  4068ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4068f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4068f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4068f8:	bf48      	it	mi
  4068fa:	4240      	negmi	r0, r0
  4068fc:	f04f 0100 	mov.w	r1, #0
  406900:	e73e      	b.n	406780 <__adddf3+0x138>
  406902:	bf00      	nop

00406904 <__aeabi_f2d>:
  406904:	0042      	lsls	r2, r0, #1
  406906:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40690a:	ea4f 0131 	mov.w	r1, r1, rrx
  40690e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  406912:	bf1f      	itttt	ne
  406914:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  406918:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40691c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  406920:	4770      	bxne	lr
  406922:	f092 0f00 	teq	r2, #0
  406926:	bf14      	ite	ne
  406928:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40692c:	4770      	bxeq	lr
  40692e:	b530      	push	{r4, r5, lr}
  406930:	f44f 7460 	mov.w	r4, #896	; 0x380
  406934:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  406938:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40693c:	e720      	b.n	406780 <__adddf3+0x138>
  40693e:	bf00      	nop

00406940 <__aeabi_ul2d>:
  406940:	ea50 0201 	orrs.w	r2, r0, r1
  406944:	bf08      	it	eq
  406946:	4770      	bxeq	lr
  406948:	b530      	push	{r4, r5, lr}
  40694a:	f04f 0500 	mov.w	r5, #0
  40694e:	e00a      	b.n	406966 <__aeabi_l2d+0x16>

00406950 <__aeabi_l2d>:
  406950:	ea50 0201 	orrs.w	r2, r0, r1
  406954:	bf08      	it	eq
  406956:	4770      	bxeq	lr
  406958:	b530      	push	{r4, r5, lr}
  40695a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40695e:	d502      	bpl.n	406966 <__aeabi_l2d+0x16>
  406960:	4240      	negs	r0, r0
  406962:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  406966:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40696a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40696e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  406972:	f43f aedc 	beq.w	40672e <__adddf3+0xe6>
  406976:	f04f 0203 	mov.w	r2, #3
  40697a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40697e:	bf18      	it	ne
  406980:	3203      	addne	r2, #3
  406982:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  406986:	bf18      	it	ne
  406988:	3203      	addne	r2, #3
  40698a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40698e:	f1c2 0320 	rsb	r3, r2, #32
  406992:	fa00 fc03 	lsl.w	ip, r0, r3
  406996:	fa20 f002 	lsr.w	r0, r0, r2
  40699a:	fa01 fe03 	lsl.w	lr, r1, r3
  40699e:	ea40 000e 	orr.w	r0, r0, lr
  4069a2:	fa21 f102 	lsr.w	r1, r1, r2
  4069a6:	4414      	add	r4, r2
  4069a8:	e6c1      	b.n	40672e <__adddf3+0xe6>
  4069aa:	bf00      	nop

004069ac <__aeabi_dmul>:
  4069ac:	b570      	push	{r4, r5, r6, lr}
  4069ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4069b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4069b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4069ba:	bf1d      	ittte	ne
  4069bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4069c0:	ea94 0f0c 	teqne	r4, ip
  4069c4:	ea95 0f0c 	teqne	r5, ip
  4069c8:	f000 f8de 	bleq	406b88 <__aeabi_dmul+0x1dc>
  4069cc:	442c      	add	r4, r5
  4069ce:	ea81 0603 	eor.w	r6, r1, r3
  4069d2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4069d6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4069da:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4069de:	bf18      	it	ne
  4069e0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4069e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4069e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4069ec:	d038      	beq.n	406a60 <__aeabi_dmul+0xb4>
  4069ee:	fba0 ce02 	umull	ip, lr, r0, r2
  4069f2:	f04f 0500 	mov.w	r5, #0
  4069f6:	fbe1 e502 	umlal	lr, r5, r1, r2
  4069fa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  4069fe:	fbe0 e503 	umlal	lr, r5, r0, r3
  406a02:	f04f 0600 	mov.w	r6, #0
  406a06:	fbe1 5603 	umlal	r5, r6, r1, r3
  406a0a:	f09c 0f00 	teq	ip, #0
  406a0e:	bf18      	it	ne
  406a10:	f04e 0e01 	orrne.w	lr, lr, #1
  406a14:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  406a18:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  406a1c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  406a20:	d204      	bcs.n	406a2c <__aeabi_dmul+0x80>
  406a22:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  406a26:	416d      	adcs	r5, r5
  406a28:	eb46 0606 	adc.w	r6, r6, r6
  406a2c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  406a30:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  406a34:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  406a38:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  406a3c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  406a40:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  406a44:	bf88      	it	hi
  406a46:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  406a4a:	d81e      	bhi.n	406a8a <__aeabi_dmul+0xde>
  406a4c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  406a50:	bf08      	it	eq
  406a52:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  406a56:	f150 0000 	adcs.w	r0, r0, #0
  406a5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  406a5e:	bd70      	pop	{r4, r5, r6, pc}
  406a60:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  406a64:	ea46 0101 	orr.w	r1, r6, r1
  406a68:	ea40 0002 	orr.w	r0, r0, r2
  406a6c:	ea81 0103 	eor.w	r1, r1, r3
  406a70:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  406a74:	bfc2      	ittt	gt
  406a76:	ebd4 050c 	rsbsgt	r5, r4, ip
  406a7a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  406a7e:	bd70      	popgt	{r4, r5, r6, pc}
  406a80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  406a84:	f04f 0e00 	mov.w	lr, #0
  406a88:	3c01      	subs	r4, #1
  406a8a:	f300 80ab 	bgt.w	406be4 <__aeabi_dmul+0x238>
  406a8e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  406a92:	bfde      	ittt	le
  406a94:	2000      	movle	r0, #0
  406a96:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  406a9a:	bd70      	pople	{r4, r5, r6, pc}
  406a9c:	f1c4 0400 	rsb	r4, r4, #0
  406aa0:	3c20      	subs	r4, #32
  406aa2:	da35      	bge.n	406b10 <__aeabi_dmul+0x164>
  406aa4:	340c      	adds	r4, #12
  406aa6:	dc1b      	bgt.n	406ae0 <__aeabi_dmul+0x134>
  406aa8:	f104 0414 	add.w	r4, r4, #20
  406aac:	f1c4 0520 	rsb	r5, r4, #32
  406ab0:	fa00 f305 	lsl.w	r3, r0, r5
  406ab4:	fa20 f004 	lsr.w	r0, r0, r4
  406ab8:	fa01 f205 	lsl.w	r2, r1, r5
  406abc:	ea40 0002 	orr.w	r0, r0, r2
  406ac0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  406ac4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  406ac8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  406acc:	fa21 f604 	lsr.w	r6, r1, r4
  406ad0:	eb42 0106 	adc.w	r1, r2, r6
  406ad4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  406ad8:	bf08      	it	eq
  406ada:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  406ade:	bd70      	pop	{r4, r5, r6, pc}
  406ae0:	f1c4 040c 	rsb	r4, r4, #12
  406ae4:	f1c4 0520 	rsb	r5, r4, #32
  406ae8:	fa00 f304 	lsl.w	r3, r0, r4
  406aec:	fa20 f005 	lsr.w	r0, r0, r5
  406af0:	fa01 f204 	lsl.w	r2, r1, r4
  406af4:	ea40 0002 	orr.w	r0, r0, r2
  406af8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  406afc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  406b00:	f141 0100 	adc.w	r1, r1, #0
  406b04:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  406b08:	bf08      	it	eq
  406b0a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  406b0e:	bd70      	pop	{r4, r5, r6, pc}
  406b10:	f1c4 0520 	rsb	r5, r4, #32
  406b14:	fa00 f205 	lsl.w	r2, r0, r5
  406b18:	ea4e 0e02 	orr.w	lr, lr, r2
  406b1c:	fa20 f304 	lsr.w	r3, r0, r4
  406b20:	fa01 f205 	lsl.w	r2, r1, r5
  406b24:	ea43 0302 	orr.w	r3, r3, r2
  406b28:	fa21 f004 	lsr.w	r0, r1, r4
  406b2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  406b30:	fa21 f204 	lsr.w	r2, r1, r4
  406b34:	ea20 0002 	bic.w	r0, r0, r2
  406b38:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  406b3c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  406b40:	bf08      	it	eq
  406b42:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  406b46:	bd70      	pop	{r4, r5, r6, pc}
  406b48:	f094 0f00 	teq	r4, #0
  406b4c:	d10f      	bne.n	406b6e <__aeabi_dmul+0x1c2>
  406b4e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  406b52:	0040      	lsls	r0, r0, #1
  406b54:	eb41 0101 	adc.w	r1, r1, r1
  406b58:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  406b5c:	bf08      	it	eq
  406b5e:	3c01      	subeq	r4, #1
  406b60:	d0f7      	beq.n	406b52 <__aeabi_dmul+0x1a6>
  406b62:	ea41 0106 	orr.w	r1, r1, r6
  406b66:	f095 0f00 	teq	r5, #0
  406b6a:	bf18      	it	ne
  406b6c:	4770      	bxne	lr
  406b6e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  406b72:	0052      	lsls	r2, r2, #1
  406b74:	eb43 0303 	adc.w	r3, r3, r3
  406b78:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  406b7c:	bf08      	it	eq
  406b7e:	3d01      	subeq	r5, #1
  406b80:	d0f7      	beq.n	406b72 <__aeabi_dmul+0x1c6>
  406b82:	ea43 0306 	orr.w	r3, r3, r6
  406b86:	4770      	bx	lr
  406b88:	ea94 0f0c 	teq	r4, ip
  406b8c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  406b90:	bf18      	it	ne
  406b92:	ea95 0f0c 	teqne	r5, ip
  406b96:	d00c      	beq.n	406bb2 <__aeabi_dmul+0x206>
  406b98:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  406b9c:	bf18      	it	ne
  406b9e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  406ba2:	d1d1      	bne.n	406b48 <__aeabi_dmul+0x19c>
  406ba4:	ea81 0103 	eor.w	r1, r1, r3
  406ba8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  406bac:	f04f 0000 	mov.w	r0, #0
  406bb0:	bd70      	pop	{r4, r5, r6, pc}
  406bb2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  406bb6:	bf06      	itte	eq
  406bb8:	4610      	moveq	r0, r2
  406bba:	4619      	moveq	r1, r3
  406bbc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  406bc0:	d019      	beq.n	406bf6 <__aeabi_dmul+0x24a>
  406bc2:	ea94 0f0c 	teq	r4, ip
  406bc6:	d102      	bne.n	406bce <__aeabi_dmul+0x222>
  406bc8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  406bcc:	d113      	bne.n	406bf6 <__aeabi_dmul+0x24a>
  406bce:	ea95 0f0c 	teq	r5, ip
  406bd2:	d105      	bne.n	406be0 <__aeabi_dmul+0x234>
  406bd4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  406bd8:	bf1c      	itt	ne
  406bda:	4610      	movne	r0, r2
  406bdc:	4619      	movne	r1, r3
  406bde:	d10a      	bne.n	406bf6 <__aeabi_dmul+0x24a>
  406be0:	ea81 0103 	eor.w	r1, r1, r3
  406be4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  406be8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  406bec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  406bf0:	f04f 0000 	mov.w	r0, #0
  406bf4:	bd70      	pop	{r4, r5, r6, pc}
  406bf6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  406bfa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  406bfe:	bd70      	pop	{r4, r5, r6, pc}

00406c00 <__aeabi_ddiv>:
  406c00:	b570      	push	{r4, r5, r6, lr}
  406c02:	f04f 0cff 	mov.w	ip, #255	; 0xff
  406c06:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  406c0a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  406c0e:	bf1d      	ittte	ne
  406c10:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  406c14:	ea94 0f0c 	teqne	r4, ip
  406c18:	ea95 0f0c 	teqne	r5, ip
  406c1c:	f000 f8a7 	bleq	406d6e <__aeabi_ddiv+0x16e>
  406c20:	eba4 0405 	sub.w	r4, r4, r5
  406c24:	ea81 0e03 	eor.w	lr, r1, r3
  406c28:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  406c2c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  406c30:	f000 8088 	beq.w	406d44 <__aeabi_ddiv+0x144>
  406c34:	ea4f 3303 	mov.w	r3, r3, lsl #12
  406c38:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  406c3c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  406c40:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  406c44:	ea4f 2202 	mov.w	r2, r2, lsl #8
  406c48:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  406c4c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  406c50:	ea4f 2600 	mov.w	r6, r0, lsl #8
  406c54:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  406c58:	429d      	cmp	r5, r3
  406c5a:	bf08      	it	eq
  406c5c:	4296      	cmpeq	r6, r2
  406c5e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  406c62:	f504 7440 	add.w	r4, r4, #768	; 0x300
  406c66:	d202      	bcs.n	406c6e <__aeabi_ddiv+0x6e>
  406c68:	085b      	lsrs	r3, r3, #1
  406c6a:	ea4f 0232 	mov.w	r2, r2, rrx
  406c6e:	1ab6      	subs	r6, r6, r2
  406c70:	eb65 0503 	sbc.w	r5, r5, r3
  406c74:	085b      	lsrs	r3, r3, #1
  406c76:	ea4f 0232 	mov.w	r2, r2, rrx
  406c7a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  406c7e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  406c82:	ebb6 0e02 	subs.w	lr, r6, r2
  406c86:	eb75 0e03 	sbcs.w	lr, r5, r3
  406c8a:	bf22      	ittt	cs
  406c8c:	1ab6      	subcs	r6, r6, r2
  406c8e:	4675      	movcs	r5, lr
  406c90:	ea40 000c 	orrcs.w	r0, r0, ip
  406c94:	085b      	lsrs	r3, r3, #1
  406c96:	ea4f 0232 	mov.w	r2, r2, rrx
  406c9a:	ebb6 0e02 	subs.w	lr, r6, r2
  406c9e:	eb75 0e03 	sbcs.w	lr, r5, r3
  406ca2:	bf22      	ittt	cs
  406ca4:	1ab6      	subcs	r6, r6, r2
  406ca6:	4675      	movcs	r5, lr
  406ca8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  406cac:	085b      	lsrs	r3, r3, #1
  406cae:	ea4f 0232 	mov.w	r2, r2, rrx
  406cb2:	ebb6 0e02 	subs.w	lr, r6, r2
  406cb6:	eb75 0e03 	sbcs.w	lr, r5, r3
  406cba:	bf22      	ittt	cs
  406cbc:	1ab6      	subcs	r6, r6, r2
  406cbe:	4675      	movcs	r5, lr
  406cc0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  406cc4:	085b      	lsrs	r3, r3, #1
  406cc6:	ea4f 0232 	mov.w	r2, r2, rrx
  406cca:	ebb6 0e02 	subs.w	lr, r6, r2
  406cce:	eb75 0e03 	sbcs.w	lr, r5, r3
  406cd2:	bf22      	ittt	cs
  406cd4:	1ab6      	subcs	r6, r6, r2
  406cd6:	4675      	movcs	r5, lr
  406cd8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  406cdc:	ea55 0e06 	orrs.w	lr, r5, r6
  406ce0:	d018      	beq.n	406d14 <__aeabi_ddiv+0x114>
  406ce2:	ea4f 1505 	mov.w	r5, r5, lsl #4
  406ce6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  406cea:	ea4f 1606 	mov.w	r6, r6, lsl #4
  406cee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  406cf2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  406cf6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  406cfa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  406cfe:	d1c0      	bne.n	406c82 <__aeabi_ddiv+0x82>
  406d00:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  406d04:	d10b      	bne.n	406d1e <__aeabi_ddiv+0x11e>
  406d06:	ea41 0100 	orr.w	r1, r1, r0
  406d0a:	f04f 0000 	mov.w	r0, #0
  406d0e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  406d12:	e7b6      	b.n	406c82 <__aeabi_ddiv+0x82>
  406d14:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  406d18:	bf04      	itt	eq
  406d1a:	4301      	orreq	r1, r0
  406d1c:	2000      	moveq	r0, #0
  406d1e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  406d22:	bf88      	it	hi
  406d24:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  406d28:	f63f aeaf 	bhi.w	406a8a <__aeabi_dmul+0xde>
  406d2c:	ebb5 0c03 	subs.w	ip, r5, r3
  406d30:	bf04      	itt	eq
  406d32:	ebb6 0c02 	subseq.w	ip, r6, r2
  406d36:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  406d3a:	f150 0000 	adcs.w	r0, r0, #0
  406d3e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  406d42:	bd70      	pop	{r4, r5, r6, pc}
  406d44:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  406d48:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  406d4c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  406d50:	bfc2      	ittt	gt
  406d52:	ebd4 050c 	rsbsgt	r5, r4, ip
  406d56:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  406d5a:	bd70      	popgt	{r4, r5, r6, pc}
  406d5c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  406d60:	f04f 0e00 	mov.w	lr, #0
  406d64:	3c01      	subs	r4, #1
  406d66:	e690      	b.n	406a8a <__aeabi_dmul+0xde>
  406d68:	ea45 0e06 	orr.w	lr, r5, r6
  406d6c:	e68d      	b.n	406a8a <__aeabi_dmul+0xde>
  406d6e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  406d72:	ea94 0f0c 	teq	r4, ip
  406d76:	bf08      	it	eq
  406d78:	ea95 0f0c 	teqeq	r5, ip
  406d7c:	f43f af3b 	beq.w	406bf6 <__aeabi_dmul+0x24a>
  406d80:	ea94 0f0c 	teq	r4, ip
  406d84:	d10a      	bne.n	406d9c <__aeabi_ddiv+0x19c>
  406d86:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  406d8a:	f47f af34 	bne.w	406bf6 <__aeabi_dmul+0x24a>
  406d8e:	ea95 0f0c 	teq	r5, ip
  406d92:	f47f af25 	bne.w	406be0 <__aeabi_dmul+0x234>
  406d96:	4610      	mov	r0, r2
  406d98:	4619      	mov	r1, r3
  406d9a:	e72c      	b.n	406bf6 <__aeabi_dmul+0x24a>
  406d9c:	ea95 0f0c 	teq	r5, ip
  406da0:	d106      	bne.n	406db0 <__aeabi_ddiv+0x1b0>
  406da2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  406da6:	f43f aefd 	beq.w	406ba4 <__aeabi_dmul+0x1f8>
  406daa:	4610      	mov	r0, r2
  406dac:	4619      	mov	r1, r3
  406dae:	e722      	b.n	406bf6 <__aeabi_dmul+0x24a>
  406db0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  406db4:	bf18      	it	ne
  406db6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  406dba:	f47f aec5 	bne.w	406b48 <__aeabi_dmul+0x19c>
  406dbe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  406dc2:	f47f af0d 	bne.w	406be0 <__aeabi_dmul+0x234>
  406dc6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  406dca:	f47f aeeb 	bne.w	406ba4 <__aeabi_dmul+0x1f8>
  406dce:	e712      	b.n	406bf6 <__aeabi_dmul+0x24a>

00406dd0 <__gedf2>:
  406dd0:	f04f 3cff 	mov.w	ip, #4294967295
  406dd4:	e006      	b.n	406de4 <__cmpdf2+0x4>
  406dd6:	bf00      	nop

00406dd8 <__ledf2>:
  406dd8:	f04f 0c01 	mov.w	ip, #1
  406ddc:	e002      	b.n	406de4 <__cmpdf2+0x4>
  406dde:	bf00      	nop

00406de0 <__cmpdf2>:
  406de0:	f04f 0c01 	mov.w	ip, #1
  406de4:	f84d cd04 	str.w	ip, [sp, #-4]!
  406de8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  406dec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406df0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  406df4:	bf18      	it	ne
  406df6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  406dfa:	d01b      	beq.n	406e34 <__cmpdf2+0x54>
  406dfc:	b001      	add	sp, #4
  406dfe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  406e02:	bf0c      	ite	eq
  406e04:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  406e08:	ea91 0f03 	teqne	r1, r3
  406e0c:	bf02      	ittt	eq
  406e0e:	ea90 0f02 	teqeq	r0, r2
  406e12:	2000      	moveq	r0, #0
  406e14:	4770      	bxeq	lr
  406e16:	f110 0f00 	cmn.w	r0, #0
  406e1a:	ea91 0f03 	teq	r1, r3
  406e1e:	bf58      	it	pl
  406e20:	4299      	cmppl	r1, r3
  406e22:	bf08      	it	eq
  406e24:	4290      	cmpeq	r0, r2
  406e26:	bf2c      	ite	cs
  406e28:	17d8      	asrcs	r0, r3, #31
  406e2a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  406e2e:	f040 0001 	orr.w	r0, r0, #1
  406e32:	4770      	bx	lr
  406e34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  406e38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406e3c:	d102      	bne.n	406e44 <__cmpdf2+0x64>
  406e3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  406e42:	d107      	bne.n	406e54 <__cmpdf2+0x74>
  406e44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  406e48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406e4c:	d1d6      	bne.n	406dfc <__cmpdf2+0x1c>
  406e4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  406e52:	d0d3      	beq.n	406dfc <__cmpdf2+0x1c>
  406e54:	f85d 0b04 	ldr.w	r0, [sp], #4
  406e58:	4770      	bx	lr
  406e5a:	bf00      	nop

00406e5c <__aeabi_cdrcmple>:
  406e5c:	4684      	mov	ip, r0
  406e5e:	4610      	mov	r0, r2
  406e60:	4662      	mov	r2, ip
  406e62:	468c      	mov	ip, r1
  406e64:	4619      	mov	r1, r3
  406e66:	4663      	mov	r3, ip
  406e68:	e000      	b.n	406e6c <__aeabi_cdcmpeq>
  406e6a:	bf00      	nop

00406e6c <__aeabi_cdcmpeq>:
  406e6c:	b501      	push	{r0, lr}
  406e6e:	f7ff ffb7 	bl	406de0 <__cmpdf2>
  406e72:	2800      	cmp	r0, #0
  406e74:	bf48      	it	mi
  406e76:	f110 0f00 	cmnmi.w	r0, #0
  406e7a:	bd01      	pop	{r0, pc}

00406e7c <__aeabi_dcmpeq>:
  406e7c:	f84d ed08 	str.w	lr, [sp, #-8]!
  406e80:	f7ff fff4 	bl	406e6c <__aeabi_cdcmpeq>
  406e84:	bf0c      	ite	eq
  406e86:	2001      	moveq	r0, #1
  406e88:	2000      	movne	r0, #0
  406e8a:	f85d fb08 	ldr.w	pc, [sp], #8
  406e8e:	bf00      	nop

00406e90 <__aeabi_dcmplt>:
  406e90:	f84d ed08 	str.w	lr, [sp, #-8]!
  406e94:	f7ff ffea 	bl	406e6c <__aeabi_cdcmpeq>
  406e98:	bf34      	ite	cc
  406e9a:	2001      	movcc	r0, #1
  406e9c:	2000      	movcs	r0, #0
  406e9e:	f85d fb08 	ldr.w	pc, [sp], #8
  406ea2:	bf00      	nop

00406ea4 <__aeabi_dcmple>:
  406ea4:	f84d ed08 	str.w	lr, [sp, #-8]!
  406ea8:	f7ff ffe0 	bl	406e6c <__aeabi_cdcmpeq>
  406eac:	bf94      	ite	ls
  406eae:	2001      	movls	r0, #1
  406eb0:	2000      	movhi	r0, #0
  406eb2:	f85d fb08 	ldr.w	pc, [sp], #8
  406eb6:	bf00      	nop

00406eb8 <__aeabi_dcmpge>:
  406eb8:	f84d ed08 	str.w	lr, [sp, #-8]!
  406ebc:	f7ff ffce 	bl	406e5c <__aeabi_cdrcmple>
  406ec0:	bf94      	ite	ls
  406ec2:	2001      	movls	r0, #1
  406ec4:	2000      	movhi	r0, #0
  406ec6:	f85d fb08 	ldr.w	pc, [sp], #8
  406eca:	bf00      	nop

00406ecc <__aeabi_dcmpgt>:
  406ecc:	f84d ed08 	str.w	lr, [sp, #-8]!
  406ed0:	f7ff ffc4 	bl	406e5c <__aeabi_cdrcmple>
  406ed4:	bf34      	ite	cc
  406ed6:	2001      	movcc	r0, #1
  406ed8:	2000      	movcs	r0, #0
  406eda:	f85d fb08 	ldr.w	pc, [sp], #8
  406ede:	bf00      	nop

00406ee0 <__aeabi_dcmpun>:
  406ee0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  406ee4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406ee8:	d102      	bne.n	406ef0 <__aeabi_dcmpun+0x10>
  406eea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  406eee:	d10a      	bne.n	406f06 <__aeabi_dcmpun+0x26>
  406ef0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  406ef4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406ef8:	d102      	bne.n	406f00 <__aeabi_dcmpun+0x20>
  406efa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  406efe:	d102      	bne.n	406f06 <__aeabi_dcmpun+0x26>
  406f00:	f04f 0000 	mov.w	r0, #0
  406f04:	4770      	bx	lr
  406f06:	f04f 0001 	mov.w	r0, #1
  406f0a:	4770      	bx	lr

00406f0c <__aeabi_d2iz>:
  406f0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  406f10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  406f14:	d215      	bcs.n	406f42 <__aeabi_d2iz+0x36>
  406f16:	d511      	bpl.n	406f3c <__aeabi_d2iz+0x30>
  406f18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  406f1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  406f20:	d912      	bls.n	406f48 <__aeabi_d2iz+0x3c>
  406f22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  406f26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  406f2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  406f2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  406f32:	fa23 f002 	lsr.w	r0, r3, r2
  406f36:	bf18      	it	ne
  406f38:	4240      	negne	r0, r0
  406f3a:	4770      	bx	lr
  406f3c:	f04f 0000 	mov.w	r0, #0
  406f40:	4770      	bx	lr
  406f42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  406f46:	d105      	bne.n	406f54 <__aeabi_d2iz+0x48>
  406f48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  406f4c:	bf08      	it	eq
  406f4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  406f52:	4770      	bx	lr
  406f54:	f04f 0000 	mov.w	r0, #0
  406f58:	4770      	bx	lr
  406f5a:	bf00      	nop

00406f5c <gc_us_sine_data>:
  406f5c:	0000 0080 0100 017f 01fd 0278 02f1 0367     ..........x...g.
  406f6c:	03da 0449 04b3 0519 0579 05d4 0629 0678     ..I.....y...).x.
  406f7c:	06c0 0702 073c 076f 079b 07bf 07db 07ef     ....<.o.........
  406f8c:	07fb 07ff 07fb 07ef 07db 07bf 079b 076f     ..............o.
  406f9c:	073c 0702 06c0 0678 0629 05d4 0579 0519     <.....x.)...y...
  406fac:	04b3 0449 03da 0367 02f1 0278 01fd 017f     ..I...g...x.....
  406fbc:	0100 0080 0000 ff80 ff00 fe81 fe03 fd88     ................
  406fcc:	fd0f fc99 fc26 fbb7 fb4d fae7 fa87 fa2c     ....&...M.....,.
  406fdc:	f9d7 f988 f940 f8fe f8c4 f891 f865 f841     ....@.......e.A.
  406fec:	f825 f811 f805 f801 f805 f811 f825 f841     %...........%.A.
  406ffc:	f865 f891 f8c4 f8fe f940 f988 f9d7 fa2c     e.......@.....,.
  40700c:	fa87 fae7 fb4d fbb7 fc26 fc99 fd0f fd88     ....M...&.......
  40701c:	fe03 fe81 ff00 ff80 005b 0000 205d 0000     ........[...] ..
  40702c:	0a0d 0000 5441 0000 5441 522b 5345 5445     ....AT..AT+RESET
  40703c:	0000 0000 5441 4e2b 4d41 4345 696c 6e65     ....AT+NAMEClien
  40704c:	0074 0000 6d68 3031 635f 696c 6e65 5f74     t...hm10_client_
  40705c:	6e69 7469 0000 0000 5441 492b 4d4d 3145     init....AT+IMME1
  40706c:	0000 0000 5441 522b 4c4f 3145 0000 0000     ....AT+ROLE1....
  40707c:	5441 442b 5349 3f43 0000 0000 5441 432b     AT+DISC?....AT+C
  40708c:	4e4f 3444 3633 3933 3844 4442 4431 0000     OND43639D8BD1D..
  40709c:	6c66 6761 6220 6665 726f 2065 6425 0a20     flag before %d .
  4070ac:	0000 0000 0021 0000 6c66 6761 6220 7475     ....!...flag but
  4070bc:	2074 6425 0a20 0000 6e49 6369 6169 696c     t %d ...Iniciali
  4070cc:	617a 646e 2e6f 2e2e 0a0d 0000 6f43 666e     zando.......Conf
  4070dc:	6769 4820 3043 2035 6c43 6569 746e 2e2e     ig HC05 Client..
  4070ec:	0d2e 000a 6c66 6761 2520 2064 000a 0000     ....flag %d ....
  4070fc:	6e65 7274 756f 2e2e 0d2e 000a 6425 0a20     entrou......%d .
  40710c:	0000 0000 6e65 6f63 6564 0072               ....encoder.

00407118 <_global_impure_ptr>:
  407118:	0018 2040 4e49 0046 6e69 0066 414e 004e     ..@ INF.inf.NAN.
  407128:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
  407138:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  407148:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  407158:	296c 0000 0030 0000                         l)..0...

00407160 <blanks.7223>:
  407160:	2020 2020 2020 2020 2020 2020 2020 2020                     

00407170 <zeroes.7224>:
  407170:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  407180:	3130 3332 3534 3736 3938 6261 6463 6665     0123456789abcdef
  407190:	6867 6a69 6c6b 6e6d 706f 7271 7473 7675     ghijklmnopqrstuv
  4071a0:	7877 7a79 0000 0000 6e49 6966 696e 7974     wxyz....Infinity
  4071b0:	0000 0000 614e 004e                         ....NaN.

004071b8 <__mprec_bigtens>:
  4071b8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  4071c8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  4071d8:	bf3c 7f73 4fdd 7515                         <.s..O.u

004071e0 <__mprec_tens>:
  4071e0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  4071f0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  407200:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  407210:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  407220:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  407230:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  407240:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  407250:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  407260:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  407270:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  407280:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  407290:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  4072a0:	9db4 79d9 7843 44ea                         ...yCx.D

004072a8 <p05.6055>:
  4072a8:	0005 0000 0019 0000 007d 0000 0043 0000     ........}...C...
  4072b8:	4f50 4953 0058 0000 002e 0000               POSIX.......

004072c4 <_ctype_>:
  4072c4:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  4072d4:	2020 2020 2020 2020 2020 2020 2020 2020                     
  4072e4:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  4072f4:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  407304:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  407314:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  407324:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  407334:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  407344:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

004073c8 <_init>:
  4073c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4073ca:	bf00      	nop
  4073cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4073ce:	bc08      	pop	{r3}
  4073d0:	469e      	mov	lr, r3
  4073d2:	4770      	bx	lr

004073d4 <__init_array_start>:
  4073d4:	00403ff9 	.word	0x00403ff9

004073d8 <__frame_dummy_init_array_entry>:
  4073d8:	00400165                                e.@.

004073dc <_fini>:
  4073dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4073de:	bf00      	nop
  4073e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4073e2:	bc08      	pop	{r3}
  4073e4:	469e      	mov	lr, r3
  4073e6:	4770      	bx	lr

004073e8 <__fini_array_start>:
  4073e8:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <_impure_ptr>:
20400010:	0018 2040 0000 0000                         ..@ ....

20400018 <impure_data>:
20400018:	0000 0000 0304 2040 036c 2040 03d4 2040     ......@ l.@ ..@ 
	...
204000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400440 <__atexit_recursive_mutex>:
20400440:	0aac 2040                                   ..@ 

20400444 <__malloc_av_>:
	...
2040044c:	0444 2040 0444 2040 044c 2040 044c 2040     D.@ D.@ L.@ L.@ 
2040045c:	0454 2040 0454 2040 045c 2040 045c 2040     T.@ T.@ \.@ \.@ 
2040046c:	0464 2040 0464 2040 046c 2040 046c 2040     d.@ d.@ l.@ l.@ 
2040047c:	0474 2040 0474 2040 047c 2040 047c 2040     t.@ t.@ |.@ |.@ 
2040048c:	0484 2040 0484 2040 048c 2040 048c 2040     ..@ ..@ ..@ ..@ 
2040049c:	0494 2040 0494 2040 049c 2040 049c 2040     ..@ ..@ ..@ ..@ 
204004ac:	04a4 2040 04a4 2040 04ac 2040 04ac 2040     ..@ ..@ ..@ ..@ 
204004bc:	04b4 2040 04b4 2040 04bc 2040 04bc 2040     ..@ ..@ ..@ ..@ 
204004cc:	04c4 2040 04c4 2040 04cc 2040 04cc 2040     ..@ ..@ ..@ ..@ 
204004dc:	04d4 2040 04d4 2040 04dc 2040 04dc 2040     ..@ ..@ ..@ ..@ 
204004ec:	04e4 2040 04e4 2040 04ec 2040 04ec 2040     ..@ ..@ ..@ ..@ 
204004fc:	04f4 2040 04f4 2040 04fc 2040 04fc 2040     ..@ ..@ ..@ ..@ 
2040050c:	0504 2040 0504 2040 050c 2040 050c 2040     ..@ ..@ ..@ ..@ 
2040051c:	0514 2040 0514 2040 051c 2040 051c 2040     ..@ ..@ ..@ ..@ 
2040052c:	0524 2040 0524 2040 052c 2040 052c 2040     $.@ $.@ ,.@ ,.@ 
2040053c:	0534 2040 0534 2040 053c 2040 053c 2040     4.@ 4.@ <.@ <.@ 
2040054c:	0544 2040 0544 2040 054c 2040 054c 2040     D.@ D.@ L.@ L.@ 
2040055c:	0554 2040 0554 2040 055c 2040 055c 2040     T.@ T.@ \.@ \.@ 
2040056c:	0564 2040 0564 2040 056c 2040 056c 2040     d.@ d.@ l.@ l.@ 
2040057c:	0574 2040 0574 2040 057c 2040 057c 2040     t.@ t.@ |.@ |.@ 
2040058c:	0584 2040 0584 2040 058c 2040 058c 2040     ..@ ..@ ..@ ..@ 
2040059c:	0594 2040 0594 2040 059c 2040 059c 2040     ..@ ..@ ..@ ..@ 
204005ac:	05a4 2040 05a4 2040 05ac 2040 05ac 2040     ..@ ..@ ..@ ..@ 
204005bc:	05b4 2040 05b4 2040 05bc 2040 05bc 2040     ..@ ..@ ..@ ..@ 
204005cc:	05c4 2040 05c4 2040 05cc 2040 05cc 2040     ..@ ..@ ..@ ..@ 
204005dc:	05d4 2040 05d4 2040 05dc 2040 05dc 2040     ..@ ..@ ..@ ..@ 
204005ec:	05e4 2040 05e4 2040 05ec 2040 05ec 2040     ..@ ..@ ..@ ..@ 
204005fc:	05f4 2040 05f4 2040 05fc 2040 05fc 2040     ..@ ..@ ..@ ..@ 
2040060c:	0604 2040 0604 2040 060c 2040 060c 2040     ..@ ..@ ..@ ..@ 
2040061c:	0614 2040 0614 2040 061c 2040 061c 2040     ..@ ..@ ..@ ..@ 
2040062c:	0624 2040 0624 2040 062c 2040 062c 2040     $.@ $.@ ,.@ ,.@ 
2040063c:	0634 2040 0634 2040 063c 2040 063c 2040     4.@ 4.@ <.@ <.@ 
2040064c:	0644 2040 0644 2040 064c 2040 064c 2040     D.@ D.@ L.@ L.@ 
2040065c:	0654 2040 0654 2040 065c 2040 065c 2040     T.@ T.@ \.@ \.@ 
2040066c:	0664 2040 0664 2040 066c 2040 066c 2040     d.@ d.@ l.@ l.@ 
2040067c:	0674 2040 0674 2040 067c 2040 067c 2040     t.@ t.@ |.@ |.@ 
2040068c:	0684 2040 0684 2040 068c 2040 068c 2040     ..@ ..@ ..@ ..@ 
2040069c:	0694 2040 0694 2040 069c 2040 069c 2040     ..@ ..@ ..@ ..@ 
204006ac:	06a4 2040 06a4 2040 06ac 2040 06ac 2040     ..@ ..@ ..@ ..@ 
204006bc:	06b4 2040 06b4 2040 06bc 2040 06bc 2040     ..@ ..@ ..@ ..@ 
204006cc:	06c4 2040 06c4 2040 06cc 2040 06cc 2040     ..@ ..@ ..@ ..@ 
204006dc:	06d4 2040 06d4 2040 06dc 2040 06dc 2040     ..@ ..@ ..@ ..@ 
204006ec:	06e4 2040 06e4 2040 06ec 2040 06ec 2040     ..@ ..@ ..@ ..@ 
204006fc:	06f4 2040 06f4 2040 06fc 2040 06fc 2040     ..@ ..@ ..@ ..@ 
2040070c:	0704 2040 0704 2040 070c 2040 070c 2040     ..@ ..@ ..@ ..@ 
2040071c:	0714 2040 0714 2040 071c 2040 071c 2040     ..@ ..@ ..@ ..@ 
2040072c:	0724 2040 0724 2040 072c 2040 072c 2040     $.@ $.@ ,.@ ,.@ 
2040073c:	0734 2040 0734 2040 073c 2040 073c 2040     4.@ 4.@ <.@ <.@ 
2040074c:	0744 2040 0744 2040 074c 2040 074c 2040     D.@ D.@ L.@ L.@ 
2040075c:	0754 2040 0754 2040 075c 2040 075c 2040     T.@ T.@ \.@ \.@ 
2040076c:	0764 2040 0764 2040 076c 2040 076c 2040     d.@ d.@ l.@ l.@ 
2040077c:	0774 2040 0774 2040 077c 2040 077c 2040     t.@ t.@ |.@ |.@ 
2040078c:	0784 2040 0784 2040 078c 2040 078c 2040     ..@ ..@ ..@ ..@ 
2040079c:	0794 2040 0794 2040 079c 2040 079c 2040     ..@ ..@ ..@ ..@ 
204007ac:	07a4 2040 07a4 2040 07ac 2040 07ac 2040     ..@ ..@ ..@ ..@ 
204007bc:	07b4 2040 07b4 2040 07bc 2040 07bc 2040     ..@ ..@ ..@ ..@ 
204007cc:	07c4 2040 07c4 2040 07cc 2040 07cc 2040     ..@ ..@ ..@ ..@ 
204007dc:	07d4 2040 07d4 2040 07dc 2040 07dc 2040     ..@ ..@ ..@ ..@ 
204007ec:	07e4 2040 07e4 2040 07ec 2040 07ec 2040     ..@ ..@ ..@ ..@ 
204007fc:	07f4 2040 07f4 2040 07fc 2040 07fc 2040     ..@ ..@ ..@ ..@ 
2040080c:	0804 2040 0804 2040 080c 2040 080c 2040     ..@ ..@ ..@ ..@ 
2040081c:	0814 2040 0814 2040 081c 2040 081c 2040     ..@ ..@ ..@ ..@ 
2040082c:	0824 2040 0824 2040 082c 2040 082c 2040     $.@ $.@ ,.@ ,.@ 
2040083c:	0834 2040 0834 2040 083c 2040 083c 2040     4.@ 4.@ <.@ <.@ 

2040084c <__malloc_sbrk_base>:
2040084c:	ffff ffff                                   ....

20400850 <__malloc_trim_threshold>:
20400850:	0000 0002                                   ....

20400854 <__global_locale>:
20400854:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400874:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400894:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400914:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400934:	6621 0040 61e1 0040 0000 0000 72c4 0040     !f@..a@......r@.
20400944:	72c0 0040 713c 0040 713c 0040 713c 0040     .r@.<q@.<q@.<q@.
20400954:	713c 0040 713c 0040 713c 0040 713c 0040     <q@.<q@.<q@.<q@.
20400964:	713c 0040 713c 0040 ffff ffff ffff ffff     <q@.<q@.........
20400974:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2040099c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
