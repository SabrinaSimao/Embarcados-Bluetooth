
BLUETOOTH_P2P_EXAMPLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007264  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00407264  00407264  00017264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20400000  0040726c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000108  204009c0  00407c2c  000209c0  2**2
                  ALLOC
  4 .stack        00002000  20400ac8  00407d34  000209c0  2**0
                  ALLOC
  5 .heap         00000200  20402ac8  00409d34  000209c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209ee  2**0
                  CONTENTS, READONLY
  8 .debug_info   00012938  00000000  00000000  00020a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000022e6  00000000  00000000  0003337f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000681c  00000000  00000000  00035665  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000b28  00000000  00000000  0003be81  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ac0  00000000  00000000  0003c9a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000073d9  00000000  00000000  0003d469  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000a770  00000000  00000000  00044842  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0008b6fe  00000000  00000000  0004efb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003bfc  00000000  00000000  000da6b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	c8 2a 40 20 89 17 40 00 39 18 40 00 39 18 40 00     .*@ ..@.9.@.9.@.
  400010:	39 18 40 00 39 18 40 00 39 18 40 00 00 00 00 00     9.@.9.@.9.@.....
	...
  40002c:	39 18 40 00 39 18 40 00 00 00 00 00 39 18 40 00     9.@.9.@.....9.@.
  40003c:	d9 1d 40 00 39 18 40 00 39 18 40 00 39 18 40 00     ..@.9.@.9.@.9.@.
  40004c:	39 18 40 00 39 18 40 00 39 18 40 00 39 18 40 00     9.@.9.@.9.@.9.@.
  40005c:	39 18 40 00 39 18 40 00 00 00 00 00 41 13 40 00     9.@.9.@.....A.@.
  40006c:	59 13 40 00 71 13 40 00 39 18 40 00 39 18 40 00     Y.@.q.@.9.@.9.@.
  40007c:	39 18 40 00 89 13 40 00 a1 13 40 00 39 18 40 00     9.@...@...@.9.@.
  40008c:	39 18 40 00 39 18 40 00 39 18 40 00 39 18 40 00     9.@.9.@.9.@.9.@.
  40009c:	39 18 40 00 39 18 40 00 39 18 40 00 39 18 40 00     9.@.9.@.9.@.9.@.
  4000ac:	39 18 40 00 39 18 40 00 39 18 40 00 39 18 40 00     9.@.9.@.9.@.9.@.
  4000bc:	39 18 40 00 39 18 40 00 39 18 40 00 39 18 40 00     9.@.9.@.9.@.9.@.
  4000cc:	39 18 40 00 00 00 00 00 39 18 40 00 00 00 00 00     9.@.....9.@.....
  4000dc:	39 18 40 00 39 18 40 00 39 18 40 00 39 18 40 00     9.@.9.@.9.@.9.@.
  4000ec:	39 18 40 00 39 18 40 00 39 18 40 00 39 18 40 00     9.@.9.@.9.@.9.@.
  4000fc:	39 18 40 00 39 18 40 00 39 18 40 00 39 18 40 00     9.@.9.@.9.@.9.@.
  40010c:	39 18 40 00 39 18 40 00 00 00 00 00 00 00 00 00     9.@.9.@.........
  40011c:	00 00 00 00 39 18 40 00 39 18 40 00 39 18 40 00     ....9.@.9.@.9.@.
  40012c:	39 18 40 00 39 18 40 00 00 00 00 00 39 18 40 00     9.@.9.@.....9.@.
  40013c:	39 18 40 00                                         9.@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009c0 	.word	0x204009c0
  40015c:	00000000 	.word	0x00000000
  400160:	0040726c 	.word	0x0040726c

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040726c 	.word	0x0040726c
  4001a0:	204009c4 	.word	0x204009c4
  4001a4:	0040726c 	.word	0x0040726c
  4001a8:	00000000 	.word	0x00000000

004001ac <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4001ac:	b480      	push	{r7}
  4001ae:	b089      	sub	sp, #36	; 0x24
  4001b0:	af00      	add	r7, sp, #0
  4001b2:	60f8      	str	r0, [r7, #12]
  4001b4:	60b9      	str	r1, [r7, #8]
  4001b6:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4001b8:	68bb      	ldr	r3, [r7, #8]
  4001ba:	011a      	lsls	r2, r3, #4
  4001bc:	687b      	ldr	r3, [r7, #4]
  4001be:	429a      	cmp	r2, r3
  4001c0:	d802      	bhi.n	4001c8 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  4001c2:	2310      	movs	r3, #16
  4001c4:	61fb      	str	r3, [r7, #28]
  4001c6:	e001      	b.n	4001cc <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  4001c8:	2308      	movs	r3, #8
  4001ca:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4001cc:	687b      	ldr	r3, [r7, #4]
  4001ce:	00da      	lsls	r2, r3, #3
  4001d0:	69fb      	ldr	r3, [r7, #28]
  4001d2:	68b9      	ldr	r1, [r7, #8]
  4001d4:	fb01 f303 	mul.w	r3, r1, r3
  4001d8:	085b      	lsrs	r3, r3, #1
  4001da:	441a      	add	r2, r3
  4001dc:	69fb      	ldr	r3, [r7, #28]
  4001de:	68b9      	ldr	r1, [r7, #8]
  4001e0:	fb01 f303 	mul.w	r3, r1, r3
  4001e4:	fbb2 f3f3 	udiv	r3, r2, r3
  4001e8:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  4001ea:	69bb      	ldr	r3, [r7, #24]
  4001ec:	08db      	lsrs	r3, r3, #3
  4001ee:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  4001f0:	69bb      	ldr	r3, [r7, #24]
  4001f2:	f003 0307 	and.w	r3, r3, #7
  4001f6:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4001f8:	697b      	ldr	r3, [r7, #20]
  4001fa:	2b00      	cmp	r3, #0
  4001fc:	d003      	beq.n	400206 <usart_set_async_baudrate+0x5a>
  4001fe:	697b      	ldr	r3, [r7, #20]
  400200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  400204:	d301      	bcc.n	40020a <usart_set_async_baudrate+0x5e>
		return 1;
  400206:	2301      	movs	r3, #1
  400208:	e00f      	b.n	40022a <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  40020a:	69fb      	ldr	r3, [r7, #28]
  40020c:	2b08      	cmp	r3, #8
  40020e:	d105      	bne.n	40021c <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  400210:	68fb      	ldr	r3, [r7, #12]
  400212:	685b      	ldr	r3, [r3, #4]
  400214:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  400218:	68fb      	ldr	r3, [r7, #12]
  40021a:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  40021c:	693b      	ldr	r3, [r7, #16]
  40021e:	041a      	lsls	r2, r3, #16
  400220:	697b      	ldr	r3, [r7, #20]
  400222:	431a      	orrs	r2, r3
  400224:	68fb      	ldr	r3, [r7, #12]
  400226:	621a      	str	r2, [r3, #32]

	return 0;
  400228:	2300      	movs	r3, #0
}
  40022a:	4618      	mov	r0, r3
  40022c:	3724      	adds	r7, #36	; 0x24
  40022e:	46bd      	mov	sp, r7
  400230:	f85d 7b04 	ldr.w	r7, [sp], #4
  400234:	4770      	bx	lr
	...

00400238 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  400238:	b580      	push	{r7, lr}
  40023a:	b082      	sub	sp, #8
  40023c:	af00      	add	r7, sp, #0
  40023e:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  400240:	6878      	ldr	r0, [r7, #4]
  400242:	4b0d      	ldr	r3, [pc, #52]	; (400278 <usart_reset+0x40>)
  400244:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  400246:	687b      	ldr	r3, [r7, #4]
  400248:	2200      	movs	r2, #0
  40024a:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  40024c:	687b      	ldr	r3, [r7, #4]
  40024e:	2200      	movs	r2, #0
  400250:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400252:	687b      	ldr	r3, [r7, #4]
  400254:	2200      	movs	r2, #0
  400256:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  400258:	6878      	ldr	r0, [r7, #4]
  40025a:	4b08      	ldr	r3, [pc, #32]	; (40027c <usart_reset+0x44>)
  40025c:	4798      	blx	r3
	usart_reset_rx(p_usart);
  40025e:	6878      	ldr	r0, [r7, #4]
  400260:	4b07      	ldr	r3, [pc, #28]	; (400280 <usart_reset+0x48>)
  400262:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  400264:	6878      	ldr	r0, [r7, #4]
  400266:	4b07      	ldr	r3, [pc, #28]	; (400284 <usart_reset+0x4c>)
  400268:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  40026a:	6878      	ldr	r0, [r7, #4]
  40026c:	4b06      	ldr	r3, [pc, #24]	; (400288 <usart_reset+0x50>)
  40026e:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
  400270:	bf00      	nop
  400272:	3708      	adds	r7, #8
  400274:	46bd      	mov	sp, r7
  400276:	bd80      	pop	{r7, pc}
  400278:	00400419 	.word	0x00400419
  40027c:	0040032b 	.word	0x0040032b
  400280:	0040035f 	.word	0x0040035f
  400284:	00400379 	.word	0x00400379
  400288:	00400395 	.word	0x00400395

0040028c <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  40028c:	b580      	push	{r7, lr}
  40028e:	b084      	sub	sp, #16
  400290:	af00      	add	r7, sp, #0
  400292:	60f8      	str	r0, [r7, #12]
  400294:	60b9      	str	r1, [r7, #8]
  400296:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  400298:	68f8      	ldr	r0, [r7, #12]
  40029a:	4b1a      	ldr	r3, [pc, #104]	; (400304 <usart_init_rs232+0x78>)
  40029c:	4798      	blx	r3

	ul_reg_val = 0;
  40029e:	4b1a      	ldr	r3, [pc, #104]	; (400308 <usart_init_rs232+0x7c>)
  4002a0:	2200      	movs	r2, #0
  4002a2:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4002a4:	68bb      	ldr	r3, [r7, #8]
  4002a6:	2b00      	cmp	r3, #0
  4002a8:	d009      	beq.n	4002be <usart_init_rs232+0x32>
  4002aa:	68bb      	ldr	r3, [r7, #8]
  4002ac:	681b      	ldr	r3, [r3, #0]
  4002ae:	687a      	ldr	r2, [r7, #4]
  4002b0:	4619      	mov	r1, r3
  4002b2:	68f8      	ldr	r0, [r7, #12]
  4002b4:	4b15      	ldr	r3, [pc, #84]	; (40030c <usart_init_rs232+0x80>)
  4002b6:	4798      	blx	r3
  4002b8:	4603      	mov	r3, r0
  4002ba:	2b00      	cmp	r3, #0
  4002bc:	d001      	beq.n	4002c2 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  4002be:	2301      	movs	r3, #1
  4002c0:	e01b      	b.n	4002fa <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4002c2:	68bb      	ldr	r3, [r7, #8]
  4002c4:	685a      	ldr	r2, [r3, #4]
  4002c6:	68bb      	ldr	r3, [r7, #8]
  4002c8:	689b      	ldr	r3, [r3, #8]
  4002ca:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4002cc:	68bb      	ldr	r3, [r7, #8]
  4002ce:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4002d0:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4002d2:	68bb      	ldr	r3, [r7, #8]
  4002d4:	68db      	ldr	r3, [r3, #12]
  4002d6:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4002d8:	4b0b      	ldr	r3, [pc, #44]	; (400308 <usart_init_rs232+0x7c>)
  4002da:	681b      	ldr	r3, [r3, #0]
  4002dc:	4313      	orrs	r3, r2
  4002de:	4a0a      	ldr	r2, [pc, #40]	; (400308 <usart_init_rs232+0x7c>)
  4002e0:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  4002e2:	4b09      	ldr	r3, [pc, #36]	; (400308 <usart_init_rs232+0x7c>)
  4002e4:	681b      	ldr	r3, [r3, #0]
  4002e6:	4a08      	ldr	r2, [pc, #32]	; (400308 <usart_init_rs232+0x7c>)
  4002e8:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  4002ea:	68fb      	ldr	r3, [r7, #12]
  4002ec:	685a      	ldr	r2, [r3, #4]
  4002ee:	4b06      	ldr	r3, [pc, #24]	; (400308 <usart_init_rs232+0x7c>)
  4002f0:	681b      	ldr	r3, [r3, #0]
  4002f2:	431a      	orrs	r2, r3
  4002f4:	68fb      	ldr	r3, [r7, #12]
  4002f6:	605a      	str	r2, [r3, #4]

	return 0;
  4002f8:	2300      	movs	r3, #0
}
  4002fa:	4618      	mov	r0, r3
  4002fc:	3710      	adds	r7, #16
  4002fe:	46bd      	mov	sp, r7
  400300:	bd80      	pop	{r7, pc}
  400302:	bf00      	nop
  400304:	00400239 	.word	0x00400239
  400308:	204009dc 	.word	0x204009dc
  40030c:	004001ad 	.word	0x004001ad

00400310 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  400310:	b480      	push	{r7}
  400312:	b083      	sub	sp, #12
  400314:	af00      	add	r7, sp, #0
  400316:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  400318:	687b      	ldr	r3, [r7, #4]
  40031a:	2240      	movs	r2, #64	; 0x40
  40031c:	601a      	str	r2, [r3, #0]
}
  40031e:	bf00      	nop
  400320:	370c      	adds	r7, #12
  400322:	46bd      	mov	sp, r7
  400324:	f85d 7b04 	ldr.w	r7, [sp], #4
  400328:	4770      	bx	lr

0040032a <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  40032a:	b480      	push	{r7}
  40032c:	b083      	sub	sp, #12
  40032e:	af00      	add	r7, sp, #0
  400330:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400332:	687b      	ldr	r3, [r7, #4]
  400334:	2288      	movs	r2, #136	; 0x88
  400336:	601a      	str	r2, [r3, #0]
}
  400338:	bf00      	nop
  40033a:	370c      	adds	r7, #12
  40033c:	46bd      	mov	sp, r7
  40033e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400342:	4770      	bx	lr

00400344 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  400344:	b480      	push	{r7}
  400346:	b083      	sub	sp, #12
  400348:	af00      	add	r7, sp, #0
  40034a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  40034c:	687b      	ldr	r3, [r7, #4]
  40034e:	2210      	movs	r2, #16
  400350:	601a      	str	r2, [r3, #0]
}
  400352:	bf00      	nop
  400354:	370c      	adds	r7, #12
  400356:	46bd      	mov	sp, r7
  400358:	f85d 7b04 	ldr.w	r7, [sp], #4
  40035c:	4770      	bx	lr

0040035e <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  40035e:	b480      	push	{r7}
  400360:	b083      	sub	sp, #12
  400362:	af00      	add	r7, sp, #0
  400364:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400366:	687b      	ldr	r3, [r7, #4]
  400368:	2224      	movs	r2, #36	; 0x24
  40036a:	601a      	str	r2, [r3, #0]
}
  40036c:	bf00      	nop
  40036e:	370c      	adds	r7, #12
  400370:	46bd      	mov	sp, r7
  400372:	f85d 7b04 	ldr.w	r7, [sp], #4
  400376:	4770      	bx	lr

00400378 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  400378:	b480      	push	{r7}
  40037a:	b083      	sub	sp, #12
  40037c:	af00      	add	r7, sp, #0
  40037e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  400380:	687b      	ldr	r3, [r7, #4]
  400382:	f44f 7280 	mov.w	r2, #256	; 0x100
  400386:	601a      	str	r2, [r3, #0]
}
  400388:	bf00      	nop
  40038a:	370c      	adds	r7, #12
  40038c:	46bd      	mov	sp, r7
  40038e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400392:	4770      	bx	lr

00400394 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  400394:	b480      	push	{r7}
  400396:	b083      	sub	sp, #12
  400398:	af00      	add	r7, sp, #0
  40039a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  40039c:	687b      	ldr	r3, [r7, #4]
  40039e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4003a2:	601a      	str	r2, [r3, #0]
}
  4003a4:	bf00      	nop
  4003a6:	370c      	adds	r7, #12
  4003a8:	46bd      	mov	sp, r7
  4003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4003ae:	4770      	bx	lr

004003b0 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  4003b0:	b480      	push	{r7}
  4003b2:	b083      	sub	sp, #12
  4003b4:	af00      	add	r7, sp, #0
  4003b6:	6078      	str	r0, [r7, #4]
  4003b8:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4003ba:	687b      	ldr	r3, [r7, #4]
  4003bc:	695b      	ldr	r3, [r3, #20]
  4003be:	f003 0302 	and.w	r3, r3, #2
  4003c2:	2b00      	cmp	r3, #0
  4003c4:	d101      	bne.n	4003ca <usart_write+0x1a>
		return 1;
  4003c6:	2301      	movs	r3, #1
  4003c8:	e005      	b.n	4003d6 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4003ca:	683b      	ldr	r3, [r7, #0]
  4003cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4003d0:	687b      	ldr	r3, [r7, #4]
  4003d2:	61da      	str	r2, [r3, #28]
	return 0;
  4003d4:	2300      	movs	r3, #0
}
  4003d6:	4618      	mov	r0, r3
  4003d8:	370c      	adds	r7, #12
  4003da:	46bd      	mov	sp, r7
  4003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4003e0:	4770      	bx	lr

004003e2 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  4003e2:	b480      	push	{r7}
  4003e4:	b083      	sub	sp, #12
  4003e6:	af00      	add	r7, sp, #0
  4003e8:	6078      	str	r0, [r7, #4]
  4003ea:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4003ec:	687b      	ldr	r3, [r7, #4]
  4003ee:	695b      	ldr	r3, [r3, #20]
  4003f0:	f003 0301 	and.w	r3, r3, #1
  4003f4:	2b00      	cmp	r3, #0
  4003f6:	d101      	bne.n	4003fc <usart_read+0x1a>
		return 1;
  4003f8:	2301      	movs	r3, #1
  4003fa:	e006      	b.n	40040a <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4003fc:	687b      	ldr	r3, [r7, #4]
  4003fe:	699b      	ldr	r3, [r3, #24]
  400400:	f3c3 0208 	ubfx	r2, r3, #0, #9
  400404:	683b      	ldr	r3, [r7, #0]
  400406:	601a      	str	r2, [r3, #0]

	return 0;
  400408:	2300      	movs	r3, #0
}
  40040a:	4618      	mov	r0, r3
  40040c:	370c      	adds	r7, #12
  40040e:	46bd      	mov	sp, r7
  400410:	f85d 7b04 	ldr.w	r7, [sp], #4
  400414:	4770      	bx	lr
	...

00400418 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  400418:	b480      	push	{r7}
  40041a:	b083      	sub	sp, #12
  40041c:	af00      	add	r7, sp, #0
  40041e:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400420:	687b      	ldr	r3, [r7, #4]
  400422:	4a04      	ldr	r2, [pc, #16]	; (400434 <usart_disable_writeprotect+0x1c>)
  400424:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  400428:	bf00      	nop
  40042a:	370c      	adds	r7, #12
  40042c:	46bd      	mov	sp, r7
  40042e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400432:	4770      	bx	lr
  400434:	55534100 	.word	0x55534100

00400438 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  400438:	b580      	push	{r7, lr}
  40043a:	b082      	sub	sp, #8
  40043c:	af00      	add	r7, sp, #0
  40043e:	6078      	str	r0, [r7, #4]
  400440:	460b      	mov	r3, r1
  400442:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400444:	687b      	ldr	r3, [r7, #4]
  400446:	4a36      	ldr	r2, [pc, #216]	; (400520 <usart_serial_putchar+0xe8>)
  400448:	4293      	cmp	r3, r2
  40044a:	d10a      	bne.n	400462 <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  40044c:	bf00      	nop
  40044e:	78fb      	ldrb	r3, [r7, #3]
  400450:	4619      	mov	r1, r3
  400452:	6878      	ldr	r0, [r7, #4]
  400454:	4b33      	ldr	r3, [pc, #204]	; (400524 <usart_serial_putchar+0xec>)
  400456:	4798      	blx	r3
  400458:	4603      	mov	r3, r0
  40045a:	2b00      	cmp	r3, #0
  40045c:	d1f7      	bne.n	40044e <usart_serial_putchar+0x16>
		return 1;
  40045e:	2301      	movs	r3, #1
  400460:	e05a      	b.n	400518 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400462:	687b      	ldr	r3, [r7, #4]
  400464:	4a30      	ldr	r2, [pc, #192]	; (400528 <usart_serial_putchar+0xf0>)
  400466:	4293      	cmp	r3, r2
  400468:	d10a      	bne.n	400480 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  40046a:	bf00      	nop
  40046c:	78fb      	ldrb	r3, [r7, #3]
  40046e:	4619      	mov	r1, r3
  400470:	6878      	ldr	r0, [r7, #4]
  400472:	4b2c      	ldr	r3, [pc, #176]	; (400524 <usart_serial_putchar+0xec>)
  400474:	4798      	blx	r3
  400476:	4603      	mov	r3, r0
  400478:	2b00      	cmp	r3, #0
  40047a:	d1f7      	bne.n	40046c <usart_serial_putchar+0x34>
		return 1;
  40047c:	2301      	movs	r3, #1
  40047e:	e04b      	b.n	400518 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  400480:	687b      	ldr	r3, [r7, #4]
  400482:	4a2a      	ldr	r2, [pc, #168]	; (40052c <usart_serial_putchar+0xf4>)
  400484:	4293      	cmp	r3, r2
  400486:	d10a      	bne.n	40049e <usart_serial_putchar+0x66>
		while (uart_write((Uart*)p_usart, c)!=0);
  400488:	bf00      	nop
  40048a:	78fb      	ldrb	r3, [r7, #3]
  40048c:	4619      	mov	r1, r3
  40048e:	6878      	ldr	r0, [r7, #4]
  400490:	4b24      	ldr	r3, [pc, #144]	; (400524 <usart_serial_putchar+0xec>)
  400492:	4798      	blx	r3
  400494:	4603      	mov	r3, r0
  400496:	2b00      	cmp	r3, #0
  400498:	d1f7      	bne.n	40048a <usart_serial_putchar+0x52>
		return 1;
  40049a:	2301      	movs	r3, #1
  40049c:	e03c      	b.n	400518 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  40049e:	687b      	ldr	r3, [r7, #4]
  4004a0:	4a23      	ldr	r2, [pc, #140]	; (400530 <usart_serial_putchar+0xf8>)
  4004a2:	4293      	cmp	r3, r2
  4004a4:	d10a      	bne.n	4004bc <usart_serial_putchar+0x84>
		while (uart_write((Uart*)p_usart, c)!=0);
  4004a6:	bf00      	nop
  4004a8:	78fb      	ldrb	r3, [r7, #3]
  4004aa:	4619      	mov	r1, r3
  4004ac:	6878      	ldr	r0, [r7, #4]
  4004ae:	4b1d      	ldr	r3, [pc, #116]	; (400524 <usart_serial_putchar+0xec>)
  4004b0:	4798      	blx	r3
  4004b2:	4603      	mov	r3, r0
  4004b4:	2b00      	cmp	r3, #0
  4004b6:	d1f7      	bne.n	4004a8 <usart_serial_putchar+0x70>
		return 1;
  4004b8:	2301      	movs	r3, #1
  4004ba:	e02d      	b.n	400518 <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4004bc:	687b      	ldr	r3, [r7, #4]
  4004be:	4a1d      	ldr	r2, [pc, #116]	; (400534 <usart_serial_putchar+0xfc>)
  4004c0:	4293      	cmp	r3, r2
  4004c2:	d10a      	bne.n	4004da <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
  4004c4:	bf00      	nop
  4004c6:	78fb      	ldrb	r3, [r7, #3]
  4004c8:	4619      	mov	r1, r3
  4004ca:	6878      	ldr	r0, [r7, #4]
  4004cc:	4b1a      	ldr	r3, [pc, #104]	; (400538 <usart_serial_putchar+0x100>)
  4004ce:	4798      	blx	r3
  4004d0:	4603      	mov	r3, r0
  4004d2:	2b00      	cmp	r3, #0
  4004d4:	d1f7      	bne.n	4004c6 <usart_serial_putchar+0x8e>
		return 1;
  4004d6:	2301      	movs	r3, #1
  4004d8:	e01e      	b.n	400518 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4004da:	687b      	ldr	r3, [r7, #4]
  4004dc:	4a17      	ldr	r2, [pc, #92]	; (40053c <usart_serial_putchar+0x104>)
  4004de:	4293      	cmp	r3, r2
  4004e0:	d10a      	bne.n	4004f8 <usart_serial_putchar+0xc0>
		while (usart_write(p_usart, c)!=0);
  4004e2:	bf00      	nop
  4004e4:	78fb      	ldrb	r3, [r7, #3]
  4004e6:	4619      	mov	r1, r3
  4004e8:	6878      	ldr	r0, [r7, #4]
  4004ea:	4b13      	ldr	r3, [pc, #76]	; (400538 <usart_serial_putchar+0x100>)
  4004ec:	4798      	blx	r3
  4004ee:	4603      	mov	r3, r0
  4004f0:	2b00      	cmp	r3, #0
  4004f2:	d1f7      	bne.n	4004e4 <usart_serial_putchar+0xac>
		return 1;
  4004f4:	2301      	movs	r3, #1
  4004f6:	e00f      	b.n	400518 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4004f8:	687b      	ldr	r3, [r7, #4]
  4004fa:	4a11      	ldr	r2, [pc, #68]	; (400540 <usart_serial_putchar+0x108>)
  4004fc:	4293      	cmp	r3, r2
  4004fe:	d10a      	bne.n	400516 <usart_serial_putchar+0xde>
		while (usart_write(p_usart, c)!=0);
  400500:	bf00      	nop
  400502:	78fb      	ldrb	r3, [r7, #3]
  400504:	4619      	mov	r1, r3
  400506:	6878      	ldr	r0, [r7, #4]
  400508:	4b0b      	ldr	r3, [pc, #44]	; (400538 <usart_serial_putchar+0x100>)
  40050a:	4798      	blx	r3
  40050c:	4603      	mov	r3, r0
  40050e:	2b00      	cmp	r3, #0
  400510:	d1f7      	bne.n	400502 <usart_serial_putchar+0xca>
		return 1;
  400512:	2301      	movs	r3, #1
  400514:	e000      	b.n	400518 <usart_serial_putchar+0xe0>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  400516:	2300      	movs	r3, #0
}
  400518:	4618      	mov	r0, r3
  40051a:	3708      	adds	r7, #8
  40051c:	46bd      	mov	sp, r7
  40051e:	bd80      	pop	{r7, pc}
  400520:	400e0800 	.word	0x400e0800
  400524:	004005d9 	.word	0x004005d9
  400528:	400e0a00 	.word	0x400e0a00
  40052c:	400e1a00 	.word	0x400e1a00
  400530:	400e1c00 	.word	0x400e1c00
  400534:	40024000 	.word	0x40024000
  400538:	004003b1 	.word	0x004003b1
  40053c:	40028000 	.word	0x40028000
  400540:	4002c000 	.word	0x4002c000

00400544 <usart_serial_write_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
  400544:	b580      	push	{r7, lr}
  400546:	b084      	sub	sp, #16
  400548:	af00      	add	r7, sp, #0
  40054a:	60f8      	str	r0, [r7, #12]
  40054c:	60b9      	str	r1, [r7, #8]
  40054e:	607a      	str	r2, [r7, #4]
	while (len) {
  400550:	e00b      	b.n	40056a <usart_serial_write_packet+0x26>
		usart_serial_putchar(usart, *data);
  400552:	68bb      	ldr	r3, [r7, #8]
  400554:	781b      	ldrb	r3, [r3, #0]
  400556:	4619      	mov	r1, r3
  400558:	68f8      	ldr	r0, [r7, #12]
  40055a:	4b08      	ldr	r3, [pc, #32]	; (40057c <usart_serial_write_packet+0x38>)
  40055c:	4798      	blx	r3
		len--;
  40055e:	687b      	ldr	r3, [r7, #4]
  400560:	3b01      	subs	r3, #1
  400562:	607b      	str	r3, [r7, #4]
		data++;
  400564:	68bb      	ldr	r3, [r7, #8]
  400566:	3301      	adds	r3, #1
  400568:	60bb      	str	r3, [r7, #8]
	while (len) {
  40056a:	687b      	ldr	r3, [r7, #4]
  40056c:	2b00      	cmp	r3, #0
  40056e:	d1f0      	bne.n	400552 <usart_serial_write_packet+0xe>
	}
	return STATUS_OK;
  400570:	2300      	movs	r3, #0
}
  400572:	4618      	mov	r0, r3
  400574:	3710      	adds	r7, #16
  400576:	46bd      	mov	sp, r7
  400578:	bd80      	pop	{r7, pc}
  40057a:	bf00      	nop
  40057c:	00400439 	.word	0x00400439

00400580 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  400580:	b480      	push	{r7}
  400582:	b085      	sub	sp, #20
  400584:	af00      	add	r7, sp, #0
  400586:	6078      	str	r0, [r7, #4]
  400588:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  40058a:	2300      	movs	r3, #0
  40058c:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  40058e:	687b      	ldr	r3, [r7, #4]
  400590:	22ac      	movs	r2, #172	; 0xac
  400592:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  400594:	683b      	ldr	r3, [r7, #0]
  400596:	681a      	ldr	r2, [r3, #0]
  400598:	683b      	ldr	r3, [r7, #0]
  40059a:	685b      	ldr	r3, [r3, #4]
  40059c:	fbb2 f3f3 	udiv	r3, r2, r3
  4005a0:	091b      	lsrs	r3, r3, #4
  4005a2:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  4005a4:	68fb      	ldr	r3, [r7, #12]
  4005a6:	2b00      	cmp	r3, #0
  4005a8:	d003      	beq.n	4005b2 <uart_init+0x32>
  4005aa:	68fb      	ldr	r3, [r7, #12]
  4005ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  4005b0:	d301      	bcc.n	4005b6 <uart_init+0x36>
		return 1;
  4005b2:	2301      	movs	r3, #1
  4005b4:	e00a      	b.n	4005cc <uart_init+0x4c>

	p_uart->UART_BRGR = cd;
  4005b6:	687b      	ldr	r3, [r7, #4]
  4005b8:	68fa      	ldr	r2, [r7, #12]
  4005ba:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  4005bc:	683b      	ldr	r3, [r7, #0]
  4005be:	689a      	ldr	r2, [r3, #8]
  4005c0:	687b      	ldr	r3, [r7, #4]
  4005c2:	605a      	str	r2, [r3, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  4005c4:	687b      	ldr	r3, [r7, #4]
  4005c6:	2250      	movs	r2, #80	; 0x50
  4005c8:	601a      	str	r2, [r3, #0]

	return 0;
  4005ca:	2300      	movs	r3, #0
}
  4005cc:	4618      	mov	r0, r3
  4005ce:	3714      	adds	r7, #20
  4005d0:	46bd      	mov	sp, r7
  4005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4005d6:	4770      	bx	lr

004005d8 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  4005d8:	b480      	push	{r7}
  4005da:	b083      	sub	sp, #12
  4005dc:	af00      	add	r7, sp, #0
  4005de:	6078      	str	r0, [r7, #4]
  4005e0:	460b      	mov	r3, r1
  4005e2:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4005e4:	687b      	ldr	r3, [r7, #4]
  4005e6:	695b      	ldr	r3, [r3, #20]
  4005e8:	f003 0302 	and.w	r3, r3, #2
  4005ec:	2b00      	cmp	r3, #0
  4005ee:	d101      	bne.n	4005f4 <uart_write+0x1c>
		return 1;
  4005f0:	2301      	movs	r3, #1
  4005f2:	e003      	b.n	4005fc <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  4005f4:	78fa      	ldrb	r2, [r7, #3]
  4005f6:	687b      	ldr	r3, [r7, #4]
  4005f8:	61da      	str	r2, [r3, #28]
	return 0;
  4005fa:	2300      	movs	r3, #0
}
  4005fc:	4618      	mov	r0, r3
  4005fe:	370c      	adds	r7, #12
  400600:	46bd      	mov	sp, r7
  400602:	f85d 7b04 	ldr.w	r7, [sp], #4
  400606:	4770      	bx	lr

00400608 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ      BOARD_FREQ_MAINCK_XTAL    //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ    BOARD_FREQ_MAINCK_BYPASS  //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  400608:	b580      	push	{r7, lr}
  40060a:	b082      	sub	sp, #8
  40060c:	af00      	add	r7, sp, #0
  40060e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400610:	687b      	ldr	r3, [r7, #4]
  400612:	2b07      	cmp	r3, #7
  400614:	d831      	bhi.n	40067a <osc_enable+0x72>
  400616:	a201      	add	r2, pc, #4	; (adr r2, 40061c <osc_enable+0x14>)
  400618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40061c:	00400679 	.word	0x00400679
  400620:	0040063d 	.word	0x0040063d
  400624:	00400645 	.word	0x00400645
  400628:	0040064d 	.word	0x0040064d
  40062c:	00400655 	.word	0x00400655
  400630:	0040065d 	.word	0x0040065d
  400634:	00400665 	.word	0x00400665
  400638:	0040066f 	.word	0x0040066f
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  40063c:	2000      	movs	r0, #0
  40063e:	4b11      	ldr	r3, [pc, #68]	; (400684 <osc_enable+0x7c>)
  400640:	4798      	blx	r3
		break;
  400642:	e01a      	b.n	40067a <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  400644:	2001      	movs	r0, #1
  400646:	4b0f      	ldr	r3, [pc, #60]	; (400684 <osc_enable+0x7c>)
  400648:	4798      	blx	r3
		break;
  40064a:	e016      	b.n	40067a <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  40064c:	2000      	movs	r0, #0
  40064e:	4b0e      	ldr	r3, [pc, #56]	; (400688 <osc_enable+0x80>)
  400650:	4798      	blx	r3
		break;
  400652:	e012      	b.n	40067a <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  400654:	2010      	movs	r0, #16
  400656:	4b0c      	ldr	r3, [pc, #48]	; (400688 <osc_enable+0x80>)
  400658:	4798      	blx	r3
		break;
  40065a:	e00e      	b.n	40067a <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  40065c:	2020      	movs	r0, #32
  40065e:	4b0a      	ldr	r3, [pc, #40]	; (400688 <osc_enable+0x80>)
  400660:	4798      	blx	r3
		break;
  400662:	e00a      	b.n	40067a <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400664:	213e      	movs	r1, #62	; 0x3e
  400666:	2000      	movs	r0, #0
  400668:	4b08      	ldr	r3, [pc, #32]	; (40068c <osc_enable+0x84>)
  40066a:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40066c:	e005      	b.n	40067a <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  40066e:	213e      	movs	r1, #62	; 0x3e
  400670:	2001      	movs	r0, #1
  400672:	4b06      	ldr	r3, [pc, #24]	; (40068c <osc_enable+0x84>)
  400674:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400676:	e000      	b.n	40067a <osc_enable+0x72>
		break;
  400678:	bf00      	nop
	}
}
  40067a:	bf00      	nop
  40067c:	3708      	adds	r7, #8
  40067e:	46bd      	mov	sp, r7
  400680:	bd80      	pop	{r7, pc}
  400682:	bf00      	nop
  400684:	004014b9 	.word	0x004014b9
  400688:	00401525 	.word	0x00401525
  40068c:	00401595 	.word	0x00401595

00400690 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400690:	b580      	push	{r7, lr}
  400692:	b082      	sub	sp, #8
  400694:	af00      	add	r7, sp, #0
  400696:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400698:	687b      	ldr	r3, [r7, #4]
  40069a:	2b07      	cmp	r3, #7
  40069c:	d826      	bhi.n	4006ec <osc_is_ready+0x5c>
  40069e:	a201      	add	r2, pc, #4	; (adr r2, 4006a4 <osc_is_ready+0x14>)
  4006a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4006a4:	004006c5 	.word	0x004006c5
  4006a8:	004006c9 	.word	0x004006c9
  4006ac:	004006c9 	.word	0x004006c9
  4006b0:	004006db 	.word	0x004006db
  4006b4:	004006db 	.word	0x004006db
  4006b8:	004006db 	.word	0x004006db
  4006bc:	004006db 	.word	0x004006db
  4006c0:	004006db 	.word	0x004006db
	case OSC_SLCK_32K_RC:
		return 1;
  4006c4:	2301      	movs	r3, #1
  4006c6:	e012      	b.n	4006ee <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  4006c8:	4b0b      	ldr	r3, [pc, #44]	; (4006f8 <osc_is_ready+0x68>)
  4006ca:	4798      	blx	r3
  4006cc:	4603      	mov	r3, r0
  4006ce:	2b00      	cmp	r3, #0
  4006d0:	bf14      	ite	ne
  4006d2:	2301      	movne	r3, #1
  4006d4:	2300      	moveq	r3, #0
  4006d6:	b2db      	uxtb	r3, r3
  4006d8:	e009      	b.n	4006ee <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4006da:	4b08      	ldr	r3, [pc, #32]	; (4006fc <osc_is_ready+0x6c>)
  4006dc:	4798      	blx	r3
  4006de:	4603      	mov	r3, r0
  4006e0:	2b00      	cmp	r3, #0
  4006e2:	bf14      	ite	ne
  4006e4:	2301      	movne	r3, #1
  4006e6:	2300      	moveq	r3, #0
  4006e8:	b2db      	uxtb	r3, r3
  4006ea:	e000      	b.n	4006ee <osc_is_ready+0x5e>
	}

	return 0;
  4006ec:	2300      	movs	r3, #0
}
  4006ee:	4618      	mov	r0, r3
  4006f0:	3708      	adds	r7, #8
  4006f2:	46bd      	mov	sp, r7
  4006f4:	bd80      	pop	{r7, pc}
  4006f6:	bf00      	nop
  4006f8:	004014f1 	.word	0x004014f1
  4006fc:	0040160d 	.word	0x0040160d

00400700 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400700:	b480      	push	{r7}
  400702:	b083      	sub	sp, #12
  400704:	af00      	add	r7, sp, #0
  400706:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400708:	687b      	ldr	r3, [r7, #4]
  40070a:	2b07      	cmp	r3, #7
  40070c:	d825      	bhi.n	40075a <osc_get_rate+0x5a>
  40070e:	a201      	add	r2, pc, #4	; (adr r2, 400714 <osc_get_rate+0x14>)
  400710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400714:	00400735 	.word	0x00400735
  400718:	0040073b 	.word	0x0040073b
  40071c:	00400741 	.word	0x00400741
  400720:	00400747 	.word	0x00400747
  400724:	0040074b 	.word	0x0040074b
  400728:	0040074f 	.word	0x0040074f
  40072c:	00400753 	.word	0x00400753
  400730:	00400757 	.word	0x00400757
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400734:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400738:	e010      	b.n	40075c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40073a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40073e:	e00d      	b.n	40075c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400740:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400744:	e00a      	b.n	40075c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400746:	4b08      	ldr	r3, [pc, #32]	; (400768 <osc_get_rate+0x68>)
  400748:	e008      	b.n	40075c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40074a:	4b08      	ldr	r3, [pc, #32]	; (40076c <osc_get_rate+0x6c>)
  40074c:	e006      	b.n	40075c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40074e:	4b08      	ldr	r3, [pc, #32]	; (400770 <osc_get_rate+0x70>)
  400750:	e004      	b.n	40075c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400752:	4b07      	ldr	r3, [pc, #28]	; (400770 <osc_get_rate+0x70>)
  400754:	e002      	b.n	40075c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400756:	4b06      	ldr	r3, [pc, #24]	; (400770 <osc_get_rate+0x70>)
  400758:	e000      	b.n	40075c <osc_get_rate+0x5c>
	}

	return 0;
  40075a:	2300      	movs	r3, #0
}
  40075c:	4618      	mov	r0, r3
  40075e:	370c      	adds	r7, #12
  400760:	46bd      	mov	sp, r7
  400762:	f85d 7b04 	ldr.w	r7, [sp], #4
  400766:	4770      	bx	lr
  400768:	003d0900 	.word	0x003d0900
  40076c:	007a1200 	.word	0x007a1200
  400770:	00b71b00 	.word	0x00b71b00

00400774 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400774:	b580      	push	{r7, lr}
  400776:	b082      	sub	sp, #8
  400778:	af00      	add	r7, sp, #0
  40077a:	4603      	mov	r3, r0
  40077c:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  40077e:	bf00      	nop
  400780:	79fb      	ldrb	r3, [r7, #7]
  400782:	4618      	mov	r0, r3
  400784:	4b05      	ldr	r3, [pc, #20]	; (40079c <osc_wait_ready+0x28>)
  400786:	4798      	blx	r3
  400788:	4603      	mov	r3, r0
  40078a:	f083 0301 	eor.w	r3, r3, #1
  40078e:	b2db      	uxtb	r3, r3
  400790:	2b00      	cmp	r3, #0
  400792:	d1f5      	bne.n	400780 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400794:	bf00      	nop
  400796:	3708      	adds	r7, #8
  400798:	46bd      	mov	sp, r7
  40079a:	bd80      	pop	{r7, pc}
  40079c:	00400691 	.word	0x00400691

004007a0 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  4007a0:	b580      	push	{r7, lr}
  4007a2:	b086      	sub	sp, #24
  4007a4:	af00      	add	r7, sp, #0
  4007a6:	60f8      	str	r0, [r7, #12]
  4007a8:	607a      	str	r2, [r7, #4]
  4007aa:	603b      	str	r3, [r7, #0]
  4007ac:	460b      	mov	r3, r1
  4007ae:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  4007b0:	687b      	ldr	r3, [r7, #4]
  4007b2:	2b00      	cmp	r3, #0
  4007b4:	d107      	bne.n	4007c6 <pll_config_init+0x26>
  4007b6:	683b      	ldr	r3, [r7, #0]
  4007b8:	2b00      	cmp	r3, #0
  4007ba:	d104      	bne.n	4007c6 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  4007bc:	68fb      	ldr	r3, [r7, #12]
  4007be:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  4007c2:	601a      	str	r2, [r3, #0]
  4007c4:	e019      	b.n	4007fa <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  4007c6:	7afb      	ldrb	r3, [r7, #11]
  4007c8:	4618      	mov	r0, r3
  4007ca:	4b0e      	ldr	r3, [pc, #56]	; (400804 <pll_config_init+0x64>)
  4007cc:	4798      	blx	r3
  4007ce:	4602      	mov	r2, r0
  4007d0:	687b      	ldr	r3, [r7, #4]
  4007d2:	fbb2 f3f3 	udiv	r3, r2, r3
  4007d6:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  4007d8:	697b      	ldr	r3, [r7, #20]
  4007da:	683a      	ldr	r2, [r7, #0]
  4007dc:	fb02 f303 	mul.w	r3, r2, r3
  4007e0:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  4007e2:	683b      	ldr	r3, [r7, #0]
  4007e4:	3b01      	subs	r3, #1
  4007e6:	041a      	lsls	r2, r3, #16
  4007e8:	4b07      	ldr	r3, [pc, #28]	; (400808 <pll_config_init+0x68>)
  4007ea:	4013      	ands	r3, r2
  4007ec:	687a      	ldr	r2, [r7, #4]
  4007ee:	b2d2      	uxtb	r2, r2
  4007f0:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  4007f2:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  4007f6:	68fb      	ldr	r3, [r7, #12]
  4007f8:	601a      	str	r2, [r3, #0]
	}
}
  4007fa:	bf00      	nop
  4007fc:	3718      	adds	r7, #24
  4007fe:	46bd      	mov	sp, r7
  400800:	bd80      	pop	{r7, pc}
  400802:	bf00      	nop
  400804:	00400701 	.word	0x00400701
  400808:	07ff0000 	.word	0x07ff0000

0040080c <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  40080c:	b580      	push	{r7, lr}
  40080e:	b082      	sub	sp, #8
  400810:	af00      	add	r7, sp, #0
  400812:	6078      	str	r0, [r7, #4]
  400814:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400816:	683b      	ldr	r3, [r7, #0]
  400818:	2b00      	cmp	r3, #0
  40081a:	d108      	bne.n	40082e <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  40081c:	4b09      	ldr	r3, [pc, #36]	; (400844 <pll_enable+0x38>)
  40081e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400820:	4a09      	ldr	r2, [pc, #36]	; (400848 <pll_enable+0x3c>)
  400822:	687b      	ldr	r3, [r7, #4]
  400824:	681b      	ldr	r3, [r3, #0]
  400826:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  40082a:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  40082c:	e005      	b.n	40083a <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  40082e:	4a06      	ldr	r2, [pc, #24]	; (400848 <pll_enable+0x3c>)
  400830:	687b      	ldr	r3, [r7, #4]
  400832:	681b      	ldr	r3, [r3, #0]
  400834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400838:	61d3      	str	r3, [r2, #28]
}
  40083a:	bf00      	nop
  40083c:	3708      	adds	r7, #8
  40083e:	46bd      	mov	sp, r7
  400840:	bd80      	pop	{r7, pc}
  400842:	bf00      	nop
  400844:	00401629 	.word	0x00401629
  400848:	400e0600 	.word	0x400e0600

0040084c <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  40084c:	b580      	push	{r7, lr}
  40084e:	b082      	sub	sp, #8
  400850:	af00      	add	r7, sp, #0
  400852:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400854:	687b      	ldr	r3, [r7, #4]
  400856:	2b00      	cmp	r3, #0
  400858:	d103      	bne.n	400862 <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  40085a:	4b05      	ldr	r3, [pc, #20]	; (400870 <pll_is_locked+0x24>)
  40085c:	4798      	blx	r3
  40085e:	4603      	mov	r3, r0
  400860:	e002      	b.n	400868 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  400862:	4b04      	ldr	r3, [pc, #16]	; (400874 <pll_is_locked+0x28>)
  400864:	4798      	blx	r3
  400866:	4603      	mov	r3, r0
	}
}
  400868:	4618      	mov	r0, r3
  40086a:	3708      	adds	r7, #8
  40086c:	46bd      	mov	sp, r7
  40086e:	bd80      	pop	{r7, pc}
  400870:	00401645 	.word	0x00401645
  400874:	00401661 	.word	0x00401661

00400878 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  400878:	b580      	push	{r7, lr}
  40087a:	b082      	sub	sp, #8
  40087c:	af00      	add	r7, sp, #0
  40087e:	4603      	mov	r3, r0
  400880:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  400882:	79fb      	ldrb	r3, [r7, #7]
  400884:	3b03      	subs	r3, #3
  400886:	2b04      	cmp	r3, #4
  400888:	d808      	bhi.n	40089c <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  40088a:	79fb      	ldrb	r3, [r7, #7]
  40088c:	4618      	mov	r0, r3
  40088e:	4b06      	ldr	r3, [pc, #24]	; (4008a8 <pll_enable_source+0x30>)
  400890:	4798      	blx	r3
		osc_wait_ready(e_src);
  400892:	79fb      	ldrb	r3, [r7, #7]
  400894:	4618      	mov	r0, r3
  400896:	4b05      	ldr	r3, [pc, #20]	; (4008ac <pll_enable_source+0x34>)
  400898:	4798      	blx	r3
		break;
  40089a:	e000      	b.n	40089e <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  40089c:	bf00      	nop
	}
}
  40089e:	bf00      	nop
  4008a0:	3708      	adds	r7, #8
  4008a2:	46bd      	mov	sp, r7
  4008a4:	bd80      	pop	{r7, pc}
  4008a6:	bf00      	nop
  4008a8:	00400609 	.word	0x00400609
  4008ac:	00400775 	.word	0x00400775

004008b0 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  4008b0:	b580      	push	{r7, lr}
  4008b2:	b082      	sub	sp, #8
  4008b4:	af00      	add	r7, sp, #0
  4008b6:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4008b8:	bf00      	nop
  4008ba:	6878      	ldr	r0, [r7, #4]
  4008bc:	4b04      	ldr	r3, [pc, #16]	; (4008d0 <pll_wait_for_lock+0x20>)
  4008be:	4798      	blx	r3
  4008c0:	4603      	mov	r3, r0
  4008c2:	2b00      	cmp	r3, #0
  4008c4:	d0f9      	beq.n	4008ba <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  4008c6:	2300      	movs	r3, #0
}
  4008c8:	4618      	mov	r0, r3
  4008ca:	3708      	adds	r7, #8
  4008cc:	46bd      	mov	sp, r7
  4008ce:	bd80      	pop	{r7, pc}
  4008d0:	0040084d 	.word	0x0040084d

004008d4 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4008d4:	b580      	push	{r7, lr}
  4008d6:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4008d8:	2006      	movs	r0, #6
  4008da:	4b05      	ldr	r3, [pc, #20]	; (4008f0 <sysclk_get_main_hz+0x1c>)
  4008dc:	4798      	blx	r3
  4008de:	4602      	mov	r2, r0
  4008e0:	4613      	mov	r3, r2
  4008e2:	009b      	lsls	r3, r3, #2
  4008e4:	4413      	add	r3, r2
  4008e6:	009a      	lsls	r2, r3, #2
  4008e8:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4008ea:	4618      	mov	r0, r3
  4008ec:	bd80      	pop	{r7, pc}
  4008ee:	bf00      	nop
  4008f0:	00400701 	.word	0x00400701

004008f4 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4008f4:	b580      	push	{r7, lr}
  4008f6:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4008f8:	4b02      	ldr	r3, [pc, #8]	; (400904 <sysclk_get_cpu_hz+0x10>)
  4008fa:	4798      	blx	r3
  4008fc:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4008fe:	4618      	mov	r0, r3
  400900:	bd80      	pop	{r7, pc}
  400902:	bf00      	nop
  400904:	004008d5 	.word	0x004008d5

00400908 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400908:	b590      	push	{r4, r7, lr}
  40090a:	b083      	sub	sp, #12
  40090c:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40090e:	4813      	ldr	r0, [pc, #76]	; (40095c <sysclk_init+0x54>)
  400910:	4b13      	ldr	r3, [pc, #76]	; (400960 <sysclk_init+0x58>)
  400912:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  400914:	2006      	movs	r0, #6
  400916:	4b13      	ldr	r3, [pc, #76]	; (400964 <sysclk_init+0x5c>)
  400918:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  40091a:	1d38      	adds	r0, r7, #4
  40091c:	2319      	movs	r3, #25
  40091e:	2201      	movs	r2, #1
  400920:	2106      	movs	r1, #6
  400922:	4c11      	ldr	r4, [pc, #68]	; (400968 <sysclk_init+0x60>)
  400924:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  400926:	1d3b      	adds	r3, r7, #4
  400928:	2100      	movs	r1, #0
  40092a:	4618      	mov	r0, r3
  40092c:	4b0f      	ldr	r3, [pc, #60]	; (40096c <sysclk_init+0x64>)
  40092e:	4798      	blx	r3
		pll_wait_for_lock(0);
  400930:	2000      	movs	r0, #0
  400932:	4b0f      	ldr	r3, [pc, #60]	; (400970 <sysclk_init+0x68>)
  400934:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400936:	2002      	movs	r0, #2
  400938:	4b0e      	ldr	r3, [pc, #56]	; (400974 <sysclk_init+0x6c>)
  40093a:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40093c:	2000      	movs	r0, #0
  40093e:	4b0e      	ldr	r3, [pc, #56]	; (400978 <sysclk_init+0x70>)
  400940:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400942:	4b0e      	ldr	r3, [pc, #56]	; (40097c <sysclk_init+0x74>)
  400944:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400946:	4b0e      	ldr	r3, [pc, #56]	; (400980 <sysclk_init+0x78>)
  400948:	4798      	blx	r3
  40094a:	4603      	mov	r3, r0
  40094c:	4618      	mov	r0, r3
  40094e:	4b04      	ldr	r3, [pc, #16]	; (400960 <sysclk_init+0x58>)
  400950:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  400952:	bf00      	nop
  400954:	370c      	adds	r7, #12
  400956:	46bd      	mov	sp, r7
  400958:	bd90      	pop	{r4, r7, pc}
  40095a:	bf00      	nop
  40095c:	11e1a300 	.word	0x11e1a300
  400960:	004019a9 	.word	0x004019a9
  400964:	00400879 	.word	0x00400879
  400968:	004007a1 	.word	0x004007a1
  40096c:	0040080d 	.word	0x0040080d
  400970:	004008b1 	.word	0x004008b1
  400974:	004013b9 	.word	0x004013b9
  400978:	00401435 	.word	0x00401435
  40097c:	00401841 	.word	0x00401841
  400980:	004008f5 	.word	0x004008f5

00400984 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  400984:	b580      	push	{r7, lr}
  400986:	b082      	sub	sp, #8
  400988:	af00      	add	r7, sp, #0
  40098a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  40098c:	6878      	ldr	r0, [r7, #4]
  40098e:	4b03      	ldr	r3, [pc, #12]	; (40099c <sysclk_enable_peripheral_clock+0x18>)
  400990:	4798      	blx	r3
}
  400992:	bf00      	nop
  400994:	3708      	adds	r7, #8
  400996:	46bd      	mov	sp, r7
  400998:	bd80      	pop	{r7, pc}
  40099a:	bf00      	nop
  40099c:	0040167d 	.word	0x0040167d

004009a0 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  4009a0:	b580      	push	{r7, lr}
  4009a2:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  4009a4:	200a      	movs	r0, #10
  4009a6:	4b08      	ldr	r3, [pc, #32]	; (4009c8 <ioport_init+0x28>)
  4009a8:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  4009aa:	200b      	movs	r0, #11
  4009ac:	4b06      	ldr	r3, [pc, #24]	; (4009c8 <ioport_init+0x28>)
  4009ae:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  4009b0:	200c      	movs	r0, #12
  4009b2:	4b05      	ldr	r3, [pc, #20]	; (4009c8 <ioport_init+0x28>)
  4009b4:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
  4009b6:	2010      	movs	r0, #16
  4009b8:	4b03      	ldr	r3, [pc, #12]	; (4009c8 <ioport_init+0x28>)
  4009ba:	4798      	blx	r3
#endif
#ifdef ID_PIOE
	sysclk_enable_peripheral_clock(ID_PIOE);
  4009bc:	2011      	movs	r0, #17
  4009be:	4b02      	ldr	r3, [pc, #8]	; (4009c8 <ioport_init+0x28>)
  4009c0:	4798      	blx	r3
	arch_ioport_init();
}
  4009c2:	bf00      	nop
  4009c4:	bd80      	pop	{r7, pc}
  4009c6:	bf00      	nop
  4009c8:	00400985 	.word	0x00400985

004009cc <ioport_disable_pin>:
 *        IOPORT_CREATE_PIN().
 *
 * \param pin IOPORT pin to disable
 */
static inline void ioport_disable_pin(ioport_pin_t pin)
{
  4009cc:	b480      	push	{r7}
  4009ce:	b089      	sub	sp, #36	; 0x24
  4009d0:	af00      	add	r7, sp, #0
  4009d2:	6078      	str	r0, [r7, #4]
  4009d4:	687b      	ldr	r3, [r7, #4]
  4009d6:	61fb      	str	r3, [r7, #28]
  4009d8:	69fb      	ldr	r3, [r7, #28]
  4009da:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  4009dc:	69bb      	ldr	r3, [r7, #24]
  4009de:	095a      	lsrs	r2, r3, #5
  4009e0:	69fb      	ldr	r3, [r7, #28]
  4009e2:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  4009e4:	697b      	ldr	r3, [r7, #20]
  4009e6:	f003 031f 	and.w	r3, r3, #31
  4009ea:	2101      	movs	r1, #1
  4009ec:	fa01 f303 	lsl.w	r3, r1, r3
  4009f0:	613a      	str	r2, [r7, #16]
  4009f2:	60fb      	str	r3, [r7, #12]
  4009f4:	693b      	ldr	r3, [r7, #16]
  4009f6:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4009f8:	68ba      	ldr	r2, [r7, #8]
  4009fa:	4b06      	ldr	r3, [pc, #24]	; (400a14 <ioport_disable_pin+0x48>)
  4009fc:	4413      	add	r3, r2
  4009fe:	025b      	lsls	r3, r3, #9
  400a00:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400a02:	68fb      	ldr	r3, [r7, #12]
  400a04:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_pin(pin);
}
  400a06:	bf00      	nop
  400a08:	3724      	adds	r7, #36	; 0x24
  400a0a:	46bd      	mov	sp, r7
  400a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a10:	4770      	bx	lr
  400a12:	bf00      	nop
  400a14:	00200707 	.word	0x00200707

00400a18 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  400a18:	b480      	push	{r7}
  400a1a:	b08d      	sub	sp, #52	; 0x34
  400a1c:	af00      	add	r7, sp, #0
  400a1e:	6078      	str	r0, [r7, #4]
  400a20:	6039      	str	r1, [r7, #0]
  400a22:	687b      	ldr	r3, [r7, #4]
  400a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  400a26:	683b      	ldr	r3, [r7, #0]
  400a28:	62bb      	str	r3, [r7, #40]	; 0x28
  400a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400a2c:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  400a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400a30:	095a      	lsrs	r2, r3, #5
  400a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400a34:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  400a36:	6a3b      	ldr	r3, [r7, #32]
  400a38:	f003 031f 	and.w	r3, r3, #31
  400a3c:	2101      	movs	r1, #1
  400a3e:	fa01 f303 	lsl.w	r3, r1, r3
  400a42:	61fa      	str	r2, [r7, #28]
  400a44:	61bb      	str	r3, [r7, #24]
  400a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400a48:	617b      	str	r3, [r7, #20]
  400a4a:	69fb      	ldr	r3, [r7, #28]
  400a4c:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400a4e:	693a      	ldr	r2, [r7, #16]
  400a50:	4b37      	ldr	r3, [pc, #220]	; (400b30 <ioport_set_pin_mode+0x118>)
  400a52:	4413      	add	r3, r2
  400a54:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  400a56:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  400a58:	697b      	ldr	r3, [r7, #20]
  400a5a:	f003 0308 	and.w	r3, r3, #8
  400a5e:	2b00      	cmp	r3, #0
  400a60:	d003      	beq.n	400a6a <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  400a62:	68fb      	ldr	r3, [r7, #12]
  400a64:	69ba      	ldr	r2, [r7, #24]
  400a66:	665a      	str	r2, [r3, #100]	; 0x64
  400a68:	e002      	b.n	400a70 <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  400a6a:	68fb      	ldr	r3, [r7, #12]
  400a6c:	69ba      	ldr	r2, [r7, #24]
  400a6e:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  400a70:	697b      	ldr	r3, [r7, #20]
  400a72:	f003 0310 	and.w	r3, r3, #16
  400a76:	2b00      	cmp	r3, #0
  400a78:	d004      	beq.n	400a84 <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  400a7a:	68fb      	ldr	r3, [r7, #12]
  400a7c:	69ba      	ldr	r2, [r7, #24]
  400a7e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  400a82:	e003      	b.n	400a8c <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  400a84:	68fb      	ldr	r3, [r7, #12]
  400a86:	69ba      	ldr	r2, [r7, #24]
  400a88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  400a8c:	697b      	ldr	r3, [r7, #20]
  400a8e:	f003 0320 	and.w	r3, r3, #32
  400a92:	2b00      	cmp	r3, #0
  400a94:	d003      	beq.n	400a9e <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  400a96:	68fb      	ldr	r3, [r7, #12]
  400a98:	69ba      	ldr	r2, [r7, #24]
  400a9a:	651a      	str	r2, [r3, #80]	; 0x50
  400a9c:	e002      	b.n	400aa4 <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  400a9e:	68fb      	ldr	r3, [r7, #12]
  400aa0:	69ba      	ldr	r2, [r7, #24]
  400aa2:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  400aa4:	697b      	ldr	r3, [r7, #20]
  400aa6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  400aaa:	2b00      	cmp	r3, #0
  400aac:	d003      	beq.n	400ab6 <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  400aae:	68fb      	ldr	r3, [r7, #12]
  400ab0:	69ba      	ldr	r2, [r7, #24]
  400ab2:	621a      	str	r2, [r3, #32]
  400ab4:	e002      	b.n	400abc <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  400ab6:	68fb      	ldr	r3, [r7, #12]
  400ab8:	69ba      	ldr	r2, [r7, #24]
  400aba:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  400abc:	697b      	ldr	r3, [r7, #20]
  400abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400ac2:	2b00      	cmp	r3, #0
  400ac4:	d004      	beq.n	400ad0 <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  400ac6:	68fb      	ldr	r3, [r7, #12]
  400ac8:	69ba      	ldr	r2, [r7, #24]
  400aca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  400ace:	e003      	b.n	400ad8 <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400ad0:	68fb      	ldr	r3, [r7, #12]
  400ad2:	69ba      	ldr	r2, [r7, #24]
  400ad4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  400ad8:	697b      	ldr	r3, [r7, #20]
  400ada:	f003 0301 	and.w	r3, r3, #1
  400ade:	2b00      	cmp	r3, #0
  400ae0:	d006      	beq.n	400af0 <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  400ae2:	68fb      	ldr	r3, [r7, #12]
  400ae4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400ae6:	69bb      	ldr	r3, [r7, #24]
  400ae8:	431a      	orrs	r2, r3
  400aea:	68fb      	ldr	r3, [r7, #12]
  400aec:	671a      	str	r2, [r3, #112]	; 0x70
  400aee:	e006      	b.n	400afe <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400af0:	68fb      	ldr	r3, [r7, #12]
  400af2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400af4:	69bb      	ldr	r3, [r7, #24]
  400af6:	43db      	mvns	r3, r3
  400af8:	401a      	ands	r2, r3
  400afa:	68fb      	ldr	r3, [r7, #12]
  400afc:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  400afe:	697b      	ldr	r3, [r7, #20]
  400b00:	f003 0302 	and.w	r3, r3, #2
  400b04:	2b00      	cmp	r3, #0
  400b06:	d006      	beq.n	400b16 <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  400b08:	68fb      	ldr	r3, [r7, #12]
  400b0a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400b0c:	69bb      	ldr	r3, [r7, #24]
  400b0e:	431a      	orrs	r2, r3
  400b10:	68fb      	ldr	r3, [r7, #12]
  400b12:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  400b14:	e006      	b.n	400b24 <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400b16:	68fb      	ldr	r3, [r7, #12]
  400b18:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400b1a:	69bb      	ldr	r3, [r7, #24]
  400b1c:	43db      	mvns	r3, r3
  400b1e:	401a      	ands	r2, r3
  400b20:	68fb      	ldr	r3, [r7, #12]
  400b22:	675a      	str	r2, [r3, #116]	; 0x74
  400b24:	bf00      	nop
  400b26:	3734      	adds	r7, #52	; 0x34
  400b28:	46bd      	mov	sp, r7
  400b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b2e:	4770      	bx	lr
  400b30:	00200707 	.word	0x00200707

00400b34 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  400b34:	b480      	push	{r7}
  400b36:	b08d      	sub	sp, #52	; 0x34
  400b38:	af00      	add	r7, sp, #0
  400b3a:	6078      	str	r0, [r7, #4]
  400b3c:	460b      	mov	r3, r1
  400b3e:	70fb      	strb	r3, [r7, #3]
  400b40:	687b      	ldr	r3, [r7, #4]
  400b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  400b44:	78fb      	ldrb	r3, [r7, #3]
  400b46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  400b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400b4c:	627b      	str	r3, [r7, #36]	; 0x24
  400b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400b50:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  400b52:	6a3b      	ldr	r3, [r7, #32]
  400b54:	095b      	lsrs	r3, r3, #5
  400b56:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400b58:	69fa      	ldr	r2, [r7, #28]
  400b5a:	4b17      	ldr	r3, [pc, #92]	; (400bb8 <ioport_set_pin_dir+0x84>)
  400b5c:	4413      	add	r3, r2
  400b5e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400b60:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  400b62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400b66:	2b01      	cmp	r3, #1
  400b68:	d109      	bne.n	400b7e <ioport_set_pin_dir+0x4a>
  400b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400b6c:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  400b6e:	697b      	ldr	r3, [r7, #20]
  400b70:	f003 031f 	and.w	r3, r3, #31
  400b74:	2201      	movs	r2, #1
  400b76:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400b78:	69bb      	ldr	r3, [r7, #24]
  400b7a:	611a      	str	r2, [r3, #16]
  400b7c:	e00c      	b.n	400b98 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  400b7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400b82:	2b00      	cmp	r3, #0
  400b84:	d108      	bne.n	400b98 <ioport_set_pin_dir+0x64>
  400b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400b88:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  400b8a:	693b      	ldr	r3, [r7, #16]
  400b8c:	f003 031f 	and.w	r3, r3, #31
  400b90:	2201      	movs	r2, #1
  400b92:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400b94:	69bb      	ldr	r3, [r7, #24]
  400b96:	615a      	str	r2, [r3, #20]
  400b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400b9a:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  400b9c:	68fb      	ldr	r3, [r7, #12]
  400b9e:	f003 031f 	and.w	r3, r3, #31
  400ba2:	2201      	movs	r2, #1
  400ba4:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400ba6:	69bb      	ldr	r3, [r7, #24]
  400ba8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  400bac:	bf00      	nop
  400bae:	3734      	adds	r7, #52	; 0x34
  400bb0:	46bd      	mov	sp, r7
  400bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
  400bb6:	4770      	bx	lr
  400bb8:	00200707 	.word	0x00200707

00400bbc <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  400bbc:	b480      	push	{r7}
  400bbe:	b08b      	sub	sp, #44	; 0x2c
  400bc0:	af00      	add	r7, sp, #0
  400bc2:	6078      	str	r0, [r7, #4]
  400bc4:	460b      	mov	r3, r1
  400bc6:	70fb      	strb	r3, [r7, #3]
  400bc8:	687b      	ldr	r3, [r7, #4]
  400bca:	627b      	str	r3, [r7, #36]	; 0x24
  400bcc:	78fb      	ldrb	r3, [r7, #3]
  400bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  400bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400bd4:	61fb      	str	r3, [r7, #28]
  400bd6:	69fb      	ldr	r3, [r7, #28]
  400bd8:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  400bda:	69bb      	ldr	r3, [r7, #24]
  400bdc:	095b      	lsrs	r3, r3, #5
  400bde:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400be0:	697a      	ldr	r2, [r7, #20]
  400be2:	4b10      	ldr	r3, [pc, #64]	; (400c24 <ioport_set_pin_level+0x68>)
  400be4:	4413      	add	r3, r2
  400be6:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400be8:	613b      	str	r3, [r7, #16]

	if (level) {
  400bea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  400bee:	2b00      	cmp	r3, #0
  400bf0:	d009      	beq.n	400c06 <ioport_set_pin_level+0x4a>
  400bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400bf4:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  400bf6:	68fb      	ldr	r3, [r7, #12]
  400bf8:	f003 031f 	and.w	r3, r3, #31
  400bfc:	2201      	movs	r2, #1
  400bfe:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400c00:	693b      	ldr	r3, [r7, #16]
  400c02:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  400c04:	e008      	b.n	400c18 <ioport_set_pin_level+0x5c>
  400c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400c08:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  400c0a:	68bb      	ldr	r3, [r7, #8]
  400c0c:	f003 031f 	and.w	r3, r3, #31
  400c10:	2201      	movs	r2, #1
  400c12:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400c14:	693b      	ldr	r3, [r7, #16]
  400c16:	635a      	str	r2, [r3, #52]	; 0x34
  400c18:	bf00      	nop
  400c1a:	372c      	adds	r7, #44	; 0x2c
  400c1c:	46bd      	mov	sp, r7
  400c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c22:	4770      	bx	lr
  400c24:	00200707 	.word	0x00200707

00400c28 <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  400c28:	b480      	push	{r7}
  400c2a:	b08d      	sub	sp, #52	; 0x34
  400c2c:	af00      	add	r7, sp, #0
  400c2e:	6078      	str	r0, [r7, #4]
  400c30:	460b      	mov	r3, r1
  400c32:	70fb      	strb	r3, [r7, #3]
  400c34:	687b      	ldr	r3, [r7, #4]
  400c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  400c38:	78fb      	ldrb	r3, [r7, #3]
  400c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  400c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400c40:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  400c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400c44:	095a      	lsrs	r2, r3, #5
  400c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400c48:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  400c4a:	6a3b      	ldr	r3, [r7, #32]
  400c4c:	f003 031f 	and.w	r3, r3, #31
  400c50:	2101      	movs	r1, #1
  400c52:	fa01 f303 	lsl.w	r3, r1, r3
  400c56:	61fa      	str	r2, [r7, #28]
  400c58:	61bb      	str	r3, [r7, #24]
  400c5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400c5e:	75fb      	strb	r3, [r7, #23]
  400c60:	69fb      	ldr	r3, [r7, #28]
  400c62:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400c64:	693a      	ldr	r2, [r7, #16]
  400c66:	4b23      	ldr	r3, [pc, #140]	; (400cf4 <ioport_set_pin_sense_mode+0xcc>)
  400c68:	4413      	add	r3, r2
  400c6a:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  400c6c:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  400c6e:	7dfb      	ldrb	r3, [r7, #23]
  400c70:	3b01      	subs	r3, #1
  400c72:	2b03      	cmp	r3, #3
  400c74:	d82e      	bhi.n	400cd4 <ioport_set_pin_sense_mode+0xac>
  400c76:	a201      	add	r2, pc, #4	; (adr r2, 400c7c <ioport_set_pin_sense_mode+0x54>)
  400c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400c7c:	00400cb1 	.word	0x00400cb1
  400c80:	00400cc3 	.word	0x00400cc3
  400c84:	00400c8d 	.word	0x00400c8d
  400c88:	00400c9f 	.word	0x00400c9f
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  400c8c:	68fb      	ldr	r3, [r7, #12]
  400c8e:	69ba      	ldr	r2, [r7, #24]
  400c90:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  400c94:	68fb      	ldr	r3, [r7, #12]
  400c96:	69ba      	ldr	r2, [r7, #24]
  400c98:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  400c9c:	e01f      	b.n	400cde <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  400c9e:	68fb      	ldr	r3, [r7, #12]
  400ca0:	69ba      	ldr	r2, [r7, #24]
  400ca2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  400ca6:	68fb      	ldr	r3, [r7, #12]
  400ca8:	69ba      	ldr	r2, [r7, #24]
  400caa:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400cae:	e016      	b.n	400cde <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  400cb0:	68fb      	ldr	r3, [r7, #12]
  400cb2:	69ba      	ldr	r2, [r7, #24]
  400cb4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  400cb8:	68fb      	ldr	r3, [r7, #12]
  400cba:	69ba      	ldr	r2, [r7, #24]
  400cbc:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  400cc0:	e00d      	b.n	400cde <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400cc2:	68fb      	ldr	r3, [r7, #12]
  400cc4:	69ba      	ldr	r2, [r7, #24]
  400cc6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400cca:	68fb      	ldr	r3, [r7, #12]
  400ccc:	69ba      	ldr	r2, [r7, #24]
  400cce:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400cd2:	e004      	b.n	400cde <ioport_set_pin_sense_mode+0xb6>
		break;
	default:
		base->PIO_AIMDR = mask;
  400cd4:	68fb      	ldr	r3, [r7, #12]
  400cd6:	69ba      	ldr	r2, [r7, #24]
  400cd8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  400cdc:	e003      	b.n	400ce6 <ioport_set_pin_sense_mode+0xbe>
		return;
	}
	base->PIO_AIMER = mask;
  400cde:	68fb      	ldr	r3, [r7, #12]
  400ce0:	69ba      	ldr	r2, [r7, #24]
  400ce2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  400ce6:	bf00      	nop
  400ce8:	3734      	adds	r7, #52	; 0x34
  400cea:	46bd      	mov	sp, r7
  400cec:	f85d 7b04 	ldr.w	r7, [sp], #4
  400cf0:	4770      	bx	lr
  400cf2:	bf00      	nop
  400cf4:	00200707 	.word	0x00200707

00400cf8 <tcm_disable>:
/** \brief  TCM memory Disable

	The function enables TCM memories
 */
static inline void tcm_disable(void) 
{
  400cf8:	b480      	push	{r7}
  400cfa:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400cfc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400d00:	f3bf 8f6f 	isb	sy

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400d04:	4a0c      	ldr	r2, [pc, #48]	; (400d38 <tcm_disable+0x40>)
  400d06:	4b0c      	ldr	r3, [pc, #48]	; (400d38 <tcm_disable+0x40>)
  400d08:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
  400d0c:	f023 0301 	bic.w	r3, r3, #1
  400d10:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400d14:	4a08      	ldr	r2, [pc, #32]	; (400d38 <tcm_disable+0x40>)
  400d16:	4b08      	ldr	r3, [pc, #32]	; (400d38 <tcm_disable+0x40>)
  400d18:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
  400d1c:	f023 0301 	bic.w	r3, r3, #1
  400d20:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
  __ASM volatile ("dsb");
  400d24:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400d28:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
}
  400d2c:	bf00      	nop
  400d2e:	46bd      	mov	sp, r7
  400d30:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d34:	4770      	bx	lr
  400d36:	bf00      	nop
  400d38:	e000ed00 	.word	0xe000ed00

00400d3c <board_init>:
#endif

void board_init(void)
{
  400d3c:	b580      	push	{r7, lr}
  400d3e:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400d40:	4b1c      	ldr	r3, [pc, #112]	; (400db4 <board_init+0x78>)
  400d42:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400d46:	605a      	str	r2, [r3, #4]
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400d48:	4b1b      	ldr	r3, [pc, #108]	; (400db8 <board_init+0x7c>)
  400d4a:	4a1c      	ldr	r2, [pc, #112]	; (400dbc <board_init+0x80>)
  400d4c:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400d4e:	4b1a      	ldr	r3, [pc, #104]	; (400db8 <board_init+0x7c>)
  400d50:	4a1b      	ldr	r2, [pc, #108]	; (400dc0 <board_init+0x84>)
  400d52:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(7));
	
	tcm_disable();
  400d54:	4b1b      	ldr	r3, [pc, #108]	; (400dc4 <board_init+0x88>)
  400d56:	4798      	blx	r3
#endif

	/* Initialize IOPORTs */
	ioport_init();
  400d58:	4b1b      	ldr	r3, [pc, #108]	; (400dc8 <board_init+0x8c>)
  400d5a:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  400d5c:	2101      	movs	r1, #1
  400d5e:	2048      	movs	r0, #72	; 0x48
  400d60:	4b1a      	ldr	r3, [pc, #104]	; (400dcc <board_init+0x90>)
  400d62:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  400d64:	2101      	movs	r1, #1
  400d66:	2048      	movs	r0, #72	; 0x48
  400d68:	4b19      	ldr	r3, [pc, #100]	; (400dd0 <board_init+0x94>)
  400d6a:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  400d6c:	2100      	movs	r1, #0
  400d6e:	200b      	movs	r0, #11
  400d70:	4b16      	ldr	r3, [pc, #88]	; (400dcc <board_init+0x90>)
  400d72:	4798      	blx	r3
  400d74:	2188      	movs	r1, #136	; 0x88
  400d76:	200b      	movs	r0, #11
  400d78:	4b16      	ldr	r3, [pc, #88]	; (400dd4 <board_init+0x98>)
  400d7a:	4798      	blx	r3
  400d7c:	2102      	movs	r1, #2
  400d7e:	200b      	movs	r0, #11
  400d80:	4b15      	ldr	r3, [pc, #84]	; (400dd8 <board_init+0x9c>)
  400d82:	4798      	blx	r3
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
  400d84:	2100      	movs	r1, #0
  400d86:	2015      	movs	r0, #21
  400d88:	4b12      	ldr	r3, [pc, #72]	; (400dd4 <board_init+0x98>)
  400d8a:	4798      	blx	r3
  400d8c:	2015      	movs	r0, #21
  400d8e:	4b13      	ldr	r3, [pc, #76]	; (400ddc <board_init+0xa0>)
  400d90:	4798      	blx	r3
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400d92:	4a13      	ldr	r2, [pc, #76]	; (400de0 <board_init+0xa4>)
  400d94:	4b12      	ldr	r3, [pc, #72]	; (400de0 <board_init+0xa4>)
  400d96:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
  400d9a:	f043 0310 	orr.w	r3, r3, #16
  400d9e:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	ioport_set_pin_peripheral_mode(USART1_TXD_GPIO, USART1_TXD_FLAGS);
  400da2:	2103      	movs	r1, #3
  400da4:	2024      	movs	r0, #36	; 0x24
  400da6:	4b0b      	ldr	r3, [pc, #44]	; (400dd4 <board_init+0x98>)
  400da8:	4798      	blx	r3
  400daa:	2024      	movs	r0, #36	; 0x24
  400dac:	4b0b      	ldr	r3, [pc, #44]	; (400ddc <board_init+0xa0>)
  400dae:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);

#endif
}
  400db0:	bf00      	nop
  400db2:	bd80      	pop	{r7, pc}
  400db4:	400e1850 	.word	0x400e1850
  400db8:	400e0c00 	.word	0x400e0c00
  400dbc:	5a00080c 	.word	0x5a00080c
  400dc0:	5a00070c 	.word	0x5a00070c
  400dc4:	00400cf9 	.word	0x00400cf9
  400dc8:	004009a1 	.word	0x004009a1
  400dcc:	00400b35 	.word	0x00400b35
  400dd0:	00400bbd 	.word	0x00400bbd
  400dd4:	00400a19 	.word	0x00400a19
  400dd8:	00400c29 	.word	0x00400c29
  400ddc:	004009cd 	.word	0x004009cd
  400de0:	40088000 	.word	0x40088000

00400de4 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  400de4:	b480      	push	{r7}
  400de6:	b085      	sub	sp, #20
  400de8:	af00      	add	r7, sp, #0
  400dea:	60f8      	str	r0, [r7, #12]
  400dec:	60b9      	str	r1, [r7, #8]
  400dee:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400df0:	687b      	ldr	r3, [r7, #4]
  400df2:	2b00      	cmp	r3, #0
  400df4:	d003      	beq.n	400dfe <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  400df6:	68fb      	ldr	r3, [r7, #12]
  400df8:	68ba      	ldr	r2, [r7, #8]
  400dfa:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  400dfc:	e002      	b.n	400e04 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  400dfe:	68fb      	ldr	r3, [r7, #12]
  400e00:	68ba      	ldr	r2, [r7, #8]
  400e02:	661a      	str	r2, [r3, #96]	; 0x60
}
  400e04:	bf00      	nop
  400e06:	3714      	adds	r7, #20
  400e08:	46bd      	mov	sp, r7
  400e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e0e:	4770      	bx	lr

00400e10 <pio_get>:
 * \retval 1 at least one PIO currently has a high level.
 * \retval 0 all PIOs have a low level.
 */
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400e10:	b480      	push	{r7}
  400e12:	b087      	sub	sp, #28
  400e14:	af00      	add	r7, sp, #0
  400e16:	60f8      	str	r0, [r7, #12]
  400e18:	60b9      	str	r1, [r7, #8]
  400e1a:	607a      	str	r2, [r7, #4]
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  400e1c:	68bb      	ldr	r3, [r7, #8]
  400e1e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400e22:	d003      	beq.n	400e2c <pio_get+0x1c>
  400e24:	68bb      	ldr	r3, [r7, #8]
  400e26:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400e2a:	d103      	bne.n	400e34 <pio_get+0x24>
		ul_reg = p_pio->PIO_ODSR;
  400e2c:	68fb      	ldr	r3, [r7, #12]
  400e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  400e30:	617b      	str	r3, [r7, #20]
  400e32:	e002      	b.n	400e3a <pio_get+0x2a>
	} else {
		ul_reg = p_pio->PIO_PDSR;
  400e34:	68fb      	ldr	r3, [r7, #12]
  400e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400e38:	617b      	str	r3, [r7, #20]
	}

	if ((ul_reg & ul_mask) == 0) {
  400e3a:	697a      	ldr	r2, [r7, #20]
  400e3c:	687b      	ldr	r3, [r7, #4]
  400e3e:	4013      	ands	r3, r2
  400e40:	2b00      	cmp	r3, #0
  400e42:	d101      	bne.n	400e48 <pio_get+0x38>
		return 0;
  400e44:	2300      	movs	r3, #0
  400e46:	e000      	b.n	400e4a <pio_get+0x3a>
	} else {
		return 1;
  400e48:	2301      	movs	r3, #1
	}
}
  400e4a:	4618      	mov	r0, r3
  400e4c:	371c      	adds	r7, #28
  400e4e:	46bd      	mov	sp, r7
  400e50:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e54:	4770      	bx	lr

00400e56 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400e56:	b480      	push	{r7}
  400e58:	b087      	sub	sp, #28
  400e5a:	af00      	add	r7, sp, #0
  400e5c:	60f8      	str	r0, [r7, #12]
  400e5e:	60b9      	str	r1, [r7, #8]
  400e60:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400e62:	68fb      	ldr	r3, [r7, #12]
  400e64:	687a      	ldr	r2, [r7, #4]
  400e66:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400e68:	68bb      	ldr	r3, [r7, #8]
  400e6a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400e6e:	d04a      	beq.n	400f06 <pio_set_peripheral+0xb0>
  400e70:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400e74:	d808      	bhi.n	400e88 <pio_set_peripheral+0x32>
  400e76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400e7a:	d016      	beq.n	400eaa <pio_set_peripheral+0x54>
  400e7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400e80:	d02c      	beq.n	400edc <pio_set_peripheral+0x86>
  400e82:	2b00      	cmp	r3, #0
  400e84:	d069      	beq.n	400f5a <pio_set_peripheral+0x104>
  400e86:	e064      	b.n	400f52 <pio_set_peripheral+0xfc>
  400e88:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400e8c:	d065      	beq.n	400f5a <pio_set_peripheral+0x104>
  400e8e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400e92:	d803      	bhi.n	400e9c <pio_set_peripheral+0x46>
  400e94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400e98:	d04a      	beq.n	400f30 <pio_set_peripheral+0xda>
  400e9a:	e05a      	b.n	400f52 <pio_set_peripheral+0xfc>
  400e9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400ea0:	d05b      	beq.n	400f5a <pio_set_peripheral+0x104>
  400ea2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400ea6:	d058      	beq.n	400f5a <pio_set_peripheral+0x104>
  400ea8:	e053      	b.n	400f52 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400eaa:	68fb      	ldr	r3, [r7, #12]
  400eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400eae:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400eb0:	68fb      	ldr	r3, [r7, #12]
  400eb2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400eb4:	687b      	ldr	r3, [r7, #4]
  400eb6:	43d9      	mvns	r1, r3
  400eb8:	697b      	ldr	r3, [r7, #20]
  400eba:	400b      	ands	r3, r1
  400ebc:	401a      	ands	r2, r3
  400ebe:	68fb      	ldr	r3, [r7, #12]
  400ec0:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400ec2:	68fb      	ldr	r3, [r7, #12]
  400ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400ec6:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400ec8:	68fb      	ldr	r3, [r7, #12]
  400eca:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400ecc:	687b      	ldr	r3, [r7, #4]
  400ece:	43d9      	mvns	r1, r3
  400ed0:	697b      	ldr	r3, [r7, #20]
  400ed2:	400b      	ands	r3, r1
  400ed4:	401a      	ands	r2, r3
  400ed6:	68fb      	ldr	r3, [r7, #12]
  400ed8:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400eda:	e03a      	b.n	400f52 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400edc:	68fb      	ldr	r3, [r7, #12]
  400ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400ee0:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400ee2:	687a      	ldr	r2, [r7, #4]
  400ee4:	697b      	ldr	r3, [r7, #20]
  400ee6:	431a      	orrs	r2, r3
  400ee8:	68fb      	ldr	r3, [r7, #12]
  400eea:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400eec:	68fb      	ldr	r3, [r7, #12]
  400eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400ef0:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400ef2:	68fb      	ldr	r3, [r7, #12]
  400ef4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400ef6:	687b      	ldr	r3, [r7, #4]
  400ef8:	43d9      	mvns	r1, r3
  400efa:	697b      	ldr	r3, [r7, #20]
  400efc:	400b      	ands	r3, r1
  400efe:	401a      	ands	r2, r3
  400f00:	68fb      	ldr	r3, [r7, #12]
  400f02:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400f04:	e025      	b.n	400f52 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400f06:	68fb      	ldr	r3, [r7, #12]
  400f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400f0a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400f0c:	68fb      	ldr	r3, [r7, #12]
  400f0e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400f10:	687b      	ldr	r3, [r7, #4]
  400f12:	43d9      	mvns	r1, r3
  400f14:	697b      	ldr	r3, [r7, #20]
  400f16:	400b      	ands	r3, r1
  400f18:	401a      	ands	r2, r3
  400f1a:	68fb      	ldr	r3, [r7, #12]
  400f1c:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400f1e:	68fb      	ldr	r3, [r7, #12]
  400f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400f22:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400f24:	687a      	ldr	r2, [r7, #4]
  400f26:	697b      	ldr	r3, [r7, #20]
  400f28:	431a      	orrs	r2, r3
  400f2a:	68fb      	ldr	r3, [r7, #12]
  400f2c:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400f2e:	e010      	b.n	400f52 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400f30:	68fb      	ldr	r3, [r7, #12]
  400f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400f34:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400f36:	687a      	ldr	r2, [r7, #4]
  400f38:	697b      	ldr	r3, [r7, #20]
  400f3a:	431a      	orrs	r2, r3
  400f3c:	68fb      	ldr	r3, [r7, #12]
  400f3e:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400f40:	68fb      	ldr	r3, [r7, #12]
  400f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400f44:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400f46:	687a      	ldr	r2, [r7, #4]
  400f48:	697b      	ldr	r3, [r7, #20]
  400f4a:	431a      	orrs	r2, r3
  400f4c:	68fb      	ldr	r3, [r7, #12]
  400f4e:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400f50:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400f52:	68fb      	ldr	r3, [r7, #12]
  400f54:	687a      	ldr	r2, [r7, #4]
  400f56:	605a      	str	r2, [r3, #4]
  400f58:	e000      	b.n	400f5c <pio_set_peripheral+0x106>
		return;
  400f5a:	bf00      	nop
}
  400f5c:	371c      	adds	r7, #28
  400f5e:	46bd      	mov	sp, r7
  400f60:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f64:	4770      	bx	lr
	...

00400f68 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  400f68:	b580      	push	{r7, lr}
  400f6a:	b084      	sub	sp, #16
  400f6c:	af00      	add	r7, sp, #0
  400f6e:	60f8      	str	r0, [r7, #12]
  400f70:	60b9      	str	r1, [r7, #8]
  400f72:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  400f74:	68b9      	ldr	r1, [r7, #8]
  400f76:	68f8      	ldr	r0, [r7, #12]
  400f78:	4b19      	ldr	r3, [pc, #100]	; (400fe0 <pio_set_input+0x78>)
  400f7a:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  400f7c:	687b      	ldr	r3, [r7, #4]
  400f7e:	f003 0301 	and.w	r3, r3, #1
  400f82:	461a      	mov	r2, r3
  400f84:	68b9      	ldr	r1, [r7, #8]
  400f86:	68f8      	ldr	r0, [r7, #12]
  400f88:	4b16      	ldr	r3, [pc, #88]	; (400fe4 <pio_set_input+0x7c>)
  400f8a:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400f8c:	687b      	ldr	r3, [r7, #4]
  400f8e:	f003 030a 	and.w	r3, r3, #10
  400f92:	2b00      	cmp	r3, #0
  400f94:	d003      	beq.n	400f9e <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  400f96:	68fb      	ldr	r3, [r7, #12]
  400f98:	68ba      	ldr	r2, [r7, #8]
  400f9a:	621a      	str	r2, [r3, #32]
  400f9c:	e002      	b.n	400fa4 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400f9e:	68fb      	ldr	r3, [r7, #12]
  400fa0:	68ba      	ldr	r2, [r7, #8]
  400fa2:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  400fa4:	687b      	ldr	r3, [r7, #4]
  400fa6:	f003 0302 	and.w	r3, r3, #2
  400faa:	2b00      	cmp	r3, #0
  400fac:	d004      	beq.n	400fb8 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  400fae:	68fb      	ldr	r3, [r7, #12]
  400fb0:	68ba      	ldr	r2, [r7, #8]
  400fb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  400fb6:	e008      	b.n	400fca <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  400fb8:	687b      	ldr	r3, [r7, #4]
  400fba:	f003 0308 	and.w	r3, r3, #8
  400fbe:	2b00      	cmp	r3, #0
  400fc0:	d003      	beq.n	400fca <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  400fc2:	68fb      	ldr	r3, [r7, #12]
  400fc4:	68ba      	ldr	r2, [r7, #8]
  400fc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  400fca:	68fb      	ldr	r3, [r7, #12]
  400fcc:	68ba      	ldr	r2, [r7, #8]
  400fce:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  400fd0:	68fb      	ldr	r3, [r7, #12]
  400fd2:	68ba      	ldr	r2, [r7, #8]
  400fd4:	601a      	str	r2, [r3, #0]
}
  400fd6:	bf00      	nop
  400fd8:	3710      	adds	r7, #16
  400fda:	46bd      	mov	sp, r7
  400fdc:	bd80      	pop	{r7, pc}
  400fde:	bf00      	nop
  400fe0:	004011a1 	.word	0x004011a1
  400fe4:	00400de5 	.word	0x00400de5

00400fe8 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400fe8:	b580      	push	{r7, lr}
  400fea:	b084      	sub	sp, #16
  400fec:	af00      	add	r7, sp, #0
  400fee:	60f8      	str	r0, [r7, #12]
  400ff0:	60b9      	str	r1, [r7, #8]
  400ff2:	607a      	str	r2, [r7, #4]
  400ff4:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  400ff6:	68b9      	ldr	r1, [r7, #8]
  400ff8:	68f8      	ldr	r0, [r7, #12]
  400ffa:	4b12      	ldr	r3, [pc, #72]	; (401044 <pio_set_output+0x5c>)
  400ffc:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  400ffe:	69ba      	ldr	r2, [r7, #24]
  401000:	68b9      	ldr	r1, [r7, #8]
  401002:	68f8      	ldr	r0, [r7, #12]
  401004:	4b10      	ldr	r3, [pc, #64]	; (401048 <pio_set_output+0x60>)
  401006:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  401008:	683b      	ldr	r3, [r7, #0]
  40100a:	2b00      	cmp	r3, #0
  40100c:	d003      	beq.n	401016 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  40100e:	68fb      	ldr	r3, [r7, #12]
  401010:	68ba      	ldr	r2, [r7, #8]
  401012:	651a      	str	r2, [r3, #80]	; 0x50
  401014:	e002      	b.n	40101c <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  401016:	68fb      	ldr	r3, [r7, #12]
  401018:	68ba      	ldr	r2, [r7, #8]
  40101a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  40101c:	687b      	ldr	r3, [r7, #4]
  40101e:	2b00      	cmp	r3, #0
  401020:	d003      	beq.n	40102a <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  401022:	68fb      	ldr	r3, [r7, #12]
  401024:	68ba      	ldr	r2, [r7, #8]
  401026:	631a      	str	r2, [r3, #48]	; 0x30
  401028:	e002      	b.n	401030 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  40102a:	68fb      	ldr	r3, [r7, #12]
  40102c:	68ba      	ldr	r2, [r7, #8]
  40102e:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  401030:	68fb      	ldr	r3, [r7, #12]
  401032:	68ba      	ldr	r2, [r7, #8]
  401034:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  401036:	68fb      	ldr	r3, [r7, #12]
  401038:	68ba      	ldr	r2, [r7, #8]
  40103a:	601a      	str	r2, [r3, #0]
}
  40103c:	bf00      	nop
  40103e:	3710      	adds	r7, #16
  401040:	46bd      	mov	sp, r7
  401042:	bd80      	pop	{r7, pc}
  401044:	004011a1 	.word	0x004011a1
  401048:	00400de5 	.word	0x00400de5

0040104c <pio_configure>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
  40104c:	b590      	push	{r4, r7, lr}
  40104e:	b087      	sub	sp, #28
  401050:	af02      	add	r7, sp, #8
  401052:	60f8      	str	r0, [r7, #12]
  401054:	60b9      	str	r1, [r7, #8]
  401056:	607a      	str	r2, [r7, #4]
  401058:	603b      	str	r3, [r7, #0]
	/* Configure pins */
	switch (ul_type) {
  40105a:	68bb      	ldr	r3, [r7, #8]
  40105c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401060:	d016      	beq.n	401090 <pio_configure+0x44>
  401062:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401066:	d809      	bhi.n	40107c <pio_configure+0x30>
  401068:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40106c:	d010      	beq.n	401090 <pio_configure+0x44>
  40106e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401072:	d00d      	beq.n	401090 <pio_configure+0x44>
  401074:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401078:	d00a      	beq.n	401090 <pio_configure+0x44>
  40107a:	e03d      	b.n	4010f8 <pio_configure+0xac>
  40107c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401080:	d01a      	beq.n	4010b8 <pio_configure+0x6c>
  401082:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401086:	d017      	beq.n	4010b8 <pio_configure+0x6c>
  401088:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40108c:	d00e      	beq.n	4010ac <pio_configure+0x60>
  40108e:	e033      	b.n	4010f8 <pio_configure+0xac>
	case PIO_PERIPH_B:
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_PERIPH_C:
	case PIO_PERIPH_D:
#endif
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  401090:	687a      	ldr	r2, [r7, #4]
  401092:	68b9      	ldr	r1, [r7, #8]
  401094:	68f8      	ldr	r0, [r7, #12]
  401096:	4b1c      	ldr	r3, [pc, #112]	; (401108 <pio_configure+0xbc>)
  401098:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
  40109a:	683b      	ldr	r3, [r7, #0]
  40109c:	f003 0301 	and.w	r3, r3, #1
  4010a0:	461a      	mov	r2, r3
  4010a2:	6879      	ldr	r1, [r7, #4]
  4010a4:	68f8      	ldr	r0, [r7, #12]
  4010a6:	4b19      	ldr	r3, [pc, #100]	; (40110c <pio_configure+0xc0>)
  4010a8:	4798      	blx	r3
		break;
  4010aa:	e027      	b.n	4010fc <pio_configure+0xb0>

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
  4010ac:	683a      	ldr	r2, [r7, #0]
  4010ae:	6879      	ldr	r1, [r7, #4]
  4010b0:	68f8      	ldr	r0, [r7, #12]
  4010b2:	4b17      	ldr	r3, [pc, #92]	; (401110 <pio_configure+0xc4>)
  4010b4:	4798      	blx	r3
		break;
  4010b6:	e021      	b.n	4010fc <pio_configure+0xb0>

	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  4010b8:	68bb      	ldr	r3, [r7, #8]
  4010ba:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4010be:	bf0c      	ite	eq
  4010c0:	2301      	moveq	r3, #1
  4010c2:	2300      	movne	r3, #0
  4010c4:	b2db      	uxtb	r3, r3
  4010c6:	461a      	mov	r2, r3
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
  4010c8:	683b      	ldr	r3, [r7, #0]
  4010ca:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  4010ce:	2b00      	cmp	r3, #0
  4010d0:	bf14      	ite	ne
  4010d2:	2301      	movne	r3, #1
  4010d4:	2300      	moveq	r3, #0
  4010d6:	b2db      	uxtb	r3, r3
  4010d8:	4619      	mov	r1, r3
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
  4010da:	683b      	ldr	r3, [r7, #0]
  4010dc:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  4010e0:	2b00      	cmp	r3, #0
  4010e2:	bf14      	ite	ne
  4010e4:	2301      	movne	r3, #1
  4010e6:	2300      	moveq	r3, #0
  4010e8:	b2db      	uxtb	r3, r3
  4010ea:	9300      	str	r3, [sp, #0]
  4010ec:	460b      	mov	r3, r1
  4010ee:	6879      	ldr	r1, [r7, #4]
  4010f0:	68f8      	ldr	r0, [r7, #12]
  4010f2:	4c08      	ldr	r4, [pc, #32]	; (401114 <pio_configure+0xc8>)
  4010f4:	47a0      	blx	r4
		break;
  4010f6:	e001      	b.n	4010fc <pio_configure+0xb0>

	default:
		return 0;
  4010f8:	2300      	movs	r3, #0
  4010fa:	e000      	b.n	4010fe <pio_configure+0xb2>
	}

	return 1;
  4010fc:	2301      	movs	r3, #1
}
  4010fe:	4618      	mov	r0, r3
  401100:	3714      	adds	r7, #20
  401102:	46bd      	mov	sp, r7
  401104:	bd90      	pop	{r4, r7, pc}
  401106:	bf00      	nop
  401108:	00400e57 	.word	0x00400e57
  40110c:	00400de5 	.word	0x00400de5
  401110:	00400f69 	.word	0x00400f69
  401114:	00400fe9 	.word	0x00400fe9

00401118 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  401118:	b480      	push	{r7}
  40111a:	b085      	sub	sp, #20
  40111c:	af00      	add	r7, sp, #0
  40111e:	60f8      	str	r0, [r7, #12]
  401120:	60b9      	str	r1, [r7, #8]
  401122:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  401124:	687b      	ldr	r3, [r7, #4]
  401126:	f003 0310 	and.w	r3, r3, #16
  40112a:	2b00      	cmp	r3, #0
  40112c:	d020      	beq.n	401170 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  40112e:	68fb      	ldr	r3, [r7, #12]
  401130:	68ba      	ldr	r2, [r7, #8]
  401132:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  401136:	687b      	ldr	r3, [r7, #4]
  401138:	f003 0320 	and.w	r3, r3, #32
  40113c:	2b00      	cmp	r3, #0
  40113e:	d004      	beq.n	40114a <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  401140:	68fb      	ldr	r3, [r7, #12]
  401142:	68ba      	ldr	r2, [r7, #8]
  401144:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  401148:	e003      	b.n	401152 <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  40114a:	68fb      	ldr	r3, [r7, #12]
  40114c:	68ba      	ldr	r2, [r7, #8]
  40114e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  401152:	687b      	ldr	r3, [r7, #4]
  401154:	f003 0340 	and.w	r3, r3, #64	; 0x40
  401158:	2b00      	cmp	r3, #0
  40115a:	d004      	beq.n	401166 <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  40115c:	68fb      	ldr	r3, [r7, #12]
  40115e:	68ba      	ldr	r2, [r7, #8]
  401160:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  401164:	e008      	b.n	401178 <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  401166:	68fb      	ldr	r3, [r7, #12]
  401168:	68ba      	ldr	r2, [r7, #8]
  40116a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  40116e:	e003      	b.n	401178 <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  401170:	68fb      	ldr	r3, [r7, #12]
  401172:	68ba      	ldr	r2, [r7, #8]
  401174:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  401178:	bf00      	nop
  40117a:	3714      	adds	r7, #20
  40117c:	46bd      	mov	sp, r7
  40117e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401182:	4770      	bx	lr

00401184 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  401184:	b480      	push	{r7}
  401186:	b083      	sub	sp, #12
  401188:	af00      	add	r7, sp, #0
  40118a:	6078      	str	r0, [r7, #4]
  40118c:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  40118e:	687b      	ldr	r3, [r7, #4]
  401190:	683a      	ldr	r2, [r7, #0]
  401192:	641a      	str	r2, [r3, #64]	; 0x40
}
  401194:	bf00      	nop
  401196:	370c      	adds	r7, #12
  401198:	46bd      	mov	sp, r7
  40119a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40119e:	4770      	bx	lr

004011a0 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  4011a0:	b480      	push	{r7}
  4011a2:	b083      	sub	sp, #12
  4011a4:	af00      	add	r7, sp, #0
  4011a6:	6078      	str	r0, [r7, #4]
  4011a8:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  4011aa:	687b      	ldr	r3, [r7, #4]
  4011ac:	683a      	ldr	r2, [r7, #0]
  4011ae:	645a      	str	r2, [r3, #68]	; 0x44
}
  4011b0:	bf00      	nop
  4011b2:	370c      	adds	r7, #12
  4011b4:	46bd      	mov	sp, r7
  4011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4011ba:	4770      	bx	lr

004011bc <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  4011bc:	b480      	push	{r7}
  4011be:	b083      	sub	sp, #12
  4011c0:	af00      	add	r7, sp, #0
  4011c2:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  4011c4:	687b      	ldr	r3, [r7, #4]
  4011c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  4011c8:	4618      	mov	r0, r3
  4011ca:	370c      	adds	r7, #12
  4011cc:	46bd      	mov	sp, r7
  4011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
  4011d2:	4770      	bx	lr

004011d4 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  4011d4:	b480      	push	{r7}
  4011d6:	b083      	sub	sp, #12
  4011d8:	af00      	add	r7, sp, #0
  4011da:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  4011dc:	687b      	ldr	r3, [r7, #4]
  4011de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  4011e0:	4618      	mov	r0, r3
  4011e2:	370c      	adds	r7, #12
  4011e4:	46bd      	mov	sp, r7
  4011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4011ea:	4770      	bx	lr

004011ec <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4011ec:	b580      	push	{r7, lr}
  4011ee:	b084      	sub	sp, #16
  4011f0:	af00      	add	r7, sp, #0
  4011f2:	6078      	str	r0, [r7, #4]
  4011f4:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4011f6:	6878      	ldr	r0, [r7, #4]
  4011f8:	4b26      	ldr	r3, [pc, #152]	; (401294 <pio_handler_process+0xa8>)
  4011fa:	4798      	blx	r3
  4011fc:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  4011fe:	6878      	ldr	r0, [r7, #4]
  401200:	4b25      	ldr	r3, [pc, #148]	; (401298 <pio_handler_process+0xac>)
  401202:	4798      	blx	r3
  401204:	4602      	mov	r2, r0
  401206:	68fb      	ldr	r3, [r7, #12]
  401208:	4013      	ands	r3, r2
  40120a:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  40120c:	68fb      	ldr	r3, [r7, #12]
  40120e:	2b00      	cmp	r3, #0
  401210:	d03c      	beq.n	40128c <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  401212:	2300      	movs	r3, #0
  401214:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  401216:	e034      	b.n	401282 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  401218:	4a20      	ldr	r2, [pc, #128]	; (40129c <pio_handler_process+0xb0>)
  40121a:	68bb      	ldr	r3, [r7, #8]
  40121c:	011b      	lsls	r3, r3, #4
  40121e:	4413      	add	r3, r2
  401220:	681a      	ldr	r2, [r3, #0]
  401222:	683b      	ldr	r3, [r7, #0]
  401224:	429a      	cmp	r2, r3
  401226:	d126      	bne.n	401276 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401228:	4a1c      	ldr	r2, [pc, #112]	; (40129c <pio_handler_process+0xb0>)
  40122a:	68bb      	ldr	r3, [r7, #8]
  40122c:	011b      	lsls	r3, r3, #4
  40122e:	4413      	add	r3, r2
  401230:	3304      	adds	r3, #4
  401232:	681a      	ldr	r2, [r3, #0]
  401234:	68fb      	ldr	r3, [r7, #12]
  401236:	4013      	ands	r3, r2
  401238:	2b00      	cmp	r3, #0
  40123a:	d01c      	beq.n	401276 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40123c:	4a17      	ldr	r2, [pc, #92]	; (40129c <pio_handler_process+0xb0>)
  40123e:	68bb      	ldr	r3, [r7, #8]
  401240:	011b      	lsls	r3, r3, #4
  401242:	4413      	add	r3, r2
  401244:	330c      	adds	r3, #12
  401246:	681b      	ldr	r3, [r3, #0]
  401248:	4914      	ldr	r1, [pc, #80]	; (40129c <pio_handler_process+0xb0>)
  40124a:	68ba      	ldr	r2, [r7, #8]
  40124c:	0112      	lsls	r2, r2, #4
  40124e:	440a      	add	r2, r1
  401250:	6810      	ldr	r0, [r2, #0]
  401252:	4912      	ldr	r1, [pc, #72]	; (40129c <pio_handler_process+0xb0>)
  401254:	68ba      	ldr	r2, [r7, #8]
  401256:	0112      	lsls	r2, r2, #4
  401258:	440a      	add	r2, r1
  40125a:	3204      	adds	r2, #4
  40125c:	6812      	ldr	r2, [r2, #0]
  40125e:	4611      	mov	r1, r2
  401260:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  401262:	4a0e      	ldr	r2, [pc, #56]	; (40129c <pio_handler_process+0xb0>)
  401264:	68bb      	ldr	r3, [r7, #8]
  401266:	011b      	lsls	r3, r3, #4
  401268:	4413      	add	r3, r2
  40126a:	3304      	adds	r3, #4
  40126c:	681b      	ldr	r3, [r3, #0]
  40126e:	43db      	mvns	r3, r3
  401270:	68fa      	ldr	r2, [r7, #12]
  401272:	4013      	ands	r3, r2
  401274:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  401276:	68bb      	ldr	r3, [r7, #8]
  401278:	3301      	adds	r3, #1
  40127a:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  40127c:	68bb      	ldr	r3, [r7, #8]
  40127e:	2b06      	cmp	r3, #6
  401280:	d803      	bhi.n	40128a <pio_handler_process+0x9e>
		while (status != 0) {
  401282:	68fb      	ldr	r3, [r7, #12]
  401284:	2b00      	cmp	r3, #0
  401286:	d1c7      	bne.n	401218 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  401288:	e000      	b.n	40128c <pio_handler_process+0xa0>
				break;
  40128a:	bf00      	nop
}
  40128c:	bf00      	nop
  40128e:	3710      	adds	r7, #16
  401290:	46bd      	mov	sp, r7
  401292:	bd80      	pop	{r7, pc}
  401294:	004011bd 	.word	0x004011bd
  401298:	004011d5 	.word	0x004011d5
  40129c:	204009e0 	.word	0x204009e0

004012a0 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  4012a0:	b580      	push	{r7, lr}
  4012a2:	b086      	sub	sp, #24
  4012a4:	af00      	add	r7, sp, #0
  4012a6:	60f8      	str	r0, [r7, #12]
  4012a8:	60b9      	str	r1, [r7, #8]
  4012aa:	607a      	str	r2, [r7, #4]
  4012ac:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  4012ae:	4b21      	ldr	r3, [pc, #132]	; (401334 <pio_handler_set+0x94>)
  4012b0:	681b      	ldr	r3, [r3, #0]
  4012b2:	2b06      	cmp	r3, #6
  4012b4:	d901      	bls.n	4012ba <pio_handler_set+0x1a>
		return 1;
  4012b6:	2301      	movs	r3, #1
  4012b8:	e038      	b.n	40132c <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4012ba:	2300      	movs	r3, #0
  4012bc:	75fb      	strb	r3, [r7, #23]
  4012be:	e011      	b.n	4012e4 <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  4012c0:	7dfb      	ldrb	r3, [r7, #23]
  4012c2:	011b      	lsls	r3, r3, #4
  4012c4:	4a1c      	ldr	r2, [pc, #112]	; (401338 <pio_handler_set+0x98>)
  4012c6:	4413      	add	r3, r2
  4012c8:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4012ca:	693b      	ldr	r3, [r7, #16]
  4012cc:	681a      	ldr	r2, [r3, #0]
  4012ce:	68bb      	ldr	r3, [r7, #8]
  4012d0:	429a      	cmp	r2, r3
  4012d2:	d104      	bne.n	4012de <pio_handler_set+0x3e>
  4012d4:	693b      	ldr	r3, [r7, #16]
  4012d6:	685a      	ldr	r2, [r3, #4]
  4012d8:	687b      	ldr	r3, [r7, #4]
  4012da:	429a      	cmp	r2, r3
  4012dc:	d008      	beq.n	4012f0 <pio_handler_set+0x50>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4012de:	7dfb      	ldrb	r3, [r7, #23]
  4012e0:	3301      	adds	r3, #1
  4012e2:	75fb      	strb	r3, [r7, #23]
  4012e4:	7dfa      	ldrb	r2, [r7, #23]
  4012e6:	4b13      	ldr	r3, [pc, #76]	; (401334 <pio_handler_set+0x94>)
  4012e8:	681b      	ldr	r3, [r3, #0]
  4012ea:	429a      	cmp	r2, r3
  4012ec:	d9e8      	bls.n	4012c0 <pio_handler_set+0x20>
  4012ee:	e000      	b.n	4012f2 <pio_handler_set+0x52>
			break;
  4012f0:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  4012f2:	693b      	ldr	r3, [r7, #16]
  4012f4:	68ba      	ldr	r2, [r7, #8]
  4012f6:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  4012f8:	693b      	ldr	r3, [r7, #16]
  4012fa:	687a      	ldr	r2, [r7, #4]
  4012fc:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  4012fe:	693b      	ldr	r3, [r7, #16]
  401300:	683a      	ldr	r2, [r7, #0]
  401302:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  401304:	693b      	ldr	r3, [r7, #16]
  401306:	6a3a      	ldr	r2, [r7, #32]
  401308:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  40130a:	7dfa      	ldrb	r2, [r7, #23]
  40130c:	4b09      	ldr	r3, [pc, #36]	; (401334 <pio_handler_set+0x94>)
  40130e:	681b      	ldr	r3, [r3, #0]
  401310:	3301      	adds	r3, #1
  401312:	429a      	cmp	r2, r3
  401314:	d104      	bne.n	401320 <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  401316:	4b07      	ldr	r3, [pc, #28]	; (401334 <pio_handler_set+0x94>)
  401318:	681b      	ldr	r3, [r3, #0]
  40131a:	3301      	adds	r3, #1
  40131c:	4a05      	ldr	r2, [pc, #20]	; (401334 <pio_handler_set+0x94>)
  40131e:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  401320:	683a      	ldr	r2, [r7, #0]
  401322:	6879      	ldr	r1, [r7, #4]
  401324:	68f8      	ldr	r0, [r7, #12]
  401326:	4b05      	ldr	r3, [pc, #20]	; (40133c <pio_handler_set+0x9c>)
  401328:	4798      	blx	r3

	return 0;
  40132a:	2300      	movs	r3, #0
}
  40132c:	4618      	mov	r0, r3
  40132e:	3718      	adds	r7, #24
  401330:	46bd      	mov	sp, r7
  401332:	bd80      	pop	{r7, pc}
  401334:	20400a50 	.word	0x20400a50
  401338:	204009e0 	.word	0x204009e0
  40133c:	00401119 	.word	0x00401119

00401340 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401340:	b580      	push	{r7, lr}
  401342:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  401344:	210a      	movs	r1, #10
  401346:	4802      	ldr	r0, [pc, #8]	; (401350 <PIOA_Handler+0x10>)
  401348:	4b02      	ldr	r3, [pc, #8]	; (401354 <PIOA_Handler+0x14>)
  40134a:	4798      	blx	r3
}
  40134c:	bf00      	nop
  40134e:	bd80      	pop	{r7, pc}
  401350:	400e0e00 	.word	0x400e0e00
  401354:	004011ed 	.word	0x004011ed

00401358 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401358:	b580      	push	{r7, lr}
  40135a:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  40135c:	210b      	movs	r1, #11
  40135e:	4802      	ldr	r0, [pc, #8]	; (401368 <PIOB_Handler+0x10>)
  401360:	4b02      	ldr	r3, [pc, #8]	; (40136c <PIOB_Handler+0x14>)
  401362:	4798      	blx	r3
}
  401364:	bf00      	nop
  401366:	bd80      	pop	{r7, pc}
  401368:	400e1000 	.word	0x400e1000
  40136c:	004011ed 	.word	0x004011ed

00401370 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401370:	b580      	push	{r7, lr}
  401372:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  401374:	210c      	movs	r1, #12
  401376:	4802      	ldr	r0, [pc, #8]	; (401380 <PIOC_Handler+0x10>)
  401378:	4b02      	ldr	r3, [pc, #8]	; (401384 <PIOC_Handler+0x14>)
  40137a:	4798      	blx	r3
}
  40137c:	bf00      	nop
  40137e:	bd80      	pop	{r7, pc}
  401380:	400e1200 	.word	0x400e1200
  401384:	004011ed 	.word	0x004011ed

00401388 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  401388:	b580      	push	{r7, lr}
  40138a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  40138c:	2110      	movs	r1, #16
  40138e:	4802      	ldr	r0, [pc, #8]	; (401398 <PIOD_Handler+0x10>)
  401390:	4b02      	ldr	r3, [pc, #8]	; (40139c <PIOD_Handler+0x14>)
  401392:	4798      	blx	r3
}
  401394:	bf00      	nop
  401396:	bd80      	pop	{r7, pc}
  401398:	400e1400 	.word	0x400e1400
  40139c:	004011ed 	.word	0x004011ed

004013a0 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4013a0:	b580      	push	{r7, lr}
  4013a2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  4013a4:	2111      	movs	r1, #17
  4013a6:	4802      	ldr	r0, [pc, #8]	; (4013b0 <PIOE_Handler+0x10>)
  4013a8:	4b02      	ldr	r3, [pc, #8]	; (4013b4 <PIOE_Handler+0x14>)
  4013aa:	4798      	blx	r3
}
  4013ac:	bf00      	nop
  4013ae:	bd80      	pop	{r7, pc}
  4013b0:	400e1600 	.word	0x400e1600
  4013b4:	004011ed 	.word	0x004011ed

004013b8 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  4013b8:	b480      	push	{r7}
  4013ba:	b083      	sub	sp, #12
  4013bc:	af00      	add	r7, sp, #0
  4013be:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  4013c0:	687b      	ldr	r3, [r7, #4]
  4013c2:	3b01      	subs	r3, #1
  4013c4:	2b03      	cmp	r3, #3
  4013c6:	d81a      	bhi.n	4013fe <pmc_mck_set_division+0x46>
  4013c8:	a201      	add	r2, pc, #4	; (adr r2, 4013d0 <pmc_mck_set_division+0x18>)
  4013ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4013ce:	bf00      	nop
  4013d0:	004013e1 	.word	0x004013e1
  4013d4:	004013e7 	.word	0x004013e7
  4013d8:	004013ef 	.word	0x004013ef
  4013dc:	004013f7 	.word	0x004013f7
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4013e0:	2300      	movs	r3, #0
  4013e2:	607b      	str	r3, [r7, #4]
			break;
  4013e4:	e00e      	b.n	401404 <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  4013e6:	f44f 7380 	mov.w	r3, #256	; 0x100
  4013ea:	607b      	str	r3, [r7, #4]
			break;
  4013ec:	e00a      	b.n	401404 <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4013ee:	f44f 7340 	mov.w	r3, #768	; 0x300
  4013f2:	607b      	str	r3, [r7, #4]
			break;
  4013f4:	e006      	b.n	401404 <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4013f6:	f44f 7300 	mov.w	r3, #512	; 0x200
  4013fa:	607b      	str	r3, [r7, #4]
			break;
  4013fc:	e002      	b.n	401404 <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4013fe:	2300      	movs	r3, #0
  401400:	607b      	str	r3, [r7, #4]
			break;
  401402:	bf00      	nop
	}
	PMC->PMC_MCKR =
  401404:	490a      	ldr	r1, [pc, #40]	; (401430 <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  401406:	4b0a      	ldr	r3, [pc, #40]	; (401430 <pmc_mck_set_division+0x78>)
  401408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40140a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  40140e:	687b      	ldr	r3, [r7, #4]
  401410:	4313      	orrs	r3, r2
	PMC->PMC_MCKR =
  401412:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401414:	bf00      	nop
  401416:	4b06      	ldr	r3, [pc, #24]	; (401430 <pmc_mck_set_division+0x78>)
  401418:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40141a:	f003 0308 	and.w	r3, r3, #8
  40141e:	2b00      	cmp	r3, #0
  401420:	d0f9      	beq.n	401416 <pmc_mck_set_division+0x5e>
}
  401422:	bf00      	nop
  401424:	370c      	adds	r7, #12
  401426:	46bd      	mov	sp, r7
  401428:	f85d 7b04 	ldr.w	r7, [sp], #4
  40142c:	4770      	bx	lr
  40142e:	bf00      	nop
  401430:	400e0600 	.word	0x400e0600

00401434 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  401434:	b480      	push	{r7}
  401436:	b085      	sub	sp, #20
  401438:	af00      	add	r7, sp, #0
  40143a:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40143c:	491d      	ldr	r1, [pc, #116]	; (4014b4 <pmc_switch_mck_to_pllack+0x80>)
  40143e:	4b1d      	ldr	r3, [pc, #116]	; (4014b4 <pmc_switch_mck_to_pllack+0x80>)
  401440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401442:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  401446:	687b      	ldr	r3, [r7, #4]
  401448:	4313      	orrs	r3, r2
  40144a:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40144c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401450:	60fb      	str	r3, [r7, #12]
  401452:	e007      	b.n	401464 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401454:	68fb      	ldr	r3, [r7, #12]
  401456:	2b00      	cmp	r3, #0
  401458:	d101      	bne.n	40145e <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  40145a:	2301      	movs	r3, #1
  40145c:	e023      	b.n	4014a6 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  40145e:	68fb      	ldr	r3, [r7, #12]
  401460:	3b01      	subs	r3, #1
  401462:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401464:	4b13      	ldr	r3, [pc, #76]	; (4014b4 <pmc_switch_mck_to_pllack+0x80>)
  401466:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401468:	f003 0308 	and.w	r3, r3, #8
  40146c:	2b00      	cmp	r3, #0
  40146e:	d0f1      	beq.n	401454 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401470:	4a10      	ldr	r2, [pc, #64]	; (4014b4 <pmc_switch_mck_to_pllack+0x80>)
  401472:	4b10      	ldr	r3, [pc, #64]	; (4014b4 <pmc_switch_mck_to_pllack+0x80>)
  401474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401476:	f023 0303 	bic.w	r3, r3, #3
  40147a:	f043 0302 	orr.w	r3, r3, #2
  40147e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401480:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401484:	60fb      	str	r3, [r7, #12]
  401486:	e007      	b.n	401498 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401488:	68fb      	ldr	r3, [r7, #12]
  40148a:	2b00      	cmp	r3, #0
  40148c:	d101      	bne.n	401492 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  40148e:	2301      	movs	r3, #1
  401490:	e009      	b.n	4014a6 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  401492:	68fb      	ldr	r3, [r7, #12]
  401494:	3b01      	subs	r3, #1
  401496:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401498:	4b06      	ldr	r3, [pc, #24]	; (4014b4 <pmc_switch_mck_to_pllack+0x80>)
  40149a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40149c:	f003 0308 	and.w	r3, r3, #8
  4014a0:	2b00      	cmp	r3, #0
  4014a2:	d0f1      	beq.n	401488 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  4014a4:	2300      	movs	r3, #0
}
  4014a6:	4618      	mov	r0, r3
  4014a8:	3714      	adds	r7, #20
  4014aa:	46bd      	mov	sp, r7
  4014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
  4014b0:	4770      	bx	lr
  4014b2:	bf00      	nop
  4014b4:	400e0600 	.word	0x400e0600

004014b8 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  4014b8:	b480      	push	{r7}
  4014ba:	b083      	sub	sp, #12
  4014bc:	af00      	add	r7, sp, #0
  4014be:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  4014c0:	687b      	ldr	r3, [r7, #4]
  4014c2:	2b01      	cmp	r3, #1
  4014c4:	d105      	bne.n	4014d2 <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  4014c6:	4907      	ldr	r1, [pc, #28]	; (4014e4 <pmc_switch_sclk_to_32kxtal+0x2c>)
  4014c8:	4b06      	ldr	r3, [pc, #24]	; (4014e4 <pmc_switch_sclk_to_32kxtal+0x2c>)
  4014ca:	689a      	ldr	r2, [r3, #8]
  4014cc:	4b06      	ldr	r3, [pc, #24]	; (4014e8 <pmc_switch_sclk_to_32kxtal+0x30>)
  4014ce:	4313      	orrs	r3, r2
  4014d0:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  4014d2:	4b04      	ldr	r3, [pc, #16]	; (4014e4 <pmc_switch_sclk_to_32kxtal+0x2c>)
  4014d4:	4a05      	ldr	r2, [pc, #20]	; (4014ec <pmc_switch_sclk_to_32kxtal+0x34>)
  4014d6:	601a      	str	r2, [r3, #0]
}
  4014d8:	bf00      	nop
  4014da:	370c      	adds	r7, #12
  4014dc:	46bd      	mov	sp, r7
  4014de:	f85d 7b04 	ldr.w	r7, [sp], #4
  4014e2:	4770      	bx	lr
  4014e4:	400e1810 	.word	0x400e1810
  4014e8:	a5100000 	.word	0xa5100000
  4014ec:	a5000008 	.word	0xa5000008

004014f0 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  4014f0:	b480      	push	{r7}
  4014f2:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  4014f4:	4b09      	ldr	r3, [pc, #36]	; (40151c <pmc_osc_is_ready_32kxtal+0x2c>)
  4014f6:	695b      	ldr	r3, [r3, #20]
  4014f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  4014fc:	2b00      	cmp	r3, #0
  4014fe:	d007      	beq.n	401510 <pmc_osc_is_ready_32kxtal+0x20>
  401500:	4b07      	ldr	r3, [pc, #28]	; (401520 <pmc_osc_is_ready_32kxtal+0x30>)
  401502:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401504:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401508:	2b00      	cmp	r3, #0
  40150a:	d001      	beq.n	401510 <pmc_osc_is_ready_32kxtal+0x20>
  40150c:	2301      	movs	r3, #1
  40150e:	e000      	b.n	401512 <pmc_osc_is_ready_32kxtal+0x22>
  401510:	2300      	movs	r3, #0
}
  401512:	4618      	mov	r0, r3
  401514:	46bd      	mov	sp, r7
  401516:	f85d 7b04 	ldr.w	r7, [sp], #4
  40151a:	4770      	bx	lr
  40151c:	400e1810 	.word	0x400e1810
  401520:	400e0600 	.word	0x400e0600

00401524 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  401524:	b480      	push	{r7}
  401526:	b083      	sub	sp, #12
  401528:	af00      	add	r7, sp, #0
  40152a:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  40152c:	4915      	ldr	r1, [pc, #84]	; (401584 <pmc_switch_mainck_to_fastrc+0x60>)
  40152e:	4b15      	ldr	r3, [pc, #84]	; (401584 <pmc_switch_mainck_to_fastrc+0x60>)
  401530:	6a1a      	ldr	r2, [r3, #32]
  401532:	4b15      	ldr	r3, [pc, #84]	; (401588 <pmc_switch_mainck_to_fastrc+0x64>)
  401534:	4313      	orrs	r3, r2
  401536:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401538:	bf00      	nop
  40153a:	4b12      	ldr	r3, [pc, #72]	; (401584 <pmc_switch_mainck_to_fastrc+0x60>)
  40153c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40153e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  401542:	2b00      	cmp	r3, #0
  401544:	d0f9      	beq.n	40153a <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401546:	490f      	ldr	r1, [pc, #60]	; (401584 <pmc_switch_mainck_to_fastrc+0x60>)
  401548:	4b0e      	ldr	r3, [pc, #56]	; (401584 <pmc_switch_mainck_to_fastrc+0x60>)
  40154a:	6a1a      	ldr	r2, [r3, #32]
  40154c:	4b0f      	ldr	r3, [pc, #60]	; (40158c <pmc_switch_mainck_to_fastrc+0x68>)
  40154e:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  401550:	687a      	ldr	r2, [r7, #4]
  401552:	4313      	orrs	r3, r2
  401554:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401558:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40155a:	bf00      	nop
  40155c:	4b09      	ldr	r3, [pc, #36]	; (401584 <pmc_switch_mainck_to_fastrc+0x60>)
  40155e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  401564:	2b00      	cmp	r3, #0
  401566:	d0f9      	beq.n	40155c <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  401568:	4906      	ldr	r1, [pc, #24]	; (401584 <pmc_switch_mainck_to_fastrc+0x60>)
  40156a:	4b06      	ldr	r3, [pc, #24]	; (401584 <pmc_switch_mainck_to_fastrc+0x60>)
  40156c:	6a1a      	ldr	r2, [r3, #32]
  40156e:	4b08      	ldr	r3, [pc, #32]	; (401590 <pmc_switch_mainck_to_fastrc+0x6c>)
  401570:	4013      	ands	r3, r2
  401572:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401576:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  401578:	bf00      	nop
  40157a:	370c      	adds	r7, #12
  40157c:	46bd      	mov	sp, r7
  40157e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401582:	4770      	bx	lr
  401584:	400e0600 	.word	0x400e0600
  401588:	00370008 	.word	0x00370008
  40158c:	ffc8ff8f 	.word	0xffc8ff8f
  401590:	fec8ffff 	.word	0xfec8ffff

00401594 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  401594:	b480      	push	{r7}
  401596:	b083      	sub	sp, #12
  401598:	af00      	add	r7, sp, #0
  40159a:	6078      	str	r0, [r7, #4]
  40159c:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40159e:	687b      	ldr	r3, [r7, #4]
  4015a0:	2b00      	cmp	r3, #0
  4015a2:	d008      	beq.n	4015b6 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4015a4:	4913      	ldr	r1, [pc, #76]	; (4015f4 <pmc_switch_mainck_to_xtal+0x60>)
  4015a6:	4b13      	ldr	r3, [pc, #76]	; (4015f4 <pmc_switch_mainck_to_xtal+0x60>)
  4015a8:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4015aa:	4a13      	ldr	r2, [pc, #76]	; (4015f8 <pmc_switch_mainck_to_xtal+0x64>)
  4015ac:	401a      	ands	r2, r3
  4015ae:	4b13      	ldr	r3, [pc, #76]	; (4015fc <pmc_switch_mainck_to_xtal+0x68>)
  4015b0:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4015b2:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  4015b4:	e018      	b.n	4015e8 <pmc_switch_mainck_to_xtal+0x54>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4015b6:	490f      	ldr	r1, [pc, #60]	; (4015f4 <pmc_switch_mainck_to_xtal+0x60>)
  4015b8:	4b0e      	ldr	r3, [pc, #56]	; (4015f4 <pmc_switch_mainck_to_xtal+0x60>)
  4015ba:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4015bc:	4b10      	ldr	r3, [pc, #64]	; (401600 <pmc_switch_mainck_to_xtal+0x6c>)
  4015be:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4015c0:	683a      	ldr	r2, [r7, #0]
  4015c2:	0212      	lsls	r2, r2, #8
  4015c4:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4015c6:	431a      	orrs	r2, r3
  4015c8:	4b0e      	ldr	r3, [pc, #56]	; (401604 <pmc_switch_mainck_to_xtal+0x70>)
  4015ca:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4015cc:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4015ce:	bf00      	nop
  4015d0:	4b08      	ldr	r3, [pc, #32]	; (4015f4 <pmc_switch_mainck_to_xtal+0x60>)
  4015d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4015d4:	f003 0301 	and.w	r3, r3, #1
  4015d8:	2b00      	cmp	r3, #0
  4015da:	d0f9      	beq.n	4015d0 <pmc_switch_mainck_to_xtal+0x3c>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4015dc:	4905      	ldr	r1, [pc, #20]	; (4015f4 <pmc_switch_mainck_to_xtal+0x60>)
  4015de:	4b05      	ldr	r3, [pc, #20]	; (4015f4 <pmc_switch_mainck_to_xtal+0x60>)
  4015e0:	6a1a      	ldr	r2, [r3, #32]
  4015e2:	4b09      	ldr	r3, [pc, #36]	; (401608 <pmc_switch_mainck_to_xtal+0x74>)
  4015e4:	4313      	orrs	r3, r2
  4015e6:	620b      	str	r3, [r1, #32]
}
  4015e8:	bf00      	nop
  4015ea:	370c      	adds	r7, #12
  4015ec:	46bd      	mov	sp, r7
  4015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015f2:	4770      	bx	lr
  4015f4:	400e0600 	.word	0x400e0600
  4015f8:	fec8fffc 	.word	0xfec8fffc
  4015fc:	01370002 	.word	0x01370002
  401600:	ffc8fffc 	.word	0xffc8fffc
  401604:	00370001 	.word	0x00370001
  401608:	01370000 	.word	0x01370000

0040160c <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  40160c:	b480      	push	{r7}
  40160e:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401610:	4b04      	ldr	r3, [pc, #16]	; (401624 <pmc_osc_is_ready_mainck+0x18>)
  401612:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  401618:	4618      	mov	r0, r3
  40161a:	46bd      	mov	sp, r7
  40161c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401620:	4770      	bx	lr
  401622:	bf00      	nop
  401624:	400e0600 	.word	0x400e0600

00401628 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  401628:	b480      	push	{r7}
  40162a:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40162c:	4b04      	ldr	r3, [pc, #16]	; (401640 <pmc_disable_pllack+0x18>)
  40162e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401632:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  401634:	bf00      	nop
  401636:	46bd      	mov	sp, r7
  401638:	f85d 7b04 	ldr.w	r7, [sp], #4
  40163c:	4770      	bx	lr
  40163e:	bf00      	nop
  401640:	400e0600 	.word	0x400e0600

00401644 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  401644:	b480      	push	{r7}
  401646:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401648:	4b04      	ldr	r3, [pc, #16]	; (40165c <pmc_is_locked_pllack+0x18>)
  40164a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40164c:	f003 0302 	and.w	r3, r3, #2
}
  401650:	4618      	mov	r0, r3
  401652:	46bd      	mov	sp, r7
  401654:	f85d 7b04 	ldr.w	r7, [sp], #4
  401658:	4770      	bx	lr
  40165a:	bf00      	nop
  40165c:	400e0600 	.word	0x400e0600

00401660 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  401660:	b480      	push	{r7}
  401662:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  401664:	4b04      	ldr	r3, [pc, #16]	; (401678 <pmc_is_locked_upll+0x18>)
  401666:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401668:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  40166c:	4618      	mov	r0, r3
  40166e:	46bd      	mov	sp, r7
  401670:	f85d 7b04 	ldr.w	r7, [sp], #4
  401674:	4770      	bx	lr
  401676:	bf00      	nop
  401678:	400e0600 	.word	0x400e0600

0040167c <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  40167c:	b480      	push	{r7}
  40167e:	b083      	sub	sp, #12
  401680:	af00      	add	r7, sp, #0
  401682:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  401684:	687b      	ldr	r3, [r7, #4]
  401686:	2b3f      	cmp	r3, #63	; 0x3f
  401688:	d901      	bls.n	40168e <pmc_enable_periph_clk+0x12>
		return 1;
  40168a:	2301      	movs	r3, #1
  40168c:	e02f      	b.n	4016ee <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  40168e:	687b      	ldr	r3, [r7, #4]
  401690:	2b1f      	cmp	r3, #31
  401692:	d813      	bhi.n	4016bc <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401694:	4b19      	ldr	r3, [pc, #100]	; (4016fc <pmc_enable_periph_clk+0x80>)
  401696:	699a      	ldr	r2, [r3, #24]
  401698:	2101      	movs	r1, #1
  40169a:	687b      	ldr	r3, [r7, #4]
  40169c:	fa01 f303 	lsl.w	r3, r1, r3
  4016a0:	401a      	ands	r2, r3
  4016a2:	2101      	movs	r1, #1
  4016a4:	687b      	ldr	r3, [r7, #4]
  4016a6:	fa01 f303 	lsl.w	r3, r1, r3
  4016aa:	429a      	cmp	r2, r3
  4016ac:	d01e      	beq.n	4016ec <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  4016ae:	4a13      	ldr	r2, [pc, #76]	; (4016fc <pmc_enable_periph_clk+0x80>)
  4016b0:	2101      	movs	r1, #1
  4016b2:	687b      	ldr	r3, [r7, #4]
  4016b4:	fa01 f303 	lsl.w	r3, r1, r3
  4016b8:	6113      	str	r3, [r2, #16]
  4016ba:	e017      	b.n	4016ec <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4016bc:	687b      	ldr	r3, [r7, #4]
  4016be:	3b20      	subs	r3, #32
  4016c0:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4016c2:	4b0e      	ldr	r3, [pc, #56]	; (4016fc <pmc_enable_periph_clk+0x80>)
  4016c4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4016c8:	2101      	movs	r1, #1
  4016ca:	687b      	ldr	r3, [r7, #4]
  4016cc:	fa01 f303 	lsl.w	r3, r1, r3
  4016d0:	401a      	ands	r2, r3
  4016d2:	2101      	movs	r1, #1
  4016d4:	687b      	ldr	r3, [r7, #4]
  4016d6:	fa01 f303 	lsl.w	r3, r1, r3
  4016da:	429a      	cmp	r2, r3
  4016dc:	d006      	beq.n	4016ec <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  4016de:	4a07      	ldr	r2, [pc, #28]	; (4016fc <pmc_enable_periph_clk+0x80>)
  4016e0:	2101      	movs	r1, #1
  4016e2:	687b      	ldr	r3, [r7, #4]
  4016e4:	fa01 f303 	lsl.w	r3, r1, r3
  4016e8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  4016ec:	2300      	movs	r3, #0
}
  4016ee:	4618      	mov	r0, r3
  4016f0:	370c      	adds	r7, #12
  4016f2:	46bd      	mov	sp, r7
  4016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016f8:	4770      	bx	lr
  4016fa:	bf00      	nop
  4016fc:	400e0600 	.word	0x400e0600

00401700 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  401700:	b480      	push	{r7}
  401702:	b083      	sub	sp, #12
  401704:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401706:	f3ef 8310 	mrs	r3, PRIMASK
  40170a:	607b      	str	r3, [r7, #4]
  return(result);
  40170c:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40170e:	2b00      	cmp	r3, #0
  401710:	bf0c      	ite	eq
  401712:	2301      	moveq	r3, #1
  401714:	2300      	movne	r3, #0
  401716:	b2db      	uxtb	r3, r3
  401718:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  40171a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40171c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401720:	4b04      	ldr	r3, [pc, #16]	; (401734 <cpu_irq_save+0x34>)
  401722:	2200      	movs	r2, #0
  401724:	701a      	strb	r2, [r3, #0]
	return flags;
  401726:	683b      	ldr	r3, [r7, #0]
}
  401728:	4618      	mov	r0, r3
  40172a:	370c      	adds	r7, #12
  40172c:	46bd      	mov	sp, r7
  40172e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401732:	4770      	bx	lr
  401734:	2040000a 	.word	0x2040000a

00401738 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  401738:	b480      	push	{r7}
  40173a:	b083      	sub	sp, #12
  40173c:	af00      	add	r7, sp, #0
  40173e:	6078      	str	r0, [r7, #4]
	return (flags);
  401740:	687b      	ldr	r3, [r7, #4]
  401742:	2b00      	cmp	r3, #0
  401744:	bf14      	ite	ne
  401746:	2301      	movne	r3, #1
  401748:	2300      	moveq	r3, #0
  40174a:	b2db      	uxtb	r3, r3
}
  40174c:	4618      	mov	r0, r3
  40174e:	370c      	adds	r7, #12
  401750:	46bd      	mov	sp, r7
  401752:	f85d 7b04 	ldr.w	r7, [sp], #4
  401756:	4770      	bx	lr

00401758 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  401758:	b580      	push	{r7, lr}
  40175a:	b082      	sub	sp, #8
  40175c:	af00      	add	r7, sp, #0
  40175e:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  401760:	6878      	ldr	r0, [r7, #4]
  401762:	4b07      	ldr	r3, [pc, #28]	; (401780 <cpu_irq_restore+0x28>)
  401764:	4798      	blx	r3
  401766:	4603      	mov	r3, r0
  401768:	2b00      	cmp	r3, #0
  40176a:	d005      	beq.n	401778 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  40176c:	4b05      	ldr	r3, [pc, #20]	; (401784 <cpu_irq_restore+0x2c>)
  40176e:	2201      	movs	r2, #1
  401770:	701a      	strb	r2, [r3, #0]
  401772:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401776:	b662      	cpsie	i
}
  401778:	bf00      	nop
  40177a:	3708      	adds	r7, #8
  40177c:	46bd      	mov	sp, r7
  40177e:	bd80      	pop	{r7, pc}
  401780:	00401739 	.word	0x00401739
  401784:	2040000a 	.word	0x2040000a

00401788 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401788:	b580      	push	{r7, lr}
  40178a:	b084      	sub	sp, #16
  40178c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  40178e:	4b1e      	ldr	r3, [pc, #120]	; (401808 <Reset_Handler+0x80>)
  401790:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  401792:	4b1e      	ldr	r3, [pc, #120]	; (40180c <Reset_Handler+0x84>)
  401794:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  401796:	68fa      	ldr	r2, [r7, #12]
  401798:	68bb      	ldr	r3, [r7, #8]
  40179a:	429a      	cmp	r2, r3
  40179c:	d00c      	beq.n	4017b8 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  40179e:	e007      	b.n	4017b0 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  4017a0:	68bb      	ldr	r3, [r7, #8]
  4017a2:	1d1a      	adds	r2, r3, #4
  4017a4:	60ba      	str	r2, [r7, #8]
  4017a6:	68fa      	ldr	r2, [r7, #12]
  4017a8:	1d11      	adds	r1, r2, #4
  4017aa:	60f9      	str	r1, [r7, #12]
  4017ac:	6812      	ldr	r2, [r2, #0]
  4017ae:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  4017b0:	68bb      	ldr	r3, [r7, #8]
  4017b2:	4a17      	ldr	r2, [pc, #92]	; (401810 <Reset_Handler+0x88>)
  4017b4:	4293      	cmp	r3, r2
  4017b6:	d3f3      	bcc.n	4017a0 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4017b8:	4b16      	ldr	r3, [pc, #88]	; (401814 <Reset_Handler+0x8c>)
  4017ba:	60bb      	str	r3, [r7, #8]
  4017bc:	e004      	b.n	4017c8 <Reset_Handler+0x40>
                *pDest++ = 0;
  4017be:	68bb      	ldr	r3, [r7, #8]
  4017c0:	1d1a      	adds	r2, r3, #4
  4017c2:	60ba      	str	r2, [r7, #8]
  4017c4:	2200      	movs	r2, #0
  4017c6:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  4017c8:	68bb      	ldr	r3, [r7, #8]
  4017ca:	4a13      	ldr	r2, [pc, #76]	; (401818 <Reset_Handler+0x90>)
  4017cc:	4293      	cmp	r3, r2
  4017ce:	d3f6      	bcc.n	4017be <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  4017d0:	4b12      	ldr	r3, [pc, #72]	; (40181c <Reset_Handler+0x94>)
  4017d2:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4017d4:	4a12      	ldr	r2, [pc, #72]	; (401820 <Reset_Handler+0x98>)
  4017d6:	68fb      	ldr	r3, [r7, #12]
  4017d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4017dc:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  4017de:	4b11      	ldr	r3, [pc, #68]	; (401824 <Reset_Handler+0x9c>)
  4017e0:	4798      	blx	r3
  4017e2:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  4017e4:	4a10      	ldr	r2, [pc, #64]	; (401828 <Reset_Handler+0xa0>)
  4017e6:	4b10      	ldr	r3, [pc, #64]	; (401828 <Reset_Handler+0xa0>)
  4017e8:	681b      	ldr	r3, [r3, #0]
  4017ea:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4017ee:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4017f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4017f4:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  4017f8:	6878      	ldr	r0, [r7, #4]
  4017fa:	4b0c      	ldr	r3, [pc, #48]	; (40182c <Reset_Handler+0xa4>)
  4017fc:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  4017fe:	4b0c      	ldr	r3, [pc, #48]	; (401830 <Reset_Handler+0xa8>)
  401800:	4798      	blx	r3

        /* Branch to main function */
        main();
  401802:	4b0c      	ldr	r3, [pc, #48]	; (401834 <Reset_Handler+0xac>)
  401804:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  401806:	e7fe      	b.n	401806 <Reset_Handler+0x7e>
  401808:	0040726c 	.word	0x0040726c
  40180c:	20400000 	.word	0x20400000
  401810:	204009c0 	.word	0x204009c0
  401814:	204009c0 	.word	0x204009c0
  401818:	20400ac8 	.word	0x20400ac8
  40181c:	00400000 	.word	0x00400000
  401820:	e000ed00 	.word	0xe000ed00
  401824:	00401701 	.word	0x00401701
  401828:	e000ed88 	.word	0xe000ed88
  40182c:	00401759 	.word	0x00401759
  401830:	004027f9 	.word	0x004027f9
  401834:	004022f1 	.word	0x004022f1

00401838 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401838:	b480      	push	{r7}
  40183a:	af00      	add	r7, sp, #0
        while (1) {
  40183c:	e7fe      	b.n	40183c <Dummy_Handler+0x4>
	...

00401840 <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  401840:	b480      	push	{r7}
  401842:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401844:	4b52      	ldr	r3, [pc, #328]	; (401990 <SystemCoreClockUpdate+0x150>)
  401846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401848:	f003 0303 	and.w	r3, r3, #3
  40184c:	2b01      	cmp	r3, #1
  40184e:	d014      	beq.n	40187a <SystemCoreClockUpdate+0x3a>
  401850:	2b01      	cmp	r3, #1
  401852:	d302      	bcc.n	40185a <SystemCoreClockUpdate+0x1a>
  401854:	2b02      	cmp	r3, #2
  401856:	d038      	beq.n	4018ca <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  401858:	e07a      	b.n	401950 <SystemCoreClockUpdate+0x110>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40185a:	4b4e      	ldr	r3, [pc, #312]	; (401994 <SystemCoreClockUpdate+0x154>)
  40185c:	695b      	ldr	r3, [r3, #20]
  40185e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401862:	2b00      	cmp	r3, #0
  401864:	d004      	beq.n	401870 <SystemCoreClockUpdate+0x30>
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401866:	4b4c      	ldr	r3, [pc, #304]	; (401998 <SystemCoreClockUpdate+0x158>)
  401868:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40186c:	601a      	str	r2, [r3, #0]
    break;
  40186e:	e06f      	b.n	401950 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401870:	4b49      	ldr	r3, [pc, #292]	; (401998 <SystemCoreClockUpdate+0x158>)
  401872:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  401876:	601a      	str	r2, [r3, #0]
    break;
  401878:	e06a      	b.n	401950 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40187a:	4b45      	ldr	r3, [pc, #276]	; (401990 <SystemCoreClockUpdate+0x150>)
  40187c:	6a1b      	ldr	r3, [r3, #32]
  40187e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401882:	2b00      	cmp	r3, #0
  401884:	d003      	beq.n	40188e <SystemCoreClockUpdate+0x4e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401886:	4b44      	ldr	r3, [pc, #272]	; (401998 <SystemCoreClockUpdate+0x158>)
  401888:	4a44      	ldr	r2, [pc, #272]	; (40199c <SystemCoreClockUpdate+0x15c>)
  40188a:	601a      	str	r2, [r3, #0]
    break;
  40188c:	e060      	b.n	401950 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40188e:	4b42      	ldr	r3, [pc, #264]	; (401998 <SystemCoreClockUpdate+0x158>)
  401890:	4a43      	ldr	r2, [pc, #268]	; (4019a0 <SystemCoreClockUpdate+0x160>)
  401892:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401894:	4b3e      	ldr	r3, [pc, #248]	; (401990 <SystemCoreClockUpdate+0x150>)
  401896:	6a1b      	ldr	r3, [r3, #32]
  401898:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40189c:	2b10      	cmp	r3, #16
  40189e:	d004      	beq.n	4018aa <SystemCoreClockUpdate+0x6a>
  4018a0:	2b20      	cmp	r3, #32
  4018a2:	d008      	beq.n	4018b6 <SystemCoreClockUpdate+0x76>
  4018a4:	2b00      	cmp	r3, #0
  4018a6:	d00e      	beq.n	4018c6 <SystemCoreClockUpdate+0x86>
          break;
  4018a8:	e00e      	b.n	4018c8 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 2U;
  4018aa:	4b3b      	ldr	r3, [pc, #236]	; (401998 <SystemCoreClockUpdate+0x158>)
  4018ac:	681b      	ldr	r3, [r3, #0]
  4018ae:	005b      	lsls	r3, r3, #1
  4018b0:	4a39      	ldr	r2, [pc, #228]	; (401998 <SystemCoreClockUpdate+0x158>)
  4018b2:	6013      	str	r3, [r2, #0]
          break;
  4018b4:	e008      	b.n	4018c8 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 3U;
  4018b6:	4b38      	ldr	r3, [pc, #224]	; (401998 <SystemCoreClockUpdate+0x158>)
  4018b8:	681a      	ldr	r2, [r3, #0]
  4018ba:	4613      	mov	r3, r2
  4018bc:	005b      	lsls	r3, r3, #1
  4018be:	4413      	add	r3, r2
  4018c0:	4a35      	ldr	r2, [pc, #212]	; (401998 <SystemCoreClockUpdate+0x158>)
  4018c2:	6013      	str	r3, [r2, #0]
          break;
  4018c4:	e000      	b.n	4018c8 <SystemCoreClockUpdate+0x88>
          break;
  4018c6:	bf00      	nop
    break;
  4018c8:	e042      	b.n	401950 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4018ca:	4b31      	ldr	r3, [pc, #196]	; (401990 <SystemCoreClockUpdate+0x150>)
  4018cc:	6a1b      	ldr	r3, [r3, #32]
  4018ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4018d2:	2b00      	cmp	r3, #0
  4018d4:	d003      	beq.n	4018de <SystemCoreClockUpdate+0x9e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4018d6:	4b30      	ldr	r3, [pc, #192]	; (401998 <SystemCoreClockUpdate+0x158>)
  4018d8:	4a30      	ldr	r2, [pc, #192]	; (40199c <SystemCoreClockUpdate+0x15c>)
  4018da:	601a      	str	r2, [r3, #0]
  4018dc:	e01c      	b.n	401918 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4018de:	4b2e      	ldr	r3, [pc, #184]	; (401998 <SystemCoreClockUpdate+0x158>)
  4018e0:	4a2f      	ldr	r2, [pc, #188]	; (4019a0 <SystemCoreClockUpdate+0x160>)
  4018e2:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4018e4:	4b2a      	ldr	r3, [pc, #168]	; (401990 <SystemCoreClockUpdate+0x150>)
  4018e6:	6a1b      	ldr	r3, [r3, #32]
  4018e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4018ec:	2b10      	cmp	r3, #16
  4018ee:	d004      	beq.n	4018fa <SystemCoreClockUpdate+0xba>
  4018f0:	2b20      	cmp	r3, #32
  4018f2:	d008      	beq.n	401906 <SystemCoreClockUpdate+0xc6>
  4018f4:	2b00      	cmp	r3, #0
  4018f6:	d00e      	beq.n	401916 <SystemCoreClockUpdate+0xd6>
          break;
  4018f8:	e00e      	b.n	401918 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 2U;
  4018fa:	4b27      	ldr	r3, [pc, #156]	; (401998 <SystemCoreClockUpdate+0x158>)
  4018fc:	681b      	ldr	r3, [r3, #0]
  4018fe:	005b      	lsls	r3, r3, #1
  401900:	4a25      	ldr	r2, [pc, #148]	; (401998 <SystemCoreClockUpdate+0x158>)
  401902:	6013      	str	r3, [r2, #0]
          break;
  401904:	e008      	b.n	401918 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 3U;
  401906:	4b24      	ldr	r3, [pc, #144]	; (401998 <SystemCoreClockUpdate+0x158>)
  401908:	681a      	ldr	r2, [r3, #0]
  40190a:	4613      	mov	r3, r2
  40190c:	005b      	lsls	r3, r3, #1
  40190e:	4413      	add	r3, r2
  401910:	4a21      	ldr	r2, [pc, #132]	; (401998 <SystemCoreClockUpdate+0x158>)
  401912:	6013      	str	r3, [r2, #0]
          break;
  401914:	e000      	b.n	401918 <SystemCoreClockUpdate+0xd8>
          break;
  401916:	bf00      	nop
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401918:	4b1d      	ldr	r3, [pc, #116]	; (401990 <SystemCoreClockUpdate+0x150>)
  40191a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40191c:	f003 0303 	and.w	r3, r3, #3
  401920:	2b02      	cmp	r3, #2
  401922:	d114      	bne.n	40194e <SystemCoreClockUpdate+0x10e>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401924:	4b1a      	ldr	r3, [pc, #104]	; (401990 <SystemCoreClockUpdate+0x150>)
  401926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401928:	0c1b      	lsrs	r3, r3, #16
  40192a:	f3c3 030a 	ubfx	r3, r3, #0, #11
  40192e:	3301      	adds	r3, #1
  401930:	4a19      	ldr	r2, [pc, #100]	; (401998 <SystemCoreClockUpdate+0x158>)
  401932:	6812      	ldr	r2, [r2, #0]
  401934:	fb02 f303 	mul.w	r3, r2, r3
  401938:	4a17      	ldr	r2, [pc, #92]	; (401998 <SystemCoreClockUpdate+0x158>)
  40193a:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40193c:	4b14      	ldr	r3, [pc, #80]	; (401990 <SystemCoreClockUpdate+0x150>)
  40193e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401940:	b2db      	uxtb	r3, r3
  401942:	4a15      	ldr	r2, [pc, #84]	; (401998 <SystemCoreClockUpdate+0x158>)
  401944:	6812      	ldr	r2, [r2, #0]
  401946:	fbb2 f3f3 	udiv	r3, r2, r3
  40194a:	4a13      	ldr	r2, [pc, #76]	; (401998 <SystemCoreClockUpdate+0x158>)
  40194c:	6013      	str	r3, [r2, #0]
    break;
  40194e:	bf00      	nop
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401950:	4b0f      	ldr	r3, [pc, #60]	; (401990 <SystemCoreClockUpdate+0x150>)
  401952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401954:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401958:	2b70      	cmp	r3, #112	; 0x70
  40195a:	d108      	bne.n	40196e <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  40195c:	4b0e      	ldr	r3, [pc, #56]	; (401998 <SystemCoreClockUpdate+0x158>)
  40195e:	681b      	ldr	r3, [r3, #0]
  401960:	4a10      	ldr	r2, [pc, #64]	; (4019a4 <SystemCoreClockUpdate+0x164>)
  401962:	fba2 2303 	umull	r2, r3, r2, r3
  401966:	085b      	lsrs	r3, r3, #1
  401968:	4a0b      	ldr	r2, [pc, #44]	; (401998 <SystemCoreClockUpdate+0x158>)
  40196a:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  40196c:	e00a      	b.n	401984 <SystemCoreClockUpdate+0x144>
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40196e:	4b08      	ldr	r3, [pc, #32]	; (401990 <SystemCoreClockUpdate+0x150>)
  401970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401972:	091b      	lsrs	r3, r3, #4
  401974:	f003 0307 	and.w	r3, r3, #7
  401978:	4a07      	ldr	r2, [pc, #28]	; (401998 <SystemCoreClockUpdate+0x158>)
  40197a:	6812      	ldr	r2, [r2, #0]
  40197c:	fa22 f303 	lsr.w	r3, r2, r3
  401980:	4a05      	ldr	r2, [pc, #20]	; (401998 <SystemCoreClockUpdate+0x158>)
  401982:	6013      	str	r3, [r2, #0]
}
  401984:	bf00      	nop
  401986:	46bd      	mov	sp, r7
  401988:	f85d 7b04 	ldr.w	r7, [sp], #4
  40198c:	4770      	bx	lr
  40198e:	bf00      	nop
  401990:	400e0600 	.word	0x400e0600
  401994:	400e1810 	.word	0x400e1810
  401998:	2040000c 	.word	0x2040000c
  40199c:	00b71b00 	.word	0x00b71b00
  4019a0:	003d0900 	.word	0x003d0900
  4019a4:	aaaaaaab 	.word	0xaaaaaaab

004019a8 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  4019a8:	b480      	push	{r7}
  4019aa:	b083      	sub	sp, #12
  4019ac:	af00      	add	r7, sp, #0
  4019ae:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4019b0:	687b      	ldr	r3, [r7, #4]
  4019b2:	4a1d      	ldr	r2, [pc, #116]	; (401a28 <system_init_flash+0x80>)
  4019b4:	4293      	cmp	r3, r2
  4019b6:	d804      	bhi.n	4019c2 <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4019b8:	4b1c      	ldr	r3, [pc, #112]	; (401a2c <system_init_flash+0x84>)
  4019ba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4019be:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4019c0:	e02b      	b.n	401a1a <system_init_flash+0x72>
    if (ul_clk < CHIP_FREQ_FWS_1)
  4019c2:	687b      	ldr	r3, [r7, #4]
  4019c4:	4a1a      	ldr	r2, [pc, #104]	; (401a30 <system_init_flash+0x88>)
  4019c6:	4293      	cmp	r3, r2
  4019c8:	d803      	bhi.n	4019d2 <system_init_flash+0x2a>
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4019ca:	4b18      	ldr	r3, [pc, #96]	; (401a2c <system_init_flash+0x84>)
  4019cc:	4a19      	ldr	r2, [pc, #100]	; (401a34 <system_init_flash+0x8c>)
  4019ce:	601a      	str	r2, [r3, #0]
}
  4019d0:	e023      	b.n	401a1a <system_init_flash+0x72>
      if (ul_clk < CHIP_FREQ_FWS_2)
  4019d2:	687b      	ldr	r3, [r7, #4]
  4019d4:	4a18      	ldr	r2, [pc, #96]	; (401a38 <system_init_flash+0x90>)
  4019d6:	4293      	cmp	r3, r2
  4019d8:	d803      	bhi.n	4019e2 <system_init_flash+0x3a>
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4019da:	4b14      	ldr	r3, [pc, #80]	; (401a2c <system_init_flash+0x84>)
  4019dc:	4a17      	ldr	r2, [pc, #92]	; (401a3c <system_init_flash+0x94>)
  4019de:	601a      	str	r2, [r3, #0]
}
  4019e0:	e01b      	b.n	401a1a <system_init_flash+0x72>
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4019e2:	687b      	ldr	r3, [r7, #4]
  4019e4:	4a16      	ldr	r2, [pc, #88]	; (401a40 <system_init_flash+0x98>)
  4019e6:	4293      	cmp	r3, r2
  4019e8:	d803      	bhi.n	4019f2 <system_init_flash+0x4a>
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4019ea:	4b10      	ldr	r3, [pc, #64]	; (401a2c <system_init_flash+0x84>)
  4019ec:	4a15      	ldr	r2, [pc, #84]	; (401a44 <system_init_flash+0x9c>)
  4019ee:	601a      	str	r2, [r3, #0]
}
  4019f0:	e013      	b.n	401a1a <system_init_flash+0x72>
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4019f2:	687b      	ldr	r3, [r7, #4]
  4019f4:	4a14      	ldr	r2, [pc, #80]	; (401a48 <system_init_flash+0xa0>)
  4019f6:	4293      	cmp	r3, r2
  4019f8:	d804      	bhi.n	401a04 <system_init_flash+0x5c>
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4019fa:	4b0c      	ldr	r3, [pc, #48]	; (401a2c <system_init_flash+0x84>)
  4019fc:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401a00:	601a      	str	r2, [r3, #0]
}
  401a02:	e00a      	b.n	401a1a <system_init_flash+0x72>
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  401a04:	687b      	ldr	r3, [r7, #4]
  401a06:	4a11      	ldr	r2, [pc, #68]	; (401a4c <system_init_flash+0xa4>)
  401a08:	4293      	cmp	r3, r2
  401a0a:	d803      	bhi.n	401a14 <system_init_flash+0x6c>
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401a0c:	4b07      	ldr	r3, [pc, #28]	; (401a2c <system_init_flash+0x84>)
  401a0e:	4a10      	ldr	r2, [pc, #64]	; (401a50 <system_init_flash+0xa8>)
  401a10:	601a      	str	r2, [r3, #0]
}
  401a12:	e002      	b.n	401a1a <system_init_flash+0x72>
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  401a14:	4b05      	ldr	r3, [pc, #20]	; (401a2c <system_init_flash+0x84>)
  401a16:	4a0f      	ldr	r2, [pc, #60]	; (401a54 <system_init_flash+0xac>)
  401a18:	601a      	str	r2, [r3, #0]
}
  401a1a:	bf00      	nop
  401a1c:	370c      	adds	r7, #12
  401a1e:	46bd      	mov	sp, r7
  401a20:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a24:	4770      	bx	lr
  401a26:	bf00      	nop
  401a28:	015ef3bf 	.word	0x015ef3bf
  401a2c:	400e0c00 	.word	0x400e0c00
  401a30:	02bde77f 	.word	0x02bde77f
  401a34:	04000100 	.word	0x04000100
  401a38:	041cdb3f 	.word	0x041cdb3f
  401a3c:	04000200 	.word	0x04000200
  401a40:	057bceff 	.word	0x057bceff
  401a44:	04000300 	.word	0x04000300
  401a48:	06dac2bf 	.word	0x06dac2bf
  401a4c:	0839b67f 	.word	0x0839b67f
  401a50:	04000500 	.word	0x04000500
  401a54:	04000600 	.word	0x04000600

00401a58 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  401a58:	b480      	push	{r7}
  401a5a:	b085      	sub	sp, #20
  401a5c:	af00      	add	r7, sp, #0
  401a5e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  401a60:	4b10      	ldr	r3, [pc, #64]	; (401aa4 <_sbrk+0x4c>)
  401a62:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  401a64:	4b10      	ldr	r3, [pc, #64]	; (401aa8 <_sbrk+0x50>)
  401a66:	681b      	ldr	r3, [r3, #0]
  401a68:	2b00      	cmp	r3, #0
  401a6a:	d102      	bne.n	401a72 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  401a6c:	4b0e      	ldr	r3, [pc, #56]	; (401aa8 <_sbrk+0x50>)
  401a6e:	4a0f      	ldr	r2, [pc, #60]	; (401aac <_sbrk+0x54>)
  401a70:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  401a72:	4b0d      	ldr	r3, [pc, #52]	; (401aa8 <_sbrk+0x50>)
  401a74:	681b      	ldr	r3, [r3, #0]
  401a76:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  401a78:	68ba      	ldr	r2, [r7, #8]
  401a7a:	687b      	ldr	r3, [r7, #4]
  401a7c:	441a      	add	r2, r3
  401a7e:	68fb      	ldr	r3, [r7, #12]
  401a80:	429a      	cmp	r2, r3
  401a82:	dd02      	ble.n	401a8a <_sbrk+0x32>
		return (caddr_t) -1;	
  401a84:	f04f 33ff 	mov.w	r3, #4294967295
  401a88:	e006      	b.n	401a98 <_sbrk+0x40>
	}

	heap += incr;
  401a8a:	4b07      	ldr	r3, [pc, #28]	; (401aa8 <_sbrk+0x50>)
  401a8c:	681a      	ldr	r2, [r3, #0]
  401a8e:	687b      	ldr	r3, [r7, #4]
  401a90:	4413      	add	r3, r2
  401a92:	4a05      	ldr	r2, [pc, #20]	; (401aa8 <_sbrk+0x50>)
  401a94:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  401a96:	68bb      	ldr	r3, [r7, #8]
}
  401a98:	4618      	mov	r0, r3
  401a9a:	3714      	adds	r7, #20
  401a9c:	46bd      	mov	sp, r7
  401a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401aa2:	4770      	bx	lr
  401aa4:	2045fffc 	.word	0x2045fffc
  401aa8:	20400a54 	.word	0x20400a54
  401aac:	20402cc8 	.word	0x20402cc8

00401ab0 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  401ab0:	b480      	push	{r7}
  401ab2:	b083      	sub	sp, #12
  401ab4:	af00      	add	r7, sp, #0
  401ab6:	4603      	mov	r3, r0
  401ab8:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401aba:	4909      	ldr	r1, [pc, #36]	; (401ae0 <NVIC_EnableIRQ+0x30>)
  401abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401ac0:	095b      	lsrs	r3, r3, #5
  401ac2:	79fa      	ldrb	r2, [r7, #7]
  401ac4:	f002 021f 	and.w	r2, r2, #31
  401ac8:	2001      	movs	r0, #1
  401aca:	fa00 f202 	lsl.w	r2, r0, r2
  401ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  401ad2:	bf00      	nop
  401ad4:	370c      	adds	r7, #12
  401ad6:	46bd      	mov	sp, r7
  401ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
  401adc:	4770      	bx	lr
  401ade:	bf00      	nop
  401ae0:	e000e100 	.word	0xe000e100

00401ae4 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  401ae4:	b480      	push	{r7}
  401ae6:	b083      	sub	sp, #12
  401ae8:	af00      	add	r7, sp, #0
  401aea:	4603      	mov	r3, r0
  401aec:	6039      	str	r1, [r7, #0]
  401aee:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  401af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401af4:	2b00      	cmp	r3, #0
  401af6:	da0b      	bge.n	401b10 <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401af8:	490d      	ldr	r1, [pc, #52]	; (401b30 <NVIC_SetPriority+0x4c>)
  401afa:	79fb      	ldrb	r3, [r7, #7]
  401afc:	f003 030f 	and.w	r3, r3, #15
  401b00:	3b04      	subs	r3, #4
  401b02:	683a      	ldr	r2, [r7, #0]
  401b04:	b2d2      	uxtb	r2, r2
  401b06:	0152      	lsls	r2, r2, #5
  401b08:	b2d2      	uxtb	r2, r2
  401b0a:	440b      	add	r3, r1
  401b0c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
}
  401b0e:	e009      	b.n	401b24 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401b10:	4908      	ldr	r1, [pc, #32]	; (401b34 <NVIC_SetPriority+0x50>)
  401b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401b16:	683a      	ldr	r2, [r7, #0]
  401b18:	b2d2      	uxtb	r2, r2
  401b1a:	0152      	lsls	r2, r2, #5
  401b1c:	b2d2      	uxtb	r2, r2
  401b1e:	440b      	add	r3, r1
  401b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  401b24:	bf00      	nop
  401b26:	370c      	adds	r7, #12
  401b28:	46bd      	mov	sp, r7
  401b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b2e:	4770      	bx	lr
  401b30:	e000ed00 	.word	0xe000ed00
  401b34:	e000e100 	.word	0xe000e100

00401b38 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  401b38:	b580      	push	{r7, lr}
  401b3a:	b082      	sub	sp, #8
  401b3c:	af00      	add	r7, sp, #0
  401b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
  401b40:	687b      	ldr	r3, [r7, #4]
  401b42:	3b01      	subs	r3, #1
  401b44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  401b48:	d301      	bcc.n	401b4e <SysTick_Config+0x16>
  401b4a:	2301      	movs	r3, #1
  401b4c:	e00f      	b.n	401b6e <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  401b4e:	4a0a      	ldr	r2, [pc, #40]	; (401b78 <SysTick_Config+0x40>)
  401b50:	687b      	ldr	r3, [r7, #4]
  401b52:	3b01      	subs	r3, #1
  401b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  401b56:	2107      	movs	r1, #7
  401b58:	f04f 30ff 	mov.w	r0, #4294967295
  401b5c:	4b07      	ldr	r3, [pc, #28]	; (401b7c <SysTick_Config+0x44>)
  401b5e:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  401b60:	4b05      	ldr	r3, [pc, #20]	; (401b78 <SysTick_Config+0x40>)
  401b62:	2200      	movs	r2, #0
  401b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  401b66:	4b04      	ldr	r3, [pc, #16]	; (401b78 <SysTick_Config+0x40>)
  401b68:	2207      	movs	r2, #7
  401b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
  401b6c:	2300      	movs	r3, #0
}
  401b6e:	4618      	mov	r0, r3
  401b70:	3708      	adds	r7, #8
  401b72:	46bd      	mov	sp, r7
  401b74:	bd80      	pop	{r7, pc}
  401b76:	bf00      	nop
  401b78:	e000e010 	.word	0xe000e010
  401b7c:	00401ae5 	.word	0x00401ae5

00401b80 <osc_get_rate>:
{
  401b80:	b480      	push	{r7}
  401b82:	b083      	sub	sp, #12
  401b84:	af00      	add	r7, sp, #0
  401b86:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401b88:	687b      	ldr	r3, [r7, #4]
  401b8a:	2b07      	cmp	r3, #7
  401b8c:	d825      	bhi.n	401bda <osc_get_rate+0x5a>
  401b8e:	a201      	add	r2, pc, #4	; (adr r2, 401b94 <osc_get_rate+0x14>)
  401b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401b94:	00401bb5 	.word	0x00401bb5
  401b98:	00401bbb 	.word	0x00401bbb
  401b9c:	00401bc1 	.word	0x00401bc1
  401ba0:	00401bc7 	.word	0x00401bc7
  401ba4:	00401bcb 	.word	0x00401bcb
  401ba8:	00401bcf 	.word	0x00401bcf
  401bac:	00401bd3 	.word	0x00401bd3
  401bb0:	00401bd7 	.word	0x00401bd7
		return OSC_SLCK_32K_RC_HZ;
  401bb4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401bb8:	e010      	b.n	401bdc <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  401bba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401bbe:	e00d      	b.n	401bdc <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  401bc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401bc4:	e00a      	b.n	401bdc <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  401bc6:	4b08      	ldr	r3, [pc, #32]	; (401be8 <osc_get_rate+0x68>)
  401bc8:	e008      	b.n	401bdc <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  401bca:	4b08      	ldr	r3, [pc, #32]	; (401bec <osc_get_rate+0x6c>)
  401bcc:	e006      	b.n	401bdc <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  401bce:	4b08      	ldr	r3, [pc, #32]	; (401bf0 <osc_get_rate+0x70>)
  401bd0:	e004      	b.n	401bdc <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  401bd2:	4b07      	ldr	r3, [pc, #28]	; (401bf0 <osc_get_rate+0x70>)
  401bd4:	e002      	b.n	401bdc <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  401bd6:	4b06      	ldr	r3, [pc, #24]	; (401bf0 <osc_get_rate+0x70>)
  401bd8:	e000      	b.n	401bdc <osc_get_rate+0x5c>
	return 0;
  401bda:	2300      	movs	r3, #0
}
  401bdc:	4618      	mov	r0, r3
  401bde:	370c      	adds	r7, #12
  401be0:	46bd      	mov	sp, r7
  401be2:	f85d 7b04 	ldr.w	r7, [sp], #4
  401be6:	4770      	bx	lr
  401be8:	003d0900 	.word	0x003d0900
  401bec:	007a1200 	.word	0x007a1200
  401bf0:	00b71b00 	.word	0x00b71b00

00401bf4 <sysclk_get_main_hz>:
{
  401bf4:	b580      	push	{r7, lr}
  401bf6:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401bf8:	2006      	movs	r0, #6
  401bfa:	4b05      	ldr	r3, [pc, #20]	; (401c10 <sysclk_get_main_hz+0x1c>)
  401bfc:	4798      	blx	r3
  401bfe:	4602      	mov	r2, r0
  401c00:	4613      	mov	r3, r2
  401c02:	009b      	lsls	r3, r3, #2
  401c04:	4413      	add	r3, r2
  401c06:	009a      	lsls	r2, r3, #2
  401c08:	4413      	add	r3, r2
}
  401c0a:	4618      	mov	r0, r3
  401c0c:	bd80      	pop	{r7, pc}
  401c0e:	bf00      	nop
  401c10:	00401b81 	.word	0x00401b81

00401c14 <sysclk_get_cpu_hz>:
{
  401c14:	b580      	push	{r7, lr}
  401c16:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401c18:	4b02      	ldr	r3, [pc, #8]	; (401c24 <sysclk_get_cpu_hz+0x10>)
  401c1a:	4798      	blx	r3
  401c1c:	4603      	mov	r3, r0
}
  401c1e:	4618      	mov	r0, r3
  401c20:	bd80      	pop	{r7, pc}
  401c22:	bf00      	nop
  401c24:	00401bf5 	.word	0x00401bf5

00401c28 <sysclk_get_peripheral_hz>:
{
  401c28:	b580      	push	{r7, lr}
  401c2a:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401c2c:	4b02      	ldr	r3, [pc, #8]	; (401c38 <sysclk_get_peripheral_hz+0x10>)
  401c2e:	4798      	blx	r3
  401c30:	4603      	mov	r3, r0
  401c32:	085b      	lsrs	r3, r3, #1
}
  401c34:	4618      	mov	r0, r3
  401c36:	bd80      	pop	{r7, pc}
  401c38:	00401bf5 	.word	0x00401bf5

00401c3c <sysclk_enable_peripheral_clock>:
{
  401c3c:	b580      	push	{r7, lr}
  401c3e:	b082      	sub	sp, #8
  401c40:	af00      	add	r7, sp, #0
  401c42:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401c44:	6878      	ldr	r0, [r7, #4]
  401c46:	4b03      	ldr	r3, [pc, #12]	; (401c54 <sysclk_enable_peripheral_clock+0x18>)
  401c48:	4798      	blx	r3
}
  401c4a:	bf00      	nop
  401c4c:	3708      	adds	r7, #8
  401c4e:	46bd      	mov	sp, r7
  401c50:	bd80      	pop	{r7, pc}
  401c52:	bf00      	nop
  401c54:	0040167d 	.word	0x0040167d

00401c58 <usart_serial_init>:
{
  401c58:	b580      	push	{r7, lr}
  401c5a:	b08c      	sub	sp, #48	; 0x30
  401c5c:	af00      	add	r7, sp, #0
  401c5e:	6078      	str	r0, [r7, #4]
  401c60:	6039      	str	r1, [r7, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  401c62:	4b4f      	ldr	r3, [pc, #316]	; (401da0 <usart_serial_init+0x148>)
  401c64:	4798      	blx	r3
  401c66:	4603      	mov	r3, r0
  401c68:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  401c6a:	683b      	ldr	r3, [r7, #0]
  401c6c:	681b      	ldr	r3, [r3, #0]
  401c6e:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  401c70:	683b      	ldr	r3, [r7, #0]
  401c72:	689b      	ldr	r3, [r3, #8]
  401c74:	62fb      	str	r3, [r7, #44]	; 0x2c
	usart_settings.baudrate = opt->baudrate;
  401c76:	683b      	ldr	r3, [r7, #0]
  401c78:	681b      	ldr	r3, [r3, #0]
  401c7a:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  401c7c:	683b      	ldr	r3, [r7, #0]
  401c7e:	685b      	ldr	r3, [r3, #4]
  401c80:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  401c82:	683b      	ldr	r3, [r7, #0]
  401c84:	689b      	ldr	r3, [r3, #8]
  401c86:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  401c88:	683b      	ldr	r3, [r7, #0]
  401c8a:	68db      	ldr	r3, [r3, #12]
  401c8c:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  401c8e:	2300      	movs	r3, #0
  401c90:	61fb      	str	r3, [r7, #28]
	if (UART0 == (Uart*)p_usart) {
  401c92:	687b      	ldr	r3, [r7, #4]
  401c94:	4a43      	ldr	r2, [pc, #268]	; (401da4 <usart_serial_init+0x14c>)
  401c96:	4293      	cmp	r3, r2
  401c98:	d108      	bne.n	401cac <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  401c9a:	2007      	movs	r0, #7
  401c9c:	4b42      	ldr	r3, [pc, #264]	; (401da8 <usart_serial_init+0x150>)
  401c9e:	4798      	blx	r3
		uart_init((Uart*)p_usart, &uart_settings);
  401ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401ca4:	4619      	mov	r1, r3
  401ca6:	6878      	ldr	r0, [r7, #4]
  401ca8:	4b40      	ldr	r3, [pc, #256]	; (401dac <usart_serial_init+0x154>)
  401caa:	4798      	blx	r3
	if (UART1 == (Uart*)p_usart) {
  401cac:	687b      	ldr	r3, [r7, #4]
  401cae:	4a40      	ldr	r2, [pc, #256]	; (401db0 <usart_serial_init+0x158>)
  401cb0:	4293      	cmp	r3, r2
  401cb2:	d108      	bne.n	401cc6 <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  401cb4:	2008      	movs	r0, #8
  401cb6:	4b3c      	ldr	r3, [pc, #240]	; (401da8 <usart_serial_init+0x150>)
  401cb8:	4798      	blx	r3
		uart_init((Uart*)p_usart, &uart_settings);
  401cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401cbe:	4619      	mov	r1, r3
  401cc0:	6878      	ldr	r0, [r7, #4]
  401cc2:	4b3a      	ldr	r3, [pc, #232]	; (401dac <usart_serial_init+0x154>)
  401cc4:	4798      	blx	r3
	if (UART2 == (Uart*)p_usart) {
  401cc6:	687b      	ldr	r3, [r7, #4]
  401cc8:	4a3a      	ldr	r2, [pc, #232]	; (401db4 <usart_serial_init+0x15c>)
  401cca:	4293      	cmp	r3, r2
  401ccc:	d108      	bne.n	401ce0 <usart_serial_init+0x88>
		sysclk_enable_peripheral_clock(ID_UART2);
  401cce:	202c      	movs	r0, #44	; 0x2c
  401cd0:	4b35      	ldr	r3, [pc, #212]	; (401da8 <usart_serial_init+0x150>)
  401cd2:	4798      	blx	r3
		uart_init((Uart*)p_usart, &uart_settings);
  401cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401cd8:	4619      	mov	r1, r3
  401cda:	6878      	ldr	r0, [r7, #4]
  401cdc:	4b33      	ldr	r3, [pc, #204]	; (401dac <usart_serial_init+0x154>)
  401cde:	4798      	blx	r3
	if (UART3 == (Uart*)p_usart) {
  401ce0:	687b      	ldr	r3, [r7, #4]
  401ce2:	4a35      	ldr	r2, [pc, #212]	; (401db8 <usart_serial_init+0x160>)
  401ce4:	4293      	cmp	r3, r2
  401ce6:	d108      	bne.n	401cfa <usart_serial_init+0xa2>
		sysclk_enable_peripheral_clock(ID_UART3);
  401ce8:	202d      	movs	r0, #45	; 0x2d
  401cea:	4b2f      	ldr	r3, [pc, #188]	; (401da8 <usart_serial_init+0x150>)
  401cec:	4798      	blx	r3
		uart_init((Uart*)p_usart, &uart_settings);
  401cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401cf2:	4619      	mov	r1, r3
  401cf4:	6878      	ldr	r0, [r7, #4]
  401cf6:	4b2d      	ldr	r3, [pc, #180]	; (401dac <usart_serial_init+0x154>)
  401cf8:	4798      	blx	r3
	if (UART4 == (Uart*)p_usart) {
  401cfa:	687b      	ldr	r3, [r7, #4]
  401cfc:	4a2f      	ldr	r2, [pc, #188]	; (401dbc <usart_serial_init+0x164>)
  401cfe:	4293      	cmp	r3, r2
  401d00:	d108      	bne.n	401d14 <usart_serial_init+0xbc>
		sysclk_enable_peripheral_clock(ID_UART4);
  401d02:	202e      	movs	r0, #46	; 0x2e
  401d04:	4b28      	ldr	r3, [pc, #160]	; (401da8 <usart_serial_init+0x150>)
  401d06:	4798      	blx	r3
		uart_init((Uart*)p_usart, &uart_settings);
  401d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401d0c:	4619      	mov	r1, r3
  401d0e:	6878      	ldr	r0, [r7, #4]
  401d10:	4b26      	ldr	r3, [pc, #152]	; (401dac <usart_serial_init+0x154>)
  401d12:	4798      	blx	r3
	if (USART0 == p_usart) {
  401d14:	687b      	ldr	r3, [r7, #4]
  401d16:	4a2a      	ldr	r2, [pc, #168]	; (401dc0 <usart_serial_init+0x168>)
  401d18:	4293      	cmp	r3, r2
  401d1a:	d111      	bne.n	401d40 <usart_serial_init+0xe8>
		sysclk_enable_peripheral_clock(ID_USART0);
  401d1c:	200d      	movs	r0, #13
  401d1e:	4b22      	ldr	r3, [pc, #136]	; (401da8 <usart_serial_init+0x150>)
  401d20:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  401d22:	4b1f      	ldr	r3, [pc, #124]	; (401da0 <usart_serial_init+0x148>)
  401d24:	4798      	blx	r3
  401d26:	4602      	mov	r2, r0
  401d28:	f107 030c 	add.w	r3, r7, #12
  401d2c:	4619      	mov	r1, r3
  401d2e:	6878      	ldr	r0, [r7, #4]
  401d30:	4b24      	ldr	r3, [pc, #144]	; (401dc4 <usart_serial_init+0x16c>)
  401d32:	4798      	blx	r3
		usart_enable_tx(p_usart);
  401d34:	6878      	ldr	r0, [r7, #4]
  401d36:	4b24      	ldr	r3, [pc, #144]	; (401dc8 <usart_serial_init+0x170>)
  401d38:	4798      	blx	r3
		usart_enable_rx(p_usart);
  401d3a:	6878      	ldr	r0, [r7, #4]
  401d3c:	4b23      	ldr	r3, [pc, #140]	; (401dcc <usart_serial_init+0x174>)
  401d3e:	4798      	blx	r3
	if (USART1 == p_usart) {
  401d40:	687b      	ldr	r3, [r7, #4]
  401d42:	4a23      	ldr	r2, [pc, #140]	; (401dd0 <usart_serial_init+0x178>)
  401d44:	4293      	cmp	r3, r2
  401d46:	d111      	bne.n	401d6c <usart_serial_init+0x114>
		sysclk_enable_peripheral_clock(ID_USART1);
  401d48:	200e      	movs	r0, #14
  401d4a:	4b17      	ldr	r3, [pc, #92]	; (401da8 <usart_serial_init+0x150>)
  401d4c:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  401d4e:	4b14      	ldr	r3, [pc, #80]	; (401da0 <usart_serial_init+0x148>)
  401d50:	4798      	blx	r3
  401d52:	4602      	mov	r2, r0
  401d54:	f107 030c 	add.w	r3, r7, #12
  401d58:	4619      	mov	r1, r3
  401d5a:	6878      	ldr	r0, [r7, #4]
  401d5c:	4b19      	ldr	r3, [pc, #100]	; (401dc4 <usart_serial_init+0x16c>)
  401d5e:	4798      	blx	r3
		usart_enable_tx(p_usart);
  401d60:	6878      	ldr	r0, [r7, #4]
  401d62:	4b19      	ldr	r3, [pc, #100]	; (401dc8 <usart_serial_init+0x170>)
  401d64:	4798      	blx	r3
		usart_enable_rx(p_usart);
  401d66:	6878      	ldr	r0, [r7, #4]
  401d68:	4b18      	ldr	r3, [pc, #96]	; (401dcc <usart_serial_init+0x174>)
  401d6a:	4798      	blx	r3
	if (USART2 == p_usart) {
  401d6c:	687b      	ldr	r3, [r7, #4]
  401d6e:	4a19      	ldr	r2, [pc, #100]	; (401dd4 <usart_serial_init+0x17c>)
  401d70:	4293      	cmp	r3, r2
  401d72:	d111      	bne.n	401d98 <usart_serial_init+0x140>
		sysclk_enable_peripheral_clock(ID_USART2);
  401d74:	200f      	movs	r0, #15
  401d76:	4b0c      	ldr	r3, [pc, #48]	; (401da8 <usart_serial_init+0x150>)
  401d78:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  401d7a:	4b09      	ldr	r3, [pc, #36]	; (401da0 <usart_serial_init+0x148>)
  401d7c:	4798      	blx	r3
  401d7e:	4602      	mov	r2, r0
  401d80:	f107 030c 	add.w	r3, r7, #12
  401d84:	4619      	mov	r1, r3
  401d86:	6878      	ldr	r0, [r7, #4]
  401d88:	4b0e      	ldr	r3, [pc, #56]	; (401dc4 <usart_serial_init+0x16c>)
  401d8a:	4798      	blx	r3
		usart_enable_tx(p_usart);
  401d8c:	6878      	ldr	r0, [r7, #4]
  401d8e:	4b0e      	ldr	r3, [pc, #56]	; (401dc8 <usart_serial_init+0x170>)
  401d90:	4798      	blx	r3
		usart_enable_rx(p_usart);
  401d92:	6878      	ldr	r0, [r7, #4]
  401d94:	4b0d      	ldr	r3, [pc, #52]	; (401dcc <usart_serial_init+0x174>)
  401d96:	4798      	blx	r3
}
  401d98:	bf00      	nop
  401d9a:	3730      	adds	r7, #48	; 0x30
  401d9c:	46bd      	mov	sp, r7
  401d9e:	bd80      	pop	{r7, pc}
  401da0:	00401c29 	.word	0x00401c29
  401da4:	400e0800 	.word	0x400e0800
  401da8:	00401c3d 	.word	0x00401c3d
  401dac:	00400581 	.word	0x00400581
  401db0:	400e0a00 	.word	0x400e0a00
  401db4:	400e1a00 	.word	0x400e1a00
  401db8:	400e1c00 	.word	0x400e1c00
  401dbc:	400e1e00 	.word	0x400e1e00
  401dc0:	40024000 	.word	0x40024000
  401dc4:	0040028d 	.word	0x0040028d
  401dc8:	00400311 	.word	0x00400311
  401dcc:	00400345 	.word	0x00400345
  401dd0:	40028000 	.word	0x40028000
  401dd4:	4002c000 	.word	0x4002c000

00401dd8 <SysTick_Handler>:

/************************************************************************/
/* funcoes                                                              */
/*************************************************************************/

void SysTick_Handler() {
  401dd8:	b480      	push	{r7}
  401dda:	af00      	add	r7, sp, #0
	g_systimer++;	
  401ddc:	4b04      	ldr	r3, [pc, #16]	; (401df0 <SysTick_Handler+0x18>)
  401dde:	681b      	ldr	r3, [r3, #0]
  401de0:	3301      	adds	r3, #1
  401de2:	4a03      	ldr	r2, [pc, #12]	; (401df0 <SysTick_Handler+0x18>)
  401de4:	6013      	str	r3, [r2, #0]
}
  401de6:	bf00      	nop
  401de8:	46bd      	mov	sp, r7
  401dea:	f85d 7b04 	ldr.w	r7, [sp], #4
  401dee:	4770      	bx	lr
  401df0:	20400a58 	.word	0x20400a58

00401df4 <usart_put_string>:

void usart_put_string(Usart *usart, char str[]) {
  401df4:	b580      	push	{r7, lr}
  401df6:	b082      	sub	sp, #8
  401df8:	af00      	add	r7, sp, #0
  401dfa:	6078      	str	r0, [r7, #4]
  401dfc:	6039      	str	r1, [r7, #0]
	usart_serial_write_packet(usart, str, strlen(str));
  401dfe:	6838      	ldr	r0, [r7, #0]
  401e00:	4b05      	ldr	r3, [pc, #20]	; (401e18 <usart_put_string+0x24>)
  401e02:	4798      	blx	r3
  401e04:	4603      	mov	r3, r0
  401e06:	461a      	mov	r2, r3
  401e08:	6839      	ldr	r1, [r7, #0]
  401e0a:	6878      	ldr	r0, [r7, #4]
  401e0c:	4b03      	ldr	r3, [pc, #12]	; (401e1c <usart_put_string+0x28>)
  401e0e:	4798      	blx	r3
}
  401e10:	bf00      	nop
  401e12:	3708      	adds	r7, #8
  401e14:	46bd      	mov	sp, r7
  401e16:	bd80      	pop	{r7, pc}
  401e18:	00402981 	.word	0x00402981
  401e1c:	00400545 	.word	0x00400545

00401e20 <usart_get_string>:

int usart_get_string(Usart *usart, char buffer[], int bufferlen, int timeout_ms) {
  401e20:	b580      	push	{r7, lr}
  401e22:	b088      	sub	sp, #32
  401e24:	af00      	add	r7, sp, #0
  401e26:	60f8      	str	r0, [r7, #12]
  401e28:	60b9      	str	r1, [r7, #8]
  401e2a:	607a      	str	r2, [r7, #4]
  401e2c:	603b      	str	r3, [r7, #0]
	long timestart = g_systimer;
  401e2e:	4b17      	ldr	r3, [pc, #92]	; (401e8c <usart_get_string+0x6c>)
  401e30:	681b      	ldr	r3, [r3, #0]
  401e32:	61bb      	str	r3, [r7, #24]
	uint32_t rx;
	uint32_t counter = 0;
  401e34:	2300      	movs	r3, #0
  401e36:	61fb      	str	r3, [r7, #28]
	
	while(g_systimer - timestart < timeout_ms && counter < bufferlen - 1) {
  401e38:	e010      	b.n	401e5c <usart_get_string+0x3c>
		if(usart_read(usart, &rx) == 0) {
  401e3a:	f107 0314 	add.w	r3, r7, #20
  401e3e:	4619      	mov	r1, r3
  401e40:	68f8      	ldr	r0, [r7, #12]
  401e42:	4b13      	ldr	r3, [pc, #76]	; (401e90 <usart_get_string+0x70>)
  401e44:	4798      	blx	r3
  401e46:	4603      	mov	r3, r0
  401e48:	2b00      	cmp	r3, #0
  401e4a:	d107      	bne.n	401e5c <usart_get_string+0x3c>
			//timestart = g_systimer; // reset timeout
			buffer[counter++] = rx;
  401e4c:	69fb      	ldr	r3, [r7, #28]
  401e4e:	1c5a      	adds	r2, r3, #1
  401e50:	61fa      	str	r2, [r7, #28]
  401e52:	68ba      	ldr	r2, [r7, #8]
  401e54:	4413      	add	r3, r2
  401e56:	697a      	ldr	r2, [r7, #20]
  401e58:	b2d2      	uxtb	r2, r2
  401e5a:	701a      	strb	r2, [r3, #0]
	while(g_systimer - timestart < timeout_ms && counter < bufferlen - 1) {
  401e5c:	4b0b      	ldr	r3, [pc, #44]	; (401e8c <usart_get_string+0x6c>)
  401e5e:	681a      	ldr	r2, [r3, #0]
  401e60:	69bb      	ldr	r3, [r7, #24]
  401e62:	1ad2      	subs	r2, r2, r3
  401e64:	683b      	ldr	r3, [r7, #0]
  401e66:	429a      	cmp	r2, r3
  401e68:	d205      	bcs.n	401e76 <usart_get_string+0x56>
  401e6a:	687b      	ldr	r3, [r7, #4]
  401e6c:	3b01      	subs	r3, #1
  401e6e:	461a      	mov	r2, r3
  401e70:	69fb      	ldr	r3, [r7, #28]
  401e72:	429a      	cmp	r2, r3
  401e74:	d8e1      	bhi.n	401e3a <usart_get_string+0x1a>
		}
	}
	buffer[counter] = 0x00;
  401e76:	68ba      	ldr	r2, [r7, #8]
  401e78:	69fb      	ldr	r3, [r7, #28]
  401e7a:	4413      	add	r3, r2
  401e7c:	2200      	movs	r2, #0
  401e7e:	701a      	strb	r2, [r3, #0]
	return counter;
  401e80:	69fb      	ldr	r3, [r7, #28]
}
  401e82:	4618      	mov	r0, r3
  401e84:	3720      	adds	r7, #32
  401e86:	46bd      	mov	sp, r7
  401e88:	bd80      	pop	{r7, pc}
  401e8a:	bf00      	nop
  401e8c:	20400a58 	.word	0x20400a58
  401e90:	004003e3 	.word	0x004003e3

00401e94 <usart_send_command>:

void usart_send_command(Usart *usart, char buffer_rx[], int bufferlen, char buffer_tx[], int timeout) {
  401e94:	b590      	push	{r4, r7, lr}
  401e96:	b085      	sub	sp, #20
  401e98:	af00      	add	r7, sp, #0
  401e9a:	60f8      	str	r0, [r7, #12]
  401e9c:	60b9      	str	r1, [r7, #8]
  401e9e:	607a      	str	r2, [r7, #4]
  401ea0:	603b      	str	r3, [r7, #0]
	usart_put_string(usart, buffer_tx);
  401ea2:	6839      	ldr	r1, [r7, #0]
  401ea4:	68f8      	ldr	r0, [r7, #12]
  401ea6:	4b06      	ldr	r3, [pc, #24]	; (401ec0 <usart_send_command+0x2c>)
  401ea8:	4798      	blx	r3
	usart_get_string(usart, buffer_rx, bufferlen, timeout);
  401eaa:	6a3b      	ldr	r3, [r7, #32]
  401eac:	687a      	ldr	r2, [r7, #4]
  401eae:	68b9      	ldr	r1, [r7, #8]
  401eb0:	68f8      	ldr	r0, [r7, #12]
  401eb2:	4c04      	ldr	r4, [pc, #16]	; (401ec4 <usart_send_command+0x30>)
  401eb4:	47a0      	blx	r4
}
  401eb6:	bf00      	nop
  401eb8:	3714      	adds	r7, #20
  401eba:	46bd      	mov	sp, r7
  401ebc:	bd90      	pop	{r4, r7, pc}
  401ebe:	bf00      	nop
  401ec0:	00401df5 	.word	0x00401df5
  401ec4:	00401e21 	.word	0x00401e21

00401ec8 <usart_log>:

void usart_log(char* name, char* log) {
  401ec8:	b580      	push	{r7, lr}
  401eca:	b082      	sub	sp, #8
  401ecc:	af00      	add	r7, sp, #0
  401ece:	6078      	str	r0, [r7, #4]
  401ed0:	6039      	str	r1, [r7, #0]
	usart_put_string(USART1, "[");
  401ed2:	490c      	ldr	r1, [pc, #48]	; (401f04 <usart_log+0x3c>)
  401ed4:	480c      	ldr	r0, [pc, #48]	; (401f08 <usart_log+0x40>)
  401ed6:	4b0d      	ldr	r3, [pc, #52]	; (401f0c <usart_log+0x44>)
  401ed8:	4798      	blx	r3
	usart_put_string(USART1, name);
  401eda:	6879      	ldr	r1, [r7, #4]
  401edc:	480a      	ldr	r0, [pc, #40]	; (401f08 <usart_log+0x40>)
  401ede:	4b0b      	ldr	r3, [pc, #44]	; (401f0c <usart_log+0x44>)
  401ee0:	4798      	blx	r3
	usart_put_string(USART1, "] ");
  401ee2:	490b      	ldr	r1, [pc, #44]	; (401f10 <usart_log+0x48>)
  401ee4:	4808      	ldr	r0, [pc, #32]	; (401f08 <usart_log+0x40>)
  401ee6:	4b09      	ldr	r3, [pc, #36]	; (401f0c <usart_log+0x44>)
  401ee8:	4798      	blx	r3
	usart_put_string(USART1, log);
  401eea:	6839      	ldr	r1, [r7, #0]
  401eec:	4806      	ldr	r0, [pc, #24]	; (401f08 <usart_log+0x40>)
  401eee:	4b07      	ldr	r3, [pc, #28]	; (401f0c <usart_log+0x44>)
  401ef0:	4798      	blx	r3
	usart_put_string(USART1, "\r\n");
  401ef2:	4908      	ldr	r1, [pc, #32]	; (401f14 <usart_log+0x4c>)
  401ef4:	4804      	ldr	r0, [pc, #16]	; (401f08 <usart_log+0x40>)
  401ef6:	4b05      	ldr	r3, [pc, #20]	; (401f0c <usart_log+0x44>)
  401ef8:	4798      	blx	r3
}
  401efa:	bf00      	nop
  401efc:	3708      	adds	r7, #8
  401efe:	46bd      	mov	sp, r7
  401f00:	bd80      	pop	{r7, pc}
  401f02:	bf00      	nop
  401f04:	00406e9c 	.word	0x00406e9c
  401f08:	40028000 	.word	0x40028000
  401f0c:	00401df5 	.word	0x00401df5
  401f10:	00406ea0 	.word	0x00406ea0
  401f14:	00406ea4 	.word	0x00406ea4

00401f18 <config_console>:

void config_console(void) {
  401f18:	b580      	push	{r7, lr}
  401f1a:	b084      	sub	sp, #16
  401f1c:	af00      	add	r7, sp, #0
	usart_serial_options_t config;
	config.baudrate = 115200;
  401f1e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  401f22:	603b      	str	r3, [r7, #0]
	config.charlength = US_MR_CHRL_8_BIT;
  401f24:	23c0      	movs	r3, #192	; 0xc0
  401f26:	607b      	str	r3, [r7, #4]
	config.paritytype = US_MR_PAR_NO;
  401f28:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401f2c:	60bb      	str	r3, [r7, #8]
	config.stopbits = false;
  401f2e:	2300      	movs	r3, #0
  401f30:	60fb      	str	r3, [r7, #12]
	usart_serial_init(USART1, &config);
  401f32:	463b      	mov	r3, r7
  401f34:	4619      	mov	r1, r3
  401f36:	4806      	ldr	r0, [pc, #24]	; (401f50 <config_console+0x38>)
  401f38:	4b06      	ldr	r3, [pc, #24]	; (401f54 <config_console+0x3c>)
  401f3a:	4798      	blx	r3
	usart_enable_tx(USART1);
  401f3c:	4804      	ldr	r0, [pc, #16]	; (401f50 <config_console+0x38>)
  401f3e:	4b06      	ldr	r3, [pc, #24]	; (401f58 <config_console+0x40>)
  401f40:	4798      	blx	r3
	usart_enable_rx(USART1);
  401f42:	4803      	ldr	r0, [pc, #12]	; (401f50 <config_console+0x38>)
  401f44:	4b05      	ldr	r3, [pc, #20]	; (401f5c <config_console+0x44>)
  401f46:	4798      	blx	r3
}
  401f48:	bf00      	nop
  401f4a:	3710      	adds	r7, #16
  401f4c:	46bd      	mov	sp, r7
  401f4e:	bd80      	pop	{r7, pc}
  401f50:	40028000 	.word	0x40028000
  401f54:	00401c59 	.word	0x00401c59
  401f58:	00400311 	.word	0x00400311
  401f5c:	00400345 	.word	0x00400345

00401f60 <hm10_config_client>:

void hm10_config_client(void) {
  401f60:	b590      	push	{r4, r7, lr}
  401f62:	b085      	sub	sp, #20
  401f64:	af00      	add	r7, sp, #0
	usart_serial_options_t config;
	config.baudrate = 9600;
  401f66:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  401f6a:	603b      	str	r3, [r7, #0]
	config.charlength = US_MR_CHRL_8_BIT;
  401f6c:	23c0      	movs	r3, #192	; 0xc0
  401f6e:	607b      	str	r3, [r7, #4]
	config.paritytype = US_MR_PAR_NO;
  401f70:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401f74:	60bb      	str	r3, [r7, #8]
	config.stopbits = false;
  401f76:	2300      	movs	r3, #0
  401f78:	60fb      	str	r3, [r7, #12]
	usart_serial_init(UART3, &config);
  401f7a:	463b      	mov	r3, r7
  401f7c:	4619      	mov	r1, r3
  401f7e:	480e      	ldr	r0, [pc, #56]	; (401fb8 <hm10_config_client+0x58>)
  401f80:	4b0e      	ldr	r3, [pc, #56]	; (401fbc <hm10_config_client+0x5c>)
  401f82:	4798      	blx	r3
	usart_enable_tx(UART3);
  401f84:	480c      	ldr	r0, [pc, #48]	; (401fb8 <hm10_config_client+0x58>)
  401f86:	4b0e      	ldr	r3, [pc, #56]	; (401fc0 <hm10_config_client+0x60>)
  401f88:	4798      	blx	r3
	usart_enable_rx(UART3);
  401f8a:	480b      	ldr	r0, [pc, #44]	; (401fb8 <hm10_config_client+0x58>)
  401f8c:	4b0d      	ldr	r3, [pc, #52]	; (401fc4 <hm10_config_client+0x64>)
  401f8e:	4798      	blx	r3
	
	// RX - PD28 TX - PD30
	pio_configure(PIOD, PIO_PERIPH_A, (1 << 28), PIO_DEFAULT);
  401f90:	2300      	movs	r3, #0
  401f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401f96:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401f9a:	480b      	ldr	r0, [pc, #44]	; (401fc8 <hm10_config_client+0x68>)
  401f9c:	4c0b      	ldr	r4, [pc, #44]	; (401fcc <hm10_config_client+0x6c>)
  401f9e:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_A, (1 << 30), PIO_DEFAULT);
  401fa0:	2300      	movs	r3, #0
  401fa2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401fa6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401faa:	4807      	ldr	r0, [pc, #28]	; (401fc8 <hm10_config_client+0x68>)
  401fac:	4c07      	ldr	r4, [pc, #28]	; (401fcc <hm10_config_client+0x6c>)
  401fae:	47a0      	blx	r4
}
  401fb0:	bf00      	nop
  401fb2:	3714      	adds	r7, #20
  401fb4:	46bd      	mov	sp, r7
  401fb6:	bd90      	pop	{r4, r7, pc}
  401fb8:	400e1c00 	.word	0x400e1c00
  401fbc:	00401c59 	.word	0x00401c59
  401fc0:	00400311 	.word	0x00400311
  401fc4:	00400345 	.word	0x00400345
  401fc8:	400e1400 	.word	0x400e1400
  401fcc:	0040104d 	.word	0x0040104d

00401fd0 <hm10_client_init>:

int hm10_client_init(void) {
  401fd0:	b590      	push	{r4, r7, lr}
  401fd2:	b0a3      	sub	sp, #140	; 0x8c
  401fd4:	af02      	add	r7, sp, #8
	char buffer_rx[128];
	usart_send_command(UART3, buffer_rx, 1000, "AT", 200);
  401fd6:	4639      	mov	r1, r7
  401fd8:	23c8      	movs	r3, #200	; 0xc8
  401fda:	9300      	str	r3, [sp, #0]
  401fdc:	4b40      	ldr	r3, [pc, #256]	; (4020e0 <hm10_client_init+0x110>)
  401fde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  401fe2:	4840      	ldr	r0, [pc, #256]	; (4020e4 <hm10_client_init+0x114>)
  401fe4:	4c40      	ldr	r4, [pc, #256]	; (4020e8 <hm10_client_init+0x118>)
  401fe6:	47a0      	blx	r4
	usart_send_command(UART3, buffer_rx, 1000, "AT", 200);
  401fe8:	4639      	mov	r1, r7
  401fea:	23c8      	movs	r3, #200	; 0xc8
  401fec:	9300      	str	r3, [sp, #0]
  401fee:	4b3c      	ldr	r3, [pc, #240]	; (4020e0 <hm10_client_init+0x110>)
  401ff0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  401ff4:	483b      	ldr	r0, [pc, #236]	; (4020e4 <hm10_client_init+0x114>)
  401ff6:	4c3c      	ldr	r4, [pc, #240]	; (4020e8 <hm10_client_init+0x118>)
  401ff8:	47a0      	blx	r4
	usart_send_command(UART3, buffer_rx, 1000, "AT", 200);
  401ffa:	4639      	mov	r1, r7
  401ffc:	23c8      	movs	r3, #200	; 0xc8
  401ffe:	9300      	str	r3, [sp, #0]
  402000:	4b37      	ldr	r3, [pc, #220]	; (4020e0 <hm10_client_init+0x110>)
  402002:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  402006:	4837      	ldr	r0, [pc, #220]	; (4020e4 <hm10_client_init+0x114>)
  402008:	4c37      	ldr	r4, [pc, #220]	; (4020e8 <hm10_client_init+0x118>)
  40200a:	47a0      	blx	r4
	usart_send_command(UART3, buffer_rx, 1000, "AT+RESET", 400);
  40200c:	4639      	mov	r1, r7
  40200e:	f44f 73c8 	mov.w	r3, #400	; 0x190
  402012:	9300      	str	r3, [sp, #0]
  402014:	4b35      	ldr	r3, [pc, #212]	; (4020ec <hm10_client_init+0x11c>)
  402016:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40201a:	4832      	ldr	r0, [pc, #200]	; (4020e4 <hm10_client_init+0x114>)
  40201c:	4c32      	ldr	r4, [pc, #200]	; (4020e8 <hm10_client_init+0x118>)
  40201e:	47a0      	blx	r4
	usart_send_command(UART3, buffer_rx, 1000, "AT+NAMEClient", 400);
  402020:	4639      	mov	r1, r7
  402022:	f44f 73c8 	mov.w	r3, #400	; 0x190
  402026:	9300      	str	r3, [sp, #0]
  402028:	4b31      	ldr	r3, [pc, #196]	; (4020f0 <hm10_client_init+0x120>)
  40202a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40202e:	482d      	ldr	r0, [pc, #180]	; (4020e4 <hm10_client_init+0x114>)
  402030:	4c2d      	ldr	r4, [pc, #180]	; (4020e8 <hm10_client_init+0x118>)
  402032:	47a0      	blx	r4
	usart_log("hm10_client_init", buffer_rx);
  402034:	463b      	mov	r3, r7
  402036:	4619      	mov	r1, r3
  402038:	482e      	ldr	r0, [pc, #184]	; (4020f4 <hm10_client_init+0x124>)
  40203a:	4b2f      	ldr	r3, [pc, #188]	; (4020f8 <hm10_client_init+0x128>)
  40203c:	4798      	blx	r3
	usart_send_command(UART3, buffer_rx, 1000, "AT+IMME1", 400);
  40203e:	4639      	mov	r1, r7
  402040:	f44f 73c8 	mov.w	r3, #400	; 0x190
  402044:	9300      	str	r3, [sp, #0]
  402046:	4b2d      	ldr	r3, [pc, #180]	; (4020fc <hm10_client_init+0x12c>)
  402048:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40204c:	4825      	ldr	r0, [pc, #148]	; (4020e4 <hm10_client_init+0x114>)
  40204e:	4c26      	ldr	r4, [pc, #152]	; (4020e8 <hm10_client_init+0x118>)
  402050:	47a0      	blx	r4
	usart_log("hm10_client_init", buffer_rx);
  402052:	463b      	mov	r3, r7
  402054:	4619      	mov	r1, r3
  402056:	4827      	ldr	r0, [pc, #156]	; (4020f4 <hm10_client_init+0x124>)
  402058:	4b27      	ldr	r3, [pc, #156]	; (4020f8 <hm10_client_init+0x128>)
  40205a:	4798      	blx	r3
	usart_send_command(UART3, buffer_rx, 1000, "AT+ROLE1", 400);
  40205c:	4639      	mov	r1, r7
  40205e:	f44f 73c8 	mov.w	r3, #400	; 0x190
  402062:	9300      	str	r3, [sp, #0]
  402064:	4b26      	ldr	r3, [pc, #152]	; (402100 <hm10_client_init+0x130>)
  402066:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40206a:	481e      	ldr	r0, [pc, #120]	; (4020e4 <hm10_client_init+0x114>)
  40206c:	4c1e      	ldr	r4, [pc, #120]	; (4020e8 <hm10_client_init+0x118>)
  40206e:	47a0      	blx	r4
	usart_log("hm10_client_init", buffer_rx);
  402070:	463b      	mov	r3, r7
  402072:	4619      	mov	r1, r3
  402074:	481f      	ldr	r0, [pc, #124]	; (4020f4 <hm10_client_init+0x124>)
  402076:	4b20      	ldr	r3, [pc, #128]	; (4020f8 <hm10_client_init+0x128>)
  402078:	4798      	blx	r3
	usart_send_command(UART3, buffer_rx, 1000, "AT+RESET", 800); // http://www.martyncurrey.com/hm-10-bluetooth-4ble-modules/
  40207a:	4639      	mov	r1, r7
  40207c:	f44f 7348 	mov.w	r3, #800	; 0x320
  402080:	9300      	str	r3, [sp, #0]
  402082:	4b1a      	ldr	r3, [pc, #104]	; (4020ec <hm10_client_init+0x11c>)
  402084:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  402088:	4816      	ldr	r0, [pc, #88]	; (4020e4 <hm10_client_init+0x114>)
  40208a:	4c17      	ldr	r4, [pc, #92]	; (4020e8 <hm10_client_init+0x118>)
  40208c:	47a0      	blx	r4
	usart_log("hm10_client_init", buffer_rx);
  40208e:	463b      	mov	r3, r7
  402090:	4619      	mov	r1, r3
  402092:	4818      	ldr	r0, [pc, #96]	; (4020f4 <hm10_client_init+0x124>)
  402094:	4b18      	ldr	r3, [pc, #96]	; (4020f8 <hm10_client_init+0x128>)
  402096:	4798      	blx	r3
	usart_send_command(UART3, buffer_rx, 1000, "AT+DISC?", 1000); 
  402098:	4639      	mov	r1, r7
  40209a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  40209e:	9300      	str	r3, [sp, #0]
  4020a0:	4b18      	ldr	r3, [pc, #96]	; (402104 <hm10_client_init+0x134>)
  4020a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4020a6:	480f      	ldr	r0, [pc, #60]	; (4020e4 <hm10_client_init+0x114>)
  4020a8:	4c0f      	ldr	r4, [pc, #60]	; (4020e8 <hm10_client_init+0x118>)
  4020aa:	47a0      	blx	r4
	usart_log("hm10_client_init", buffer_rx);
  4020ac:	463b      	mov	r3, r7
  4020ae:	4619      	mov	r1, r3
  4020b0:	4810      	ldr	r0, [pc, #64]	; (4020f4 <hm10_client_init+0x124>)
  4020b2:	4b11      	ldr	r3, [pc, #68]	; (4020f8 <hm10_client_init+0x128>)
  4020b4:	4798      	blx	r3
	usart_send_command(UART3, buffer_rx, 1000, "AT+COND43639D8BD1D", 1000); //D43639D8BD1D
  4020b6:	4639      	mov	r1, r7
  4020b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  4020bc:	9300      	str	r3, [sp, #0]
  4020be:	4b12      	ldr	r3, [pc, #72]	; (402108 <hm10_client_init+0x138>)
  4020c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4020c4:	4807      	ldr	r0, [pc, #28]	; (4020e4 <hm10_client_init+0x114>)
  4020c6:	4c08      	ldr	r4, [pc, #32]	; (4020e8 <hm10_client_init+0x118>)
  4020c8:	47a0      	blx	r4
	usart_log("hm10_client_init", buffer_rx);
  4020ca:	463b      	mov	r3, r7
  4020cc:	4619      	mov	r1, r3
  4020ce:	4809      	ldr	r0, [pc, #36]	; (4020f4 <hm10_client_init+0x124>)
  4020d0:	4b09      	ldr	r3, [pc, #36]	; (4020f8 <hm10_client_init+0x128>)
  4020d2:	4798      	blx	r3
	
}
  4020d4:	bf00      	nop
  4020d6:	4618      	mov	r0, r3
  4020d8:	3784      	adds	r7, #132	; 0x84
  4020da:	46bd      	mov	sp, r7
  4020dc:	bd90      	pop	{r4, r7, pc}
  4020de:	bf00      	nop
  4020e0:	00406ea8 	.word	0x00406ea8
  4020e4:	400e1c00 	.word	0x400e1c00
  4020e8:	00401e95 	.word	0x00401e95
  4020ec:	00406eac 	.word	0x00406eac
  4020f0:	00406eb8 	.word	0x00406eb8
  4020f4:	00406ec8 	.word	0x00406ec8
  4020f8:	00401ec9 	.word	0x00401ec9
  4020fc:	00406edc 	.word	0x00406edc
  402100:	00406ee8 	.word	0x00406ee8
  402104:	00406ef4 	.word	0x00406ef4
  402108:	00406f00 	.word	0x00406f00

0040210c <Encoder_init>:

void Encoder_init(void){
  40210c:	b590      	push	{r4, r7, lr}
  40210e:	b083      	sub	sp, #12
  402110:	af02      	add	r7, sp, #8
	/* config. pino CLK em modo de entrada */
	pmc_enable_periph_clk(EN_CLK_ID);
  402112:	2010      	movs	r0, #16
  402114:	4b10      	ldr	r3, [pc, #64]	; (402158 <Encoder_init+0x4c>)
  402116:	4798      	blx	r3
	pio_set_input(EN_CLK, EN_CLK_PIN_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  402118:	2209      	movs	r2, #9
  40211a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  40211e:	480f      	ldr	r0, [pc, #60]	; (40215c <Encoder_init+0x50>)
  402120:	4b0f      	ldr	r3, [pc, #60]	; (402160 <Encoder_init+0x54>)
  402122:	4798      	blx	r3

	/* indica funcao (but_Handler) a ser chamada quando houver uma interrupo */
	pio_enable_interrupt(EN_CLK, EN_CLK_PIN_MASK);// INTERRUPCAO
  402124:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  402128:	480c      	ldr	r0, [pc, #48]	; (40215c <Encoder_init+0x50>)
  40212a:	4b0e      	ldr	r3, [pc, #56]	; (402164 <Encoder_init+0x58>)
  40212c:	4798      	blx	r3
	pio_handler_set(EN_CLK,EN_CLK_ID, EN_CLK_PIN_MASK, PIO_IT_FALL_EDGE || PIO_IT_RISE_EDGE, Encoder_Handler);
  40212e:	4b0e      	ldr	r3, [pc, #56]	; (402168 <Encoder_init+0x5c>)
  402130:	9300      	str	r3, [sp, #0]
  402132:	2301      	movs	r3, #1
  402134:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  402138:	2110      	movs	r1, #16
  40213a:	4808      	ldr	r0, [pc, #32]	; (40215c <Encoder_init+0x50>)
  40213c:	4c0b      	ldr	r4, [pc, #44]	; (40216c <Encoder_init+0x60>)
  40213e:	47a0      	blx	r4

	/* e configura sua prioridade  */
	NVIC_EnableIRQ(EN_CLK_ID);
  402140:	2010      	movs	r0, #16
  402142:	4b0b      	ldr	r3, [pc, #44]	; (402170 <Encoder_init+0x64>)
  402144:	4798      	blx	r3
	NVIC_SetPriority(EN_CLK_ID, 1);
  402146:	2101      	movs	r1, #1
  402148:	2010      	movs	r0, #16
  40214a:	4b0a      	ldr	r3, [pc, #40]	; (402174 <Encoder_init+0x68>)
  40214c:	4798      	blx	r3
	
	}
  40214e:	bf00      	nop
  402150:	3704      	adds	r7, #4
  402152:	46bd      	mov	sp, r7
  402154:	bd90      	pop	{r4, r7, pc}
  402156:	bf00      	nop
  402158:	0040167d 	.word	0x0040167d
  40215c:	400e1400 	.word	0x400e1400
  402160:	00400f69 	.word	0x00400f69
  402164:	00401185 	.word	0x00401185
  402168:	00402179 	.word	0x00402179
  40216c:	004012a1 	.word	0x004012a1
  402170:	00401ab1 	.word	0x00401ab1
  402174:	00401ae5 	.word	0x00401ae5

00402178 <Encoder_Handler>:



static void Encoder_Handler(uint32_t id, uint32_t mask){
  402178:	b580      	push	{r7, lr}
  40217a:	b08e      	sub	sp, #56	; 0x38
  40217c:	af00      	add	r7, sp, #0
  40217e:	6078      	str	r0, [r7, #4]
  402180:	6039      	str	r1, [r7, #0]
	
	char buffer[42];
	sprintf(buffer, "flag before %d \n", flag_encoder);
  402182:	4b21      	ldr	r3, [pc, #132]	; (402208 <Encoder_Handler+0x90>)
  402184:	681a      	ldr	r2, [r3, #0]
  402186:	f107 030c 	add.w	r3, r7, #12
  40218a:	4920      	ldr	r1, [pc, #128]	; (40220c <Encoder_Handler+0x94>)
  40218c:	4618      	mov	r0, r3
  40218e:	4b20      	ldr	r3, [pc, #128]	; (402210 <Encoder_Handler+0x98>)
  402190:	4798      	blx	r3
	usart_put_string(USART1, buffer);
  402192:	f107 030c 	add.w	r3, r7, #12
  402196:	4619      	mov	r1, r3
  402198:	481e      	ldr	r0, [pc, #120]	; (402214 <Encoder_Handler+0x9c>)
  40219a:	4b1f      	ldr	r3, [pc, #124]	; (402218 <Encoder_Handler+0xa0>)
  40219c:	4798      	blx	r3
			
	volatile uint8_t aVal = pio_get(EN_CLK, PIO_INPUT,  EN_CLK_PIN_MASK);// digitalRead(pinA)?
  40219e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4021a2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4021a6:	481d      	ldr	r0, [pc, #116]	; (40221c <Encoder_Handler+0xa4>)
  4021a8:	4b1d      	ldr	r3, [pc, #116]	; (402220 <Encoder_Handler+0xa8>)
  4021aa:	4798      	blx	r3
  4021ac:	4603      	mov	r3, r0
  4021ae:	b2db      	uxtb	r3, r3
  4021b0:	72fb      	strb	r3, [r7, #11]
	
	if (pio_get(PIOD, PIO_INPUT,  EN_DT_PIN_MASK)!= aVal) { // Means pin A Changed first  We're Rotating Clockwise
  4021b2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4021b6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4021ba:	4818      	ldr	r0, [pc, #96]	; (40221c <Encoder_Handler+0xa4>)
  4021bc:	4b18      	ldr	r3, [pc, #96]	; (402220 <Encoder_Handler+0xa8>)
  4021be:	4798      	blx	r3
  4021c0:	4602      	mov	r2, r0
  4021c2:	7afb      	ldrb	r3, [r7, #11]
  4021c4:	b2db      	uxtb	r3, r3
  4021c6:	429a      	cmp	r2, r3
  4021c8:	d009      	beq.n	4021de <Encoder_Handler+0x66>
		if (encoderPosCount < 100){
  4021ca:	4b16      	ldr	r3, [pc, #88]	; (402224 <Encoder_Handler+0xac>)
  4021cc:	681b      	ldr	r3, [r3, #0]
  4021ce:	2b63      	cmp	r3, #99	; 0x63
  4021d0:	dc0e      	bgt.n	4021f0 <Encoder_Handler+0x78>
			encoderPosCount++;
  4021d2:	4b14      	ldr	r3, [pc, #80]	; (402224 <Encoder_Handler+0xac>)
  4021d4:	681b      	ldr	r3, [r3, #0]
  4021d6:	3301      	adds	r3, #1
  4021d8:	4a12      	ldr	r2, [pc, #72]	; (402224 <Encoder_Handler+0xac>)
  4021da:	6013      	str	r3, [r2, #0]
  4021dc:	e008      	b.n	4021f0 <Encoder_Handler+0x78>
		}
		
	}
	else if (encoderPosCount > 0){// Otherwise B changed first and we're moving CCW
  4021de:	4b11      	ldr	r3, [pc, #68]	; (402224 <Encoder_Handler+0xac>)
  4021e0:	681b      	ldr	r3, [r3, #0]
  4021e2:	2b00      	cmp	r3, #0
  4021e4:	dd04      	ble.n	4021f0 <Encoder_Handler+0x78>
		encoderPosCount--;
  4021e6:	4b0f      	ldr	r3, [pc, #60]	; (402224 <Encoder_Handler+0xac>)
  4021e8:	681b      	ldr	r3, [r3, #0]
  4021ea:	3b01      	subs	r3, #1
  4021ec:	4a0d      	ldr	r2, [pc, #52]	; (402224 <Encoder_Handler+0xac>)
  4021ee:	6013      	str	r3, [r2, #0]
		}
		
		
	flag_encoder = 1;
  4021f0:	4b05      	ldr	r3, [pc, #20]	; (402208 <Encoder_Handler+0x90>)
  4021f2:	2201      	movs	r2, #1
  4021f4:	601a      	str	r2, [r3, #0]
	pinALast = aVal;
  4021f6:	7afb      	ldrb	r3, [r7, #11]
  4021f8:	b2db      	uxtb	r3, r3
  4021fa:	461a      	mov	r2, r3
  4021fc:	4b0a      	ldr	r3, [pc, #40]	; (402228 <Encoder_Handler+0xb0>)
  4021fe:	601a      	str	r2, [r3, #0]
	
}
  402200:	bf00      	nop
  402202:	3738      	adds	r7, #56	; 0x38
  402204:	46bd      	mov	sp, r7
  402206:	bd80      	pop	{r7, pc}
  402208:	20400a60 	.word	0x20400a60
  40220c:	00406f14 	.word	0x00406f14
  402210:	00402919 	.word	0x00402919
  402214:	40028000 	.word	0x40028000
  402218:	00401df5 	.word	0x00401df5
  40221c:	400e1400 	.word	0x400e1400
  402220:	00400e11 	.word	0x00400e11
  402224:	20400a5c 	.word	0x20400a5c
  402228:	20400a9c 	.word	0x20400a9c

0040222c <BUT_init>:

void BUT_init(void){
  40222c:	b590      	push	{r4, r7, lr}
  40222e:	b083      	sub	sp, #12
  402230:	af02      	add	r7, sp, #8
	/* config. pino botao em modo de entrada */
	pmc_enable_periph_clk(BUT_PIO_ID);
  402232:	200a      	movs	r0, #10
  402234:	4b10      	ldr	r3, [pc, #64]	; (402278 <BUT_init+0x4c>)
  402236:	4798      	blx	r3
	pio_set_input(BUT_PIO, BUT_PIN_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  402238:	2209      	movs	r2, #9
  40223a:	f44f 6100 	mov.w	r1, #2048	; 0x800
  40223e:	480f      	ldr	r0, [pc, #60]	; (40227c <BUT_init+0x50>)
  402240:	4b0f      	ldr	r3, [pc, #60]	; (402280 <BUT_init+0x54>)
  402242:	4798      	blx	r3

	/* config. interrupcao em borda de descida no botao do kit */
	/* indica funcao (but_Handler) a ser chamada quando houver uma interrupo */
	pio_enable_interrupt(BUT_PIO, BUT_PIN_MASK);// INTERRUPCAO
  402244:	f44f 6100 	mov.w	r1, #2048	; 0x800
  402248:	480c      	ldr	r0, [pc, #48]	; (40227c <BUT_init+0x50>)
  40224a:	4b0e      	ldr	r3, [pc, #56]	; (402284 <BUT_init+0x58>)
  40224c:	4798      	blx	r3
	pio_handler_set(BUT_PIO, BUT_PIO_ID, BUT_PIN_MASK, PIO_IT_FALL_EDGE, Button_Handler);
  40224e:	4b0e      	ldr	r3, [pc, #56]	; (402288 <BUT_init+0x5c>)
  402250:	9300      	str	r3, [sp, #0]
  402252:	2350      	movs	r3, #80	; 0x50
  402254:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402258:	210a      	movs	r1, #10
  40225a:	4808      	ldr	r0, [pc, #32]	; (40227c <BUT_init+0x50>)
  40225c:	4c0b      	ldr	r4, [pc, #44]	; (40228c <BUT_init+0x60>)
  40225e:	47a0      	blx	r4

	/* habilita interrupco do PIO que controla o botao */
	/* e configura sua prioridade                        */
	NVIC_EnableIRQ(BUT_PIO_ID);
  402260:	200a      	movs	r0, #10
  402262:	4b0b      	ldr	r3, [pc, #44]	; (402290 <BUT_init+0x64>)
  402264:	4798      	blx	r3
	NVIC_SetPriority(BUT_PIO_ID, 1);
  402266:	2101      	movs	r1, #1
  402268:	200a      	movs	r0, #10
  40226a:	4b0a      	ldr	r3, [pc, #40]	; (402294 <BUT_init+0x68>)
  40226c:	4798      	blx	r3
	}
  40226e:	bf00      	nop
  402270:	3704      	adds	r7, #4
  402272:	46bd      	mov	sp, r7
  402274:	bd90      	pop	{r4, r7, pc}
  402276:	bf00      	nop
  402278:	0040167d 	.word	0x0040167d
  40227c:	400e0e00 	.word	0x400e0e00
  402280:	00400f69 	.word	0x00400f69
  402284:	00401185 	.word	0x00401185
  402288:	00402299 	.word	0x00402299
  40228c:	004012a1 	.word	0x004012a1
  402290:	00401ab1 	.word	0x00401ab1
  402294:	00401ae5 	.word	0x00401ae5

00402298 <Button_Handler>:
	
static void Button_Handler(uint32_t id, uint32_t mask){
  402298:	b580      	push	{r7, lr}
  40229a:	b090      	sub	sp, #64	; 0x40
  40229c:	af00      	add	r7, sp, #0
  40229e:	6078      	str	r0, [r7, #4]
  4022a0:	6039      	str	r1, [r7, #0]
		usart_put_string(UART3, "!");
  4022a2:	490c      	ldr	r1, [pc, #48]	; (4022d4 <Button_Handler+0x3c>)
  4022a4:	480c      	ldr	r0, [pc, #48]	; (4022d8 <Button_Handler+0x40>)
  4022a6:	4b0d      	ldr	r3, [pc, #52]	; (4022dc <Button_Handler+0x44>)
  4022a8:	4798      	blx	r3
		flag_but = 1;
  4022aa:	4b0d      	ldr	r3, [pc, #52]	; (4022e0 <Button_Handler+0x48>)
  4022ac:	2201      	movs	r2, #1
  4022ae:	601a      	str	r2, [r3, #0]
		
		char buffer[54];
		sprintf(buffer, "flag butt %d \n", flag_but);
  4022b0:	4b0b      	ldr	r3, [pc, #44]	; (4022e0 <Button_Handler+0x48>)
  4022b2:	681a      	ldr	r2, [r3, #0]
  4022b4:	f107 0308 	add.w	r3, r7, #8
  4022b8:	490a      	ldr	r1, [pc, #40]	; (4022e4 <Button_Handler+0x4c>)
  4022ba:	4618      	mov	r0, r3
  4022bc:	4b0a      	ldr	r3, [pc, #40]	; (4022e8 <Button_Handler+0x50>)
  4022be:	4798      	blx	r3
		usart_put_string(USART1, buffer);
  4022c0:	f107 0308 	add.w	r3, r7, #8
  4022c4:	4619      	mov	r1, r3
  4022c6:	4809      	ldr	r0, [pc, #36]	; (4022ec <Button_Handler+0x54>)
  4022c8:	4b04      	ldr	r3, [pc, #16]	; (4022dc <Button_Handler+0x44>)
  4022ca:	4798      	blx	r3
}
  4022cc:	bf00      	nop
  4022ce:	3740      	adds	r7, #64	; 0x40
  4022d0:	46bd      	mov	sp, r7
  4022d2:	bd80      	pop	{r7, pc}
  4022d4:	00406f28 	.word	0x00406f28
  4022d8:	400e1c00 	.word	0x400e1c00
  4022dc:	00401df5 	.word	0x00401df5
  4022e0:	20400a64 	.word	0x20400a64
  4022e4:	00406f2c 	.word	0x00406f2c
  4022e8:	00402919 	.word	0x00402919
  4022ec:	40028000 	.word	0x40028000

004022f0 <main>:


int main (void)
{
  4022f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4022f4:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
  4022f8:	af00      	add	r7, sp, #0
	board_init();
  4022fa:	4b5b      	ldr	r3, [pc, #364]	; (402468 <main+0x178>)
  4022fc:	4798      	blx	r3
	sysclk_init();
  4022fe:	4b5b      	ldr	r3, [pc, #364]	; (40246c <main+0x17c>)
  402300:	4798      	blx	r3
	
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  402302:	4b5b      	ldr	r3, [pc, #364]	; (402470 <main+0x180>)
  402304:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402308:	605a      	str	r2, [r3, #4]

	delay_init();
	SysTick_Config(sysclk_get_cpu_hz() / 1000); // 1 ms
  40230a:	4b5a      	ldr	r3, [pc, #360]	; (402474 <main+0x184>)
  40230c:	4798      	blx	r3
  40230e:	4602      	mov	r2, r0
  402310:	4b59      	ldr	r3, [pc, #356]	; (402478 <main+0x188>)
  402312:	fba3 2302 	umull	r2, r3, r3, r2
  402316:	099b      	lsrs	r3, r3, #6
  402318:	4618      	mov	r0, r3
  40231a:	4b58      	ldr	r3, [pc, #352]	; (40247c <main+0x18c>)
  40231c:	4798      	blx	r3
	config_console();
  40231e:	4b58      	ldr	r3, [pc, #352]	; (402480 <main+0x190>)
  402320:	4798      	blx	r3
		
	usart_put_string(USART1, "Inicializando...\r\n");
  402322:	4958      	ldr	r1, [pc, #352]	; (402484 <main+0x194>)
  402324:	4858      	ldr	r0, [pc, #352]	; (402488 <main+0x198>)
  402326:	4b59      	ldr	r3, [pc, #356]	; (40248c <main+0x19c>)
  402328:	4798      	blx	r3
	/*
	usart_put_string(USART1, "Config HC05 Server...\r\n");
	hm10_config_server();
	hm10_server_init();
	*/
	usart_put_string(USART1, "Config HC05 Client...\r\n");
  40232a:	4959      	ldr	r1, [pc, #356]	; (402490 <main+0x1a0>)
  40232c:	4856      	ldr	r0, [pc, #344]	; (402488 <main+0x198>)
  40232e:	4b57      	ldr	r3, [pc, #348]	; (40248c <main+0x19c>)
  402330:	4798      	blx	r3
	hm10_config_client(); 
  402332:	4b58      	ldr	r3, [pc, #352]	; (402494 <main+0x1a4>)
  402334:	4798      	blx	r3
	hm10_client_init();
  402336:	4b58      	ldr	r3, [pc, #352]	; (402498 <main+0x1a8>)
  402338:	4798      	blx	r3
	char buffer[1024];
	
	pinALast = pio_get(EN_CLK, PIO_INPUT,  EN_CLK_PIN_MASK);
  40233a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40233e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402342:	4856      	ldr	r0, [pc, #344]	; (40249c <main+0x1ac>)
  402344:	4b56      	ldr	r3, [pc, #344]	; (4024a0 <main+0x1b0>)
  402346:	4798      	blx	r3
  402348:	4602      	mov	r2, r0
  40234a:	4b56      	ldr	r3, [pc, #344]	; (4024a4 <main+0x1b4>)
  40234c:	601a      	str	r2, [r3, #0]
	
	Encoder_init();
  40234e:	4b56      	ldr	r3, [pc, #344]	; (4024a8 <main+0x1b8>)
  402350:	4798      	blx	r3
	BUT_init();
  402352:	4b56      	ldr	r3, [pc, #344]	; (4024ac <main+0x1bc>)
  402354:	4798      	blx	r3

	g_systimer = 0;
  402356:	4b56      	ldr	r3, [pc, #344]	; (4024b0 <main+0x1c0>)
  402358:	2200      	movs	r2, #0
  40235a:	601a      	str	r2, [r3, #0]
	encoderPosCount = 0;
  40235c:	4b55      	ldr	r3, [pc, #340]	; (4024b4 <main+0x1c4>)
  40235e:	2200      	movs	r2, #0
  402360:	601a      	str	r2, [r3, #0]
	flag_encoder = 0;
  402362:	4b55      	ldr	r3, [pc, #340]	; (4024b8 <main+0x1c8>)
  402364:	2200      	movs	r2, #0
  402366:	601a      	str	r2, [r3, #0]
	flag_but = 0;
  402368:	4b54      	ldr	r3, [pc, #336]	; (4024bc <main+0x1cc>)
  40236a:	2200      	movs	r2, #0
  40236c:	601a      	str	r2, [r3, #0]

	while(1) {
		if (flag_but){
  40236e:	4b53      	ldr	r3, [pc, #332]	; (4024bc <main+0x1cc>)
  402370:	681b      	ldr	r3, [r3, #0]
  402372:	2b00      	cmp	r3, #0
  402374:	d0fb      	beq.n	40236e <main+0x7e>
			//usart_put_string(UART3, "OI\n");
			//usart_get_string(UART3, buffer, 1024, 1000);
			//usart_log("main", buffer);
		
			sprintf(buffer, "flag %d \n", flag_encoder);
  402376:	4b50      	ldr	r3, [pc, #320]	; (4024b8 <main+0x1c8>)
  402378:	681a      	ldr	r2, [r3, #0]
  40237a:	f107 0314 	add.w	r3, r7, #20
  40237e:	4950      	ldr	r1, [pc, #320]	; (4024c0 <main+0x1d0>)
  402380:	4618      	mov	r0, r3
  402382:	4b50      	ldr	r3, [pc, #320]	; (4024c4 <main+0x1d4>)
  402384:	4798      	blx	r3
			usart_put_string(USART1, buffer);
  402386:	f107 0314 	add.w	r3, r7, #20
  40238a:	4619      	mov	r1, r3
  40238c:	483e      	ldr	r0, [pc, #248]	; (402488 <main+0x198>)
  40238e:	4b3f      	ldr	r3, [pc, #252]	; (40248c <main+0x19c>)
  402390:	4798      	blx	r3
			delay_ms(500);
  402392:	4b38      	ldr	r3, [pc, #224]	; (402474 <main+0x184>)
  402394:	4798      	blx	r3
  402396:	4603      	mov	r3, r0
  402398:	4619      	mov	r1, r3
  40239a:	f04f 0200 	mov.w	r2, #0
  40239e:	460b      	mov	r3, r1
  4023a0:	4614      	mov	r4, r2
  4023a2:	0160      	lsls	r0, r4, #5
  4023a4:	6078      	str	r0, [r7, #4]
  4023a6:	6878      	ldr	r0, [r7, #4]
  4023a8:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
  4023ac:	6078      	str	r0, [r7, #4]
  4023ae:	015b      	lsls	r3, r3, #5
  4023b0:	603b      	str	r3, [r7, #0]
  4023b2:	e9d7 3400 	ldrd	r3, r4, [r7]
  4023b6:	1a5b      	subs	r3, r3, r1
  4023b8:	eb64 0402 	sbc.w	r4, r4, r2
  4023bc:	ea4f 0984 	mov.w	r9, r4, lsl #2
  4023c0:	ea49 7993 	orr.w	r9, r9, r3, lsr #30
  4023c4:	ea4f 0883 	mov.w	r8, r3, lsl #2
  4023c8:	4643      	mov	r3, r8
  4023ca:	464c      	mov	r4, r9
  4023cc:	185b      	adds	r3, r3, r1
  4023ce:	eb44 0402 	adc.w	r4, r4, r2
  4023d2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
  4023d6:	ea4b 7b93 	orr.w	fp, fp, r3, lsr #30
  4023da:	ea4f 0a83 	mov.w	sl, r3, lsl #2
  4023de:	4653      	mov	r3, sl
  4023e0:	465c      	mov	r4, fp
  4023e2:	4619      	mov	r1, r3
  4023e4:	4622      	mov	r2, r4
  4023e6:	f241 732b 	movw	r3, #5931	; 0x172b
  4023ea:	f04f 0400 	mov.w	r4, #0
  4023ee:	18cd      	adds	r5, r1, r3
  4023f0:	eb42 0604 	adc.w	r6, r2, r4
  4023f4:	4628      	mov	r0, r5
  4023f6:	4631      	mov	r1, r6
  4023f8:	4c33      	ldr	r4, [pc, #204]	; (4024c8 <main+0x1d8>)
  4023fa:	f241 722c 	movw	r2, #5932	; 0x172c
  4023fe:	f04f 0300 	mov.w	r3, #0
  402402:	47a0      	blx	r4
  402404:	4603      	mov	r3, r0
  402406:	460c      	mov	r4, r1
  402408:	4618      	mov	r0, r3
  40240a:	4b30      	ldr	r3, [pc, #192]	; (4024cc <main+0x1dc>)
  40240c:	4798      	blx	r3
		
			if(flag_encoder == 1){
  40240e:	4b2a      	ldr	r3, [pc, #168]	; (4024b8 <main+0x1c8>)
  402410:	681b      	ldr	r3, [r3, #0]
  402412:	2b01      	cmp	r3, #1
  402414:	d1ab      	bne.n	40236e <main+0x7e>
				usart_put_string(USART1, "entrou...\r\n");
  402416:	492e      	ldr	r1, [pc, #184]	; (4024d0 <main+0x1e0>)
  402418:	481b      	ldr	r0, [pc, #108]	; (402488 <main+0x198>)
  40241a:	4b1c      	ldr	r3, [pc, #112]	; (40248c <main+0x19c>)
  40241c:	4798      	blx	r3

				sprintf(buffer, "%d \n", encoderPosCount);
  40241e:	4b25      	ldr	r3, [pc, #148]	; (4024b4 <main+0x1c4>)
  402420:	681a      	ldr	r2, [r3, #0]
  402422:	f107 0314 	add.w	r3, r7, #20
  402426:	492b      	ldr	r1, [pc, #172]	; (4024d4 <main+0x1e4>)
  402428:	4618      	mov	r0, r3
  40242a:	4b26      	ldr	r3, [pc, #152]	; (4024c4 <main+0x1d4>)
  40242c:	4798      	blx	r3
				usart_log("encoder", buffer);
  40242e:	f107 0314 	add.w	r3, r7, #20
  402432:	4619      	mov	r1, r3
  402434:	4828      	ldr	r0, [pc, #160]	; (4024d8 <main+0x1e8>)
  402436:	4b29      	ldr	r3, [pc, #164]	; (4024dc <main+0x1ec>)
  402438:	4798      	blx	r3
				int temp = encoderPosCount;
  40243a:	4b1e      	ldr	r3, [pc, #120]	; (4024b4 <main+0x1c4>)
  40243c:	681b      	ldr	r3, [r3, #0]
  40243e:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
				char temp_str[5];
				itoa(temp, temp_str, 10);
  402442:	f107 030c 	add.w	r3, r7, #12
  402446:	220a      	movs	r2, #10
  402448:	4619      	mov	r1, r3
  40244a:	f8d7 0414 	ldr.w	r0, [r7, #1044]	; 0x414
  40244e:	4b24      	ldr	r3, [pc, #144]	; (4024e0 <main+0x1f0>)
  402450:	4798      	blx	r3
				usart_put_string(UART3, temp_str);
  402452:	f107 030c 	add.w	r3, r7, #12
  402456:	4619      	mov	r1, r3
  402458:	4822      	ldr	r0, [pc, #136]	; (4024e4 <main+0x1f4>)
  40245a:	4b0c      	ldr	r3, [pc, #48]	; (40248c <main+0x19c>)
  40245c:	4798      	blx	r3
				flag_encoder = 0;
  40245e:	4b16      	ldr	r3, [pc, #88]	; (4024b8 <main+0x1c8>)
  402460:	2200      	movs	r2, #0
  402462:	601a      	str	r2, [r3, #0]
		if (flag_but){
  402464:	e783      	b.n	40236e <main+0x7e>
  402466:	bf00      	nop
  402468:	00400d3d 	.word	0x00400d3d
  40246c:	00400909 	.word	0x00400909
  402470:	400e1850 	.word	0x400e1850
  402474:	00401c15 	.word	0x00401c15
  402478:	10624dd3 	.word	0x10624dd3
  40247c:	00401b39 	.word	0x00401b39
  402480:	00401f19 	.word	0x00401f19
  402484:	00406f3c 	.word	0x00406f3c
  402488:	40028000 	.word	0x40028000
  40248c:	00401df5 	.word	0x00401df5
  402490:	00406f50 	.word	0x00406f50
  402494:	00401f61 	.word	0x00401f61
  402498:	00401fd1 	.word	0x00401fd1
  40249c:	400e1400 	.word	0x400e1400
  4024a0:	00400e11 	.word	0x00400e11
  4024a4:	20400a9c 	.word	0x20400a9c
  4024a8:	0040210d 	.word	0x0040210d
  4024ac:	0040222d 	.word	0x0040222d
  4024b0:	20400a58 	.word	0x20400a58
  4024b4:	20400a5c 	.word	0x20400a5c
  4024b8:	20400a60 	.word	0x20400a60
  4024bc:	20400a64 	.word	0x20400a64
  4024c0:	00406f68 	.word	0x00406f68
  4024c4:	00402919 	.word	0x00402919
  4024c8:	004024e9 	.word	0x004024e9
  4024cc:	20400001 	.word	0x20400001
  4024d0:	00406f74 	.word	0x00406f74
  4024d4:	00406f80 	.word	0x00406f80
  4024d8:	00406f88 	.word	0x00406f88
  4024dc:	00401ec9 	.word	0x00401ec9
  4024e0:	00402879 	.word	0x00402879
  4024e4:	400e1c00 	.word	0x400e1c00

004024e8 <__aeabi_uldivmod>:
  4024e8:	b953      	cbnz	r3, 402500 <__aeabi_uldivmod+0x18>
  4024ea:	b94a      	cbnz	r2, 402500 <__aeabi_uldivmod+0x18>
  4024ec:	2900      	cmp	r1, #0
  4024ee:	bf08      	it	eq
  4024f0:	2800      	cmpeq	r0, #0
  4024f2:	bf1c      	itt	ne
  4024f4:	f04f 31ff 	movne.w	r1, #4294967295
  4024f8:	f04f 30ff 	movne.w	r0, #4294967295
  4024fc:	f000 b97a 	b.w	4027f4 <__aeabi_idiv0>
  402500:	f1ad 0c08 	sub.w	ip, sp, #8
  402504:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  402508:	f000 f806 	bl	402518 <__udivmoddi4>
  40250c:	f8dd e004 	ldr.w	lr, [sp, #4]
  402510:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402514:	b004      	add	sp, #16
  402516:	4770      	bx	lr

00402518 <__udivmoddi4>:
  402518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40251c:	468c      	mov	ip, r1
  40251e:	460d      	mov	r5, r1
  402520:	4604      	mov	r4, r0
  402522:	9e08      	ldr	r6, [sp, #32]
  402524:	2b00      	cmp	r3, #0
  402526:	d151      	bne.n	4025cc <__udivmoddi4+0xb4>
  402528:	428a      	cmp	r2, r1
  40252a:	4617      	mov	r7, r2
  40252c:	d96d      	bls.n	40260a <__udivmoddi4+0xf2>
  40252e:	fab2 fe82 	clz	lr, r2
  402532:	f1be 0f00 	cmp.w	lr, #0
  402536:	d00b      	beq.n	402550 <__udivmoddi4+0x38>
  402538:	f1ce 0c20 	rsb	ip, lr, #32
  40253c:	fa01 f50e 	lsl.w	r5, r1, lr
  402540:	fa20 fc0c 	lsr.w	ip, r0, ip
  402544:	fa02 f70e 	lsl.w	r7, r2, lr
  402548:	ea4c 0c05 	orr.w	ip, ip, r5
  40254c:	fa00 f40e 	lsl.w	r4, r0, lr
  402550:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  402554:	0c25      	lsrs	r5, r4, #16
  402556:	fbbc f8fa 	udiv	r8, ip, sl
  40255a:	fa1f f987 	uxth.w	r9, r7
  40255e:	fb0a cc18 	mls	ip, sl, r8, ip
  402562:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  402566:	fb08 f309 	mul.w	r3, r8, r9
  40256a:	42ab      	cmp	r3, r5
  40256c:	d90a      	bls.n	402584 <__udivmoddi4+0x6c>
  40256e:	19ed      	adds	r5, r5, r7
  402570:	f108 32ff 	add.w	r2, r8, #4294967295
  402574:	f080 8123 	bcs.w	4027be <__udivmoddi4+0x2a6>
  402578:	42ab      	cmp	r3, r5
  40257a:	f240 8120 	bls.w	4027be <__udivmoddi4+0x2a6>
  40257e:	f1a8 0802 	sub.w	r8, r8, #2
  402582:	443d      	add	r5, r7
  402584:	1aed      	subs	r5, r5, r3
  402586:	b2a4      	uxth	r4, r4
  402588:	fbb5 f0fa 	udiv	r0, r5, sl
  40258c:	fb0a 5510 	mls	r5, sl, r0, r5
  402590:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  402594:	fb00 f909 	mul.w	r9, r0, r9
  402598:	45a1      	cmp	r9, r4
  40259a:	d909      	bls.n	4025b0 <__udivmoddi4+0x98>
  40259c:	19e4      	adds	r4, r4, r7
  40259e:	f100 33ff 	add.w	r3, r0, #4294967295
  4025a2:	f080 810a 	bcs.w	4027ba <__udivmoddi4+0x2a2>
  4025a6:	45a1      	cmp	r9, r4
  4025a8:	f240 8107 	bls.w	4027ba <__udivmoddi4+0x2a2>
  4025ac:	3802      	subs	r0, #2
  4025ae:	443c      	add	r4, r7
  4025b0:	eba4 0409 	sub.w	r4, r4, r9
  4025b4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4025b8:	2100      	movs	r1, #0
  4025ba:	2e00      	cmp	r6, #0
  4025bc:	d061      	beq.n	402682 <__udivmoddi4+0x16a>
  4025be:	fa24 f40e 	lsr.w	r4, r4, lr
  4025c2:	2300      	movs	r3, #0
  4025c4:	6034      	str	r4, [r6, #0]
  4025c6:	6073      	str	r3, [r6, #4]
  4025c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4025cc:	428b      	cmp	r3, r1
  4025ce:	d907      	bls.n	4025e0 <__udivmoddi4+0xc8>
  4025d0:	2e00      	cmp	r6, #0
  4025d2:	d054      	beq.n	40267e <__udivmoddi4+0x166>
  4025d4:	2100      	movs	r1, #0
  4025d6:	e886 0021 	stmia.w	r6, {r0, r5}
  4025da:	4608      	mov	r0, r1
  4025dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4025e0:	fab3 f183 	clz	r1, r3
  4025e4:	2900      	cmp	r1, #0
  4025e6:	f040 808e 	bne.w	402706 <__udivmoddi4+0x1ee>
  4025ea:	42ab      	cmp	r3, r5
  4025ec:	d302      	bcc.n	4025f4 <__udivmoddi4+0xdc>
  4025ee:	4282      	cmp	r2, r0
  4025f0:	f200 80fa 	bhi.w	4027e8 <__udivmoddi4+0x2d0>
  4025f4:	1a84      	subs	r4, r0, r2
  4025f6:	eb65 0503 	sbc.w	r5, r5, r3
  4025fa:	2001      	movs	r0, #1
  4025fc:	46ac      	mov	ip, r5
  4025fe:	2e00      	cmp	r6, #0
  402600:	d03f      	beq.n	402682 <__udivmoddi4+0x16a>
  402602:	e886 1010 	stmia.w	r6, {r4, ip}
  402606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40260a:	b912      	cbnz	r2, 402612 <__udivmoddi4+0xfa>
  40260c:	2701      	movs	r7, #1
  40260e:	fbb7 f7f2 	udiv	r7, r7, r2
  402612:	fab7 fe87 	clz	lr, r7
  402616:	f1be 0f00 	cmp.w	lr, #0
  40261a:	d134      	bne.n	402686 <__udivmoddi4+0x16e>
  40261c:	1beb      	subs	r3, r5, r7
  40261e:	0c3a      	lsrs	r2, r7, #16
  402620:	fa1f fc87 	uxth.w	ip, r7
  402624:	2101      	movs	r1, #1
  402626:	fbb3 f8f2 	udiv	r8, r3, r2
  40262a:	0c25      	lsrs	r5, r4, #16
  40262c:	fb02 3318 	mls	r3, r2, r8, r3
  402630:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  402634:	fb0c f308 	mul.w	r3, ip, r8
  402638:	42ab      	cmp	r3, r5
  40263a:	d907      	bls.n	40264c <__udivmoddi4+0x134>
  40263c:	19ed      	adds	r5, r5, r7
  40263e:	f108 30ff 	add.w	r0, r8, #4294967295
  402642:	d202      	bcs.n	40264a <__udivmoddi4+0x132>
  402644:	42ab      	cmp	r3, r5
  402646:	f200 80d1 	bhi.w	4027ec <__udivmoddi4+0x2d4>
  40264a:	4680      	mov	r8, r0
  40264c:	1aed      	subs	r5, r5, r3
  40264e:	b2a3      	uxth	r3, r4
  402650:	fbb5 f0f2 	udiv	r0, r5, r2
  402654:	fb02 5510 	mls	r5, r2, r0, r5
  402658:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40265c:	fb0c fc00 	mul.w	ip, ip, r0
  402660:	45a4      	cmp	ip, r4
  402662:	d907      	bls.n	402674 <__udivmoddi4+0x15c>
  402664:	19e4      	adds	r4, r4, r7
  402666:	f100 33ff 	add.w	r3, r0, #4294967295
  40266a:	d202      	bcs.n	402672 <__udivmoddi4+0x15a>
  40266c:	45a4      	cmp	ip, r4
  40266e:	f200 80b8 	bhi.w	4027e2 <__udivmoddi4+0x2ca>
  402672:	4618      	mov	r0, r3
  402674:	eba4 040c 	sub.w	r4, r4, ip
  402678:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40267c:	e79d      	b.n	4025ba <__udivmoddi4+0xa2>
  40267e:	4631      	mov	r1, r6
  402680:	4630      	mov	r0, r6
  402682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402686:	f1ce 0420 	rsb	r4, lr, #32
  40268a:	fa05 f30e 	lsl.w	r3, r5, lr
  40268e:	fa07 f70e 	lsl.w	r7, r7, lr
  402692:	fa20 f804 	lsr.w	r8, r0, r4
  402696:	0c3a      	lsrs	r2, r7, #16
  402698:	fa25 f404 	lsr.w	r4, r5, r4
  40269c:	ea48 0803 	orr.w	r8, r8, r3
  4026a0:	fbb4 f1f2 	udiv	r1, r4, r2
  4026a4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4026a8:	fb02 4411 	mls	r4, r2, r1, r4
  4026ac:	fa1f fc87 	uxth.w	ip, r7
  4026b0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4026b4:	fb01 f30c 	mul.w	r3, r1, ip
  4026b8:	42ab      	cmp	r3, r5
  4026ba:	fa00 f40e 	lsl.w	r4, r0, lr
  4026be:	d909      	bls.n	4026d4 <__udivmoddi4+0x1bc>
  4026c0:	19ed      	adds	r5, r5, r7
  4026c2:	f101 30ff 	add.w	r0, r1, #4294967295
  4026c6:	f080 808a 	bcs.w	4027de <__udivmoddi4+0x2c6>
  4026ca:	42ab      	cmp	r3, r5
  4026cc:	f240 8087 	bls.w	4027de <__udivmoddi4+0x2c6>
  4026d0:	3902      	subs	r1, #2
  4026d2:	443d      	add	r5, r7
  4026d4:	1aeb      	subs	r3, r5, r3
  4026d6:	fa1f f588 	uxth.w	r5, r8
  4026da:	fbb3 f0f2 	udiv	r0, r3, r2
  4026de:	fb02 3310 	mls	r3, r2, r0, r3
  4026e2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4026e6:	fb00 f30c 	mul.w	r3, r0, ip
  4026ea:	42ab      	cmp	r3, r5
  4026ec:	d907      	bls.n	4026fe <__udivmoddi4+0x1e6>
  4026ee:	19ed      	adds	r5, r5, r7
  4026f0:	f100 38ff 	add.w	r8, r0, #4294967295
  4026f4:	d26f      	bcs.n	4027d6 <__udivmoddi4+0x2be>
  4026f6:	42ab      	cmp	r3, r5
  4026f8:	d96d      	bls.n	4027d6 <__udivmoddi4+0x2be>
  4026fa:	3802      	subs	r0, #2
  4026fc:	443d      	add	r5, r7
  4026fe:	1aeb      	subs	r3, r5, r3
  402700:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  402704:	e78f      	b.n	402626 <__udivmoddi4+0x10e>
  402706:	f1c1 0720 	rsb	r7, r1, #32
  40270a:	fa22 f807 	lsr.w	r8, r2, r7
  40270e:	408b      	lsls	r3, r1
  402710:	fa05 f401 	lsl.w	r4, r5, r1
  402714:	ea48 0303 	orr.w	r3, r8, r3
  402718:	fa20 fe07 	lsr.w	lr, r0, r7
  40271c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  402720:	40fd      	lsrs	r5, r7
  402722:	ea4e 0e04 	orr.w	lr, lr, r4
  402726:	fbb5 f9fc 	udiv	r9, r5, ip
  40272a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40272e:	fb0c 5519 	mls	r5, ip, r9, r5
  402732:	fa1f f883 	uxth.w	r8, r3
  402736:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40273a:	fb09 f408 	mul.w	r4, r9, r8
  40273e:	42ac      	cmp	r4, r5
  402740:	fa02 f201 	lsl.w	r2, r2, r1
  402744:	fa00 fa01 	lsl.w	sl, r0, r1
  402748:	d908      	bls.n	40275c <__udivmoddi4+0x244>
  40274a:	18ed      	adds	r5, r5, r3
  40274c:	f109 30ff 	add.w	r0, r9, #4294967295
  402750:	d243      	bcs.n	4027da <__udivmoddi4+0x2c2>
  402752:	42ac      	cmp	r4, r5
  402754:	d941      	bls.n	4027da <__udivmoddi4+0x2c2>
  402756:	f1a9 0902 	sub.w	r9, r9, #2
  40275a:	441d      	add	r5, r3
  40275c:	1b2d      	subs	r5, r5, r4
  40275e:	fa1f fe8e 	uxth.w	lr, lr
  402762:	fbb5 f0fc 	udiv	r0, r5, ip
  402766:	fb0c 5510 	mls	r5, ip, r0, r5
  40276a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40276e:	fb00 f808 	mul.w	r8, r0, r8
  402772:	45a0      	cmp	r8, r4
  402774:	d907      	bls.n	402786 <__udivmoddi4+0x26e>
  402776:	18e4      	adds	r4, r4, r3
  402778:	f100 35ff 	add.w	r5, r0, #4294967295
  40277c:	d229      	bcs.n	4027d2 <__udivmoddi4+0x2ba>
  40277e:	45a0      	cmp	r8, r4
  402780:	d927      	bls.n	4027d2 <__udivmoddi4+0x2ba>
  402782:	3802      	subs	r0, #2
  402784:	441c      	add	r4, r3
  402786:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40278a:	eba4 0408 	sub.w	r4, r4, r8
  40278e:	fba0 8902 	umull	r8, r9, r0, r2
  402792:	454c      	cmp	r4, r9
  402794:	46c6      	mov	lr, r8
  402796:	464d      	mov	r5, r9
  402798:	d315      	bcc.n	4027c6 <__udivmoddi4+0x2ae>
  40279a:	d012      	beq.n	4027c2 <__udivmoddi4+0x2aa>
  40279c:	b156      	cbz	r6, 4027b4 <__udivmoddi4+0x29c>
  40279e:	ebba 030e 	subs.w	r3, sl, lr
  4027a2:	eb64 0405 	sbc.w	r4, r4, r5
  4027a6:	fa04 f707 	lsl.w	r7, r4, r7
  4027aa:	40cb      	lsrs	r3, r1
  4027ac:	431f      	orrs	r7, r3
  4027ae:	40cc      	lsrs	r4, r1
  4027b0:	6037      	str	r7, [r6, #0]
  4027b2:	6074      	str	r4, [r6, #4]
  4027b4:	2100      	movs	r1, #0
  4027b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4027ba:	4618      	mov	r0, r3
  4027bc:	e6f8      	b.n	4025b0 <__udivmoddi4+0x98>
  4027be:	4690      	mov	r8, r2
  4027c0:	e6e0      	b.n	402584 <__udivmoddi4+0x6c>
  4027c2:	45c2      	cmp	sl, r8
  4027c4:	d2ea      	bcs.n	40279c <__udivmoddi4+0x284>
  4027c6:	ebb8 0e02 	subs.w	lr, r8, r2
  4027ca:	eb69 0503 	sbc.w	r5, r9, r3
  4027ce:	3801      	subs	r0, #1
  4027d0:	e7e4      	b.n	40279c <__udivmoddi4+0x284>
  4027d2:	4628      	mov	r0, r5
  4027d4:	e7d7      	b.n	402786 <__udivmoddi4+0x26e>
  4027d6:	4640      	mov	r0, r8
  4027d8:	e791      	b.n	4026fe <__udivmoddi4+0x1e6>
  4027da:	4681      	mov	r9, r0
  4027dc:	e7be      	b.n	40275c <__udivmoddi4+0x244>
  4027de:	4601      	mov	r1, r0
  4027e0:	e778      	b.n	4026d4 <__udivmoddi4+0x1bc>
  4027e2:	3802      	subs	r0, #2
  4027e4:	443c      	add	r4, r7
  4027e6:	e745      	b.n	402674 <__udivmoddi4+0x15c>
  4027e8:	4608      	mov	r0, r1
  4027ea:	e708      	b.n	4025fe <__udivmoddi4+0xe6>
  4027ec:	f1a8 0802 	sub.w	r8, r8, #2
  4027f0:	443d      	add	r5, r7
  4027f2:	e72b      	b.n	40264c <__udivmoddi4+0x134>

004027f4 <__aeabi_idiv0>:
  4027f4:	4770      	bx	lr
  4027f6:	bf00      	nop

004027f8 <__libc_init_array>:
  4027f8:	b570      	push	{r4, r5, r6, lr}
  4027fa:	4e0f      	ldr	r6, [pc, #60]	; (402838 <__libc_init_array+0x40>)
  4027fc:	4d0f      	ldr	r5, [pc, #60]	; (40283c <__libc_init_array+0x44>)
  4027fe:	1b76      	subs	r6, r6, r5
  402800:	10b6      	asrs	r6, r6, #2
  402802:	bf18      	it	ne
  402804:	2400      	movne	r4, #0
  402806:	d005      	beq.n	402814 <__libc_init_array+0x1c>
  402808:	3401      	adds	r4, #1
  40280a:	f855 3b04 	ldr.w	r3, [r5], #4
  40280e:	4798      	blx	r3
  402810:	42a6      	cmp	r6, r4
  402812:	d1f9      	bne.n	402808 <__libc_init_array+0x10>
  402814:	4e0a      	ldr	r6, [pc, #40]	; (402840 <__libc_init_array+0x48>)
  402816:	4d0b      	ldr	r5, [pc, #44]	; (402844 <__libc_init_array+0x4c>)
  402818:	1b76      	subs	r6, r6, r5
  40281a:	f004 fd11 	bl	407240 <_init>
  40281e:	10b6      	asrs	r6, r6, #2
  402820:	bf18      	it	ne
  402822:	2400      	movne	r4, #0
  402824:	d006      	beq.n	402834 <__libc_init_array+0x3c>
  402826:	3401      	adds	r4, #1
  402828:	f855 3b04 	ldr.w	r3, [r5], #4
  40282c:	4798      	blx	r3
  40282e:	42a6      	cmp	r6, r4
  402830:	d1f9      	bne.n	402826 <__libc_init_array+0x2e>
  402832:	bd70      	pop	{r4, r5, r6, pc}
  402834:	bd70      	pop	{r4, r5, r6, pc}
  402836:	bf00      	nop
  402838:	0040724c 	.word	0x0040724c
  40283c:	0040724c 	.word	0x0040724c
  402840:	00407254 	.word	0x00407254
  402844:	0040724c 	.word	0x0040724c

00402848 <__itoa>:
  402848:	1e93      	subs	r3, r2, #2
  40284a:	2b22      	cmp	r3, #34	; 0x22
  40284c:	d810      	bhi.n	402870 <__itoa+0x28>
  40284e:	2a0a      	cmp	r2, #10
  402850:	b510      	push	{r4, lr}
  402852:	d006      	beq.n	402862 <__itoa+0x1a>
  402854:	2300      	movs	r3, #0
  402856:	460c      	mov	r4, r1
  402858:	4419      	add	r1, r3
  40285a:	f001 fb2d 	bl	403eb8 <__utoa>
  40285e:	4620      	mov	r0, r4
  402860:	bd10      	pop	{r4, pc}
  402862:	2800      	cmp	r0, #0
  402864:	daf6      	bge.n	402854 <__itoa+0xc>
  402866:	232d      	movs	r3, #45	; 0x2d
  402868:	700b      	strb	r3, [r1, #0]
  40286a:	4240      	negs	r0, r0
  40286c:	2301      	movs	r3, #1
  40286e:	e7f2      	b.n	402856 <__itoa+0xe>
  402870:	2000      	movs	r0, #0
  402872:	7008      	strb	r0, [r1, #0]
  402874:	4770      	bx	lr
  402876:	bf00      	nop

00402878 <itoa>:
  402878:	f7ff bfe6 	b.w	402848 <__itoa>

0040287c <memset>:
  40287c:	b470      	push	{r4, r5, r6}
  40287e:	0786      	lsls	r6, r0, #30
  402880:	d046      	beq.n	402910 <memset+0x94>
  402882:	1e54      	subs	r4, r2, #1
  402884:	2a00      	cmp	r2, #0
  402886:	d041      	beq.n	40290c <memset+0x90>
  402888:	b2ca      	uxtb	r2, r1
  40288a:	4603      	mov	r3, r0
  40288c:	e002      	b.n	402894 <memset+0x18>
  40288e:	f114 34ff 	adds.w	r4, r4, #4294967295
  402892:	d33b      	bcc.n	40290c <memset+0x90>
  402894:	f803 2b01 	strb.w	r2, [r3], #1
  402898:	079d      	lsls	r5, r3, #30
  40289a:	d1f8      	bne.n	40288e <memset+0x12>
  40289c:	2c03      	cmp	r4, #3
  40289e:	d92e      	bls.n	4028fe <memset+0x82>
  4028a0:	b2cd      	uxtb	r5, r1
  4028a2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4028a6:	2c0f      	cmp	r4, #15
  4028a8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4028ac:	d919      	bls.n	4028e2 <memset+0x66>
  4028ae:	f103 0210 	add.w	r2, r3, #16
  4028b2:	4626      	mov	r6, r4
  4028b4:	3e10      	subs	r6, #16
  4028b6:	2e0f      	cmp	r6, #15
  4028b8:	f842 5c10 	str.w	r5, [r2, #-16]
  4028bc:	f842 5c0c 	str.w	r5, [r2, #-12]
  4028c0:	f842 5c08 	str.w	r5, [r2, #-8]
  4028c4:	f842 5c04 	str.w	r5, [r2, #-4]
  4028c8:	f102 0210 	add.w	r2, r2, #16
  4028cc:	d8f2      	bhi.n	4028b4 <memset+0x38>
  4028ce:	f1a4 0210 	sub.w	r2, r4, #16
  4028d2:	f022 020f 	bic.w	r2, r2, #15
  4028d6:	f004 040f 	and.w	r4, r4, #15
  4028da:	3210      	adds	r2, #16
  4028dc:	2c03      	cmp	r4, #3
  4028de:	4413      	add	r3, r2
  4028e0:	d90d      	bls.n	4028fe <memset+0x82>
  4028e2:	461e      	mov	r6, r3
  4028e4:	4622      	mov	r2, r4
  4028e6:	3a04      	subs	r2, #4
  4028e8:	2a03      	cmp	r2, #3
  4028ea:	f846 5b04 	str.w	r5, [r6], #4
  4028ee:	d8fa      	bhi.n	4028e6 <memset+0x6a>
  4028f0:	1f22      	subs	r2, r4, #4
  4028f2:	f022 0203 	bic.w	r2, r2, #3
  4028f6:	3204      	adds	r2, #4
  4028f8:	4413      	add	r3, r2
  4028fa:	f004 0403 	and.w	r4, r4, #3
  4028fe:	b12c      	cbz	r4, 40290c <memset+0x90>
  402900:	b2c9      	uxtb	r1, r1
  402902:	441c      	add	r4, r3
  402904:	f803 1b01 	strb.w	r1, [r3], #1
  402908:	429c      	cmp	r4, r3
  40290a:	d1fb      	bne.n	402904 <memset+0x88>
  40290c:	bc70      	pop	{r4, r5, r6}
  40290e:	4770      	bx	lr
  402910:	4614      	mov	r4, r2
  402912:	4603      	mov	r3, r0
  402914:	e7c2      	b.n	40289c <memset+0x20>
  402916:	bf00      	nop

00402918 <sprintf>:
  402918:	b40e      	push	{r1, r2, r3}
  40291a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40291c:	b09c      	sub	sp, #112	; 0x70
  40291e:	ab21      	add	r3, sp, #132	; 0x84
  402920:	490f      	ldr	r1, [pc, #60]	; (402960 <sprintf+0x48>)
  402922:	f853 2b04 	ldr.w	r2, [r3], #4
  402926:	9301      	str	r3, [sp, #4]
  402928:	4605      	mov	r5, r0
  40292a:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  40292e:	6808      	ldr	r0, [r1, #0]
  402930:	9502      	str	r5, [sp, #8]
  402932:	f44f 7702 	mov.w	r7, #520	; 0x208
  402936:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40293a:	a902      	add	r1, sp, #8
  40293c:	9506      	str	r5, [sp, #24]
  40293e:	f8ad 7014 	strh.w	r7, [sp, #20]
  402942:	9404      	str	r4, [sp, #16]
  402944:	9407      	str	r4, [sp, #28]
  402946:	f8ad 6016 	strh.w	r6, [sp, #22]
  40294a:	f000 f887 	bl	402a5c <_svfprintf_r>
  40294e:	9b02      	ldr	r3, [sp, #8]
  402950:	2200      	movs	r2, #0
  402952:	701a      	strb	r2, [r3, #0]
  402954:	b01c      	add	sp, #112	; 0x70
  402956:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40295a:	b003      	add	sp, #12
  40295c:	4770      	bx	lr
  40295e:	bf00      	nop
  402960:	20400010 	.word	0x20400010
	...

00402980 <strlen>:
  402980:	f890 f000 	pld	[r0]
  402984:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  402988:	f020 0107 	bic.w	r1, r0, #7
  40298c:	f06f 0c00 	mvn.w	ip, #0
  402990:	f010 0407 	ands.w	r4, r0, #7
  402994:	f891 f020 	pld	[r1, #32]
  402998:	f040 8049 	bne.w	402a2e <strlen+0xae>
  40299c:	f04f 0400 	mov.w	r4, #0
  4029a0:	f06f 0007 	mvn.w	r0, #7
  4029a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4029a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4029ac:	f100 0008 	add.w	r0, r0, #8
  4029b0:	fa82 f24c 	uadd8	r2, r2, ip
  4029b4:	faa4 f28c 	sel	r2, r4, ip
  4029b8:	fa83 f34c 	uadd8	r3, r3, ip
  4029bc:	faa2 f38c 	sel	r3, r2, ip
  4029c0:	bb4b      	cbnz	r3, 402a16 <strlen+0x96>
  4029c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4029c6:	fa82 f24c 	uadd8	r2, r2, ip
  4029ca:	f100 0008 	add.w	r0, r0, #8
  4029ce:	faa4 f28c 	sel	r2, r4, ip
  4029d2:	fa83 f34c 	uadd8	r3, r3, ip
  4029d6:	faa2 f38c 	sel	r3, r2, ip
  4029da:	b9e3      	cbnz	r3, 402a16 <strlen+0x96>
  4029dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4029e0:	fa82 f24c 	uadd8	r2, r2, ip
  4029e4:	f100 0008 	add.w	r0, r0, #8
  4029e8:	faa4 f28c 	sel	r2, r4, ip
  4029ec:	fa83 f34c 	uadd8	r3, r3, ip
  4029f0:	faa2 f38c 	sel	r3, r2, ip
  4029f4:	b97b      	cbnz	r3, 402a16 <strlen+0x96>
  4029f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4029fa:	f101 0120 	add.w	r1, r1, #32
  4029fe:	fa82 f24c 	uadd8	r2, r2, ip
  402a02:	f100 0008 	add.w	r0, r0, #8
  402a06:	faa4 f28c 	sel	r2, r4, ip
  402a0a:	fa83 f34c 	uadd8	r3, r3, ip
  402a0e:	faa2 f38c 	sel	r3, r2, ip
  402a12:	2b00      	cmp	r3, #0
  402a14:	d0c6      	beq.n	4029a4 <strlen+0x24>
  402a16:	2a00      	cmp	r2, #0
  402a18:	bf04      	itt	eq
  402a1a:	3004      	addeq	r0, #4
  402a1c:	461a      	moveq	r2, r3
  402a1e:	ba12      	rev	r2, r2
  402a20:	fab2 f282 	clz	r2, r2
  402a24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  402a28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  402a2c:	4770      	bx	lr
  402a2e:	e9d1 2300 	ldrd	r2, r3, [r1]
  402a32:	f004 0503 	and.w	r5, r4, #3
  402a36:	f1c4 0000 	rsb	r0, r4, #0
  402a3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  402a3e:	f014 0f04 	tst.w	r4, #4
  402a42:	f891 f040 	pld	[r1, #64]	; 0x40
  402a46:	fa0c f505 	lsl.w	r5, ip, r5
  402a4a:	ea62 0205 	orn	r2, r2, r5
  402a4e:	bf1c      	itt	ne
  402a50:	ea63 0305 	ornne	r3, r3, r5
  402a54:	4662      	movne	r2, ip
  402a56:	f04f 0400 	mov.w	r4, #0
  402a5a:	e7a9      	b.n	4029b0 <strlen+0x30>

00402a5c <_svfprintf_r>:
  402a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402a60:	b0c3      	sub	sp, #268	; 0x10c
  402a62:	460c      	mov	r4, r1
  402a64:	910b      	str	r1, [sp, #44]	; 0x2c
  402a66:	4692      	mov	sl, r2
  402a68:	930f      	str	r3, [sp, #60]	; 0x3c
  402a6a:	900c      	str	r0, [sp, #48]	; 0x30
  402a6c:	f002 fa4c 	bl	404f08 <_localeconv_r>
  402a70:	6803      	ldr	r3, [r0, #0]
  402a72:	931a      	str	r3, [sp, #104]	; 0x68
  402a74:	4618      	mov	r0, r3
  402a76:	f7ff ff83 	bl	402980 <strlen>
  402a7a:	89a3      	ldrh	r3, [r4, #12]
  402a7c:	9019      	str	r0, [sp, #100]	; 0x64
  402a7e:	0619      	lsls	r1, r3, #24
  402a80:	d503      	bpl.n	402a8a <_svfprintf_r+0x2e>
  402a82:	6923      	ldr	r3, [r4, #16]
  402a84:	2b00      	cmp	r3, #0
  402a86:	f001 8003 	beq.w	403a90 <_svfprintf_r+0x1034>
  402a8a:	2300      	movs	r3, #0
  402a8c:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  402a90:	9313      	str	r3, [sp, #76]	; 0x4c
  402a92:	9315      	str	r3, [sp, #84]	; 0x54
  402a94:	9314      	str	r3, [sp, #80]	; 0x50
  402a96:	9327      	str	r3, [sp, #156]	; 0x9c
  402a98:	9326      	str	r3, [sp, #152]	; 0x98
  402a9a:	9318      	str	r3, [sp, #96]	; 0x60
  402a9c:	931b      	str	r3, [sp, #108]	; 0x6c
  402a9e:	9309      	str	r3, [sp, #36]	; 0x24
  402aa0:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  402aa4:	46c8      	mov	r8, r9
  402aa6:	9316      	str	r3, [sp, #88]	; 0x58
  402aa8:	9317      	str	r3, [sp, #92]	; 0x5c
  402aaa:	f89a 3000 	ldrb.w	r3, [sl]
  402aae:	4654      	mov	r4, sl
  402ab0:	b1e3      	cbz	r3, 402aec <_svfprintf_r+0x90>
  402ab2:	2b25      	cmp	r3, #37	; 0x25
  402ab4:	d102      	bne.n	402abc <_svfprintf_r+0x60>
  402ab6:	e019      	b.n	402aec <_svfprintf_r+0x90>
  402ab8:	2b25      	cmp	r3, #37	; 0x25
  402aba:	d003      	beq.n	402ac4 <_svfprintf_r+0x68>
  402abc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  402ac0:	2b00      	cmp	r3, #0
  402ac2:	d1f9      	bne.n	402ab8 <_svfprintf_r+0x5c>
  402ac4:	eba4 050a 	sub.w	r5, r4, sl
  402ac8:	b185      	cbz	r5, 402aec <_svfprintf_r+0x90>
  402aca:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402acc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  402ace:	f8c8 a000 	str.w	sl, [r8]
  402ad2:	3301      	adds	r3, #1
  402ad4:	442a      	add	r2, r5
  402ad6:	2b07      	cmp	r3, #7
  402ad8:	f8c8 5004 	str.w	r5, [r8, #4]
  402adc:	9227      	str	r2, [sp, #156]	; 0x9c
  402ade:	9326      	str	r3, [sp, #152]	; 0x98
  402ae0:	dc7f      	bgt.n	402be2 <_svfprintf_r+0x186>
  402ae2:	f108 0808 	add.w	r8, r8, #8
  402ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402ae8:	442b      	add	r3, r5
  402aea:	9309      	str	r3, [sp, #36]	; 0x24
  402aec:	7823      	ldrb	r3, [r4, #0]
  402aee:	2b00      	cmp	r3, #0
  402af0:	d07f      	beq.n	402bf2 <_svfprintf_r+0x196>
  402af2:	2300      	movs	r3, #0
  402af4:	461a      	mov	r2, r3
  402af6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  402afa:	4619      	mov	r1, r3
  402afc:	930d      	str	r3, [sp, #52]	; 0x34
  402afe:	469b      	mov	fp, r3
  402b00:	f04f 30ff 	mov.w	r0, #4294967295
  402b04:	7863      	ldrb	r3, [r4, #1]
  402b06:	900a      	str	r0, [sp, #40]	; 0x28
  402b08:	f104 0a01 	add.w	sl, r4, #1
  402b0c:	f10a 0a01 	add.w	sl, sl, #1
  402b10:	f1a3 0020 	sub.w	r0, r3, #32
  402b14:	2858      	cmp	r0, #88	; 0x58
  402b16:	f200 83c1 	bhi.w	40329c <_svfprintf_r+0x840>
  402b1a:	e8df f010 	tbh	[pc, r0, lsl #1]
  402b1e:	0238      	.short	0x0238
  402b20:	03bf03bf 	.word	0x03bf03bf
  402b24:	03bf0240 	.word	0x03bf0240
  402b28:	03bf03bf 	.word	0x03bf03bf
  402b2c:	03bf03bf 	.word	0x03bf03bf
  402b30:	024503bf 	.word	0x024503bf
  402b34:	03bf0203 	.word	0x03bf0203
  402b38:	026b005d 	.word	0x026b005d
  402b3c:	028603bf 	.word	0x028603bf
  402b40:	039d039d 	.word	0x039d039d
  402b44:	039d039d 	.word	0x039d039d
  402b48:	039d039d 	.word	0x039d039d
  402b4c:	039d039d 	.word	0x039d039d
  402b50:	03bf039d 	.word	0x03bf039d
  402b54:	03bf03bf 	.word	0x03bf03bf
  402b58:	03bf03bf 	.word	0x03bf03bf
  402b5c:	03bf03bf 	.word	0x03bf03bf
  402b60:	03bf03bf 	.word	0x03bf03bf
  402b64:	033703bf 	.word	0x033703bf
  402b68:	03bf0357 	.word	0x03bf0357
  402b6c:	03bf0357 	.word	0x03bf0357
  402b70:	03bf03bf 	.word	0x03bf03bf
  402b74:	039803bf 	.word	0x039803bf
  402b78:	03bf03bf 	.word	0x03bf03bf
  402b7c:	03bf03ad 	.word	0x03bf03ad
  402b80:	03bf03bf 	.word	0x03bf03bf
  402b84:	03bf03bf 	.word	0x03bf03bf
  402b88:	03bf0259 	.word	0x03bf0259
  402b8c:	031e03bf 	.word	0x031e03bf
  402b90:	03bf03bf 	.word	0x03bf03bf
  402b94:	03bf03bf 	.word	0x03bf03bf
  402b98:	03bf03bf 	.word	0x03bf03bf
  402b9c:	03bf03bf 	.word	0x03bf03bf
  402ba0:	03bf03bf 	.word	0x03bf03bf
  402ba4:	02db02c6 	.word	0x02db02c6
  402ba8:	03570357 	.word	0x03570357
  402bac:	028b0357 	.word	0x028b0357
  402bb0:	03bf02db 	.word	0x03bf02db
  402bb4:	029003bf 	.word	0x029003bf
  402bb8:	029d03bf 	.word	0x029d03bf
  402bbc:	02b401cc 	.word	0x02b401cc
  402bc0:	03bf0208 	.word	0x03bf0208
  402bc4:	03bf01e1 	.word	0x03bf01e1
  402bc8:	03bf007e 	.word	0x03bf007e
  402bcc:	020d03bf 	.word	0x020d03bf
  402bd0:	980d      	ldr	r0, [sp, #52]	; 0x34
  402bd2:	930f      	str	r3, [sp, #60]	; 0x3c
  402bd4:	4240      	negs	r0, r0
  402bd6:	900d      	str	r0, [sp, #52]	; 0x34
  402bd8:	f04b 0b04 	orr.w	fp, fp, #4
  402bdc:	f89a 3000 	ldrb.w	r3, [sl]
  402be0:	e794      	b.n	402b0c <_svfprintf_r+0xb0>
  402be2:	aa25      	add	r2, sp, #148	; 0x94
  402be4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402be6:	980c      	ldr	r0, [sp, #48]	; 0x30
  402be8:	f003 f854 	bl	405c94 <__ssprint_r>
  402bec:	b940      	cbnz	r0, 402c00 <_svfprintf_r+0x1a4>
  402bee:	46c8      	mov	r8, r9
  402bf0:	e779      	b.n	402ae6 <_svfprintf_r+0x8a>
  402bf2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402bf4:	b123      	cbz	r3, 402c00 <_svfprintf_r+0x1a4>
  402bf6:	980c      	ldr	r0, [sp, #48]	; 0x30
  402bf8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402bfa:	aa25      	add	r2, sp, #148	; 0x94
  402bfc:	f003 f84a 	bl	405c94 <__ssprint_r>
  402c00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  402c02:	899b      	ldrh	r3, [r3, #12]
  402c04:	f013 0f40 	tst.w	r3, #64	; 0x40
  402c08:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402c0a:	bf18      	it	ne
  402c0c:	f04f 33ff 	movne.w	r3, #4294967295
  402c10:	9309      	str	r3, [sp, #36]	; 0x24
  402c12:	9809      	ldr	r0, [sp, #36]	; 0x24
  402c14:	b043      	add	sp, #268	; 0x10c
  402c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402c1a:	f01b 0f20 	tst.w	fp, #32
  402c1e:	9311      	str	r3, [sp, #68]	; 0x44
  402c20:	f040 81dd 	bne.w	402fde <_svfprintf_r+0x582>
  402c24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402c26:	f01b 0f10 	tst.w	fp, #16
  402c2a:	4613      	mov	r3, r2
  402c2c:	f040 856e 	bne.w	40370c <_svfprintf_r+0xcb0>
  402c30:	f01b 0f40 	tst.w	fp, #64	; 0x40
  402c34:	f000 856a 	beq.w	40370c <_svfprintf_r+0xcb0>
  402c38:	8814      	ldrh	r4, [r2, #0]
  402c3a:	3204      	adds	r2, #4
  402c3c:	2500      	movs	r5, #0
  402c3e:	2301      	movs	r3, #1
  402c40:	920f      	str	r2, [sp, #60]	; 0x3c
  402c42:	2700      	movs	r7, #0
  402c44:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  402c48:	990a      	ldr	r1, [sp, #40]	; 0x28
  402c4a:	1c4a      	adds	r2, r1, #1
  402c4c:	f000 8265 	beq.w	40311a <_svfprintf_r+0x6be>
  402c50:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  402c54:	9207      	str	r2, [sp, #28]
  402c56:	ea54 0205 	orrs.w	r2, r4, r5
  402c5a:	f040 8264 	bne.w	403126 <_svfprintf_r+0x6ca>
  402c5e:	2900      	cmp	r1, #0
  402c60:	f040 843c 	bne.w	4034dc <_svfprintf_r+0xa80>
  402c64:	2b00      	cmp	r3, #0
  402c66:	f040 84d7 	bne.w	403618 <_svfprintf_r+0xbbc>
  402c6a:	f01b 0301 	ands.w	r3, fp, #1
  402c6e:	930e      	str	r3, [sp, #56]	; 0x38
  402c70:	f000 8604 	beq.w	40387c <_svfprintf_r+0xe20>
  402c74:	ae42      	add	r6, sp, #264	; 0x108
  402c76:	2330      	movs	r3, #48	; 0x30
  402c78:	f806 3d41 	strb.w	r3, [r6, #-65]!
  402c7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402c7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402c80:	4293      	cmp	r3, r2
  402c82:	bfb8      	it	lt
  402c84:	4613      	movlt	r3, r2
  402c86:	9308      	str	r3, [sp, #32]
  402c88:	2300      	movs	r3, #0
  402c8a:	9312      	str	r3, [sp, #72]	; 0x48
  402c8c:	b117      	cbz	r7, 402c94 <_svfprintf_r+0x238>
  402c8e:	9b08      	ldr	r3, [sp, #32]
  402c90:	3301      	adds	r3, #1
  402c92:	9308      	str	r3, [sp, #32]
  402c94:	9b07      	ldr	r3, [sp, #28]
  402c96:	f013 0302 	ands.w	r3, r3, #2
  402c9a:	9310      	str	r3, [sp, #64]	; 0x40
  402c9c:	d002      	beq.n	402ca4 <_svfprintf_r+0x248>
  402c9e:	9b08      	ldr	r3, [sp, #32]
  402ca0:	3302      	adds	r3, #2
  402ca2:	9308      	str	r3, [sp, #32]
  402ca4:	9b07      	ldr	r3, [sp, #28]
  402ca6:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  402caa:	f040 830e 	bne.w	4032ca <_svfprintf_r+0x86e>
  402cae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402cb0:	9a08      	ldr	r2, [sp, #32]
  402cb2:	eba3 0b02 	sub.w	fp, r3, r2
  402cb6:	f1bb 0f00 	cmp.w	fp, #0
  402cba:	f340 8306 	ble.w	4032ca <_svfprintf_r+0x86e>
  402cbe:	f1bb 0f10 	cmp.w	fp, #16
  402cc2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402cc4:	9a26      	ldr	r2, [sp, #152]	; 0x98
  402cc6:	dd29      	ble.n	402d1c <_svfprintf_r+0x2c0>
  402cc8:	4643      	mov	r3, r8
  402cca:	4621      	mov	r1, r4
  402ccc:	46a8      	mov	r8, r5
  402cce:	2710      	movs	r7, #16
  402cd0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  402cd2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  402cd4:	e006      	b.n	402ce4 <_svfprintf_r+0x288>
  402cd6:	f1ab 0b10 	sub.w	fp, fp, #16
  402cda:	f1bb 0f10 	cmp.w	fp, #16
  402cde:	f103 0308 	add.w	r3, r3, #8
  402ce2:	dd18      	ble.n	402d16 <_svfprintf_r+0x2ba>
  402ce4:	3201      	adds	r2, #1
  402ce6:	48b7      	ldr	r0, [pc, #732]	; (402fc4 <_svfprintf_r+0x568>)
  402ce8:	9226      	str	r2, [sp, #152]	; 0x98
  402cea:	3110      	adds	r1, #16
  402cec:	2a07      	cmp	r2, #7
  402cee:	9127      	str	r1, [sp, #156]	; 0x9c
  402cf0:	e883 0081 	stmia.w	r3, {r0, r7}
  402cf4:	ddef      	ble.n	402cd6 <_svfprintf_r+0x27a>
  402cf6:	aa25      	add	r2, sp, #148	; 0x94
  402cf8:	4629      	mov	r1, r5
  402cfa:	4620      	mov	r0, r4
  402cfc:	f002 ffca 	bl	405c94 <__ssprint_r>
  402d00:	2800      	cmp	r0, #0
  402d02:	f47f af7d 	bne.w	402c00 <_svfprintf_r+0x1a4>
  402d06:	f1ab 0b10 	sub.w	fp, fp, #16
  402d0a:	f1bb 0f10 	cmp.w	fp, #16
  402d0e:	9927      	ldr	r1, [sp, #156]	; 0x9c
  402d10:	9a26      	ldr	r2, [sp, #152]	; 0x98
  402d12:	464b      	mov	r3, r9
  402d14:	dce6      	bgt.n	402ce4 <_svfprintf_r+0x288>
  402d16:	4645      	mov	r5, r8
  402d18:	460c      	mov	r4, r1
  402d1a:	4698      	mov	r8, r3
  402d1c:	3201      	adds	r2, #1
  402d1e:	4ba9      	ldr	r3, [pc, #676]	; (402fc4 <_svfprintf_r+0x568>)
  402d20:	9226      	str	r2, [sp, #152]	; 0x98
  402d22:	445c      	add	r4, fp
  402d24:	2a07      	cmp	r2, #7
  402d26:	9427      	str	r4, [sp, #156]	; 0x9c
  402d28:	e888 0808 	stmia.w	r8, {r3, fp}
  402d2c:	f300 8498 	bgt.w	403660 <_svfprintf_r+0xc04>
  402d30:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  402d34:	f108 0808 	add.w	r8, r8, #8
  402d38:	b177      	cbz	r7, 402d58 <_svfprintf_r+0x2fc>
  402d3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402d3c:	3301      	adds	r3, #1
  402d3e:	3401      	adds	r4, #1
  402d40:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  402d44:	2201      	movs	r2, #1
  402d46:	2b07      	cmp	r3, #7
  402d48:	9427      	str	r4, [sp, #156]	; 0x9c
  402d4a:	9326      	str	r3, [sp, #152]	; 0x98
  402d4c:	e888 0006 	stmia.w	r8, {r1, r2}
  402d50:	f300 83db 	bgt.w	40350a <_svfprintf_r+0xaae>
  402d54:	f108 0808 	add.w	r8, r8, #8
  402d58:	9b10      	ldr	r3, [sp, #64]	; 0x40
  402d5a:	b16b      	cbz	r3, 402d78 <_svfprintf_r+0x31c>
  402d5c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402d5e:	3301      	adds	r3, #1
  402d60:	3402      	adds	r4, #2
  402d62:	a91e      	add	r1, sp, #120	; 0x78
  402d64:	2202      	movs	r2, #2
  402d66:	2b07      	cmp	r3, #7
  402d68:	9427      	str	r4, [sp, #156]	; 0x9c
  402d6a:	9326      	str	r3, [sp, #152]	; 0x98
  402d6c:	e888 0006 	stmia.w	r8, {r1, r2}
  402d70:	f300 83d6 	bgt.w	403520 <_svfprintf_r+0xac4>
  402d74:	f108 0808 	add.w	r8, r8, #8
  402d78:	2d80      	cmp	r5, #128	; 0x80
  402d7a:	f000 8315 	beq.w	4033a8 <_svfprintf_r+0x94c>
  402d7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402d80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402d82:	1a9f      	subs	r7, r3, r2
  402d84:	2f00      	cmp	r7, #0
  402d86:	dd36      	ble.n	402df6 <_svfprintf_r+0x39a>
  402d88:	2f10      	cmp	r7, #16
  402d8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402d8c:	4d8e      	ldr	r5, [pc, #568]	; (402fc8 <_svfprintf_r+0x56c>)
  402d8e:	dd27      	ble.n	402de0 <_svfprintf_r+0x384>
  402d90:	4642      	mov	r2, r8
  402d92:	4621      	mov	r1, r4
  402d94:	46b0      	mov	r8, r6
  402d96:	f04f 0b10 	mov.w	fp, #16
  402d9a:	462e      	mov	r6, r5
  402d9c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  402d9e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  402da0:	e004      	b.n	402dac <_svfprintf_r+0x350>
  402da2:	3f10      	subs	r7, #16
  402da4:	2f10      	cmp	r7, #16
  402da6:	f102 0208 	add.w	r2, r2, #8
  402daa:	dd15      	ble.n	402dd8 <_svfprintf_r+0x37c>
  402dac:	3301      	adds	r3, #1
  402dae:	3110      	adds	r1, #16
  402db0:	2b07      	cmp	r3, #7
  402db2:	9127      	str	r1, [sp, #156]	; 0x9c
  402db4:	9326      	str	r3, [sp, #152]	; 0x98
  402db6:	e882 0840 	stmia.w	r2, {r6, fp}
  402dba:	ddf2      	ble.n	402da2 <_svfprintf_r+0x346>
  402dbc:	aa25      	add	r2, sp, #148	; 0x94
  402dbe:	4629      	mov	r1, r5
  402dc0:	4620      	mov	r0, r4
  402dc2:	f002 ff67 	bl	405c94 <__ssprint_r>
  402dc6:	2800      	cmp	r0, #0
  402dc8:	f47f af1a 	bne.w	402c00 <_svfprintf_r+0x1a4>
  402dcc:	3f10      	subs	r7, #16
  402dce:	2f10      	cmp	r7, #16
  402dd0:	9927      	ldr	r1, [sp, #156]	; 0x9c
  402dd2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402dd4:	464a      	mov	r2, r9
  402dd6:	dce9      	bgt.n	402dac <_svfprintf_r+0x350>
  402dd8:	4635      	mov	r5, r6
  402dda:	460c      	mov	r4, r1
  402ddc:	4646      	mov	r6, r8
  402dde:	4690      	mov	r8, r2
  402de0:	3301      	adds	r3, #1
  402de2:	443c      	add	r4, r7
  402de4:	2b07      	cmp	r3, #7
  402de6:	9427      	str	r4, [sp, #156]	; 0x9c
  402de8:	9326      	str	r3, [sp, #152]	; 0x98
  402dea:	e888 00a0 	stmia.w	r8, {r5, r7}
  402dee:	f300 8381 	bgt.w	4034f4 <_svfprintf_r+0xa98>
  402df2:	f108 0808 	add.w	r8, r8, #8
  402df6:	9b07      	ldr	r3, [sp, #28]
  402df8:	05df      	lsls	r7, r3, #23
  402dfa:	f100 8268 	bmi.w	4032ce <_svfprintf_r+0x872>
  402dfe:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402e00:	990e      	ldr	r1, [sp, #56]	; 0x38
  402e02:	f8c8 6000 	str.w	r6, [r8]
  402e06:	3301      	adds	r3, #1
  402e08:	440c      	add	r4, r1
  402e0a:	2b07      	cmp	r3, #7
  402e0c:	9427      	str	r4, [sp, #156]	; 0x9c
  402e0e:	f8c8 1004 	str.w	r1, [r8, #4]
  402e12:	9326      	str	r3, [sp, #152]	; 0x98
  402e14:	f300 834d 	bgt.w	4034b2 <_svfprintf_r+0xa56>
  402e18:	f108 0808 	add.w	r8, r8, #8
  402e1c:	9b07      	ldr	r3, [sp, #28]
  402e1e:	075b      	lsls	r3, r3, #29
  402e20:	d53a      	bpl.n	402e98 <_svfprintf_r+0x43c>
  402e22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402e24:	9a08      	ldr	r2, [sp, #32]
  402e26:	1a9d      	subs	r5, r3, r2
  402e28:	2d00      	cmp	r5, #0
  402e2a:	dd35      	ble.n	402e98 <_svfprintf_r+0x43c>
  402e2c:	2d10      	cmp	r5, #16
  402e2e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402e30:	dd20      	ble.n	402e74 <_svfprintf_r+0x418>
  402e32:	2610      	movs	r6, #16
  402e34:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  402e36:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  402e3a:	e004      	b.n	402e46 <_svfprintf_r+0x3ea>
  402e3c:	3d10      	subs	r5, #16
  402e3e:	2d10      	cmp	r5, #16
  402e40:	f108 0808 	add.w	r8, r8, #8
  402e44:	dd16      	ble.n	402e74 <_svfprintf_r+0x418>
  402e46:	3301      	adds	r3, #1
  402e48:	4a5e      	ldr	r2, [pc, #376]	; (402fc4 <_svfprintf_r+0x568>)
  402e4a:	9326      	str	r3, [sp, #152]	; 0x98
  402e4c:	3410      	adds	r4, #16
  402e4e:	2b07      	cmp	r3, #7
  402e50:	9427      	str	r4, [sp, #156]	; 0x9c
  402e52:	e888 0044 	stmia.w	r8, {r2, r6}
  402e56:	ddf1      	ble.n	402e3c <_svfprintf_r+0x3e0>
  402e58:	aa25      	add	r2, sp, #148	; 0x94
  402e5a:	4659      	mov	r1, fp
  402e5c:	4638      	mov	r0, r7
  402e5e:	f002 ff19 	bl	405c94 <__ssprint_r>
  402e62:	2800      	cmp	r0, #0
  402e64:	f47f aecc 	bne.w	402c00 <_svfprintf_r+0x1a4>
  402e68:	3d10      	subs	r5, #16
  402e6a:	2d10      	cmp	r5, #16
  402e6c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402e6e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402e70:	46c8      	mov	r8, r9
  402e72:	dce8      	bgt.n	402e46 <_svfprintf_r+0x3ea>
  402e74:	3301      	adds	r3, #1
  402e76:	4a53      	ldr	r2, [pc, #332]	; (402fc4 <_svfprintf_r+0x568>)
  402e78:	9326      	str	r3, [sp, #152]	; 0x98
  402e7a:	442c      	add	r4, r5
  402e7c:	2b07      	cmp	r3, #7
  402e7e:	9427      	str	r4, [sp, #156]	; 0x9c
  402e80:	e888 0024 	stmia.w	r8, {r2, r5}
  402e84:	dd08      	ble.n	402e98 <_svfprintf_r+0x43c>
  402e86:	aa25      	add	r2, sp, #148	; 0x94
  402e88:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402e8a:	980c      	ldr	r0, [sp, #48]	; 0x30
  402e8c:	f002 ff02 	bl	405c94 <__ssprint_r>
  402e90:	2800      	cmp	r0, #0
  402e92:	f47f aeb5 	bne.w	402c00 <_svfprintf_r+0x1a4>
  402e96:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402e9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  402e9c:	9908      	ldr	r1, [sp, #32]
  402e9e:	428a      	cmp	r2, r1
  402ea0:	bfac      	ite	ge
  402ea2:	189b      	addge	r3, r3, r2
  402ea4:	185b      	addlt	r3, r3, r1
  402ea6:	9309      	str	r3, [sp, #36]	; 0x24
  402ea8:	2c00      	cmp	r4, #0
  402eaa:	f040 830d 	bne.w	4034c8 <_svfprintf_r+0xa6c>
  402eae:	2300      	movs	r3, #0
  402eb0:	9326      	str	r3, [sp, #152]	; 0x98
  402eb2:	46c8      	mov	r8, r9
  402eb4:	e5f9      	b.n	402aaa <_svfprintf_r+0x4e>
  402eb6:	9311      	str	r3, [sp, #68]	; 0x44
  402eb8:	f01b 0320 	ands.w	r3, fp, #32
  402ebc:	f040 81e3 	bne.w	403286 <_svfprintf_r+0x82a>
  402ec0:	f01b 0210 	ands.w	r2, fp, #16
  402ec4:	f040 842e 	bne.w	403724 <_svfprintf_r+0xcc8>
  402ec8:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  402ecc:	f000 842a 	beq.w	403724 <_svfprintf_r+0xcc8>
  402ed0:	990f      	ldr	r1, [sp, #60]	; 0x3c
  402ed2:	4613      	mov	r3, r2
  402ed4:	460a      	mov	r2, r1
  402ed6:	3204      	adds	r2, #4
  402ed8:	880c      	ldrh	r4, [r1, #0]
  402eda:	920f      	str	r2, [sp, #60]	; 0x3c
  402edc:	2500      	movs	r5, #0
  402ede:	e6b0      	b.n	402c42 <_svfprintf_r+0x1e6>
  402ee0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402ee2:	9311      	str	r3, [sp, #68]	; 0x44
  402ee4:	6816      	ldr	r6, [r2, #0]
  402ee6:	2400      	movs	r4, #0
  402ee8:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  402eec:	1d15      	adds	r5, r2, #4
  402eee:	2e00      	cmp	r6, #0
  402ef0:	f000 86a7 	beq.w	403c42 <_svfprintf_r+0x11e6>
  402ef4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  402ef6:	1c53      	adds	r3, r2, #1
  402ef8:	f000 8609 	beq.w	403b0e <_svfprintf_r+0x10b2>
  402efc:	4621      	mov	r1, r4
  402efe:	4630      	mov	r0, r6
  402f00:	f002 fac6 	bl	405490 <memchr>
  402f04:	2800      	cmp	r0, #0
  402f06:	f000 86e1 	beq.w	403ccc <_svfprintf_r+0x1270>
  402f0a:	1b83      	subs	r3, r0, r6
  402f0c:	930e      	str	r3, [sp, #56]	; 0x38
  402f0e:	940a      	str	r4, [sp, #40]	; 0x28
  402f10:	950f      	str	r5, [sp, #60]	; 0x3c
  402f12:	f8cd b01c 	str.w	fp, [sp, #28]
  402f16:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  402f1a:	9308      	str	r3, [sp, #32]
  402f1c:	9412      	str	r4, [sp, #72]	; 0x48
  402f1e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  402f22:	e6b3      	b.n	402c8c <_svfprintf_r+0x230>
  402f24:	f89a 3000 	ldrb.w	r3, [sl]
  402f28:	2201      	movs	r2, #1
  402f2a:	212b      	movs	r1, #43	; 0x2b
  402f2c:	e5ee      	b.n	402b0c <_svfprintf_r+0xb0>
  402f2e:	f04b 0b20 	orr.w	fp, fp, #32
  402f32:	f89a 3000 	ldrb.w	r3, [sl]
  402f36:	e5e9      	b.n	402b0c <_svfprintf_r+0xb0>
  402f38:	9311      	str	r3, [sp, #68]	; 0x44
  402f3a:	2a00      	cmp	r2, #0
  402f3c:	f040 8795 	bne.w	403e6a <_svfprintf_r+0x140e>
  402f40:	4b22      	ldr	r3, [pc, #136]	; (402fcc <_svfprintf_r+0x570>)
  402f42:	9318      	str	r3, [sp, #96]	; 0x60
  402f44:	f01b 0f20 	tst.w	fp, #32
  402f48:	f040 8111 	bne.w	40316e <_svfprintf_r+0x712>
  402f4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402f4e:	f01b 0f10 	tst.w	fp, #16
  402f52:	4613      	mov	r3, r2
  402f54:	f040 83e1 	bne.w	40371a <_svfprintf_r+0xcbe>
  402f58:	f01b 0f40 	tst.w	fp, #64	; 0x40
  402f5c:	f000 83dd 	beq.w	40371a <_svfprintf_r+0xcbe>
  402f60:	3304      	adds	r3, #4
  402f62:	8814      	ldrh	r4, [r2, #0]
  402f64:	930f      	str	r3, [sp, #60]	; 0x3c
  402f66:	2500      	movs	r5, #0
  402f68:	f01b 0f01 	tst.w	fp, #1
  402f6c:	f000 810c 	beq.w	403188 <_svfprintf_r+0x72c>
  402f70:	ea54 0305 	orrs.w	r3, r4, r5
  402f74:	f000 8108 	beq.w	403188 <_svfprintf_r+0x72c>
  402f78:	2330      	movs	r3, #48	; 0x30
  402f7a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  402f7e:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  402f82:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  402f86:	f04b 0b02 	orr.w	fp, fp, #2
  402f8a:	2302      	movs	r3, #2
  402f8c:	e659      	b.n	402c42 <_svfprintf_r+0x1e6>
  402f8e:	f89a 3000 	ldrb.w	r3, [sl]
  402f92:	2900      	cmp	r1, #0
  402f94:	f47f adba 	bne.w	402b0c <_svfprintf_r+0xb0>
  402f98:	2201      	movs	r2, #1
  402f9a:	2120      	movs	r1, #32
  402f9c:	e5b6      	b.n	402b0c <_svfprintf_r+0xb0>
  402f9e:	f04b 0b01 	orr.w	fp, fp, #1
  402fa2:	f89a 3000 	ldrb.w	r3, [sl]
  402fa6:	e5b1      	b.n	402b0c <_svfprintf_r+0xb0>
  402fa8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  402faa:	6823      	ldr	r3, [r4, #0]
  402fac:	930d      	str	r3, [sp, #52]	; 0x34
  402fae:	4618      	mov	r0, r3
  402fb0:	2800      	cmp	r0, #0
  402fb2:	4623      	mov	r3, r4
  402fb4:	f103 0304 	add.w	r3, r3, #4
  402fb8:	f6ff ae0a 	blt.w	402bd0 <_svfprintf_r+0x174>
  402fbc:	930f      	str	r3, [sp, #60]	; 0x3c
  402fbe:	f89a 3000 	ldrb.w	r3, [sl]
  402fc2:	e5a3      	b.n	402b0c <_svfprintf_r+0xb0>
  402fc4:	00406fd8 	.word	0x00406fd8
  402fc8:	00406fe8 	.word	0x00406fe8
  402fcc:	00406fb8 	.word	0x00406fb8
  402fd0:	f04b 0b10 	orr.w	fp, fp, #16
  402fd4:	f01b 0f20 	tst.w	fp, #32
  402fd8:	9311      	str	r3, [sp, #68]	; 0x44
  402fda:	f43f ae23 	beq.w	402c24 <_svfprintf_r+0x1c8>
  402fde:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  402fe0:	3507      	adds	r5, #7
  402fe2:	f025 0307 	bic.w	r3, r5, #7
  402fe6:	f103 0208 	add.w	r2, r3, #8
  402fea:	e9d3 4500 	ldrd	r4, r5, [r3]
  402fee:	920f      	str	r2, [sp, #60]	; 0x3c
  402ff0:	2301      	movs	r3, #1
  402ff2:	e626      	b.n	402c42 <_svfprintf_r+0x1e6>
  402ff4:	f89a 3000 	ldrb.w	r3, [sl]
  402ff8:	2b2a      	cmp	r3, #42	; 0x2a
  402ffa:	f10a 0401 	add.w	r4, sl, #1
  402ffe:	f000 8727 	beq.w	403e50 <_svfprintf_r+0x13f4>
  403002:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403006:	2809      	cmp	r0, #9
  403008:	46a2      	mov	sl, r4
  40300a:	f200 86ad 	bhi.w	403d68 <_svfprintf_r+0x130c>
  40300e:	2300      	movs	r3, #0
  403010:	461c      	mov	r4, r3
  403012:	f81a 3b01 	ldrb.w	r3, [sl], #1
  403016:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40301a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40301e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403022:	2809      	cmp	r0, #9
  403024:	d9f5      	bls.n	403012 <_svfprintf_r+0x5b6>
  403026:	940a      	str	r4, [sp, #40]	; 0x28
  403028:	e572      	b.n	402b10 <_svfprintf_r+0xb4>
  40302a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  40302e:	f89a 3000 	ldrb.w	r3, [sl]
  403032:	e56b      	b.n	402b0c <_svfprintf_r+0xb0>
  403034:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  403038:	f89a 3000 	ldrb.w	r3, [sl]
  40303c:	e566      	b.n	402b0c <_svfprintf_r+0xb0>
  40303e:	f89a 3000 	ldrb.w	r3, [sl]
  403042:	2b6c      	cmp	r3, #108	; 0x6c
  403044:	bf03      	ittte	eq
  403046:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  40304a:	f04b 0b20 	orreq.w	fp, fp, #32
  40304e:	f10a 0a01 	addeq.w	sl, sl, #1
  403052:	f04b 0b10 	orrne.w	fp, fp, #16
  403056:	e559      	b.n	402b0c <_svfprintf_r+0xb0>
  403058:	2a00      	cmp	r2, #0
  40305a:	f040 8711 	bne.w	403e80 <_svfprintf_r+0x1424>
  40305e:	f01b 0f20 	tst.w	fp, #32
  403062:	f040 84f9 	bne.w	403a58 <_svfprintf_r+0xffc>
  403066:	f01b 0f10 	tst.w	fp, #16
  40306a:	f040 84ac 	bne.w	4039c6 <_svfprintf_r+0xf6a>
  40306e:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403072:	f000 84a8 	beq.w	4039c6 <_svfprintf_r+0xf6a>
  403076:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403078:	6813      	ldr	r3, [r2, #0]
  40307a:	3204      	adds	r2, #4
  40307c:	920f      	str	r2, [sp, #60]	; 0x3c
  40307e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  403082:	801a      	strh	r2, [r3, #0]
  403084:	e511      	b.n	402aaa <_svfprintf_r+0x4e>
  403086:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403088:	4bb3      	ldr	r3, [pc, #716]	; (403358 <_svfprintf_r+0x8fc>)
  40308a:	680c      	ldr	r4, [r1, #0]
  40308c:	9318      	str	r3, [sp, #96]	; 0x60
  40308e:	2230      	movs	r2, #48	; 0x30
  403090:	2378      	movs	r3, #120	; 0x78
  403092:	3104      	adds	r1, #4
  403094:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  403098:	9311      	str	r3, [sp, #68]	; 0x44
  40309a:	f04b 0b02 	orr.w	fp, fp, #2
  40309e:	910f      	str	r1, [sp, #60]	; 0x3c
  4030a0:	2500      	movs	r5, #0
  4030a2:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  4030a6:	2302      	movs	r3, #2
  4030a8:	e5cb      	b.n	402c42 <_svfprintf_r+0x1e6>
  4030aa:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4030ac:	9311      	str	r3, [sp, #68]	; 0x44
  4030ae:	680a      	ldr	r2, [r1, #0]
  4030b0:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4030b4:	2300      	movs	r3, #0
  4030b6:	460a      	mov	r2, r1
  4030b8:	461f      	mov	r7, r3
  4030ba:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4030be:	3204      	adds	r2, #4
  4030c0:	2301      	movs	r3, #1
  4030c2:	9308      	str	r3, [sp, #32]
  4030c4:	f8cd b01c 	str.w	fp, [sp, #28]
  4030c8:	970a      	str	r7, [sp, #40]	; 0x28
  4030ca:	9712      	str	r7, [sp, #72]	; 0x48
  4030cc:	920f      	str	r2, [sp, #60]	; 0x3c
  4030ce:	930e      	str	r3, [sp, #56]	; 0x38
  4030d0:	ae28      	add	r6, sp, #160	; 0xa0
  4030d2:	e5df      	b.n	402c94 <_svfprintf_r+0x238>
  4030d4:	9311      	str	r3, [sp, #68]	; 0x44
  4030d6:	2a00      	cmp	r2, #0
  4030d8:	f040 86ea 	bne.w	403eb0 <_svfprintf_r+0x1454>
  4030dc:	f01b 0f20 	tst.w	fp, #32
  4030e0:	d15d      	bne.n	40319e <_svfprintf_r+0x742>
  4030e2:	f01b 0f10 	tst.w	fp, #16
  4030e6:	f040 8308 	bne.w	4036fa <_svfprintf_r+0xc9e>
  4030ea:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4030ee:	f000 8304 	beq.w	4036fa <_svfprintf_r+0xc9e>
  4030f2:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4030f4:	f9b1 4000 	ldrsh.w	r4, [r1]
  4030f8:	3104      	adds	r1, #4
  4030fa:	17e5      	asrs	r5, r4, #31
  4030fc:	4622      	mov	r2, r4
  4030fe:	462b      	mov	r3, r5
  403100:	910f      	str	r1, [sp, #60]	; 0x3c
  403102:	2a00      	cmp	r2, #0
  403104:	f173 0300 	sbcs.w	r3, r3, #0
  403108:	db58      	blt.n	4031bc <_svfprintf_r+0x760>
  40310a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40310c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403110:	1c4a      	adds	r2, r1, #1
  403112:	f04f 0301 	mov.w	r3, #1
  403116:	f47f ad9b 	bne.w	402c50 <_svfprintf_r+0x1f4>
  40311a:	ea54 0205 	orrs.w	r2, r4, r5
  40311e:	f000 81df 	beq.w	4034e0 <_svfprintf_r+0xa84>
  403122:	f8cd b01c 	str.w	fp, [sp, #28]
  403126:	2b01      	cmp	r3, #1
  403128:	f000 827b 	beq.w	403622 <_svfprintf_r+0xbc6>
  40312c:	2b02      	cmp	r3, #2
  40312e:	f040 8206 	bne.w	40353e <_svfprintf_r+0xae2>
  403132:	9818      	ldr	r0, [sp, #96]	; 0x60
  403134:	464e      	mov	r6, r9
  403136:	0923      	lsrs	r3, r4, #4
  403138:	f004 010f 	and.w	r1, r4, #15
  40313c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  403140:	092a      	lsrs	r2, r5, #4
  403142:	461c      	mov	r4, r3
  403144:	4615      	mov	r5, r2
  403146:	5c43      	ldrb	r3, [r0, r1]
  403148:	f806 3d01 	strb.w	r3, [r6, #-1]!
  40314c:	ea54 0305 	orrs.w	r3, r4, r5
  403150:	d1f1      	bne.n	403136 <_svfprintf_r+0x6da>
  403152:	eba9 0306 	sub.w	r3, r9, r6
  403156:	930e      	str	r3, [sp, #56]	; 0x38
  403158:	e590      	b.n	402c7c <_svfprintf_r+0x220>
  40315a:	9311      	str	r3, [sp, #68]	; 0x44
  40315c:	2a00      	cmp	r2, #0
  40315e:	f040 86a3 	bne.w	403ea8 <_svfprintf_r+0x144c>
  403162:	4b7e      	ldr	r3, [pc, #504]	; (40335c <_svfprintf_r+0x900>)
  403164:	9318      	str	r3, [sp, #96]	; 0x60
  403166:	f01b 0f20 	tst.w	fp, #32
  40316a:	f43f aeef 	beq.w	402f4c <_svfprintf_r+0x4f0>
  40316e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403170:	3507      	adds	r5, #7
  403172:	f025 0307 	bic.w	r3, r5, #7
  403176:	f103 0208 	add.w	r2, r3, #8
  40317a:	f01b 0f01 	tst.w	fp, #1
  40317e:	920f      	str	r2, [sp, #60]	; 0x3c
  403180:	e9d3 4500 	ldrd	r4, r5, [r3]
  403184:	f47f aef4 	bne.w	402f70 <_svfprintf_r+0x514>
  403188:	2302      	movs	r3, #2
  40318a:	e55a      	b.n	402c42 <_svfprintf_r+0x1e6>
  40318c:	9311      	str	r3, [sp, #68]	; 0x44
  40318e:	2a00      	cmp	r2, #0
  403190:	f040 8686 	bne.w	403ea0 <_svfprintf_r+0x1444>
  403194:	f04b 0b10 	orr.w	fp, fp, #16
  403198:	f01b 0f20 	tst.w	fp, #32
  40319c:	d0a1      	beq.n	4030e2 <_svfprintf_r+0x686>
  40319e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4031a0:	3507      	adds	r5, #7
  4031a2:	f025 0507 	bic.w	r5, r5, #7
  4031a6:	e9d5 2300 	ldrd	r2, r3, [r5]
  4031aa:	2a00      	cmp	r2, #0
  4031ac:	f105 0108 	add.w	r1, r5, #8
  4031b0:	461d      	mov	r5, r3
  4031b2:	f173 0300 	sbcs.w	r3, r3, #0
  4031b6:	910f      	str	r1, [sp, #60]	; 0x3c
  4031b8:	4614      	mov	r4, r2
  4031ba:	daa6      	bge.n	40310a <_svfprintf_r+0x6ae>
  4031bc:	272d      	movs	r7, #45	; 0x2d
  4031be:	4264      	negs	r4, r4
  4031c0:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  4031c4:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4031c8:	2301      	movs	r3, #1
  4031ca:	e53d      	b.n	402c48 <_svfprintf_r+0x1ec>
  4031cc:	9311      	str	r3, [sp, #68]	; 0x44
  4031ce:	2a00      	cmp	r2, #0
  4031d0:	f040 8662 	bne.w	403e98 <_svfprintf_r+0x143c>
  4031d4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4031d6:	3507      	adds	r5, #7
  4031d8:	f025 0307 	bic.w	r3, r5, #7
  4031dc:	f103 0208 	add.w	r2, r3, #8
  4031e0:	920f      	str	r2, [sp, #60]	; 0x3c
  4031e2:	681a      	ldr	r2, [r3, #0]
  4031e4:	9215      	str	r2, [sp, #84]	; 0x54
  4031e6:	685b      	ldr	r3, [r3, #4]
  4031e8:	9314      	str	r3, [sp, #80]	; 0x50
  4031ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4031ec:	9d15      	ldr	r5, [sp, #84]	; 0x54
  4031ee:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  4031f2:	4628      	mov	r0, r5
  4031f4:	4621      	mov	r1, r4
  4031f6:	f04f 32ff 	mov.w	r2, #4294967295
  4031fa:	4b59      	ldr	r3, [pc, #356]	; (403360 <_svfprintf_r+0x904>)
  4031fc:	f003 fe10 	bl	406e20 <__aeabi_dcmpun>
  403200:	2800      	cmp	r0, #0
  403202:	f040 834a 	bne.w	40389a <_svfprintf_r+0xe3e>
  403206:	4628      	mov	r0, r5
  403208:	4621      	mov	r1, r4
  40320a:	f04f 32ff 	mov.w	r2, #4294967295
  40320e:	4b54      	ldr	r3, [pc, #336]	; (403360 <_svfprintf_r+0x904>)
  403210:	f003 fde8 	bl	406de4 <__aeabi_dcmple>
  403214:	2800      	cmp	r0, #0
  403216:	f040 8340 	bne.w	40389a <_svfprintf_r+0xe3e>
  40321a:	a815      	add	r0, sp, #84	; 0x54
  40321c:	c80d      	ldmia	r0, {r0, r2, r3}
  40321e:	9914      	ldr	r1, [sp, #80]	; 0x50
  403220:	f003 fdd6 	bl	406dd0 <__aeabi_dcmplt>
  403224:	2800      	cmp	r0, #0
  403226:	f040 8530 	bne.w	403c8a <_svfprintf_r+0x122e>
  40322a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40322e:	4e4d      	ldr	r6, [pc, #308]	; (403364 <_svfprintf_r+0x908>)
  403230:	4b4d      	ldr	r3, [pc, #308]	; (403368 <_svfprintf_r+0x90c>)
  403232:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  403236:	9007      	str	r0, [sp, #28]
  403238:	9811      	ldr	r0, [sp, #68]	; 0x44
  40323a:	2203      	movs	r2, #3
  40323c:	2100      	movs	r1, #0
  40323e:	9208      	str	r2, [sp, #32]
  403240:	910a      	str	r1, [sp, #40]	; 0x28
  403242:	2847      	cmp	r0, #71	; 0x47
  403244:	bfd8      	it	le
  403246:	461e      	movle	r6, r3
  403248:	920e      	str	r2, [sp, #56]	; 0x38
  40324a:	9112      	str	r1, [sp, #72]	; 0x48
  40324c:	e51e      	b.n	402c8c <_svfprintf_r+0x230>
  40324e:	f04b 0b08 	orr.w	fp, fp, #8
  403252:	f89a 3000 	ldrb.w	r3, [sl]
  403256:	e459      	b.n	402b0c <_svfprintf_r+0xb0>
  403258:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40325c:	2300      	movs	r3, #0
  40325e:	461c      	mov	r4, r3
  403260:	f81a 3b01 	ldrb.w	r3, [sl], #1
  403264:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403268:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40326c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403270:	2809      	cmp	r0, #9
  403272:	d9f5      	bls.n	403260 <_svfprintf_r+0x804>
  403274:	940d      	str	r4, [sp, #52]	; 0x34
  403276:	e44b      	b.n	402b10 <_svfprintf_r+0xb4>
  403278:	f04b 0b10 	orr.w	fp, fp, #16
  40327c:	9311      	str	r3, [sp, #68]	; 0x44
  40327e:	f01b 0320 	ands.w	r3, fp, #32
  403282:	f43f ae1d 	beq.w	402ec0 <_svfprintf_r+0x464>
  403286:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403288:	3507      	adds	r5, #7
  40328a:	f025 0307 	bic.w	r3, r5, #7
  40328e:	f103 0208 	add.w	r2, r3, #8
  403292:	e9d3 4500 	ldrd	r4, r5, [r3]
  403296:	920f      	str	r2, [sp, #60]	; 0x3c
  403298:	2300      	movs	r3, #0
  40329a:	e4d2      	b.n	402c42 <_svfprintf_r+0x1e6>
  40329c:	9311      	str	r3, [sp, #68]	; 0x44
  40329e:	2a00      	cmp	r2, #0
  4032a0:	f040 85e7 	bne.w	403e72 <_svfprintf_r+0x1416>
  4032a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4032a6:	2a00      	cmp	r2, #0
  4032a8:	f43f aca3 	beq.w	402bf2 <_svfprintf_r+0x196>
  4032ac:	2300      	movs	r3, #0
  4032ae:	2101      	movs	r1, #1
  4032b0:	461f      	mov	r7, r3
  4032b2:	9108      	str	r1, [sp, #32]
  4032b4:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4032b8:	f8cd b01c 	str.w	fp, [sp, #28]
  4032bc:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4032c0:	930a      	str	r3, [sp, #40]	; 0x28
  4032c2:	9312      	str	r3, [sp, #72]	; 0x48
  4032c4:	910e      	str	r1, [sp, #56]	; 0x38
  4032c6:	ae28      	add	r6, sp, #160	; 0xa0
  4032c8:	e4e4      	b.n	402c94 <_svfprintf_r+0x238>
  4032ca:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4032cc:	e534      	b.n	402d38 <_svfprintf_r+0x2dc>
  4032ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4032d0:	2b65      	cmp	r3, #101	; 0x65
  4032d2:	f340 80a7 	ble.w	403424 <_svfprintf_r+0x9c8>
  4032d6:	a815      	add	r0, sp, #84	; 0x54
  4032d8:	c80d      	ldmia	r0, {r0, r2, r3}
  4032da:	9914      	ldr	r1, [sp, #80]	; 0x50
  4032dc:	f003 fd6e 	bl	406dbc <__aeabi_dcmpeq>
  4032e0:	2800      	cmp	r0, #0
  4032e2:	f000 8150 	beq.w	403586 <_svfprintf_r+0xb2a>
  4032e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4032e8:	4a20      	ldr	r2, [pc, #128]	; (40336c <_svfprintf_r+0x910>)
  4032ea:	f8c8 2000 	str.w	r2, [r8]
  4032ee:	3301      	adds	r3, #1
  4032f0:	3401      	adds	r4, #1
  4032f2:	2201      	movs	r2, #1
  4032f4:	2b07      	cmp	r3, #7
  4032f6:	9427      	str	r4, [sp, #156]	; 0x9c
  4032f8:	9326      	str	r3, [sp, #152]	; 0x98
  4032fa:	f8c8 2004 	str.w	r2, [r8, #4]
  4032fe:	f300 836a 	bgt.w	4039d6 <_svfprintf_r+0xf7a>
  403302:	f108 0808 	add.w	r8, r8, #8
  403306:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403308:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40330a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40330c:	4293      	cmp	r3, r2
  40330e:	db03      	blt.n	403318 <_svfprintf_r+0x8bc>
  403310:	9b07      	ldr	r3, [sp, #28]
  403312:	07dd      	lsls	r5, r3, #31
  403314:	f57f ad82 	bpl.w	402e1c <_svfprintf_r+0x3c0>
  403318:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40331a:	9919      	ldr	r1, [sp, #100]	; 0x64
  40331c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40331e:	f8c8 2000 	str.w	r2, [r8]
  403322:	3301      	adds	r3, #1
  403324:	440c      	add	r4, r1
  403326:	2b07      	cmp	r3, #7
  403328:	f8c8 1004 	str.w	r1, [r8, #4]
  40332c:	9427      	str	r4, [sp, #156]	; 0x9c
  40332e:	9326      	str	r3, [sp, #152]	; 0x98
  403330:	f300 839e 	bgt.w	403a70 <_svfprintf_r+0x1014>
  403334:	f108 0808 	add.w	r8, r8, #8
  403338:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40333a:	1e5e      	subs	r6, r3, #1
  40333c:	2e00      	cmp	r6, #0
  40333e:	f77f ad6d 	ble.w	402e1c <_svfprintf_r+0x3c0>
  403342:	2e10      	cmp	r6, #16
  403344:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403346:	4d0a      	ldr	r5, [pc, #40]	; (403370 <_svfprintf_r+0x914>)
  403348:	f340 81f5 	ble.w	403736 <_svfprintf_r+0xcda>
  40334c:	4622      	mov	r2, r4
  40334e:	2710      	movs	r7, #16
  403350:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  403354:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  403356:	e013      	b.n	403380 <_svfprintf_r+0x924>
  403358:	00406fb8 	.word	0x00406fb8
  40335c:	00406fa4 	.word	0x00406fa4
  403360:	7fefffff 	.word	0x7fefffff
  403364:	00406f98 	.word	0x00406f98
  403368:	00406f94 	.word	0x00406f94
  40336c:	00406fd4 	.word	0x00406fd4
  403370:	00406fe8 	.word	0x00406fe8
  403374:	f108 0808 	add.w	r8, r8, #8
  403378:	3e10      	subs	r6, #16
  40337a:	2e10      	cmp	r6, #16
  40337c:	f340 81da 	ble.w	403734 <_svfprintf_r+0xcd8>
  403380:	3301      	adds	r3, #1
  403382:	3210      	adds	r2, #16
  403384:	2b07      	cmp	r3, #7
  403386:	9227      	str	r2, [sp, #156]	; 0x9c
  403388:	9326      	str	r3, [sp, #152]	; 0x98
  40338a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40338e:	ddf1      	ble.n	403374 <_svfprintf_r+0x918>
  403390:	aa25      	add	r2, sp, #148	; 0x94
  403392:	4621      	mov	r1, r4
  403394:	4658      	mov	r0, fp
  403396:	f002 fc7d 	bl	405c94 <__ssprint_r>
  40339a:	2800      	cmp	r0, #0
  40339c:	f47f ac30 	bne.w	402c00 <_svfprintf_r+0x1a4>
  4033a0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4033a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4033a4:	46c8      	mov	r8, r9
  4033a6:	e7e7      	b.n	403378 <_svfprintf_r+0x91c>
  4033a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4033aa:	9a08      	ldr	r2, [sp, #32]
  4033ac:	1a9f      	subs	r7, r3, r2
  4033ae:	2f00      	cmp	r7, #0
  4033b0:	f77f ace5 	ble.w	402d7e <_svfprintf_r+0x322>
  4033b4:	2f10      	cmp	r7, #16
  4033b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4033b8:	4db6      	ldr	r5, [pc, #728]	; (403694 <_svfprintf_r+0xc38>)
  4033ba:	dd27      	ble.n	40340c <_svfprintf_r+0x9b0>
  4033bc:	4642      	mov	r2, r8
  4033be:	4621      	mov	r1, r4
  4033c0:	46b0      	mov	r8, r6
  4033c2:	f04f 0b10 	mov.w	fp, #16
  4033c6:	462e      	mov	r6, r5
  4033c8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4033ca:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4033cc:	e004      	b.n	4033d8 <_svfprintf_r+0x97c>
  4033ce:	3f10      	subs	r7, #16
  4033d0:	2f10      	cmp	r7, #16
  4033d2:	f102 0208 	add.w	r2, r2, #8
  4033d6:	dd15      	ble.n	403404 <_svfprintf_r+0x9a8>
  4033d8:	3301      	adds	r3, #1
  4033da:	3110      	adds	r1, #16
  4033dc:	2b07      	cmp	r3, #7
  4033de:	9127      	str	r1, [sp, #156]	; 0x9c
  4033e0:	9326      	str	r3, [sp, #152]	; 0x98
  4033e2:	e882 0840 	stmia.w	r2, {r6, fp}
  4033e6:	ddf2      	ble.n	4033ce <_svfprintf_r+0x972>
  4033e8:	aa25      	add	r2, sp, #148	; 0x94
  4033ea:	4629      	mov	r1, r5
  4033ec:	4620      	mov	r0, r4
  4033ee:	f002 fc51 	bl	405c94 <__ssprint_r>
  4033f2:	2800      	cmp	r0, #0
  4033f4:	f47f ac04 	bne.w	402c00 <_svfprintf_r+0x1a4>
  4033f8:	3f10      	subs	r7, #16
  4033fa:	2f10      	cmp	r7, #16
  4033fc:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4033fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403400:	464a      	mov	r2, r9
  403402:	dce9      	bgt.n	4033d8 <_svfprintf_r+0x97c>
  403404:	4635      	mov	r5, r6
  403406:	460c      	mov	r4, r1
  403408:	4646      	mov	r6, r8
  40340a:	4690      	mov	r8, r2
  40340c:	3301      	adds	r3, #1
  40340e:	443c      	add	r4, r7
  403410:	2b07      	cmp	r3, #7
  403412:	9427      	str	r4, [sp, #156]	; 0x9c
  403414:	9326      	str	r3, [sp, #152]	; 0x98
  403416:	e888 00a0 	stmia.w	r8, {r5, r7}
  40341a:	f300 8232 	bgt.w	403882 <_svfprintf_r+0xe26>
  40341e:	f108 0808 	add.w	r8, r8, #8
  403422:	e4ac      	b.n	402d7e <_svfprintf_r+0x322>
  403424:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403426:	9f26      	ldr	r7, [sp, #152]	; 0x98
  403428:	2b01      	cmp	r3, #1
  40342a:	f340 81fe 	ble.w	40382a <_svfprintf_r+0xdce>
  40342e:	3701      	adds	r7, #1
  403430:	3401      	adds	r4, #1
  403432:	2301      	movs	r3, #1
  403434:	2f07      	cmp	r7, #7
  403436:	9427      	str	r4, [sp, #156]	; 0x9c
  403438:	9726      	str	r7, [sp, #152]	; 0x98
  40343a:	f8c8 6000 	str.w	r6, [r8]
  40343e:	f8c8 3004 	str.w	r3, [r8, #4]
  403442:	f300 8203 	bgt.w	40384c <_svfprintf_r+0xdf0>
  403446:	f108 0808 	add.w	r8, r8, #8
  40344a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40344c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40344e:	f8c8 3000 	str.w	r3, [r8]
  403452:	3701      	adds	r7, #1
  403454:	4414      	add	r4, r2
  403456:	2f07      	cmp	r7, #7
  403458:	9427      	str	r4, [sp, #156]	; 0x9c
  40345a:	9726      	str	r7, [sp, #152]	; 0x98
  40345c:	f8c8 2004 	str.w	r2, [r8, #4]
  403460:	f300 8200 	bgt.w	403864 <_svfprintf_r+0xe08>
  403464:	f108 0808 	add.w	r8, r8, #8
  403468:	a815      	add	r0, sp, #84	; 0x54
  40346a:	c80d      	ldmia	r0, {r0, r2, r3}
  40346c:	9914      	ldr	r1, [sp, #80]	; 0x50
  40346e:	f003 fca5 	bl	406dbc <__aeabi_dcmpeq>
  403472:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403474:	2800      	cmp	r0, #0
  403476:	f040 8101 	bne.w	40367c <_svfprintf_r+0xc20>
  40347a:	3b01      	subs	r3, #1
  40347c:	3701      	adds	r7, #1
  40347e:	3601      	adds	r6, #1
  403480:	441c      	add	r4, r3
  403482:	2f07      	cmp	r7, #7
  403484:	9726      	str	r7, [sp, #152]	; 0x98
  403486:	9427      	str	r4, [sp, #156]	; 0x9c
  403488:	f8c8 6000 	str.w	r6, [r8]
  40348c:	f8c8 3004 	str.w	r3, [r8, #4]
  403490:	f300 8127 	bgt.w	4036e2 <_svfprintf_r+0xc86>
  403494:	f108 0808 	add.w	r8, r8, #8
  403498:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  40349a:	f8c8 2004 	str.w	r2, [r8, #4]
  40349e:	3701      	adds	r7, #1
  4034a0:	4414      	add	r4, r2
  4034a2:	ab21      	add	r3, sp, #132	; 0x84
  4034a4:	2f07      	cmp	r7, #7
  4034a6:	9427      	str	r4, [sp, #156]	; 0x9c
  4034a8:	9726      	str	r7, [sp, #152]	; 0x98
  4034aa:	f8c8 3000 	str.w	r3, [r8]
  4034ae:	f77f acb3 	ble.w	402e18 <_svfprintf_r+0x3bc>
  4034b2:	aa25      	add	r2, sp, #148	; 0x94
  4034b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4034b6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4034b8:	f002 fbec 	bl	405c94 <__ssprint_r>
  4034bc:	2800      	cmp	r0, #0
  4034be:	f47f ab9f 	bne.w	402c00 <_svfprintf_r+0x1a4>
  4034c2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4034c4:	46c8      	mov	r8, r9
  4034c6:	e4a9      	b.n	402e1c <_svfprintf_r+0x3c0>
  4034c8:	aa25      	add	r2, sp, #148	; 0x94
  4034ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4034cc:	980c      	ldr	r0, [sp, #48]	; 0x30
  4034ce:	f002 fbe1 	bl	405c94 <__ssprint_r>
  4034d2:	2800      	cmp	r0, #0
  4034d4:	f43f aceb 	beq.w	402eae <_svfprintf_r+0x452>
  4034d8:	f7ff bb92 	b.w	402c00 <_svfprintf_r+0x1a4>
  4034dc:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4034e0:	2b01      	cmp	r3, #1
  4034e2:	f000 8134 	beq.w	40374e <_svfprintf_r+0xcf2>
  4034e6:	2b02      	cmp	r3, #2
  4034e8:	d125      	bne.n	403536 <_svfprintf_r+0xada>
  4034ea:	f8cd b01c 	str.w	fp, [sp, #28]
  4034ee:	2400      	movs	r4, #0
  4034f0:	2500      	movs	r5, #0
  4034f2:	e61e      	b.n	403132 <_svfprintf_r+0x6d6>
  4034f4:	aa25      	add	r2, sp, #148	; 0x94
  4034f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4034f8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4034fa:	f002 fbcb 	bl	405c94 <__ssprint_r>
  4034fe:	2800      	cmp	r0, #0
  403500:	f47f ab7e 	bne.w	402c00 <_svfprintf_r+0x1a4>
  403504:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403506:	46c8      	mov	r8, r9
  403508:	e475      	b.n	402df6 <_svfprintf_r+0x39a>
  40350a:	aa25      	add	r2, sp, #148	; 0x94
  40350c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40350e:	980c      	ldr	r0, [sp, #48]	; 0x30
  403510:	f002 fbc0 	bl	405c94 <__ssprint_r>
  403514:	2800      	cmp	r0, #0
  403516:	f47f ab73 	bne.w	402c00 <_svfprintf_r+0x1a4>
  40351a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40351c:	46c8      	mov	r8, r9
  40351e:	e41b      	b.n	402d58 <_svfprintf_r+0x2fc>
  403520:	aa25      	add	r2, sp, #148	; 0x94
  403522:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403524:	980c      	ldr	r0, [sp, #48]	; 0x30
  403526:	f002 fbb5 	bl	405c94 <__ssprint_r>
  40352a:	2800      	cmp	r0, #0
  40352c:	f47f ab68 	bne.w	402c00 <_svfprintf_r+0x1a4>
  403530:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403532:	46c8      	mov	r8, r9
  403534:	e420      	b.n	402d78 <_svfprintf_r+0x31c>
  403536:	f8cd b01c 	str.w	fp, [sp, #28]
  40353a:	2400      	movs	r4, #0
  40353c:	2500      	movs	r5, #0
  40353e:	4649      	mov	r1, r9
  403540:	e000      	b.n	403544 <_svfprintf_r+0xae8>
  403542:	4631      	mov	r1, r6
  403544:	08e2      	lsrs	r2, r4, #3
  403546:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40354a:	08e8      	lsrs	r0, r5, #3
  40354c:	f004 0307 	and.w	r3, r4, #7
  403550:	4605      	mov	r5, r0
  403552:	4614      	mov	r4, r2
  403554:	3330      	adds	r3, #48	; 0x30
  403556:	ea54 0205 	orrs.w	r2, r4, r5
  40355a:	f801 3c01 	strb.w	r3, [r1, #-1]
  40355e:	f101 36ff 	add.w	r6, r1, #4294967295
  403562:	d1ee      	bne.n	403542 <_svfprintf_r+0xae6>
  403564:	9a07      	ldr	r2, [sp, #28]
  403566:	07d2      	lsls	r2, r2, #31
  403568:	f57f adf3 	bpl.w	403152 <_svfprintf_r+0x6f6>
  40356c:	2b30      	cmp	r3, #48	; 0x30
  40356e:	f43f adf0 	beq.w	403152 <_svfprintf_r+0x6f6>
  403572:	3902      	subs	r1, #2
  403574:	2330      	movs	r3, #48	; 0x30
  403576:	f806 3c01 	strb.w	r3, [r6, #-1]
  40357a:	eba9 0301 	sub.w	r3, r9, r1
  40357e:	930e      	str	r3, [sp, #56]	; 0x38
  403580:	460e      	mov	r6, r1
  403582:	f7ff bb7b 	b.w	402c7c <_svfprintf_r+0x220>
  403586:	991f      	ldr	r1, [sp, #124]	; 0x7c
  403588:	2900      	cmp	r1, #0
  40358a:	f340 822e 	ble.w	4039ea <_svfprintf_r+0xf8e>
  40358e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403590:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  403592:	4293      	cmp	r3, r2
  403594:	bfa8      	it	ge
  403596:	4613      	movge	r3, r2
  403598:	2b00      	cmp	r3, #0
  40359a:	461f      	mov	r7, r3
  40359c:	dd0d      	ble.n	4035ba <_svfprintf_r+0xb5e>
  40359e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4035a0:	f8c8 6000 	str.w	r6, [r8]
  4035a4:	3301      	adds	r3, #1
  4035a6:	443c      	add	r4, r7
  4035a8:	2b07      	cmp	r3, #7
  4035aa:	9427      	str	r4, [sp, #156]	; 0x9c
  4035ac:	f8c8 7004 	str.w	r7, [r8, #4]
  4035b0:	9326      	str	r3, [sp, #152]	; 0x98
  4035b2:	f300 831f 	bgt.w	403bf4 <_svfprintf_r+0x1198>
  4035b6:	f108 0808 	add.w	r8, r8, #8
  4035ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4035bc:	2f00      	cmp	r7, #0
  4035be:	bfa8      	it	ge
  4035c0:	1bdb      	subge	r3, r3, r7
  4035c2:	2b00      	cmp	r3, #0
  4035c4:	461f      	mov	r7, r3
  4035c6:	f340 80d6 	ble.w	403776 <_svfprintf_r+0xd1a>
  4035ca:	2f10      	cmp	r7, #16
  4035cc:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4035ce:	4d31      	ldr	r5, [pc, #196]	; (403694 <_svfprintf_r+0xc38>)
  4035d0:	f340 81ed 	ble.w	4039ae <_svfprintf_r+0xf52>
  4035d4:	4642      	mov	r2, r8
  4035d6:	4621      	mov	r1, r4
  4035d8:	46b0      	mov	r8, r6
  4035da:	f04f 0b10 	mov.w	fp, #16
  4035de:	462e      	mov	r6, r5
  4035e0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4035e2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4035e4:	e004      	b.n	4035f0 <_svfprintf_r+0xb94>
  4035e6:	3208      	adds	r2, #8
  4035e8:	3f10      	subs	r7, #16
  4035ea:	2f10      	cmp	r7, #16
  4035ec:	f340 81db 	ble.w	4039a6 <_svfprintf_r+0xf4a>
  4035f0:	3301      	adds	r3, #1
  4035f2:	3110      	adds	r1, #16
  4035f4:	2b07      	cmp	r3, #7
  4035f6:	9127      	str	r1, [sp, #156]	; 0x9c
  4035f8:	9326      	str	r3, [sp, #152]	; 0x98
  4035fa:	e882 0840 	stmia.w	r2, {r6, fp}
  4035fe:	ddf2      	ble.n	4035e6 <_svfprintf_r+0xb8a>
  403600:	aa25      	add	r2, sp, #148	; 0x94
  403602:	4629      	mov	r1, r5
  403604:	4620      	mov	r0, r4
  403606:	f002 fb45 	bl	405c94 <__ssprint_r>
  40360a:	2800      	cmp	r0, #0
  40360c:	f47f aaf8 	bne.w	402c00 <_svfprintf_r+0x1a4>
  403610:	9927      	ldr	r1, [sp, #156]	; 0x9c
  403612:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403614:	464a      	mov	r2, r9
  403616:	e7e7      	b.n	4035e8 <_svfprintf_r+0xb8c>
  403618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40361a:	930e      	str	r3, [sp, #56]	; 0x38
  40361c:	464e      	mov	r6, r9
  40361e:	f7ff bb2d 	b.w	402c7c <_svfprintf_r+0x220>
  403622:	2d00      	cmp	r5, #0
  403624:	bf08      	it	eq
  403626:	2c0a      	cmpeq	r4, #10
  403628:	f0c0 808f 	bcc.w	40374a <_svfprintf_r+0xcee>
  40362c:	464e      	mov	r6, r9
  40362e:	4620      	mov	r0, r4
  403630:	4629      	mov	r1, r5
  403632:	220a      	movs	r2, #10
  403634:	2300      	movs	r3, #0
  403636:	f7fe ff57 	bl	4024e8 <__aeabi_uldivmod>
  40363a:	3230      	adds	r2, #48	; 0x30
  40363c:	f806 2d01 	strb.w	r2, [r6, #-1]!
  403640:	4620      	mov	r0, r4
  403642:	4629      	mov	r1, r5
  403644:	2300      	movs	r3, #0
  403646:	220a      	movs	r2, #10
  403648:	f7fe ff4e 	bl	4024e8 <__aeabi_uldivmod>
  40364c:	4604      	mov	r4, r0
  40364e:	460d      	mov	r5, r1
  403650:	ea54 0305 	orrs.w	r3, r4, r5
  403654:	d1eb      	bne.n	40362e <_svfprintf_r+0xbd2>
  403656:	eba9 0306 	sub.w	r3, r9, r6
  40365a:	930e      	str	r3, [sp, #56]	; 0x38
  40365c:	f7ff bb0e 	b.w	402c7c <_svfprintf_r+0x220>
  403660:	aa25      	add	r2, sp, #148	; 0x94
  403662:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403664:	980c      	ldr	r0, [sp, #48]	; 0x30
  403666:	f002 fb15 	bl	405c94 <__ssprint_r>
  40366a:	2800      	cmp	r0, #0
  40366c:	f47f aac8 	bne.w	402c00 <_svfprintf_r+0x1a4>
  403670:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403674:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403676:	46c8      	mov	r8, r9
  403678:	f7ff bb5e 	b.w	402d38 <_svfprintf_r+0x2dc>
  40367c:	1e5e      	subs	r6, r3, #1
  40367e:	2e00      	cmp	r6, #0
  403680:	f77f af0a 	ble.w	403498 <_svfprintf_r+0xa3c>
  403684:	2e10      	cmp	r6, #16
  403686:	4d03      	ldr	r5, [pc, #12]	; (403694 <_svfprintf_r+0xc38>)
  403688:	dd22      	ble.n	4036d0 <_svfprintf_r+0xc74>
  40368a:	4622      	mov	r2, r4
  40368c:	f04f 0b10 	mov.w	fp, #16
  403690:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403692:	e006      	b.n	4036a2 <_svfprintf_r+0xc46>
  403694:	00406fe8 	.word	0x00406fe8
  403698:	3e10      	subs	r6, #16
  40369a:	2e10      	cmp	r6, #16
  40369c:	f108 0808 	add.w	r8, r8, #8
  4036a0:	dd15      	ble.n	4036ce <_svfprintf_r+0xc72>
  4036a2:	3701      	adds	r7, #1
  4036a4:	3210      	adds	r2, #16
  4036a6:	2f07      	cmp	r7, #7
  4036a8:	9227      	str	r2, [sp, #156]	; 0x9c
  4036aa:	9726      	str	r7, [sp, #152]	; 0x98
  4036ac:	e888 0820 	stmia.w	r8, {r5, fp}
  4036b0:	ddf2      	ble.n	403698 <_svfprintf_r+0xc3c>
  4036b2:	aa25      	add	r2, sp, #148	; 0x94
  4036b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4036b6:	4620      	mov	r0, r4
  4036b8:	f002 faec 	bl	405c94 <__ssprint_r>
  4036bc:	2800      	cmp	r0, #0
  4036be:	f47f aa9f 	bne.w	402c00 <_svfprintf_r+0x1a4>
  4036c2:	3e10      	subs	r6, #16
  4036c4:	2e10      	cmp	r6, #16
  4036c6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4036c8:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4036ca:	46c8      	mov	r8, r9
  4036cc:	dce9      	bgt.n	4036a2 <_svfprintf_r+0xc46>
  4036ce:	4614      	mov	r4, r2
  4036d0:	3701      	adds	r7, #1
  4036d2:	4434      	add	r4, r6
  4036d4:	2f07      	cmp	r7, #7
  4036d6:	9427      	str	r4, [sp, #156]	; 0x9c
  4036d8:	9726      	str	r7, [sp, #152]	; 0x98
  4036da:	e888 0060 	stmia.w	r8, {r5, r6}
  4036de:	f77f aed9 	ble.w	403494 <_svfprintf_r+0xa38>
  4036e2:	aa25      	add	r2, sp, #148	; 0x94
  4036e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4036e6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4036e8:	f002 fad4 	bl	405c94 <__ssprint_r>
  4036ec:	2800      	cmp	r0, #0
  4036ee:	f47f aa87 	bne.w	402c00 <_svfprintf_r+0x1a4>
  4036f2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4036f4:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4036f6:	46c8      	mov	r8, r9
  4036f8:	e6ce      	b.n	403498 <_svfprintf_r+0xa3c>
  4036fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4036fc:	6814      	ldr	r4, [r2, #0]
  4036fe:	4613      	mov	r3, r2
  403700:	3304      	adds	r3, #4
  403702:	17e5      	asrs	r5, r4, #31
  403704:	930f      	str	r3, [sp, #60]	; 0x3c
  403706:	4622      	mov	r2, r4
  403708:	462b      	mov	r3, r5
  40370a:	e4fa      	b.n	403102 <_svfprintf_r+0x6a6>
  40370c:	3204      	adds	r2, #4
  40370e:	681c      	ldr	r4, [r3, #0]
  403710:	920f      	str	r2, [sp, #60]	; 0x3c
  403712:	2301      	movs	r3, #1
  403714:	2500      	movs	r5, #0
  403716:	f7ff ba94 	b.w	402c42 <_svfprintf_r+0x1e6>
  40371a:	681c      	ldr	r4, [r3, #0]
  40371c:	3304      	adds	r3, #4
  40371e:	930f      	str	r3, [sp, #60]	; 0x3c
  403720:	2500      	movs	r5, #0
  403722:	e421      	b.n	402f68 <_svfprintf_r+0x50c>
  403724:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403726:	460a      	mov	r2, r1
  403728:	3204      	adds	r2, #4
  40372a:	680c      	ldr	r4, [r1, #0]
  40372c:	920f      	str	r2, [sp, #60]	; 0x3c
  40372e:	2500      	movs	r5, #0
  403730:	f7ff ba87 	b.w	402c42 <_svfprintf_r+0x1e6>
  403734:	4614      	mov	r4, r2
  403736:	3301      	adds	r3, #1
  403738:	4434      	add	r4, r6
  40373a:	2b07      	cmp	r3, #7
  40373c:	9427      	str	r4, [sp, #156]	; 0x9c
  40373e:	9326      	str	r3, [sp, #152]	; 0x98
  403740:	e888 0060 	stmia.w	r8, {r5, r6}
  403744:	f77f ab68 	ble.w	402e18 <_svfprintf_r+0x3bc>
  403748:	e6b3      	b.n	4034b2 <_svfprintf_r+0xa56>
  40374a:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40374e:	f8cd b01c 	str.w	fp, [sp, #28]
  403752:	ae42      	add	r6, sp, #264	; 0x108
  403754:	3430      	adds	r4, #48	; 0x30
  403756:	2301      	movs	r3, #1
  403758:	f806 4d41 	strb.w	r4, [r6, #-65]!
  40375c:	930e      	str	r3, [sp, #56]	; 0x38
  40375e:	f7ff ba8d 	b.w	402c7c <_svfprintf_r+0x220>
  403762:	aa25      	add	r2, sp, #148	; 0x94
  403764:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403766:	980c      	ldr	r0, [sp, #48]	; 0x30
  403768:	f002 fa94 	bl	405c94 <__ssprint_r>
  40376c:	2800      	cmp	r0, #0
  40376e:	f47f aa47 	bne.w	402c00 <_svfprintf_r+0x1a4>
  403772:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403774:	46c8      	mov	r8, r9
  403776:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  403778:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40377a:	429a      	cmp	r2, r3
  40377c:	db44      	blt.n	403808 <_svfprintf_r+0xdac>
  40377e:	9b07      	ldr	r3, [sp, #28]
  403780:	07d9      	lsls	r1, r3, #31
  403782:	d441      	bmi.n	403808 <_svfprintf_r+0xdac>
  403784:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403786:	9812      	ldr	r0, [sp, #72]	; 0x48
  403788:	1a9a      	subs	r2, r3, r2
  40378a:	1a1d      	subs	r5, r3, r0
  40378c:	4295      	cmp	r5, r2
  40378e:	bfa8      	it	ge
  403790:	4615      	movge	r5, r2
  403792:	2d00      	cmp	r5, #0
  403794:	dd0e      	ble.n	4037b4 <_svfprintf_r+0xd58>
  403796:	9926      	ldr	r1, [sp, #152]	; 0x98
  403798:	f8c8 5004 	str.w	r5, [r8, #4]
  40379c:	3101      	adds	r1, #1
  40379e:	4406      	add	r6, r0
  4037a0:	442c      	add	r4, r5
  4037a2:	2907      	cmp	r1, #7
  4037a4:	f8c8 6000 	str.w	r6, [r8]
  4037a8:	9427      	str	r4, [sp, #156]	; 0x9c
  4037aa:	9126      	str	r1, [sp, #152]	; 0x98
  4037ac:	f300 823b 	bgt.w	403c26 <_svfprintf_r+0x11ca>
  4037b0:	f108 0808 	add.w	r8, r8, #8
  4037b4:	2d00      	cmp	r5, #0
  4037b6:	bfac      	ite	ge
  4037b8:	1b56      	subge	r6, r2, r5
  4037ba:	4616      	movlt	r6, r2
  4037bc:	2e00      	cmp	r6, #0
  4037be:	f77f ab2d 	ble.w	402e1c <_svfprintf_r+0x3c0>
  4037c2:	2e10      	cmp	r6, #16
  4037c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4037c6:	4db0      	ldr	r5, [pc, #704]	; (403a88 <_svfprintf_r+0x102c>)
  4037c8:	ddb5      	ble.n	403736 <_svfprintf_r+0xcda>
  4037ca:	4622      	mov	r2, r4
  4037cc:	2710      	movs	r7, #16
  4037ce:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4037d2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  4037d4:	e004      	b.n	4037e0 <_svfprintf_r+0xd84>
  4037d6:	f108 0808 	add.w	r8, r8, #8
  4037da:	3e10      	subs	r6, #16
  4037dc:	2e10      	cmp	r6, #16
  4037de:	dda9      	ble.n	403734 <_svfprintf_r+0xcd8>
  4037e0:	3301      	adds	r3, #1
  4037e2:	3210      	adds	r2, #16
  4037e4:	2b07      	cmp	r3, #7
  4037e6:	9227      	str	r2, [sp, #156]	; 0x9c
  4037e8:	9326      	str	r3, [sp, #152]	; 0x98
  4037ea:	e888 00a0 	stmia.w	r8, {r5, r7}
  4037ee:	ddf2      	ble.n	4037d6 <_svfprintf_r+0xd7a>
  4037f0:	aa25      	add	r2, sp, #148	; 0x94
  4037f2:	4621      	mov	r1, r4
  4037f4:	4658      	mov	r0, fp
  4037f6:	f002 fa4d 	bl	405c94 <__ssprint_r>
  4037fa:	2800      	cmp	r0, #0
  4037fc:	f47f aa00 	bne.w	402c00 <_svfprintf_r+0x1a4>
  403800:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403802:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403804:	46c8      	mov	r8, r9
  403806:	e7e8      	b.n	4037da <_svfprintf_r+0xd7e>
  403808:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40380a:	9819      	ldr	r0, [sp, #100]	; 0x64
  40380c:	991a      	ldr	r1, [sp, #104]	; 0x68
  40380e:	f8c8 1000 	str.w	r1, [r8]
  403812:	3301      	adds	r3, #1
  403814:	4404      	add	r4, r0
  403816:	2b07      	cmp	r3, #7
  403818:	9427      	str	r4, [sp, #156]	; 0x9c
  40381a:	f8c8 0004 	str.w	r0, [r8, #4]
  40381e:	9326      	str	r3, [sp, #152]	; 0x98
  403820:	f300 81f5 	bgt.w	403c0e <_svfprintf_r+0x11b2>
  403824:	f108 0808 	add.w	r8, r8, #8
  403828:	e7ac      	b.n	403784 <_svfprintf_r+0xd28>
  40382a:	9b07      	ldr	r3, [sp, #28]
  40382c:	07da      	lsls	r2, r3, #31
  40382e:	f53f adfe 	bmi.w	40342e <_svfprintf_r+0x9d2>
  403832:	3701      	adds	r7, #1
  403834:	3401      	adds	r4, #1
  403836:	2301      	movs	r3, #1
  403838:	2f07      	cmp	r7, #7
  40383a:	9427      	str	r4, [sp, #156]	; 0x9c
  40383c:	9726      	str	r7, [sp, #152]	; 0x98
  40383e:	f8c8 6000 	str.w	r6, [r8]
  403842:	f8c8 3004 	str.w	r3, [r8, #4]
  403846:	f77f ae25 	ble.w	403494 <_svfprintf_r+0xa38>
  40384a:	e74a      	b.n	4036e2 <_svfprintf_r+0xc86>
  40384c:	aa25      	add	r2, sp, #148	; 0x94
  40384e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403850:	980c      	ldr	r0, [sp, #48]	; 0x30
  403852:	f002 fa1f 	bl	405c94 <__ssprint_r>
  403856:	2800      	cmp	r0, #0
  403858:	f47f a9d2 	bne.w	402c00 <_svfprintf_r+0x1a4>
  40385c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40385e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  403860:	46c8      	mov	r8, r9
  403862:	e5f2      	b.n	40344a <_svfprintf_r+0x9ee>
  403864:	aa25      	add	r2, sp, #148	; 0x94
  403866:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403868:	980c      	ldr	r0, [sp, #48]	; 0x30
  40386a:	f002 fa13 	bl	405c94 <__ssprint_r>
  40386e:	2800      	cmp	r0, #0
  403870:	f47f a9c6 	bne.w	402c00 <_svfprintf_r+0x1a4>
  403874:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403876:	9f26      	ldr	r7, [sp, #152]	; 0x98
  403878:	46c8      	mov	r8, r9
  40387a:	e5f5      	b.n	403468 <_svfprintf_r+0xa0c>
  40387c:	464e      	mov	r6, r9
  40387e:	f7ff b9fd 	b.w	402c7c <_svfprintf_r+0x220>
  403882:	aa25      	add	r2, sp, #148	; 0x94
  403884:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403886:	980c      	ldr	r0, [sp, #48]	; 0x30
  403888:	f002 fa04 	bl	405c94 <__ssprint_r>
  40388c:	2800      	cmp	r0, #0
  40388e:	f47f a9b7 	bne.w	402c00 <_svfprintf_r+0x1a4>
  403892:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403894:	46c8      	mov	r8, r9
  403896:	f7ff ba72 	b.w	402d7e <_svfprintf_r+0x322>
  40389a:	9c15      	ldr	r4, [sp, #84]	; 0x54
  40389c:	4622      	mov	r2, r4
  40389e:	4620      	mov	r0, r4
  4038a0:	9c14      	ldr	r4, [sp, #80]	; 0x50
  4038a2:	4623      	mov	r3, r4
  4038a4:	4621      	mov	r1, r4
  4038a6:	f003 fabb 	bl	406e20 <__aeabi_dcmpun>
  4038aa:	2800      	cmp	r0, #0
  4038ac:	f040 8286 	bne.w	403dbc <_svfprintf_r+0x1360>
  4038b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4038b2:	3301      	adds	r3, #1
  4038b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4038b6:	f023 0320 	bic.w	r3, r3, #32
  4038ba:	930e      	str	r3, [sp, #56]	; 0x38
  4038bc:	f000 81e2 	beq.w	403c84 <_svfprintf_r+0x1228>
  4038c0:	2b47      	cmp	r3, #71	; 0x47
  4038c2:	f000 811e 	beq.w	403b02 <_svfprintf_r+0x10a6>
  4038c6:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  4038ca:	9307      	str	r3, [sp, #28]
  4038cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4038ce:	1e1f      	subs	r7, r3, #0
  4038d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4038d2:	9308      	str	r3, [sp, #32]
  4038d4:	bfbb      	ittet	lt
  4038d6:	463b      	movlt	r3, r7
  4038d8:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  4038dc:	2300      	movge	r3, #0
  4038de:	232d      	movlt	r3, #45	; 0x2d
  4038e0:	9310      	str	r3, [sp, #64]	; 0x40
  4038e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4038e4:	2b66      	cmp	r3, #102	; 0x66
  4038e6:	f000 81bb 	beq.w	403c60 <_svfprintf_r+0x1204>
  4038ea:	2b46      	cmp	r3, #70	; 0x46
  4038ec:	f000 80df 	beq.w	403aae <_svfprintf_r+0x1052>
  4038f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4038f2:	9a08      	ldr	r2, [sp, #32]
  4038f4:	2b45      	cmp	r3, #69	; 0x45
  4038f6:	bf0c      	ite	eq
  4038f8:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  4038fa:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  4038fc:	a823      	add	r0, sp, #140	; 0x8c
  4038fe:	a920      	add	r1, sp, #128	; 0x80
  403900:	bf08      	it	eq
  403902:	1c5d      	addeq	r5, r3, #1
  403904:	9004      	str	r0, [sp, #16]
  403906:	9103      	str	r1, [sp, #12]
  403908:	a81f      	add	r0, sp, #124	; 0x7c
  40390a:	2102      	movs	r1, #2
  40390c:	463b      	mov	r3, r7
  40390e:	9002      	str	r0, [sp, #8]
  403910:	9501      	str	r5, [sp, #4]
  403912:	9100      	str	r1, [sp, #0]
  403914:	980c      	ldr	r0, [sp, #48]	; 0x30
  403916:	f000 fbb3 	bl	404080 <_dtoa_r>
  40391a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40391c:	2b67      	cmp	r3, #103	; 0x67
  40391e:	4606      	mov	r6, r0
  403920:	f040 81e0 	bne.w	403ce4 <_svfprintf_r+0x1288>
  403924:	f01b 0f01 	tst.w	fp, #1
  403928:	f000 8246 	beq.w	403db8 <_svfprintf_r+0x135c>
  40392c:	1974      	adds	r4, r6, r5
  40392e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  403930:	9808      	ldr	r0, [sp, #32]
  403932:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  403934:	4639      	mov	r1, r7
  403936:	f003 fa41 	bl	406dbc <__aeabi_dcmpeq>
  40393a:	2800      	cmp	r0, #0
  40393c:	f040 8165 	bne.w	403c0a <_svfprintf_r+0x11ae>
  403940:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  403942:	42a3      	cmp	r3, r4
  403944:	d206      	bcs.n	403954 <_svfprintf_r+0xef8>
  403946:	2130      	movs	r1, #48	; 0x30
  403948:	1c5a      	adds	r2, r3, #1
  40394a:	9223      	str	r2, [sp, #140]	; 0x8c
  40394c:	7019      	strb	r1, [r3, #0]
  40394e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  403950:	429c      	cmp	r4, r3
  403952:	d8f9      	bhi.n	403948 <_svfprintf_r+0xeec>
  403954:	1b9b      	subs	r3, r3, r6
  403956:	9313      	str	r3, [sp, #76]	; 0x4c
  403958:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40395a:	2b47      	cmp	r3, #71	; 0x47
  40395c:	f000 80e9 	beq.w	403b32 <_svfprintf_r+0x10d6>
  403960:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403962:	2b65      	cmp	r3, #101	; 0x65
  403964:	f340 81cd 	ble.w	403d02 <_svfprintf_r+0x12a6>
  403968:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40396a:	2b66      	cmp	r3, #102	; 0x66
  40396c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40396e:	9312      	str	r3, [sp, #72]	; 0x48
  403970:	f000 819e 	beq.w	403cb0 <_svfprintf_r+0x1254>
  403974:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403976:	9a12      	ldr	r2, [sp, #72]	; 0x48
  403978:	4619      	mov	r1, r3
  40397a:	4291      	cmp	r1, r2
  40397c:	f300 818a 	bgt.w	403c94 <_svfprintf_r+0x1238>
  403980:	f01b 0f01 	tst.w	fp, #1
  403984:	f040 8213 	bne.w	403dae <_svfprintf_r+0x1352>
  403988:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40398c:	9308      	str	r3, [sp, #32]
  40398e:	2367      	movs	r3, #103	; 0x67
  403990:	920e      	str	r2, [sp, #56]	; 0x38
  403992:	9311      	str	r3, [sp, #68]	; 0x44
  403994:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403996:	2b00      	cmp	r3, #0
  403998:	f040 80c4 	bne.w	403b24 <_svfprintf_r+0x10c8>
  40399c:	930a      	str	r3, [sp, #40]	; 0x28
  40399e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4039a2:	f7ff b973 	b.w	402c8c <_svfprintf_r+0x230>
  4039a6:	4635      	mov	r5, r6
  4039a8:	460c      	mov	r4, r1
  4039aa:	4646      	mov	r6, r8
  4039ac:	4690      	mov	r8, r2
  4039ae:	3301      	adds	r3, #1
  4039b0:	443c      	add	r4, r7
  4039b2:	2b07      	cmp	r3, #7
  4039b4:	9427      	str	r4, [sp, #156]	; 0x9c
  4039b6:	9326      	str	r3, [sp, #152]	; 0x98
  4039b8:	e888 00a0 	stmia.w	r8, {r5, r7}
  4039bc:	f73f aed1 	bgt.w	403762 <_svfprintf_r+0xd06>
  4039c0:	f108 0808 	add.w	r8, r8, #8
  4039c4:	e6d7      	b.n	403776 <_svfprintf_r+0xd1a>
  4039c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4039c8:	6813      	ldr	r3, [r2, #0]
  4039ca:	3204      	adds	r2, #4
  4039cc:	920f      	str	r2, [sp, #60]	; 0x3c
  4039ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4039d0:	601a      	str	r2, [r3, #0]
  4039d2:	f7ff b86a 	b.w	402aaa <_svfprintf_r+0x4e>
  4039d6:	aa25      	add	r2, sp, #148	; 0x94
  4039d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4039da:	980c      	ldr	r0, [sp, #48]	; 0x30
  4039dc:	f002 f95a 	bl	405c94 <__ssprint_r>
  4039e0:	2800      	cmp	r0, #0
  4039e2:	f47f a90d 	bne.w	402c00 <_svfprintf_r+0x1a4>
  4039e6:	46c8      	mov	r8, r9
  4039e8:	e48d      	b.n	403306 <_svfprintf_r+0x8aa>
  4039ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4039ec:	4a27      	ldr	r2, [pc, #156]	; (403a8c <_svfprintf_r+0x1030>)
  4039ee:	f8c8 2000 	str.w	r2, [r8]
  4039f2:	3301      	adds	r3, #1
  4039f4:	3401      	adds	r4, #1
  4039f6:	2201      	movs	r2, #1
  4039f8:	2b07      	cmp	r3, #7
  4039fa:	9427      	str	r4, [sp, #156]	; 0x9c
  4039fc:	9326      	str	r3, [sp, #152]	; 0x98
  4039fe:	f8c8 2004 	str.w	r2, [r8, #4]
  403a02:	dc72      	bgt.n	403aea <_svfprintf_r+0x108e>
  403a04:	f108 0808 	add.w	r8, r8, #8
  403a08:	b929      	cbnz	r1, 403a16 <_svfprintf_r+0xfba>
  403a0a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403a0c:	b91b      	cbnz	r3, 403a16 <_svfprintf_r+0xfba>
  403a0e:	9b07      	ldr	r3, [sp, #28]
  403a10:	07d8      	lsls	r0, r3, #31
  403a12:	f57f aa03 	bpl.w	402e1c <_svfprintf_r+0x3c0>
  403a16:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403a18:	9819      	ldr	r0, [sp, #100]	; 0x64
  403a1a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  403a1c:	f8c8 2000 	str.w	r2, [r8]
  403a20:	3301      	adds	r3, #1
  403a22:	4602      	mov	r2, r0
  403a24:	4422      	add	r2, r4
  403a26:	2b07      	cmp	r3, #7
  403a28:	9227      	str	r2, [sp, #156]	; 0x9c
  403a2a:	f8c8 0004 	str.w	r0, [r8, #4]
  403a2e:	9326      	str	r3, [sp, #152]	; 0x98
  403a30:	f300 818d 	bgt.w	403d4e <_svfprintf_r+0x12f2>
  403a34:	f108 0808 	add.w	r8, r8, #8
  403a38:	2900      	cmp	r1, #0
  403a3a:	f2c0 8165 	blt.w	403d08 <_svfprintf_r+0x12ac>
  403a3e:	9913      	ldr	r1, [sp, #76]	; 0x4c
  403a40:	f8c8 6000 	str.w	r6, [r8]
  403a44:	3301      	adds	r3, #1
  403a46:	188c      	adds	r4, r1, r2
  403a48:	2b07      	cmp	r3, #7
  403a4a:	9427      	str	r4, [sp, #156]	; 0x9c
  403a4c:	9326      	str	r3, [sp, #152]	; 0x98
  403a4e:	f8c8 1004 	str.w	r1, [r8, #4]
  403a52:	f77f a9e1 	ble.w	402e18 <_svfprintf_r+0x3bc>
  403a56:	e52c      	b.n	4034b2 <_svfprintf_r+0xa56>
  403a58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403a5a:	9909      	ldr	r1, [sp, #36]	; 0x24
  403a5c:	6813      	ldr	r3, [r2, #0]
  403a5e:	17cd      	asrs	r5, r1, #31
  403a60:	4608      	mov	r0, r1
  403a62:	3204      	adds	r2, #4
  403a64:	4629      	mov	r1, r5
  403a66:	920f      	str	r2, [sp, #60]	; 0x3c
  403a68:	e9c3 0100 	strd	r0, r1, [r3]
  403a6c:	f7ff b81d 	b.w	402aaa <_svfprintf_r+0x4e>
  403a70:	aa25      	add	r2, sp, #148	; 0x94
  403a72:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403a74:	980c      	ldr	r0, [sp, #48]	; 0x30
  403a76:	f002 f90d 	bl	405c94 <__ssprint_r>
  403a7a:	2800      	cmp	r0, #0
  403a7c:	f47f a8c0 	bne.w	402c00 <_svfprintf_r+0x1a4>
  403a80:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403a82:	46c8      	mov	r8, r9
  403a84:	e458      	b.n	403338 <_svfprintf_r+0x8dc>
  403a86:	bf00      	nop
  403a88:	00406fe8 	.word	0x00406fe8
  403a8c:	00406fd4 	.word	0x00406fd4
  403a90:	2140      	movs	r1, #64	; 0x40
  403a92:	980c      	ldr	r0, [sp, #48]	; 0x30
  403a94:	f001 fa4a 	bl	404f2c <_malloc_r>
  403a98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  403a9a:	6010      	str	r0, [r2, #0]
  403a9c:	6110      	str	r0, [r2, #16]
  403a9e:	2800      	cmp	r0, #0
  403aa0:	f000 81f2 	beq.w	403e88 <_svfprintf_r+0x142c>
  403aa4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  403aa6:	2340      	movs	r3, #64	; 0x40
  403aa8:	6153      	str	r3, [r2, #20]
  403aaa:	f7fe bfee 	b.w	402a8a <_svfprintf_r+0x2e>
  403aae:	a823      	add	r0, sp, #140	; 0x8c
  403ab0:	a920      	add	r1, sp, #128	; 0x80
  403ab2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  403ab4:	9004      	str	r0, [sp, #16]
  403ab6:	9103      	str	r1, [sp, #12]
  403ab8:	a81f      	add	r0, sp, #124	; 0x7c
  403aba:	2103      	movs	r1, #3
  403abc:	9002      	str	r0, [sp, #8]
  403abe:	9a08      	ldr	r2, [sp, #32]
  403ac0:	9401      	str	r4, [sp, #4]
  403ac2:	463b      	mov	r3, r7
  403ac4:	9100      	str	r1, [sp, #0]
  403ac6:	980c      	ldr	r0, [sp, #48]	; 0x30
  403ac8:	f000 fada 	bl	404080 <_dtoa_r>
  403acc:	4625      	mov	r5, r4
  403ace:	4606      	mov	r6, r0
  403ad0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403ad2:	2b46      	cmp	r3, #70	; 0x46
  403ad4:	eb06 0405 	add.w	r4, r6, r5
  403ad8:	f47f af29 	bne.w	40392e <_svfprintf_r+0xed2>
  403adc:	7833      	ldrb	r3, [r6, #0]
  403ade:	2b30      	cmp	r3, #48	; 0x30
  403ae0:	f000 8178 	beq.w	403dd4 <_svfprintf_r+0x1378>
  403ae4:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  403ae6:	442c      	add	r4, r5
  403ae8:	e721      	b.n	40392e <_svfprintf_r+0xed2>
  403aea:	aa25      	add	r2, sp, #148	; 0x94
  403aec:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403aee:	980c      	ldr	r0, [sp, #48]	; 0x30
  403af0:	f002 f8d0 	bl	405c94 <__ssprint_r>
  403af4:	2800      	cmp	r0, #0
  403af6:	f47f a883 	bne.w	402c00 <_svfprintf_r+0x1a4>
  403afa:	991f      	ldr	r1, [sp, #124]	; 0x7c
  403afc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403afe:	46c8      	mov	r8, r9
  403b00:	e782      	b.n	403a08 <_svfprintf_r+0xfac>
  403b02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403b04:	2b00      	cmp	r3, #0
  403b06:	bf08      	it	eq
  403b08:	2301      	moveq	r3, #1
  403b0a:	930a      	str	r3, [sp, #40]	; 0x28
  403b0c:	e6db      	b.n	4038c6 <_svfprintf_r+0xe6a>
  403b0e:	4630      	mov	r0, r6
  403b10:	940a      	str	r4, [sp, #40]	; 0x28
  403b12:	f7fe ff35 	bl	402980 <strlen>
  403b16:	950f      	str	r5, [sp, #60]	; 0x3c
  403b18:	900e      	str	r0, [sp, #56]	; 0x38
  403b1a:	f8cd b01c 	str.w	fp, [sp, #28]
  403b1e:	4603      	mov	r3, r0
  403b20:	f7ff b9f9 	b.w	402f16 <_svfprintf_r+0x4ba>
  403b24:	272d      	movs	r7, #45	; 0x2d
  403b26:	2300      	movs	r3, #0
  403b28:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  403b2c:	930a      	str	r3, [sp, #40]	; 0x28
  403b2e:	f7ff b8ae 	b.w	402c8e <_svfprintf_r+0x232>
  403b32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403b34:	9312      	str	r3, [sp, #72]	; 0x48
  403b36:	461a      	mov	r2, r3
  403b38:	3303      	adds	r3, #3
  403b3a:	db04      	blt.n	403b46 <_svfprintf_r+0x10ea>
  403b3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403b3e:	4619      	mov	r1, r3
  403b40:	4291      	cmp	r1, r2
  403b42:	f6bf af17 	bge.w	403974 <_svfprintf_r+0xf18>
  403b46:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403b48:	3b02      	subs	r3, #2
  403b4a:	9311      	str	r3, [sp, #68]	; 0x44
  403b4c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  403b50:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  403b54:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403b56:	3b01      	subs	r3, #1
  403b58:	2b00      	cmp	r3, #0
  403b5a:	931f      	str	r3, [sp, #124]	; 0x7c
  403b5c:	bfbd      	ittte	lt
  403b5e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  403b60:	f1c3 0301 	rsblt	r3, r3, #1
  403b64:	222d      	movlt	r2, #45	; 0x2d
  403b66:	222b      	movge	r2, #43	; 0x2b
  403b68:	2b09      	cmp	r3, #9
  403b6a:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  403b6e:	f340 8116 	ble.w	403d9e <_svfprintf_r+0x1342>
  403b72:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  403b76:	4620      	mov	r0, r4
  403b78:	4dab      	ldr	r5, [pc, #684]	; (403e28 <_svfprintf_r+0x13cc>)
  403b7a:	e000      	b.n	403b7e <_svfprintf_r+0x1122>
  403b7c:	4610      	mov	r0, r2
  403b7e:	fb85 1203 	smull	r1, r2, r5, r3
  403b82:	17d9      	asrs	r1, r3, #31
  403b84:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  403b88:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  403b8c:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  403b90:	3230      	adds	r2, #48	; 0x30
  403b92:	2909      	cmp	r1, #9
  403b94:	f800 2c01 	strb.w	r2, [r0, #-1]
  403b98:	460b      	mov	r3, r1
  403b9a:	f100 32ff 	add.w	r2, r0, #4294967295
  403b9e:	dced      	bgt.n	403b7c <_svfprintf_r+0x1120>
  403ba0:	3330      	adds	r3, #48	; 0x30
  403ba2:	3802      	subs	r0, #2
  403ba4:	b2d9      	uxtb	r1, r3
  403ba6:	4284      	cmp	r4, r0
  403ba8:	f802 1c01 	strb.w	r1, [r2, #-1]
  403bac:	f240 8165 	bls.w	403e7a <_svfprintf_r+0x141e>
  403bb0:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  403bb4:	4613      	mov	r3, r2
  403bb6:	e001      	b.n	403bbc <_svfprintf_r+0x1160>
  403bb8:	f813 1b01 	ldrb.w	r1, [r3], #1
  403bbc:	f800 1b01 	strb.w	r1, [r0], #1
  403bc0:	42a3      	cmp	r3, r4
  403bc2:	d1f9      	bne.n	403bb8 <_svfprintf_r+0x115c>
  403bc4:	3301      	adds	r3, #1
  403bc6:	1a9b      	subs	r3, r3, r2
  403bc8:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  403bcc:	4413      	add	r3, r2
  403bce:	aa21      	add	r2, sp, #132	; 0x84
  403bd0:	1a9b      	subs	r3, r3, r2
  403bd2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  403bd4:	931b      	str	r3, [sp, #108]	; 0x6c
  403bd6:	2a01      	cmp	r2, #1
  403bd8:	4413      	add	r3, r2
  403bda:	930e      	str	r3, [sp, #56]	; 0x38
  403bdc:	f340 8119 	ble.w	403e12 <_svfprintf_r+0x13b6>
  403be0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403be2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403be4:	4413      	add	r3, r2
  403be6:	930e      	str	r3, [sp, #56]	; 0x38
  403be8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403bec:	9308      	str	r3, [sp, #32]
  403bee:	2300      	movs	r3, #0
  403bf0:	9312      	str	r3, [sp, #72]	; 0x48
  403bf2:	e6cf      	b.n	403994 <_svfprintf_r+0xf38>
  403bf4:	aa25      	add	r2, sp, #148	; 0x94
  403bf6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403bf8:	980c      	ldr	r0, [sp, #48]	; 0x30
  403bfa:	f002 f84b 	bl	405c94 <__ssprint_r>
  403bfe:	2800      	cmp	r0, #0
  403c00:	f47e affe 	bne.w	402c00 <_svfprintf_r+0x1a4>
  403c04:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403c06:	46c8      	mov	r8, r9
  403c08:	e4d7      	b.n	4035ba <_svfprintf_r+0xb5e>
  403c0a:	4623      	mov	r3, r4
  403c0c:	e6a2      	b.n	403954 <_svfprintf_r+0xef8>
  403c0e:	aa25      	add	r2, sp, #148	; 0x94
  403c10:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403c12:	980c      	ldr	r0, [sp, #48]	; 0x30
  403c14:	f002 f83e 	bl	405c94 <__ssprint_r>
  403c18:	2800      	cmp	r0, #0
  403c1a:	f47e aff1 	bne.w	402c00 <_svfprintf_r+0x1a4>
  403c1e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  403c20:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403c22:	46c8      	mov	r8, r9
  403c24:	e5ae      	b.n	403784 <_svfprintf_r+0xd28>
  403c26:	aa25      	add	r2, sp, #148	; 0x94
  403c28:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403c2a:	980c      	ldr	r0, [sp, #48]	; 0x30
  403c2c:	f002 f832 	bl	405c94 <__ssprint_r>
  403c30:	2800      	cmp	r0, #0
  403c32:	f47e afe5 	bne.w	402c00 <_svfprintf_r+0x1a4>
  403c36:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  403c38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403c3a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403c3c:	1a9a      	subs	r2, r3, r2
  403c3e:	46c8      	mov	r8, r9
  403c40:	e5b8      	b.n	4037b4 <_svfprintf_r+0xd58>
  403c42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403c44:	9612      	str	r6, [sp, #72]	; 0x48
  403c46:	2b06      	cmp	r3, #6
  403c48:	bf28      	it	cs
  403c4a:	2306      	movcs	r3, #6
  403c4c:	960a      	str	r6, [sp, #40]	; 0x28
  403c4e:	4637      	mov	r7, r6
  403c50:	9308      	str	r3, [sp, #32]
  403c52:	950f      	str	r5, [sp, #60]	; 0x3c
  403c54:	f8cd b01c 	str.w	fp, [sp, #28]
  403c58:	930e      	str	r3, [sp, #56]	; 0x38
  403c5a:	4e74      	ldr	r6, [pc, #464]	; (403e2c <_svfprintf_r+0x13d0>)
  403c5c:	f7ff b816 	b.w	402c8c <_svfprintf_r+0x230>
  403c60:	a823      	add	r0, sp, #140	; 0x8c
  403c62:	a920      	add	r1, sp, #128	; 0x80
  403c64:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  403c66:	9004      	str	r0, [sp, #16]
  403c68:	9103      	str	r1, [sp, #12]
  403c6a:	a81f      	add	r0, sp, #124	; 0x7c
  403c6c:	2103      	movs	r1, #3
  403c6e:	9002      	str	r0, [sp, #8]
  403c70:	9a08      	ldr	r2, [sp, #32]
  403c72:	9501      	str	r5, [sp, #4]
  403c74:	463b      	mov	r3, r7
  403c76:	9100      	str	r1, [sp, #0]
  403c78:	980c      	ldr	r0, [sp, #48]	; 0x30
  403c7a:	f000 fa01 	bl	404080 <_dtoa_r>
  403c7e:	4606      	mov	r6, r0
  403c80:	1944      	adds	r4, r0, r5
  403c82:	e72b      	b.n	403adc <_svfprintf_r+0x1080>
  403c84:	2306      	movs	r3, #6
  403c86:	930a      	str	r3, [sp, #40]	; 0x28
  403c88:	e61d      	b.n	4038c6 <_svfprintf_r+0xe6a>
  403c8a:	272d      	movs	r7, #45	; 0x2d
  403c8c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  403c90:	f7ff bacd 	b.w	40322e <_svfprintf_r+0x7d2>
  403c94:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403c96:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403c98:	4413      	add	r3, r2
  403c9a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  403c9c:	930e      	str	r3, [sp, #56]	; 0x38
  403c9e:	2a00      	cmp	r2, #0
  403ca0:	f340 80b0 	ble.w	403e04 <_svfprintf_r+0x13a8>
  403ca4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403ca8:	9308      	str	r3, [sp, #32]
  403caa:	2367      	movs	r3, #103	; 0x67
  403cac:	9311      	str	r3, [sp, #68]	; 0x44
  403cae:	e671      	b.n	403994 <_svfprintf_r+0xf38>
  403cb0:	2b00      	cmp	r3, #0
  403cb2:	f340 80c3 	ble.w	403e3c <_svfprintf_r+0x13e0>
  403cb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403cb8:	2a00      	cmp	r2, #0
  403cba:	f040 8099 	bne.w	403df0 <_svfprintf_r+0x1394>
  403cbe:	f01b 0f01 	tst.w	fp, #1
  403cc2:	f040 8095 	bne.w	403df0 <_svfprintf_r+0x1394>
  403cc6:	9308      	str	r3, [sp, #32]
  403cc8:	930e      	str	r3, [sp, #56]	; 0x38
  403cca:	e663      	b.n	403994 <_svfprintf_r+0xf38>
  403ccc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403cce:	9308      	str	r3, [sp, #32]
  403cd0:	930e      	str	r3, [sp, #56]	; 0x38
  403cd2:	900a      	str	r0, [sp, #40]	; 0x28
  403cd4:	950f      	str	r5, [sp, #60]	; 0x3c
  403cd6:	f8cd b01c 	str.w	fp, [sp, #28]
  403cda:	9012      	str	r0, [sp, #72]	; 0x48
  403cdc:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403ce0:	f7fe bfd4 	b.w	402c8c <_svfprintf_r+0x230>
  403ce4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403ce6:	2b47      	cmp	r3, #71	; 0x47
  403ce8:	f47f ae20 	bne.w	40392c <_svfprintf_r+0xed0>
  403cec:	f01b 0f01 	tst.w	fp, #1
  403cf0:	f47f aeee 	bne.w	403ad0 <_svfprintf_r+0x1074>
  403cf4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  403cf6:	1b9b      	subs	r3, r3, r6
  403cf8:	9313      	str	r3, [sp, #76]	; 0x4c
  403cfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403cfc:	2b47      	cmp	r3, #71	; 0x47
  403cfe:	f43f af18 	beq.w	403b32 <_svfprintf_r+0x10d6>
  403d02:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403d04:	9312      	str	r3, [sp, #72]	; 0x48
  403d06:	e721      	b.n	403b4c <_svfprintf_r+0x10f0>
  403d08:	424f      	negs	r7, r1
  403d0a:	3110      	adds	r1, #16
  403d0c:	4d48      	ldr	r5, [pc, #288]	; (403e30 <_svfprintf_r+0x13d4>)
  403d0e:	da2f      	bge.n	403d70 <_svfprintf_r+0x1314>
  403d10:	2410      	movs	r4, #16
  403d12:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  403d16:	e004      	b.n	403d22 <_svfprintf_r+0x12c6>
  403d18:	f108 0808 	add.w	r8, r8, #8
  403d1c:	3f10      	subs	r7, #16
  403d1e:	2f10      	cmp	r7, #16
  403d20:	dd26      	ble.n	403d70 <_svfprintf_r+0x1314>
  403d22:	3301      	adds	r3, #1
  403d24:	3210      	adds	r2, #16
  403d26:	2b07      	cmp	r3, #7
  403d28:	9227      	str	r2, [sp, #156]	; 0x9c
  403d2a:	9326      	str	r3, [sp, #152]	; 0x98
  403d2c:	f8c8 5000 	str.w	r5, [r8]
  403d30:	f8c8 4004 	str.w	r4, [r8, #4]
  403d34:	ddf0      	ble.n	403d18 <_svfprintf_r+0x12bc>
  403d36:	aa25      	add	r2, sp, #148	; 0x94
  403d38:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403d3a:	4658      	mov	r0, fp
  403d3c:	f001 ffaa 	bl	405c94 <__ssprint_r>
  403d40:	2800      	cmp	r0, #0
  403d42:	f47e af5d 	bne.w	402c00 <_svfprintf_r+0x1a4>
  403d46:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403d48:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403d4a:	46c8      	mov	r8, r9
  403d4c:	e7e6      	b.n	403d1c <_svfprintf_r+0x12c0>
  403d4e:	aa25      	add	r2, sp, #148	; 0x94
  403d50:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403d52:	980c      	ldr	r0, [sp, #48]	; 0x30
  403d54:	f001 ff9e 	bl	405c94 <__ssprint_r>
  403d58:	2800      	cmp	r0, #0
  403d5a:	f47e af51 	bne.w	402c00 <_svfprintf_r+0x1a4>
  403d5e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  403d60:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403d62:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403d64:	46c8      	mov	r8, r9
  403d66:	e667      	b.n	403a38 <_svfprintf_r+0xfdc>
  403d68:	2000      	movs	r0, #0
  403d6a:	900a      	str	r0, [sp, #40]	; 0x28
  403d6c:	f7fe bed0 	b.w	402b10 <_svfprintf_r+0xb4>
  403d70:	3301      	adds	r3, #1
  403d72:	443a      	add	r2, r7
  403d74:	2b07      	cmp	r3, #7
  403d76:	e888 00a0 	stmia.w	r8, {r5, r7}
  403d7a:	9227      	str	r2, [sp, #156]	; 0x9c
  403d7c:	9326      	str	r3, [sp, #152]	; 0x98
  403d7e:	f108 0808 	add.w	r8, r8, #8
  403d82:	f77f ae5c 	ble.w	403a3e <_svfprintf_r+0xfe2>
  403d86:	aa25      	add	r2, sp, #148	; 0x94
  403d88:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403d8a:	980c      	ldr	r0, [sp, #48]	; 0x30
  403d8c:	f001 ff82 	bl	405c94 <__ssprint_r>
  403d90:	2800      	cmp	r0, #0
  403d92:	f47e af35 	bne.w	402c00 <_svfprintf_r+0x1a4>
  403d96:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403d98:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403d9a:	46c8      	mov	r8, r9
  403d9c:	e64f      	b.n	403a3e <_svfprintf_r+0xfe2>
  403d9e:	3330      	adds	r3, #48	; 0x30
  403da0:	2230      	movs	r2, #48	; 0x30
  403da2:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  403da6:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  403daa:	ab22      	add	r3, sp, #136	; 0x88
  403dac:	e70f      	b.n	403bce <_svfprintf_r+0x1172>
  403dae:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403db0:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403db2:	4413      	add	r3, r2
  403db4:	930e      	str	r3, [sp, #56]	; 0x38
  403db6:	e775      	b.n	403ca4 <_svfprintf_r+0x1248>
  403db8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  403dba:	e5cb      	b.n	403954 <_svfprintf_r+0xef8>
  403dbc:	9b14      	ldr	r3, [sp, #80]	; 0x50
  403dbe:	4e1d      	ldr	r6, [pc, #116]	; (403e34 <_svfprintf_r+0x13d8>)
  403dc0:	2b00      	cmp	r3, #0
  403dc2:	bfb6      	itet	lt
  403dc4:	272d      	movlt	r7, #45	; 0x2d
  403dc6:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  403dca:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  403dce:	4b1a      	ldr	r3, [pc, #104]	; (403e38 <_svfprintf_r+0x13dc>)
  403dd0:	f7ff ba2f 	b.w	403232 <_svfprintf_r+0x7d6>
  403dd4:	9a16      	ldr	r2, [sp, #88]	; 0x58
  403dd6:	9808      	ldr	r0, [sp, #32]
  403dd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  403dda:	4639      	mov	r1, r7
  403ddc:	f002 ffee 	bl	406dbc <__aeabi_dcmpeq>
  403de0:	2800      	cmp	r0, #0
  403de2:	f47f ae7f 	bne.w	403ae4 <_svfprintf_r+0x1088>
  403de6:	f1c5 0501 	rsb	r5, r5, #1
  403dea:	951f      	str	r5, [sp, #124]	; 0x7c
  403dec:	442c      	add	r4, r5
  403dee:	e59e      	b.n	40392e <_svfprintf_r+0xed2>
  403df0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403df2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403df4:	4413      	add	r3, r2
  403df6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403df8:	441a      	add	r2, r3
  403dfa:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  403dfe:	920e      	str	r2, [sp, #56]	; 0x38
  403e00:	9308      	str	r3, [sp, #32]
  403e02:	e5c7      	b.n	403994 <_svfprintf_r+0xf38>
  403e04:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403e06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403e08:	f1c3 0301 	rsb	r3, r3, #1
  403e0c:	441a      	add	r2, r3
  403e0e:	4613      	mov	r3, r2
  403e10:	e7d0      	b.n	403db4 <_svfprintf_r+0x1358>
  403e12:	f01b 0301 	ands.w	r3, fp, #1
  403e16:	9312      	str	r3, [sp, #72]	; 0x48
  403e18:	f47f aee2 	bne.w	403be0 <_svfprintf_r+0x1184>
  403e1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403e1e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403e22:	9308      	str	r3, [sp, #32]
  403e24:	e5b6      	b.n	403994 <_svfprintf_r+0xf38>
  403e26:	bf00      	nop
  403e28:	66666667 	.word	0x66666667
  403e2c:	00406fcc 	.word	0x00406fcc
  403e30:	00406fe8 	.word	0x00406fe8
  403e34:	00406fa0 	.word	0x00406fa0
  403e38:	00406f9c 	.word	0x00406f9c
  403e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403e3e:	b913      	cbnz	r3, 403e46 <_svfprintf_r+0x13ea>
  403e40:	f01b 0f01 	tst.w	fp, #1
  403e44:	d002      	beq.n	403e4c <_svfprintf_r+0x13f0>
  403e46:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403e48:	3301      	adds	r3, #1
  403e4a:	e7d4      	b.n	403df6 <_svfprintf_r+0x139a>
  403e4c:	2301      	movs	r3, #1
  403e4e:	e73a      	b.n	403cc6 <_svfprintf_r+0x126a>
  403e50:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403e52:	f89a 3001 	ldrb.w	r3, [sl, #1]
  403e56:	6828      	ldr	r0, [r5, #0]
  403e58:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  403e5c:	900a      	str	r0, [sp, #40]	; 0x28
  403e5e:	4628      	mov	r0, r5
  403e60:	3004      	adds	r0, #4
  403e62:	46a2      	mov	sl, r4
  403e64:	900f      	str	r0, [sp, #60]	; 0x3c
  403e66:	f7fe be51 	b.w	402b0c <_svfprintf_r+0xb0>
  403e6a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403e6e:	f7ff b867 	b.w	402f40 <_svfprintf_r+0x4e4>
  403e72:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403e76:	f7ff ba15 	b.w	4032a4 <_svfprintf_r+0x848>
  403e7a:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  403e7e:	e6a6      	b.n	403bce <_svfprintf_r+0x1172>
  403e80:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403e84:	f7ff b8eb 	b.w	40305e <_svfprintf_r+0x602>
  403e88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  403e8a:	230c      	movs	r3, #12
  403e8c:	6013      	str	r3, [r2, #0]
  403e8e:	f04f 33ff 	mov.w	r3, #4294967295
  403e92:	9309      	str	r3, [sp, #36]	; 0x24
  403e94:	f7fe bebd 	b.w	402c12 <_svfprintf_r+0x1b6>
  403e98:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403e9c:	f7ff b99a 	b.w	4031d4 <_svfprintf_r+0x778>
  403ea0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403ea4:	f7ff b976 	b.w	403194 <_svfprintf_r+0x738>
  403ea8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403eac:	f7ff b959 	b.w	403162 <_svfprintf_r+0x706>
  403eb0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403eb4:	f7ff b912 	b.w	4030dc <_svfprintf_r+0x680>

00403eb8 <__utoa>:
  403eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
  403eba:	f8df e078 	ldr.w	lr, [pc, #120]	; 403f34 <__utoa+0x7c>
  403ebe:	4616      	mov	r6, r2
  403ec0:	4604      	mov	r4, r0
  403ec2:	460f      	mov	r7, r1
  403ec4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
  403ec8:	b08b      	sub	sp, #44	; 0x2c
  403eca:	466d      	mov	r5, sp
  403ecc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  403ece:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
  403ed2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  403ed4:	e89e 0003 	ldmia.w	lr, {r0, r1}
  403ed8:	1eb3      	subs	r3, r6, #2
  403eda:	f845 0b04 	str.w	r0, [r5], #4
  403ede:	2b22      	cmp	r3, #34	; 0x22
  403ee0:	7029      	strb	r1, [r5, #0]
  403ee2:	d822      	bhi.n	403f2a <__utoa+0x72>
  403ee4:	1e7d      	subs	r5, r7, #1
  403ee6:	4628      	mov	r0, r5
  403ee8:	2200      	movs	r2, #0
  403eea:	e000      	b.n	403eee <__utoa+0x36>
  403eec:	461a      	mov	r2, r3
  403eee:	fbb4 f1f6 	udiv	r1, r4, r6
  403ef2:	ab0a      	add	r3, sp, #40	; 0x28
  403ef4:	fb06 4411 	mls	r4, r6, r1, r4
  403ef8:	4423      	add	r3, r4
  403efa:	460c      	mov	r4, r1
  403efc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
  403f00:	f800 3f01 	strb.w	r3, [r0, #1]!
  403f04:	1c53      	adds	r3, r2, #1
  403f06:	2900      	cmp	r1, #0
  403f08:	d1f0      	bne.n	403eec <__utoa+0x34>
  403f0a:	54f9      	strb	r1, [r7, r3]
  403f0c:	18bb      	adds	r3, r7, r2
  403f0e:	b14a      	cbz	r2, 403f24 <__utoa+0x6c>
  403f10:	7819      	ldrb	r1, [r3, #0]
  403f12:	7868      	ldrb	r0, [r5, #1]
  403f14:	f805 1f01 	strb.w	r1, [r5, #1]!
  403f18:	3401      	adds	r4, #1
  403f1a:	1b11      	subs	r1, r2, r4
  403f1c:	428c      	cmp	r4, r1
  403f1e:	f803 0901 	strb.w	r0, [r3], #-1
  403f22:	dbf5      	blt.n	403f10 <__utoa+0x58>
  403f24:	4638      	mov	r0, r7
  403f26:	b00b      	add	sp, #44	; 0x2c
  403f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403f2a:	2000      	movs	r0, #0
  403f2c:	7038      	strb	r0, [r7, #0]
  403f2e:	b00b      	add	sp, #44	; 0x2c
  403f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403f32:	bf00      	nop
  403f34:	00406ff8 	.word	0x00406ff8

00403f38 <register_fini>:
  403f38:	4b02      	ldr	r3, [pc, #8]	; (403f44 <register_fini+0xc>)
  403f3a:	b113      	cbz	r3, 403f42 <register_fini+0xa>
  403f3c:	4802      	ldr	r0, [pc, #8]	; (403f48 <register_fini+0x10>)
  403f3e:	f000 b805 	b.w	403f4c <atexit>
  403f42:	4770      	bx	lr
  403f44:	00000000 	.word	0x00000000
  403f48:	00404ed5 	.word	0x00404ed5

00403f4c <atexit>:
  403f4c:	2300      	movs	r3, #0
  403f4e:	4601      	mov	r1, r0
  403f50:	461a      	mov	r2, r3
  403f52:	4618      	mov	r0, r3
  403f54:	f001 bf1c 	b.w	405d90 <__register_exitproc>

00403f58 <quorem>:
  403f58:	6902      	ldr	r2, [r0, #16]
  403f5a:	690b      	ldr	r3, [r1, #16]
  403f5c:	4293      	cmp	r3, r2
  403f5e:	f300 808d 	bgt.w	40407c <quorem+0x124>
  403f62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403f66:	f103 38ff 	add.w	r8, r3, #4294967295
  403f6a:	f101 0714 	add.w	r7, r1, #20
  403f6e:	f100 0b14 	add.w	fp, r0, #20
  403f72:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  403f76:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  403f7a:	ea4f 0488 	mov.w	r4, r8, lsl #2
  403f7e:	b083      	sub	sp, #12
  403f80:	3201      	adds	r2, #1
  403f82:	fbb3 f9f2 	udiv	r9, r3, r2
  403f86:	eb0b 0304 	add.w	r3, fp, r4
  403f8a:	9400      	str	r4, [sp, #0]
  403f8c:	eb07 0a04 	add.w	sl, r7, r4
  403f90:	9301      	str	r3, [sp, #4]
  403f92:	f1b9 0f00 	cmp.w	r9, #0
  403f96:	d039      	beq.n	40400c <quorem+0xb4>
  403f98:	2500      	movs	r5, #0
  403f9a:	462e      	mov	r6, r5
  403f9c:	46bc      	mov	ip, r7
  403f9e:	46de      	mov	lr, fp
  403fa0:	f85c 4b04 	ldr.w	r4, [ip], #4
  403fa4:	f8de 3000 	ldr.w	r3, [lr]
  403fa8:	b2a2      	uxth	r2, r4
  403faa:	fb09 5502 	mla	r5, r9, r2, r5
  403fae:	0c22      	lsrs	r2, r4, #16
  403fb0:	0c2c      	lsrs	r4, r5, #16
  403fb2:	fb09 4202 	mla	r2, r9, r2, r4
  403fb6:	b2ad      	uxth	r5, r5
  403fb8:	1b75      	subs	r5, r6, r5
  403fba:	b296      	uxth	r6, r2
  403fbc:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  403fc0:	fa15 f383 	uxtah	r3, r5, r3
  403fc4:	eb06 4623 	add.w	r6, r6, r3, asr #16
  403fc8:	b29b      	uxth	r3, r3
  403fca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  403fce:	45e2      	cmp	sl, ip
  403fd0:	ea4f 4512 	mov.w	r5, r2, lsr #16
  403fd4:	f84e 3b04 	str.w	r3, [lr], #4
  403fd8:	ea4f 4626 	mov.w	r6, r6, asr #16
  403fdc:	d2e0      	bcs.n	403fa0 <quorem+0x48>
  403fde:	9b00      	ldr	r3, [sp, #0]
  403fe0:	f85b 3003 	ldr.w	r3, [fp, r3]
  403fe4:	b993      	cbnz	r3, 40400c <quorem+0xb4>
  403fe6:	9c01      	ldr	r4, [sp, #4]
  403fe8:	1f23      	subs	r3, r4, #4
  403fea:	459b      	cmp	fp, r3
  403fec:	d20c      	bcs.n	404008 <quorem+0xb0>
  403fee:	f854 3c04 	ldr.w	r3, [r4, #-4]
  403ff2:	b94b      	cbnz	r3, 404008 <quorem+0xb0>
  403ff4:	f1a4 0308 	sub.w	r3, r4, #8
  403ff8:	e002      	b.n	404000 <quorem+0xa8>
  403ffa:	681a      	ldr	r2, [r3, #0]
  403ffc:	3b04      	subs	r3, #4
  403ffe:	b91a      	cbnz	r2, 404008 <quorem+0xb0>
  404000:	459b      	cmp	fp, r3
  404002:	f108 38ff 	add.w	r8, r8, #4294967295
  404006:	d3f8      	bcc.n	403ffa <quorem+0xa2>
  404008:	f8c0 8010 	str.w	r8, [r0, #16]
  40400c:	4604      	mov	r4, r0
  40400e:	f001 fd33 	bl	405a78 <__mcmp>
  404012:	2800      	cmp	r0, #0
  404014:	db2e      	blt.n	404074 <quorem+0x11c>
  404016:	f109 0901 	add.w	r9, r9, #1
  40401a:	465d      	mov	r5, fp
  40401c:	2300      	movs	r3, #0
  40401e:	f857 1b04 	ldr.w	r1, [r7], #4
  404022:	6828      	ldr	r0, [r5, #0]
  404024:	b28a      	uxth	r2, r1
  404026:	1a9a      	subs	r2, r3, r2
  404028:	0c0b      	lsrs	r3, r1, #16
  40402a:	fa12 f280 	uxtah	r2, r2, r0
  40402e:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  404032:	eb03 4322 	add.w	r3, r3, r2, asr #16
  404036:	b292      	uxth	r2, r2
  404038:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40403c:	45ba      	cmp	sl, r7
  40403e:	f845 2b04 	str.w	r2, [r5], #4
  404042:	ea4f 4323 	mov.w	r3, r3, asr #16
  404046:	d2ea      	bcs.n	40401e <quorem+0xc6>
  404048:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  40404c:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  404050:	b982      	cbnz	r2, 404074 <quorem+0x11c>
  404052:	1f1a      	subs	r2, r3, #4
  404054:	4593      	cmp	fp, r2
  404056:	d20b      	bcs.n	404070 <quorem+0x118>
  404058:	f853 2c04 	ldr.w	r2, [r3, #-4]
  40405c:	b942      	cbnz	r2, 404070 <quorem+0x118>
  40405e:	3b08      	subs	r3, #8
  404060:	e002      	b.n	404068 <quorem+0x110>
  404062:	681a      	ldr	r2, [r3, #0]
  404064:	3b04      	subs	r3, #4
  404066:	b91a      	cbnz	r2, 404070 <quorem+0x118>
  404068:	459b      	cmp	fp, r3
  40406a:	f108 38ff 	add.w	r8, r8, #4294967295
  40406e:	d3f8      	bcc.n	404062 <quorem+0x10a>
  404070:	f8c4 8010 	str.w	r8, [r4, #16]
  404074:	4648      	mov	r0, r9
  404076:	b003      	add	sp, #12
  404078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40407c:	2000      	movs	r0, #0
  40407e:	4770      	bx	lr

00404080 <_dtoa_r>:
  404080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404084:	6c01      	ldr	r1, [r0, #64]	; 0x40
  404086:	b09b      	sub	sp, #108	; 0x6c
  404088:	4604      	mov	r4, r0
  40408a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  40408c:	4692      	mov	sl, r2
  40408e:	469b      	mov	fp, r3
  404090:	b141      	cbz	r1, 4040a4 <_dtoa_r+0x24>
  404092:	6c42      	ldr	r2, [r0, #68]	; 0x44
  404094:	604a      	str	r2, [r1, #4]
  404096:	2301      	movs	r3, #1
  404098:	4093      	lsls	r3, r2
  40409a:	608b      	str	r3, [r1, #8]
  40409c:	f001 fb14 	bl	4056c8 <_Bfree>
  4040a0:	2300      	movs	r3, #0
  4040a2:	6423      	str	r3, [r4, #64]	; 0x40
  4040a4:	f1bb 0f00 	cmp.w	fp, #0
  4040a8:	465d      	mov	r5, fp
  4040aa:	db35      	blt.n	404118 <_dtoa_r+0x98>
  4040ac:	2300      	movs	r3, #0
  4040ae:	6033      	str	r3, [r6, #0]
  4040b0:	4b9d      	ldr	r3, [pc, #628]	; (404328 <_dtoa_r+0x2a8>)
  4040b2:	43ab      	bics	r3, r5
  4040b4:	d015      	beq.n	4040e2 <_dtoa_r+0x62>
  4040b6:	4650      	mov	r0, sl
  4040b8:	4659      	mov	r1, fp
  4040ba:	2200      	movs	r2, #0
  4040bc:	2300      	movs	r3, #0
  4040be:	f002 fe7d 	bl	406dbc <__aeabi_dcmpeq>
  4040c2:	4680      	mov	r8, r0
  4040c4:	2800      	cmp	r0, #0
  4040c6:	d02d      	beq.n	404124 <_dtoa_r+0xa4>
  4040c8:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4040ca:	2301      	movs	r3, #1
  4040cc:	6013      	str	r3, [r2, #0]
  4040ce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4040d0:	2b00      	cmp	r3, #0
  4040d2:	f000 80bd 	beq.w	404250 <_dtoa_r+0x1d0>
  4040d6:	4895      	ldr	r0, [pc, #596]	; (40432c <_dtoa_r+0x2ac>)
  4040d8:	6018      	str	r0, [r3, #0]
  4040da:	3801      	subs	r0, #1
  4040dc:	b01b      	add	sp, #108	; 0x6c
  4040de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4040e2:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4040e4:	f242 730f 	movw	r3, #9999	; 0x270f
  4040e8:	6013      	str	r3, [r2, #0]
  4040ea:	f1ba 0f00 	cmp.w	sl, #0
  4040ee:	d10d      	bne.n	40410c <_dtoa_r+0x8c>
  4040f0:	f3c5 0513 	ubfx	r5, r5, #0, #20
  4040f4:	b955      	cbnz	r5, 40410c <_dtoa_r+0x8c>
  4040f6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4040f8:	488d      	ldr	r0, [pc, #564]	; (404330 <_dtoa_r+0x2b0>)
  4040fa:	2b00      	cmp	r3, #0
  4040fc:	d0ee      	beq.n	4040dc <_dtoa_r+0x5c>
  4040fe:	f100 0308 	add.w	r3, r0, #8
  404102:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  404104:	6013      	str	r3, [r2, #0]
  404106:	b01b      	add	sp, #108	; 0x6c
  404108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40410c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40410e:	4889      	ldr	r0, [pc, #548]	; (404334 <_dtoa_r+0x2b4>)
  404110:	2b00      	cmp	r3, #0
  404112:	d0e3      	beq.n	4040dc <_dtoa_r+0x5c>
  404114:	1cc3      	adds	r3, r0, #3
  404116:	e7f4      	b.n	404102 <_dtoa_r+0x82>
  404118:	2301      	movs	r3, #1
  40411a:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  40411e:	6033      	str	r3, [r6, #0]
  404120:	46ab      	mov	fp, r5
  404122:	e7c5      	b.n	4040b0 <_dtoa_r+0x30>
  404124:	aa18      	add	r2, sp, #96	; 0x60
  404126:	ab19      	add	r3, sp, #100	; 0x64
  404128:	9201      	str	r2, [sp, #4]
  40412a:	9300      	str	r3, [sp, #0]
  40412c:	4652      	mov	r2, sl
  40412e:	465b      	mov	r3, fp
  404130:	4620      	mov	r0, r4
  404132:	f001 fd41 	bl	405bb8 <__d2b>
  404136:	0d2b      	lsrs	r3, r5, #20
  404138:	4681      	mov	r9, r0
  40413a:	d071      	beq.n	404220 <_dtoa_r+0x1a0>
  40413c:	f3cb 0213 	ubfx	r2, fp, #0, #20
  404140:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  404144:	9f18      	ldr	r7, [sp, #96]	; 0x60
  404146:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  40414a:	4650      	mov	r0, sl
  40414c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  404150:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  404154:	2200      	movs	r2, #0
  404156:	4b78      	ldr	r3, [pc, #480]	; (404338 <_dtoa_r+0x2b8>)
  404158:	f002 fa14 	bl	406584 <__aeabi_dsub>
  40415c:	a36c      	add	r3, pc, #432	; (adr r3, 404310 <_dtoa_r+0x290>)
  40415e:	e9d3 2300 	ldrd	r2, r3, [r3]
  404162:	f002 fbc3 	bl	4068ec <__aeabi_dmul>
  404166:	a36c      	add	r3, pc, #432	; (adr r3, 404318 <_dtoa_r+0x298>)
  404168:	e9d3 2300 	ldrd	r2, r3, [r3]
  40416c:	f002 fa0c 	bl	406588 <__adddf3>
  404170:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404174:	4630      	mov	r0, r6
  404176:	f002 fb53 	bl	406820 <__aeabi_i2d>
  40417a:	a369      	add	r3, pc, #420	; (adr r3, 404320 <_dtoa_r+0x2a0>)
  40417c:	e9d3 2300 	ldrd	r2, r3, [r3]
  404180:	f002 fbb4 	bl	4068ec <__aeabi_dmul>
  404184:	4602      	mov	r2, r0
  404186:	460b      	mov	r3, r1
  404188:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40418c:	f002 f9fc 	bl	406588 <__adddf3>
  404190:	e9cd 0104 	strd	r0, r1, [sp, #16]
  404194:	f002 fe5a 	bl	406e4c <__aeabi_d2iz>
  404198:	2200      	movs	r2, #0
  40419a:	9002      	str	r0, [sp, #8]
  40419c:	2300      	movs	r3, #0
  40419e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4041a2:	f002 fe15 	bl	406dd0 <__aeabi_dcmplt>
  4041a6:	2800      	cmp	r0, #0
  4041a8:	f040 8173 	bne.w	404492 <_dtoa_r+0x412>
  4041ac:	9d02      	ldr	r5, [sp, #8]
  4041ae:	2d16      	cmp	r5, #22
  4041b0:	f200 815d 	bhi.w	40446e <_dtoa_r+0x3ee>
  4041b4:	4b61      	ldr	r3, [pc, #388]	; (40433c <_dtoa_r+0x2bc>)
  4041b6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  4041ba:	e9d3 0100 	ldrd	r0, r1, [r3]
  4041be:	4652      	mov	r2, sl
  4041c0:	465b      	mov	r3, fp
  4041c2:	f002 fe23 	bl	406e0c <__aeabi_dcmpgt>
  4041c6:	2800      	cmp	r0, #0
  4041c8:	f000 81c5 	beq.w	404556 <_dtoa_r+0x4d6>
  4041cc:	1e6b      	subs	r3, r5, #1
  4041ce:	9302      	str	r3, [sp, #8]
  4041d0:	2300      	movs	r3, #0
  4041d2:	930e      	str	r3, [sp, #56]	; 0x38
  4041d4:	1bbf      	subs	r7, r7, r6
  4041d6:	1e7b      	subs	r3, r7, #1
  4041d8:	9306      	str	r3, [sp, #24]
  4041da:	f100 8154 	bmi.w	404486 <_dtoa_r+0x406>
  4041de:	2300      	movs	r3, #0
  4041e0:	9308      	str	r3, [sp, #32]
  4041e2:	9b02      	ldr	r3, [sp, #8]
  4041e4:	2b00      	cmp	r3, #0
  4041e6:	f2c0 8145 	blt.w	404474 <_dtoa_r+0x3f4>
  4041ea:	9a06      	ldr	r2, [sp, #24]
  4041ec:	930d      	str	r3, [sp, #52]	; 0x34
  4041ee:	4611      	mov	r1, r2
  4041f0:	4419      	add	r1, r3
  4041f2:	2300      	movs	r3, #0
  4041f4:	9106      	str	r1, [sp, #24]
  4041f6:	930c      	str	r3, [sp, #48]	; 0x30
  4041f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4041fa:	2b09      	cmp	r3, #9
  4041fc:	d82a      	bhi.n	404254 <_dtoa_r+0x1d4>
  4041fe:	2b05      	cmp	r3, #5
  404200:	f340 865b 	ble.w	404eba <_dtoa_r+0xe3a>
  404204:	3b04      	subs	r3, #4
  404206:	9324      	str	r3, [sp, #144]	; 0x90
  404208:	2500      	movs	r5, #0
  40420a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40420c:	3b02      	subs	r3, #2
  40420e:	2b03      	cmp	r3, #3
  404210:	f200 8642 	bhi.w	404e98 <_dtoa_r+0xe18>
  404214:	e8df f013 	tbh	[pc, r3, lsl #1]
  404218:	02c903d4 	.word	0x02c903d4
  40421c:	046103df 	.word	0x046103df
  404220:	9f18      	ldr	r7, [sp, #96]	; 0x60
  404222:	9e19      	ldr	r6, [sp, #100]	; 0x64
  404224:	443e      	add	r6, r7
  404226:	f206 4332 	addw	r3, r6, #1074	; 0x432
  40422a:	2b20      	cmp	r3, #32
  40422c:	f340 818e 	ble.w	40454c <_dtoa_r+0x4cc>
  404230:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  404234:	f206 4012 	addw	r0, r6, #1042	; 0x412
  404238:	409d      	lsls	r5, r3
  40423a:	fa2a f000 	lsr.w	r0, sl, r0
  40423e:	4328      	orrs	r0, r5
  404240:	f002 fade 	bl	406800 <__aeabi_ui2d>
  404244:	2301      	movs	r3, #1
  404246:	3e01      	subs	r6, #1
  404248:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40424c:	9314      	str	r3, [sp, #80]	; 0x50
  40424e:	e781      	b.n	404154 <_dtoa_r+0xd4>
  404250:	483b      	ldr	r0, [pc, #236]	; (404340 <_dtoa_r+0x2c0>)
  404252:	e743      	b.n	4040dc <_dtoa_r+0x5c>
  404254:	2100      	movs	r1, #0
  404256:	6461      	str	r1, [r4, #68]	; 0x44
  404258:	4620      	mov	r0, r4
  40425a:	9125      	str	r1, [sp, #148]	; 0x94
  40425c:	f001 fa0e 	bl	40567c <_Balloc>
  404260:	f04f 33ff 	mov.w	r3, #4294967295
  404264:	930a      	str	r3, [sp, #40]	; 0x28
  404266:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404268:	930f      	str	r3, [sp, #60]	; 0x3c
  40426a:	2301      	movs	r3, #1
  40426c:	9004      	str	r0, [sp, #16]
  40426e:	6420      	str	r0, [r4, #64]	; 0x40
  404270:	9224      	str	r2, [sp, #144]	; 0x90
  404272:	930b      	str	r3, [sp, #44]	; 0x2c
  404274:	9b19      	ldr	r3, [sp, #100]	; 0x64
  404276:	2b00      	cmp	r3, #0
  404278:	f2c0 80d9 	blt.w	40442e <_dtoa_r+0x3ae>
  40427c:	9a02      	ldr	r2, [sp, #8]
  40427e:	2a0e      	cmp	r2, #14
  404280:	f300 80d5 	bgt.w	40442e <_dtoa_r+0x3ae>
  404284:	4b2d      	ldr	r3, [pc, #180]	; (40433c <_dtoa_r+0x2bc>)
  404286:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40428a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40428e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  404292:	9b25      	ldr	r3, [sp, #148]	; 0x94
  404294:	2b00      	cmp	r3, #0
  404296:	f2c0 83ba 	blt.w	404a0e <_dtoa_r+0x98e>
  40429a:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  40429e:	4650      	mov	r0, sl
  4042a0:	462a      	mov	r2, r5
  4042a2:	4633      	mov	r3, r6
  4042a4:	4659      	mov	r1, fp
  4042a6:	f002 fc4b 	bl	406b40 <__aeabi_ddiv>
  4042aa:	f002 fdcf 	bl	406e4c <__aeabi_d2iz>
  4042ae:	4680      	mov	r8, r0
  4042b0:	f002 fab6 	bl	406820 <__aeabi_i2d>
  4042b4:	462a      	mov	r2, r5
  4042b6:	4633      	mov	r3, r6
  4042b8:	f002 fb18 	bl	4068ec <__aeabi_dmul>
  4042bc:	460b      	mov	r3, r1
  4042be:	4602      	mov	r2, r0
  4042c0:	4659      	mov	r1, fp
  4042c2:	4650      	mov	r0, sl
  4042c4:	f002 f95e 	bl	406584 <__aeabi_dsub>
  4042c8:	9d04      	ldr	r5, [sp, #16]
  4042ca:	f108 0330 	add.w	r3, r8, #48	; 0x30
  4042ce:	702b      	strb	r3, [r5, #0]
  4042d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4042d2:	2b01      	cmp	r3, #1
  4042d4:	4606      	mov	r6, r0
  4042d6:	460f      	mov	r7, r1
  4042d8:	f105 0501 	add.w	r5, r5, #1
  4042dc:	d068      	beq.n	4043b0 <_dtoa_r+0x330>
  4042de:	2200      	movs	r2, #0
  4042e0:	4b18      	ldr	r3, [pc, #96]	; (404344 <_dtoa_r+0x2c4>)
  4042e2:	f002 fb03 	bl	4068ec <__aeabi_dmul>
  4042e6:	2200      	movs	r2, #0
  4042e8:	2300      	movs	r3, #0
  4042ea:	4606      	mov	r6, r0
  4042ec:	460f      	mov	r7, r1
  4042ee:	f002 fd65 	bl	406dbc <__aeabi_dcmpeq>
  4042f2:	2800      	cmp	r0, #0
  4042f4:	f040 8088 	bne.w	404408 <_dtoa_r+0x388>
  4042f8:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  4042fc:	f04f 0a00 	mov.w	sl, #0
  404300:	f8df b040 	ldr.w	fp, [pc, #64]	; 404344 <_dtoa_r+0x2c4>
  404304:	940c      	str	r4, [sp, #48]	; 0x30
  404306:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  40430a:	e028      	b.n	40435e <_dtoa_r+0x2de>
  40430c:	f3af 8000 	nop.w
  404310:	636f4361 	.word	0x636f4361
  404314:	3fd287a7 	.word	0x3fd287a7
  404318:	8b60c8b3 	.word	0x8b60c8b3
  40431c:	3fc68a28 	.word	0x3fc68a28
  404320:	509f79fb 	.word	0x509f79fb
  404324:	3fd34413 	.word	0x3fd34413
  404328:	7ff00000 	.word	0x7ff00000
  40432c:	00406fd5 	.word	0x00406fd5
  404330:	00407020 	.word	0x00407020
  404334:	0040702c 	.word	0x0040702c
  404338:	3ff80000 	.word	0x3ff80000
  40433c:	00407058 	.word	0x00407058
  404340:	00406fd4 	.word	0x00406fd4
  404344:	40240000 	.word	0x40240000
  404348:	f002 fad0 	bl	4068ec <__aeabi_dmul>
  40434c:	2200      	movs	r2, #0
  40434e:	2300      	movs	r3, #0
  404350:	4606      	mov	r6, r0
  404352:	460f      	mov	r7, r1
  404354:	f002 fd32 	bl	406dbc <__aeabi_dcmpeq>
  404358:	2800      	cmp	r0, #0
  40435a:	f040 83c1 	bne.w	404ae0 <_dtoa_r+0xa60>
  40435e:	4642      	mov	r2, r8
  404360:	464b      	mov	r3, r9
  404362:	4630      	mov	r0, r6
  404364:	4639      	mov	r1, r7
  404366:	f002 fbeb 	bl	406b40 <__aeabi_ddiv>
  40436a:	f002 fd6f 	bl	406e4c <__aeabi_d2iz>
  40436e:	4604      	mov	r4, r0
  404370:	f002 fa56 	bl	406820 <__aeabi_i2d>
  404374:	4642      	mov	r2, r8
  404376:	464b      	mov	r3, r9
  404378:	f002 fab8 	bl	4068ec <__aeabi_dmul>
  40437c:	4602      	mov	r2, r0
  40437e:	460b      	mov	r3, r1
  404380:	4630      	mov	r0, r6
  404382:	4639      	mov	r1, r7
  404384:	f002 f8fe 	bl	406584 <__aeabi_dsub>
  404388:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  40438c:	9e04      	ldr	r6, [sp, #16]
  40438e:	f805 eb01 	strb.w	lr, [r5], #1
  404392:	eba5 0e06 	sub.w	lr, r5, r6
  404396:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  404398:	45b6      	cmp	lr, r6
  40439a:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40439e:	4652      	mov	r2, sl
  4043a0:	465b      	mov	r3, fp
  4043a2:	d1d1      	bne.n	404348 <_dtoa_r+0x2c8>
  4043a4:	46a0      	mov	r8, r4
  4043a6:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  4043aa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4043ac:	4606      	mov	r6, r0
  4043ae:	460f      	mov	r7, r1
  4043b0:	4632      	mov	r2, r6
  4043b2:	463b      	mov	r3, r7
  4043b4:	4630      	mov	r0, r6
  4043b6:	4639      	mov	r1, r7
  4043b8:	f002 f8e6 	bl	406588 <__adddf3>
  4043bc:	4606      	mov	r6, r0
  4043be:	460f      	mov	r7, r1
  4043c0:	4602      	mov	r2, r0
  4043c2:	460b      	mov	r3, r1
  4043c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4043c8:	f002 fd02 	bl	406dd0 <__aeabi_dcmplt>
  4043cc:	b948      	cbnz	r0, 4043e2 <_dtoa_r+0x362>
  4043ce:	4632      	mov	r2, r6
  4043d0:	463b      	mov	r3, r7
  4043d2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4043d6:	f002 fcf1 	bl	406dbc <__aeabi_dcmpeq>
  4043da:	b1a8      	cbz	r0, 404408 <_dtoa_r+0x388>
  4043dc:	f018 0f01 	tst.w	r8, #1
  4043e0:	d012      	beq.n	404408 <_dtoa_r+0x388>
  4043e2:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4043e6:	9a04      	ldr	r2, [sp, #16]
  4043e8:	1e6b      	subs	r3, r5, #1
  4043ea:	e004      	b.n	4043f6 <_dtoa_r+0x376>
  4043ec:	429a      	cmp	r2, r3
  4043ee:	f000 8401 	beq.w	404bf4 <_dtoa_r+0xb74>
  4043f2:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  4043f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  4043fa:	f103 0501 	add.w	r5, r3, #1
  4043fe:	d0f5      	beq.n	4043ec <_dtoa_r+0x36c>
  404400:	f108 0801 	add.w	r8, r8, #1
  404404:	f883 8000 	strb.w	r8, [r3]
  404408:	4649      	mov	r1, r9
  40440a:	4620      	mov	r0, r4
  40440c:	f001 f95c 	bl	4056c8 <_Bfree>
  404410:	2200      	movs	r2, #0
  404412:	9b02      	ldr	r3, [sp, #8]
  404414:	702a      	strb	r2, [r5, #0]
  404416:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404418:	3301      	adds	r3, #1
  40441a:	6013      	str	r3, [r2, #0]
  40441c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40441e:	2b00      	cmp	r3, #0
  404420:	f000 839e 	beq.w	404b60 <_dtoa_r+0xae0>
  404424:	9804      	ldr	r0, [sp, #16]
  404426:	601d      	str	r5, [r3, #0]
  404428:	b01b      	add	sp, #108	; 0x6c
  40442a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40442e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404430:	2a00      	cmp	r2, #0
  404432:	d03e      	beq.n	4044b2 <_dtoa_r+0x432>
  404434:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404436:	2a01      	cmp	r2, #1
  404438:	f340 8311 	ble.w	404a5e <_dtoa_r+0x9de>
  40443c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40443e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404440:	1e5f      	subs	r7, r3, #1
  404442:	42ba      	cmp	r2, r7
  404444:	f2c0 838f 	blt.w	404b66 <_dtoa_r+0xae6>
  404448:	1bd7      	subs	r7, r2, r7
  40444a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40444c:	2b00      	cmp	r3, #0
  40444e:	f2c0 848b 	blt.w	404d68 <_dtoa_r+0xce8>
  404452:	9d08      	ldr	r5, [sp, #32]
  404454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404456:	9a08      	ldr	r2, [sp, #32]
  404458:	441a      	add	r2, r3
  40445a:	9208      	str	r2, [sp, #32]
  40445c:	9a06      	ldr	r2, [sp, #24]
  40445e:	2101      	movs	r1, #1
  404460:	441a      	add	r2, r3
  404462:	4620      	mov	r0, r4
  404464:	9206      	str	r2, [sp, #24]
  404466:	f001 f9c9 	bl	4057fc <__i2b>
  40446a:	4606      	mov	r6, r0
  40446c:	e024      	b.n	4044b8 <_dtoa_r+0x438>
  40446e:	2301      	movs	r3, #1
  404470:	930e      	str	r3, [sp, #56]	; 0x38
  404472:	e6af      	b.n	4041d4 <_dtoa_r+0x154>
  404474:	9a08      	ldr	r2, [sp, #32]
  404476:	9b02      	ldr	r3, [sp, #8]
  404478:	1ad2      	subs	r2, r2, r3
  40447a:	425b      	negs	r3, r3
  40447c:	930c      	str	r3, [sp, #48]	; 0x30
  40447e:	2300      	movs	r3, #0
  404480:	9208      	str	r2, [sp, #32]
  404482:	930d      	str	r3, [sp, #52]	; 0x34
  404484:	e6b8      	b.n	4041f8 <_dtoa_r+0x178>
  404486:	f1c7 0301 	rsb	r3, r7, #1
  40448a:	9308      	str	r3, [sp, #32]
  40448c:	2300      	movs	r3, #0
  40448e:	9306      	str	r3, [sp, #24]
  404490:	e6a7      	b.n	4041e2 <_dtoa_r+0x162>
  404492:	9d02      	ldr	r5, [sp, #8]
  404494:	4628      	mov	r0, r5
  404496:	f002 f9c3 	bl	406820 <__aeabi_i2d>
  40449a:	4602      	mov	r2, r0
  40449c:	460b      	mov	r3, r1
  40449e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4044a2:	f002 fc8b 	bl	406dbc <__aeabi_dcmpeq>
  4044a6:	2800      	cmp	r0, #0
  4044a8:	f47f ae80 	bne.w	4041ac <_dtoa_r+0x12c>
  4044ac:	1e6b      	subs	r3, r5, #1
  4044ae:	9302      	str	r3, [sp, #8]
  4044b0:	e67c      	b.n	4041ac <_dtoa_r+0x12c>
  4044b2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4044b4:	9d08      	ldr	r5, [sp, #32]
  4044b6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  4044b8:	2d00      	cmp	r5, #0
  4044ba:	dd0c      	ble.n	4044d6 <_dtoa_r+0x456>
  4044bc:	9906      	ldr	r1, [sp, #24]
  4044be:	2900      	cmp	r1, #0
  4044c0:	460b      	mov	r3, r1
  4044c2:	dd08      	ble.n	4044d6 <_dtoa_r+0x456>
  4044c4:	42a9      	cmp	r1, r5
  4044c6:	9a08      	ldr	r2, [sp, #32]
  4044c8:	bfa8      	it	ge
  4044ca:	462b      	movge	r3, r5
  4044cc:	1ad2      	subs	r2, r2, r3
  4044ce:	1aed      	subs	r5, r5, r3
  4044d0:	1acb      	subs	r3, r1, r3
  4044d2:	9208      	str	r2, [sp, #32]
  4044d4:	9306      	str	r3, [sp, #24]
  4044d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4044d8:	b1d3      	cbz	r3, 404510 <_dtoa_r+0x490>
  4044da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4044dc:	2b00      	cmp	r3, #0
  4044de:	f000 82b7 	beq.w	404a50 <_dtoa_r+0x9d0>
  4044e2:	2f00      	cmp	r7, #0
  4044e4:	dd10      	ble.n	404508 <_dtoa_r+0x488>
  4044e6:	4631      	mov	r1, r6
  4044e8:	463a      	mov	r2, r7
  4044ea:	4620      	mov	r0, r4
  4044ec:	f001 fa22 	bl	405934 <__pow5mult>
  4044f0:	464a      	mov	r2, r9
  4044f2:	4601      	mov	r1, r0
  4044f4:	4606      	mov	r6, r0
  4044f6:	4620      	mov	r0, r4
  4044f8:	f001 f98a 	bl	405810 <__multiply>
  4044fc:	4649      	mov	r1, r9
  4044fe:	4680      	mov	r8, r0
  404500:	4620      	mov	r0, r4
  404502:	f001 f8e1 	bl	4056c8 <_Bfree>
  404506:	46c1      	mov	r9, r8
  404508:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40450a:	1bda      	subs	r2, r3, r7
  40450c:	f040 82a1 	bne.w	404a52 <_dtoa_r+0x9d2>
  404510:	2101      	movs	r1, #1
  404512:	4620      	mov	r0, r4
  404514:	f001 f972 	bl	4057fc <__i2b>
  404518:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40451a:	2b00      	cmp	r3, #0
  40451c:	4680      	mov	r8, r0
  40451e:	dd1c      	ble.n	40455a <_dtoa_r+0x4da>
  404520:	4601      	mov	r1, r0
  404522:	461a      	mov	r2, r3
  404524:	4620      	mov	r0, r4
  404526:	f001 fa05 	bl	405934 <__pow5mult>
  40452a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40452c:	2b01      	cmp	r3, #1
  40452e:	4680      	mov	r8, r0
  404530:	f340 8254 	ble.w	4049dc <_dtoa_r+0x95c>
  404534:	2300      	movs	r3, #0
  404536:	930c      	str	r3, [sp, #48]	; 0x30
  404538:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40453c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  404540:	6918      	ldr	r0, [r3, #16]
  404542:	f001 f90b 	bl	40575c <__hi0bits>
  404546:	f1c0 0020 	rsb	r0, r0, #32
  40454a:	e010      	b.n	40456e <_dtoa_r+0x4ee>
  40454c:	f1c3 0520 	rsb	r5, r3, #32
  404550:	fa0a f005 	lsl.w	r0, sl, r5
  404554:	e674      	b.n	404240 <_dtoa_r+0x1c0>
  404556:	900e      	str	r0, [sp, #56]	; 0x38
  404558:	e63c      	b.n	4041d4 <_dtoa_r+0x154>
  40455a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40455c:	2b01      	cmp	r3, #1
  40455e:	f340 8287 	ble.w	404a70 <_dtoa_r+0x9f0>
  404562:	2300      	movs	r3, #0
  404564:	930c      	str	r3, [sp, #48]	; 0x30
  404566:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404568:	2001      	movs	r0, #1
  40456a:	2b00      	cmp	r3, #0
  40456c:	d1e4      	bne.n	404538 <_dtoa_r+0x4b8>
  40456e:	9a06      	ldr	r2, [sp, #24]
  404570:	4410      	add	r0, r2
  404572:	f010 001f 	ands.w	r0, r0, #31
  404576:	f000 80a1 	beq.w	4046bc <_dtoa_r+0x63c>
  40457a:	f1c0 0320 	rsb	r3, r0, #32
  40457e:	2b04      	cmp	r3, #4
  404580:	f340 849e 	ble.w	404ec0 <_dtoa_r+0xe40>
  404584:	9b08      	ldr	r3, [sp, #32]
  404586:	f1c0 001c 	rsb	r0, r0, #28
  40458a:	4403      	add	r3, r0
  40458c:	9308      	str	r3, [sp, #32]
  40458e:	4613      	mov	r3, r2
  404590:	4403      	add	r3, r0
  404592:	4405      	add	r5, r0
  404594:	9306      	str	r3, [sp, #24]
  404596:	9b08      	ldr	r3, [sp, #32]
  404598:	2b00      	cmp	r3, #0
  40459a:	dd05      	ble.n	4045a8 <_dtoa_r+0x528>
  40459c:	4649      	mov	r1, r9
  40459e:	461a      	mov	r2, r3
  4045a0:	4620      	mov	r0, r4
  4045a2:	f001 fa17 	bl	4059d4 <__lshift>
  4045a6:	4681      	mov	r9, r0
  4045a8:	9b06      	ldr	r3, [sp, #24]
  4045aa:	2b00      	cmp	r3, #0
  4045ac:	dd05      	ble.n	4045ba <_dtoa_r+0x53a>
  4045ae:	4641      	mov	r1, r8
  4045b0:	461a      	mov	r2, r3
  4045b2:	4620      	mov	r0, r4
  4045b4:	f001 fa0e 	bl	4059d4 <__lshift>
  4045b8:	4680      	mov	r8, r0
  4045ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4045bc:	2b00      	cmp	r3, #0
  4045be:	f040 8086 	bne.w	4046ce <_dtoa_r+0x64e>
  4045c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4045c4:	2b00      	cmp	r3, #0
  4045c6:	f340 8266 	ble.w	404a96 <_dtoa_r+0xa16>
  4045ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4045cc:	2b00      	cmp	r3, #0
  4045ce:	f000 8098 	beq.w	404702 <_dtoa_r+0x682>
  4045d2:	2d00      	cmp	r5, #0
  4045d4:	dd05      	ble.n	4045e2 <_dtoa_r+0x562>
  4045d6:	4631      	mov	r1, r6
  4045d8:	462a      	mov	r2, r5
  4045da:	4620      	mov	r0, r4
  4045dc:	f001 f9fa 	bl	4059d4 <__lshift>
  4045e0:	4606      	mov	r6, r0
  4045e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4045e4:	2b00      	cmp	r3, #0
  4045e6:	f040 8337 	bne.w	404c58 <_dtoa_r+0xbd8>
  4045ea:	9606      	str	r6, [sp, #24]
  4045ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4045ee:	9a04      	ldr	r2, [sp, #16]
  4045f0:	f8dd b018 	ldr.w	fp, [sp, #24]
  4045f4:	3b01      	subs	r3, #1
  4045f6:	18d3      	adds	r3, r2, r3
  4045f8:	930b      	str	r3, [sp, #44]	; 0x2c
  4045fa:	f00a 0301 	and.w	r3, sl, #1
  4045fe:	930c      	str	r3, [sp, #48]	; 0x30
  404600:	4617      	mov	r7, r2
  404602:	46c2      	mov	sl, r8
  404604:	4651      	mov	r1, sl
  404606:	4648      	mov	r0, r9
  404608:	f7ff fca6 	bl	403f58 <quorem>
  40460c:	4631      	mov	r1, r6
  40460e:	4605      	mov	r5, r0
  404610:	4648      	mov	r0, r9
  404612:	f001 fa31 	bl	405a78 <__mcmp>
  404616:	465a      	mov	r2, fp
  404618:	900a      	str	r0, [sp, #40]	; 0x28
  40461a:	4651      	mov	r1, sl
  40461c:	4620      	mov	r0, r4
  40461e:	f001 fa47 	bl	405ab0 <__mdiff>
  404622:	68c2      	ldr	r2, [r0, #12]
  404624:	4680      	mov	r8, r0
  404626:	f105 0330 	add.w	r3, r5, #48	; 0x30
  40462a:	2a00      	cmp	r2, #0
  40462c:	f040 822b 	bne.w	404a86 <_dtoa_r+0xa06>
  404630:	4601      	mov	r1, r0
  404632:	4648      	mov	r0, r9
  404634:	9308      	str	r3, [sp, #32]
  404636:	f001 fa1f 	bl	405a78 <__mcmp>
  40463a:	4641      	mov	r1, r8
  40463c:	9006      	str	r0, [sp, #24]
  40463e:	4620      	mov	r0, r4
  404640:	f001 f842 	bl	4056c8 <_Bfree>
  404644:	9a06      	ldr	r2, [sp, #24]
  404646:	9b08      	ldr	r3, [sp, #32]
  404648:	b932      	cbnz	r2, 404658 <_dtoa_r+0x5d8>
  40464a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40464c:	b921      	cbnz	r1, 404658 <_dtoa_r+0x5d8>
  40464e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404650:	2a00      	cmp	r2, #0
  404652:	f000 83ef 	beq.w	404e34 <_dtoa_r+0xdb4>
  404656:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404658:	990a      	ldr	r1, [sp, #40]	; 0x28
  40465a:	2900      	cmp	r1, #0
  40465c:	f2c0 829f 	blt.w	404b9e <_dtoa_r+0xb1e>
  404660:	d105      	bne.n	40466e <_dtoa_r+0x5ee>
  404662:	9924      	ldr	r1, [sp, #144]	; 0x90
  404664:	b919      	cbnz	r1, 40466e <_dtoa_r+0x5ee>
  404666:	990c      	ldr	r1, [sp, #48]	; 0x30
  404668:	2900      	cmp	r1, #0
  40466a:	f000 8298 	beq.w	404b9e <_dtoa_r+0xb1e>
  40466e:	2a00      	cmp	r2, #0
  404670:	f300 8306 	bgt.w	404c80 <_dtoa_r+0xc00>
  404674:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404676:	703b      	strb	r3, [r7, #0]
  404678:	f107 0801 	add.w	r8, r7, #1
  40467c:	4297      	cmp	r7, r2
  40467e:	4645      	mov	r5, r8
  404680:	f000 830c 	beq.w	404c9c <_dtoa_r+0xc1c>
  404684:	4649      	mov	r1, r9
  404686:	2300      	movs	r3, #0
  404688:	220a      	movs	r2, #10
  40468a:	4620      	mov	r0, r4
  40468c:	f001 f826 	bl	4056dc <__multadd>
  404690:	455e      	cmp	r6, fp
  404692:	4681      	mov	r9, r0
  404694:	4631      	mov	r1, r6
  404696:	f04f 0300 	mov.w	r3, #0
  40469a:	f04f 020a 	mov.w	r2, #10
  40469e:	4620      	mov	r0, r4
  4046a0:	f000 81eb 	beq.w	404a7a <_dtoa_r+0x9fa>
  4046a4:	f001 f81a 	bl	4056dc <__multadd>
  4046a8:	4659      	mov	r1, fp
  4046aa:	4606      	mov	r6, r0
  4046ac:	2300      	movs	r3, #0
  4046ae:	220a      	movs	r2, #10
  4046b0:	4620      	mov	r0, r4
  4046b2:	f001 f813 	bl	4056dc <__multadd>
  4046b6:	4647      	mov	r7, r8
  4046b8:	4683      	mov	fp, r0
  4046ba:	e7a3      	b.n	404604 <_dtoa_r+0x584>
  4046bc:	201c      	movs	r0, #28
  4046be:	9b08      	ldr	r3, [sp, #32]
  4046c0:	4403      	add	r3, r0
  4046c2:	9308      	str	r3, [sp, #32]
  4046c4:	9b06      	ldr	r3, [sp, #24]
  4046c6:	4403      	add	r3, r0
  4046c8:	4405      	add	r5, r0
  4046ca:	9306      	str	r3, [sp, #24]
  4046cc:	e763      	b.n	404596 <_dtoa_r+0x516>
  4046ce:	4641      	mov	r1, r8
  4046d0:	4648      	mov	r0, r9
  4046d2:	f001 f9d1 	bl	405a78 <__mcmp>
  4046d6:	2800      	cmp	r0, #0
  4046d8:	f6bf af73 	bge.w	4045c2 <_dtoa_r+0x542>
  4046dc:	9f02      	ldr	r7, [sp, #8]
  4046de:	4649      	mov	r1, r9
  4046e0:	2300      	movs	r3, #0
  4046e2:	220a      	movs	r2, #10
  4046e4:	4620      	mov	r0, r4
  4046e6:	3f01      	subs	r7, #1
  4046e8:	9702      	str	r7, [sp, #8]
  4046ea:	f000 fff7 	bl	4056dc <__multadd>
  4046ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4046f0:	4681      	mov	r9, r0
  4046f2:	2b00      	cmp	r3, #0
  4046f4:	f040 83b6 	bne.w	404e64 <_dtoa_r+0xde4>
  4046f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4046fa:	2b00      	cmp	r3, #0
  4046fc:	f340 83bf 	ble.w	404e7e <_dtoa_r+0xdfe>
  404700:	930a      	str	r3, [sp, #40]	; 0x28
  404702:	f8dd b010 	ldr.w	fp, [sp, #16]
  404706:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  404708:	465d      	mov	r5, fp
  40470a:	e002      	b.n	404712 <_dtoa_r+0x692>
  40470c:	f000 ffe6 	bl	4056dc <__multadd>
  404710:	4681      	mov	r9, r0
  404712:	4641      	mov	r1, r8
  404714:	4648      	mov	r0, r9
  404716:	f7ff fc1f 	bl	403f58 <quorem>
  40471a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  40471e:	f805 ab01 	strb.w	sl, [r5], #1
  404722:	eba5 030b 	sub.w	r3, r5, fp
  404726:	42bb      	cmp	r3, r7
  404728:	f04f 020a 	mov.w	r2, #10
  40472c:	f04f 0300 	mov.w	r3, #0
  404730:	4649      	mov	r1, r9
  404732:	4620      	mov	r0, r4
  404734:	dbea      	blt.n	40470c <_dtoa_r+0x68c>
  404736:	9b04      	ldr	r3, [sp, #16]
  404738:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40473a:	2a01      	cmp	r2, #1
  40473c:	bfac      	ite	ge
  40473e:	189b      	addge	r3, r3, r2
  404740:	3301      	addlt	r3, #1
  404742:	461d      	mov	r5, r3
  404744:	f04f 0b00 	mov.w	fp, #0
  404748:	4649      	mov	r1, r9
  40474a:	2201      	movs	r2, #1
  40474c:	4620      	mov	r0, r4
  40474e:	f001 f941 	bl	4059d4 <__lshift>
  404752:	4641      	mov	r1, r8
  404754:	4681      	mov	r9, r0
  404756:	f001 f98f 	bl	405a78 <__mcmp>
  40475a:	2800      	cmp	r0, #0
  40475c:	f340 823d 	ble.w	404bda <_dtoa_r+0xb5a>
  404760:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  404764:	9904      	ldr	r1, [sp, #16]
  404766:	1e6b      	subs	r3, r5, #1
  404768:	e004      	b.n	404774 <_dtoa_r+0x6f4>
  40476a:	428b      	cmp	r3, r1
  40476c:	f000 81ae 	beq.w	404acc <_dtoa_r+0xa4c>
  404770:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  404774:	2a39      	cmp	r2, #57	; 0x39
  404776:	f103 0501 	add.w	r5, r3, #1
  40477a:	d0f6      	beq.n	40476a <_dtoa_r+0x6ea>
  40477c:	3201      	adds	r2, #1
  40477e:	701a      	strb	r2, [r3, #0]
  404780:	4641      	mov	r1, r8
  404782:	4620      	mov	r0, r4
  404784:	f000 ffa0 	bl	4056c8 <_Bfree>
  404788:	2e00      	cmp	r6, #0
  40478a:	f43f ae3d 	beq.w	404408 <_dtoa_r+0x388>
  40478e:	f1bb 0f00 	cmp.w	fp, #0
  404792:	d005      	beq.n	4047a0 <_dtoa_r+0x720>
  404794:	45b3      	cmp	fp, r6
  404796:	d003      	beq.n	4047a0 <_dtoa_r+0x720>
  404798:	4659      	mov	r1, fp
  40479a:	4620      	mov	r0, r4
  40479c:	f000 ff94 	bl	4056c8 <_Bfree>
  4047a0:	4631      	mov	r1, r6
  4047a2:	4620      	mov	r0, r4
  4047a4:	f000 ff90 	bl	4056c8 <_Bfree>
  4047a8:	e62e      	b.n	404408 <_dtoa_r+0x388>
  4047aa:	2300      	movs	r3, #0
  4047ac:	930b      	str	r3, [sp, #44]	; 0x2c
  4047ae:	9b02      	ldr	r3, [sp, #8]
  4047b0:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4047b2:	4413      	add	r3, r2
  4047b4:	930f      	str	r3, [sp, #60]	; 0x3c
  4047b6:	3301      	adds	r3, #1
  4047b8:	2b01      	cmp	r3, #1
  4047ba:	461f      	mov	r7, r3
  4047bc:	461e      	mov	r6, r3
  4047be:	930a      	str	r3, [sp, #40]	; 0x28
  4047c0:	bfb8      	it	lt
  4047c2:	2701      	movlt	r7, #1
  4047c4:	2100      	movs	r1, #0
  4047c6:	2f17      	cmp	r7, #23
  4047c8:	6461      	str	r1, [r4, #68]	; 0x44
  4047ca:	d90a      	bls.n	4047e2 <_dtoa_r+0x762>
  4047cc:	2201      	movs	r2, #1
  4047ce:	2304      	movs	r3, #4
  4047d0:	005b      	lsls	r3, r3, #1
  4047d2:	f103 0014 	add.w	r0, r3, #20
  4047d6:	4287      	cmp	r7, r0
  4047d8:	4611      	mov	r1, r2
  4047da:	f102 0201 	add.w	r2, r2, #1
  4047de:	d2f7      	bcs.n	4047d0 <_dtoa_r+0x750>
  4047e0:	6461      	str	r1, [r4, #68]	; 0x44
  4047e2:	4620      	mov	r0, r4
  4047e4:	f000 ff4a 	bl	40567c <_Balloc>
  4047e8:	2e0e      	cmp	r6, #14
  4047ea:	9004      	str	r0, [sp, #16]
  4047ec:	6420      	str	r0, [r4, #64]	; 0x40
  4047ee:	f63f ad41 	bhi.w	404274 <_dtoa_r+0x1f4>
  4047f2:	2d00      	cmp	r5, #0
  4047f4:	f43f ad3e 	beq.w	404274 <_dtoa_r+0x1f4>
  4047f8:	9902      	ldr	r1, [sp, #8]
  4047fa:	2900      	cmp	r1, #0
  4047fc:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  404800:	f340 8202 	ble.w	404c08 <_dtoa_r+0xb88>
  404804:	4bb8      	ldr	r3, [pc, #736]	; (404ae8 <_dtoa_r+0xa68>)
  404806:	f001 020f 	and.w	r2, r1, #15
  40480a:	110d      	asrs	r5, r1, #4
  40480c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  404810:	06e9      	lsls	r1, r5, #27
  404812:	e9d3 6700 	ldrd	r6, r7, [r3]
  404816:	f140 81ae 	bpl.w	404b76 <_dtoa_r+0xaf6>
  40481a:	4bb4      	ldr	r3, [pc, #720]	; (404aec <_dtoa_r+0xa6c>)
  40481c:	4650      	mov	r0, sl
  40481e:	4659      	mov	r1, fp
  404820:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  404824:	f002 f98c 	bl	406b40 <__aeabi_ddiv>
  404828:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40482c:	f005 050f 	and.w	r5, r5, #15
  404830:	f04f 0a03 	mov.w	sl, #3
  404834:	b18d      	cbz	r5, 40485a <_dtoa_r+0x7da>
  404836:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 404aec <_dtoa_r+0xa6c>
  40483a:	07ea      	lsls	r2, r5, #31
  40483c:	d509      	bpl.n	404852 <_dtoa_r+0x7d2>
  40483e:	4630      	mov	r0, r6
  404840:	4639      	mov	r1, r7
  404842:	e9d8 2300 	ldrd	r2, r3, [r8]
  404846:	f002 f851 	bl	4068ec <__aeabi_dmul>
  40484a:	f10a 0a01 	add.w	sl, sl, #1
  40484e:	4606      	mov	r6, r0
  404850:	460f      	mov	r7, r1
  404852:	106d      	asrs	r5, r5, #1
  404854:	f108 0808 	add.w	r8, r8, #8
  404858:	d1ef      	bne.n	40483a <_dtoa_r+0x7ba>
  40485a:	463b      	mov	r3, r7
  40485c:	4632      	mov	r2, r6
  40485e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  404862:	f002 f96d 	bl	406b40 <__aeabi_ddiv>
  404866:	4607      	mov	r7, r0
  404868:	4688      	mov	r8, r1
  40486a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40486c:	b143      	cbz	r3, 404880 <_dtoa_r+0x800>
  40486e:	2200      	movs	r2, #0
  404870:	4b9f      	ldr	r3, [pc, #636]	; (404af0 <_dtoa_r+0xa70>)
  404872:	4638      	mov	r0, r7
  404874:	4641      	mov	r1, r8
  404876:	f002 faab 	bl	406dd0 <__aeabi_dcmplt>
  40487a:	2800      	cmp	r0, #0
  40487c:	f040 8286 	bne.w	404d8c <_dtoa_r+0xd0c>
  404880:	4650      	mov	r0, sl
  404882:	f001 ffcd 	bl	406820 <__aeabi_i2d>
  404886:	463a      	mov	r2, r7
  404888:	4643      	mov	r3, r8
  40488a:	f002 f82f 	bl	4068ec <__aeabi_dmul>
  40488e:	4b99      	ldr	r3, [pc, #612]	; (404af4 <_dtoa_r+0xa74>)
  404890:	2200      	movs	r2, #0
  404892:	f001 fe79 	bl	406588 <__adddf3>
  404896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404898:	4605      	mov	r5, r0
  40489a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40489e:	2b00      	cmp	r3, #0
  4048a0:	f000 813e 	beq.w	404b20 <_dtoa_r+0xaa0>
  4048a4:	9b02      	ldr	r3, [sp, #8]
  4048a6:	9315      	str	r3, [sp, #84]	; 0x54
  4048a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4048aa:	9312      	str	r3, [sp, #72]	; 0x48
  4048ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4048ae:	2b00      	cmp	r3, #0
  4048b0:	f000 81fa 	beq.w	404ca8 <_dtoa_r+0xc28>
  4048b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4048b6:	4b8c      	ldr	r3, [pc, #560]	; (404ae8 <_dtoa_r+0xa68>)
  4048b8:	498f      	ldr	r1, [pc, #572]	; (404af8 <_dtoa_r+0xa78>)
  4048ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4048be:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  4048c2:	2000      	movs	r0, #0
  4048c4:	f002 f93c 	bl	406b40 <__aeabi_ddiv>
  4048c8:	462a      	mov	r2, r5
  4048ca:	4633      	mov	r3, r6
  4048cc:	f001 fe5a 	bl	406584 <__aeabi_dsub>
  4048d0:	4682      	mov	sl, r0
  4048d2:	468b      	mov	fp, r1
  4048d4:	4638      	mov	r0, r7
  4048d6:	4641      	mov	r1, r8
  4048d8:	f002 fab8 	bl	406e4c <__aeabi_d2iz>
  4048dc:	4605      	mov	r5, r0
  4048de:	f001 ff9f 	bl	406820 <__aeabi_i2d>
  4048e2:	4602      	mov	r2, r0
  4048e4:	460b      	mov	r3, r1
  4048e6:	4638      	mov	r0, r7
  4048e8:	4641      	mov	r1, r8
  4048ea:	f001 fe4b 	bl	406584 <__aeabi_dsub>
  4048ee:	3530      	adds	r5, #48	; 0x30
  4048f0:	fa5f f885 	uxtb.w	r8, r5
  4048f4:	9d04      	ldr	r5, [sp, #16]
  4048f6:	4606      	mov	r6, r0
  4048f8:	460f      	mov	r7, r1
  4048fa:	f885 8000 	strb.w	r8, [r5]
  4048fe:	4602      	mov	r2, r0
  404900:	460b      	mov	r3, r1
  404902:	4650      	mov	r0, sl
  404904:	4659      	mov	r1, fp
  404906:	3501      	adds	r5, #1
  404908:	f002 fa80 	bl	406e0c <__aeabi_dcmpgt>
  40490c:	2800      	cmp	r0, #0
  40490e:	d154      	bne.n	4049ba <_dtoa_r+0x93a>
  404910:	4632      	mov	r2, r6
  404912:	463b      	mov	r3, r7
  404914:	2000      	movs	r0, #0
  404916:	4976      	ldr	r1, [pc, #472]	; (404af0 <_dtoa_r+0xa70>)
  404918:	f001 fe34 	bl	406584 <__aeabi_dsub>
  40491c:	4602      	mov	r2, r0
  40491e:	460b      	mov	r3, r1
  404920:	4650      	mov	r0, sl
  404922:	4659      	mov	r1, fp
  404924:	f002 fa72 	bl	406e0c <__aeabi_dcmpgt>
  404928:	2800      	cmp	r0, #0
  40492a:	f040 8270 	bne.w	404e0e <_dtoa_r+0xd8e>
  40492e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404930:	2a01      	cmp	r2, #1
  404932:	f000 8111 	beq.w	404b58 <_dtoa_r+0xad8>
  404936:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404938:	9a04      	ldr	r2, [sp, #16]
  40493a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40493e:	4413      	add	r3, r2
  404940:	4699      	mov	r9, r3
  404942:	e00d      	b.n	404960 <_dtoa_r+0x8e0>
  404944:	2000      	movs	r0, #0
  404946:	496a      	ldr	r1, [pc, #424]	; (404af0 <_dtoa_r+0xa70>)
  404948:	f001 fe1c 	bl	406584 <__aeabi_dsub>
  40494c:	4652      	mov	r2, sl
  40494e:	465b      	mov	r3, fp
  404950:	f002 fa3e 	bl	406dd0 <__aeabi_dcmplt>
  404954:	2800      	cmp	r0, #0
  404956:	f040 8258 	bne.w	404e0a <_dtoa_r+0xd8a>
  40495a:	454d      	cmp	r5, r9
  40495c:	f000 80fa 	beq.w	404b54 <_dtoa_r+0xad4>
  404960:	4650      	mov	r0, sl
  404962:	4659      	mov	r1, fp
  404964:	2200      	movs	r2, #0
  404966:	4b65      	ldr	r3, [pc, #404]	; (404afc <_dtoa_r+0xa7c>)
  404968:	f001 ffc0 	bl	4068ec <__aeabi_dmul>
  40496c:	2200      	movs	r2, #0
  40496e:	4b63      	ldr	r3, [pc, #396]	; (404afc <_dtoa_r+0xa7c>)
  404970:	4682      	mov	sl, r0
  404972:	468b      	mov	fp, r1
  404974:	4630      	mov	r0, r6
  404976:	4639      	mov	r1, r7
  404978:	f001 ffb8 	bl	4068ec <__aeabi_dmul>
  40497c:	460f      	mov	r7, r1
  40497e:	4606      	mov	r6, r0
  404980:	f002 fa64 	bl	406e4c <__aeabi_d2iz>
  404984:	4680      	mov	r8, r0
  404986:	f001 ff4b 	bl	406820 <__aeabi_i2d>
  40498a:	4602      	mov	r2, r0
  40498c:	460b      	mov	r3, r1
  40498e:	4630      	mov	r0, r6
  404990:	4639      	mov	r1, r7
  404992:	f001 fdf7 	bl	406584 <__aeabi_dsub>
  404996:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40499a:	fa5f f888 	uxtb.w	r8, r8
  40499e:	4652      	mov	r2, sl
  4049a0:	465b      	mov	r3, fp
  4049a2:	f805 8b01 	strb.w	r8, [r5], #1
  4049a6:	4606      	mov	r6, r0
  4049a8:	460f      	mov	r7, r1
  4049aa:	f002 fa11 	bl	406dd0 <__aeabi_dcmplt>
  4049ae:	4632      	mov	r2, r6
  4049b0:	463b      	mov	r3, r7
  4049b2:	2800      	cmp	r0, #0
  4049b4:	d0c6      	beq.n	404944 <_dtoa_r+0x8c4>
  4049b6:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4049ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4049bc:	9302      	str	r3, [sp, #8]
  4049be:	e523      	b.n	404408 <_dtoa_r+0x388>
  4049c0:	2300      	movs	r3, #0
  4049c2:	930b      	str	r3, [sp, #44]	; 0x2c
  4049c4:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4049c6:	2b00      	cmp	r3, #0
  4049c8:	f340 80dc 	ble.w	404b84 <_dtoa_r+0xb04>
  4049cc:	461f      	mov	r7, r3
  4049ce:	461e      	mov	r6, r3
  4049d0:	930f      	str	r3, [sp, #60]	; 0x3c
  4049d2:	930a      	str	r3, [sp, #40]	; 0x28
  4049d4:	e6f6      	b.n	4047c4 <_dtoa_r+0x744>
  4049d6:	2301      	movs	r3, #1
  4049d8:	930b      	str	r3, [sp, #44]	; 0x2c
  4049da:	e7f3      	b.n	4049c4 <_dtoa_r+0x944>
  4049dc:	f1ba 0f00 	cmp.w	sl, #0
  4049e0:	f47f ada8 	bne.w	404534 <_dtoa_r+0x4b4>
  4049e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4049e8:	2b00      	cmp	r3, #0
  4049ea:	f47f adba 	bne.w	404562 <_dtoa_r+0x4e2>
  4049ee:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  4049f2:	0d3f      	lsrs	r7, r7, #20
  4049f4:	053f      	lsls	r7, r7, #20
  4049f6:	2f00      	cmp	r7, #0
  4049f8:	f000 820d 	beq.w	404e16 <_dtoa_r+0xd96>
  4049fc:	9b08      	ldr	r3, [sp, #32]
  4049fe:	3301      	adds	r3, #1
  404a00:	9308      	str	r3, [sp, #32]
  404a02:	9b06      	ldr	r3, [sp, #24]
  404a04:	3301      	adds	r3, #1
  404a06:	9306      	str	r3, [sp, #24]
  404a08:	2301      	movs	r3, #1
  404a0a:	930c      	str	r3, [sp, #48]	; 0x30
  404a0c:	e5ab      	b.n	404566 <_dtoa_r+0x4e6>
  404a0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404a10:	2b00      	cmp	r3, #0
  404a12:	f73f ac42 	bgt.w	40429a <_dtoa_r+0x21a>
  404a16:	f040 8221 	bne.w	404e5c <_dtoa_r+0xddc>
  404a1a:	2200      	movs	r2, #0
  404a1c:	4b38      	ldr	r3, [pc, #224]	; (404b00 <_dtoa_r+0xa80>)
  404a1e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  404a22:	f001 ff63 	bl	4068ec <__aeabi_dmul>
  404a26:	4652      	mov	r2, sl
  404a28:	465b      	mov	r3, fp
  404a2a:	f002 f9e5 	bl	406df8 <__aeabi_dcmpge>
  404a2e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  404a32:	4646      	mov	r6, r8
  404a34:	2800      	cmp	r0, #0
  404a36:	d041      	beq.n	404abc <_dtoa_r+0xa3c>
  404a38:	9b25      	ldr	r3, [sp, #148]	; 0x94
  404a3a:	9d04      	ldr	r5, [sp, #16]
  404a3c:	43db      	mvns	r3, r3
  404a3e:	9302      	str	r3, [sp, #8]
  404a40:	4641      	mov	r1, r8
  404a42:	4620      	mov	r0, r4
  404a44:	f000 fe40 	bl	4056c8 <_Bfree>
  404a48:	2e00      	cmp	r6, #0
  404a4a:	f43f acdd 	beq.w	404408 <_dtoa_r+0x388>
  404a4e:	e6a7      	b.n	4047a0 <_dtoa_r+0x720>
  404a50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404a52:	4649      	mov	r1, r9
  404a54:	4620      	mov	r0, r4
  404a56:	f000 ff6d 	bl	405934 <__pow5mult>
  404a5a:	4681      	mov	r9, r0
  404a5c:	e558      	b.n	404510 <_dtoa_r+0x490>
  404a5e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  404a60:	2a00      	cmp	r2, #0
  404a62:	f000 8187 	beq.w	404d74 <_dtoa_r+0xcf4>
  404a66:	f203 4333 	addw	r3, r3, #1075	; 0x433
  404a6a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404a6c:	9d08      	ldr	r5, [sp, #32]
  404a6e:	e4f2      	b.n	404456 <_dtoa_r+0x3d6>
  404a70:	f1ba 0f00 	cmp.w	sl, #0
  404a74:	f47f ad75 	bne.w	404562 <_dtoa_r+0x4e2>
  404a78:	e7b4      	b.n	4049e4 <_dtoa_r+0x964>
  404a7a:	f000 fe2f 	bl	4056dc <__multadd>
  404a7e:	4647      	mov	r7, r8
  404a80:	4606      	mov	r6, r0
  404a82:	4683      	mov	fp, r0
  404a84:	e5be      	b.n	404604 <_dtoa_r+0x584>
  404a86:	4601      	mov	r1, r0
  404a88:	4620      	mov	r0, r4
  404a8a:	9306      	str	r3, [sp, #24]
  404a8c:	f000 fe1c 	bl	4056c8 <_Bfree>
  404a90:	2201      	movs	r2, #1
  404a92:	9b06      	ldr	r3, [sp, #24]
  404a94:	e5e0      	b.n	404658 <_dtoa_r+0x5d8>
  404a96:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404a98:	2b02      	cmp	r3, #2
  404a9a:	f77f ad96 	ble.w	4045ca <_dtoa_r+0x54a>
  404a9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404aa0:	2b00      	cmp	r3, #0
  404aa2:	d1c9      	bne.n	404a38 <_dtoa_r+0x9b8>
  404aa4:	4641      	mov	r1, r8
  404aa6:	2205      	movs	r2, #5
  404aa8:	4620      	mov	r0, r4
  404aaa:	f000 fe17 	bl	4056dc <__multadd>
  404aae:	4601      	mov	r1, r0
  404ab0:	4680      	mov	r8, r0
  404ab2:	4648      	mov	r0, r9
  404ab4:	f000 ffe0 	bl	405a78 <__mcmp>
  404ab8:	2800      	cmp	r0, #0
  404aba:	ddbd      	ble.n	404a38 <_dtoa_r+0x9b8>
  404abc:	9a02      	ldr	r2, [sp, #8]
  404abe:	9904      	ldr	r1, [sp, #16]
  404ac0:	2331      	movs	r3, #49	; 0x31
  404ac2:	3201      	adds	r2, #1
  404ac4:	9202      	str	r2, [sp, #8]
  404ac6:	700b      	strb	r3, [r1, #0]
  404ac8:	1c4d      	adds	r5, r1, #1
  404aca:	e7b9      	b.n	404a40 <_dtoa_r+0x9c0>
  404acc:	9a02      	ldr	r2, [sp, #8]
  404ace:	3201      	adds	r2, #1
  404ad0:	9202      	str	r2, [sp, #8]
  404ad2:	9a04      	ldr	r2, [sp, #16]
  404ad4:	2331      	movs	r3, #49	; 0x31
  404ad6:	7013      	strb	r3, [r2, #0]
  404ad8:	e652      	b.n	404780 <_dtoa_r+0x700>
  404ada:	2301      	movs	r3, #1
  404adc:	930b      	str	r3, [sp, #44]	; 0x2c
  404ade:	e666      	b.n	4047ae <_dtoa_r+0x72e>
  404ae0:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  404ae4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404ae6:	e48f      	b.n	404408 <_dtoa_r+0x388>
  404ae8:	00407058 	.word	0x00407058
  404aec:	00407030 	.word	0x00407030
  404af0:	3ff00000 	.word	0x3ff00000
  404af4:	401c0000 	.word	0x401c0000
  404af8:	3fe00000 	.word	0x3fe00000
  404afc:	40240000 	.word	0x40240000
  404b00:	40140000 	.word	0x40140000
  404b04:	4650      	mov	r0, sl
  404b06:	f001 fe8b 	bl	406820 <__aeabi_i2d>
  404b0a:	463a      	mov	r2, r7
  404b0c:	4643      	mov	r3, r8
  404b0e:	f001 feed 	bl	4068ec <__aeabi_dmul>
  404b12:	2200      	movs	r2, #0
  404b14:	4bc1      	ldr	r3, [pc, #772]	; (404e1c <_dtoa_r+0xd9c>)
  404b16:	f001 fd37 	bl	406588 <__adddf3>
  404b1a:	4605      	mov	r5, r0
  404b1c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  404b20:	4641      	mov	r1, r8
  404b22:	2200      	movs	r2, #0
  404b24:	4bbe      	ldr	r3, [pc, #760]	; (404e20 <_dtoa_r+0xda0>)
  404b26:	4638      	mov	r0, r7
  404b28:	f001 fd2c 	bl	406584 <__aeabi_dsub>
  404b2c:	462a      	mov	r2, r5
  404b2e:	4633      	mov	r3, r6
  404b30:	4682      	mov	sl, r0
  404b32:	468b      	mov	fp, r1
  404b34:	f002 f96a 	bl	406e0c <__aeabi_dcmpgt>
  404b38:	4680      	mov	r8, r0
  404b3a:	2800      	cmp	r0, #0
  404b3c:	f040 8110 	bne.w	404d60 <_dtoa_r+0xce0>
  404b40:	462a      	mov	r2, r5
  404b42:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  404b46:	4650      	mov	r0, sl
  404b48:	4659      	mov	r1, fp
  404b4a:	f002 f941 	bl	406dd0 <__aeabi_dcmplt>
  404b4e:	b118      	cbz	r0, 404b58 <_dtoa_r+0xad8>
  404b50:	4646      	mov	r6, r8
  404b52:	e771      	b.n	404a38 <_dtoa_r+0x9b8>
  404b54:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  404b58:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  404b5c:	f7ff bb8a 	b.w	404274 <_dtoa_r+0x1f4>
  404b60:	9804      	ldr	r0, [sp, #16]
  404b62:	f7ff babb 	b.w	4040dc <_dtoa_r+0x5c>
  404b66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404b68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  404b6a:	970c      	str	r7, [sp, #48]	; 0x30
  404b6c:	1afb      	subs	r3, r7, r3
  404b6e:	441a      	add	r2, r3
  404b70:	920d      	str	r2, [sp, #52]	; 0x34
  404b72:	2700      	movs	r7, #0
  404b74:	e469      	b.n	40444a <_dtoa_r+0x3ca>
  404b76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  404b7a:	f04f 0a02 	mov.w	sl, #2
  404b7e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  404b82:	e657      	b.n	404834 <_dtoa_r+0x7b4>
  404b84:	2100      	movs	r1, #0
  404b86:	2301      	movs	r3, #1
  404b88:	6461      	str	r1, [r4, #68]	; 0x44
  404b8a:	4620      	mov	r0, r4
  404b8c:	9325      	str	r3, [sp, #148]	; 0x94
  404b8e:	f000 fd75 	bl	40567c <_Balloc>
  404b92:	9b25      	ldr	r3, [sp, #148]	; 0x94
  404b94:	9004      	str	r0, [sp, #16]
  404b96:	6420      	str	r0, [r4, #64]	; 0x40
  404b98:	930a      	str	r3, [sp, #40]	; 0x28
  404b9a:	930f      	str	r3, [sp, #60]	; 0x3c
  404b9c:	e629      	b.n	4047f2 <_dtoa_r+0x772>
  404b9e:	2a00      	cmp	r2, #0
  404ba0:	46d0      	mov	r8, sl
  404ba2:	f8cd b018 	str.w	fp, [sp, #24]
  404ba6:	469a      	mov	sl, r3
  404ba8:	dd11      	ble.n	404bce <_dtoa_r+0xb4e>
  404baa:	4649      	mov	r1, r9
  404bac:	2201      	movs	r2, #1
  404bae:	4620      	mov	r0, r4
  404bb0:	f000 ff10 	bl	4059d4 <__lshift>
  404bb4:	4641      	mov	r1, r8
  404bb6:	4681      	mov	r9, r0
  404bb8:	f000 ff5e 	bl	405a78 <__mcmp>
  404bbc:	2800      	cmp	r0, #0
  404bbe:	f340 8146 	ble.w	404e4e <_dtoa_r+0xdce>
  404bc2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  404bc6:	f000 8106 	beq.w	404dd6 <_dtoa_r+0xd56>
  404bca:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  404bce:	46b3      	mov	fp, r6
  404bd0:	f887 a000 	strb.w	sl, [r7]
  404bd4:	1c7d      	adds	r5, r7, #1
  404bd6:	9e06      	ldr	r6, [sp, #24]
  404bd8:	e5d2      	b.n	404780 <_dtoa_r+0x700>
  404bda:	d104      	bne.n	404be6 <_dtoa_r+0xb66>
  404bdc:	f01a 0f01 	tst.w	sl, #1
  404be0:	d001      	beq.n	404be6 <_dtoa_r+0xb66>
  404be2:	e5bd      	b.n	404760 <_dtoa_r+0x6e0>
  404be4:	4615      	mov	r5, r2
  404be6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404bea:	2b30      	cmp	r3, #48	; 0x30
  404bec:	f105 32ff 	add.w	r2, r5, #4294967295
  404bf0:	d0f8      	beq.n	404be4 <_dtoa_r+0xb64>
  404bf2:	e5c5      	b.n	404780 <_dtoa_r+0x700>
  404bf4:	9904      	ldr	r1, [sp, #16]
  404bf6:	2230      	movs	r2, #48	; 0x30
  404bf8:	700a      	strb	r2, [r1, #0]
  404bfa:	9a02      	ldr	r2, [sp, #8]
  404bfc:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  404c00:	3201      	adds	r2, #1
  404c02:	9202      	str	r2, [sp, #8]
  404c04:	f7ff bbfc 	b.w	404400 <_dtoa_r+0x380>
  404c08:	f000 80bb 	beq.w	404d82 <_dtoa_r+0xd02>
  404c0c:	9b02      	ldr	r3, [sp, #8]
  404c0e:	425d      	negs	r5, r3
  404c10:	4b84      	ldr	r3, [pc, #528]	; (404e24 <_dtoa_r+0xda4>)
  404c12:	f005 020f 	and.w	r2, r5, #15
  404c16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  404c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
  404c1e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  404c22:	f001 fe63 	bl	4068ec <__aeabi_dmul>
  404c26:	112d      	asrs	r5, r5, #4
  404c28:	4607      	mov	r7, r0
  404c2a:	4688      	mov	r8, r1
  404c2c:	f000 812c 	beq.w	404e88 <_dtoa_r+0xe08>
  404c30:	4e7d      	ldr	r6, [pc, #500]	; (404e28 <_dtoa_r+0xda8>)
  404c32:	f04f 0a02 	mov.w	sl, #2
  404c36:	07eb      	lsls	r3, r5, #31
  404c38:	d509      	bpl.n	404c4e <_dtoa_r+0xbce>
  404c3a:	4638      	mov	r0, r7
  404c3c:	4641      	mov	r1, r8
  404c3e:	e9d6 2300 	ldrd	r2, r3, [r6]
  404c42:	f001 fe53 	bl	4068ec <__aeabi_dmul>
  404c46:	f10a 0a01 	add.w	sl, sl, #1
  404c4a:	4607      	mov	r7, r0
  404c4c:	4688      	mov	r8, r1
  404c4e:	106d      	asrs	r5, r5, #1
  404c50:	f106 0608 	add.w	r6, r6, #8
  404c54:	d1ef      	bne.n	404c36 <_dtoa_r+0xbb6>
  404c56:	e608      	b.n	40486a <_dtoa_r+0x7ea>
  404c58:	6871      	ldr	r1, [r6, #4]
  404c5a:	4620      	mov	r0, r4
  404c5c:	f000 fd0e 	bl	40567c <_Balloc>
  404c60:	6933      	ldr	r3, [r6, #16]
  404c62:	3302      	adds	r3, #2
  404c64:	009a      	lsls	r2, r3, #2
  404c66:	4605      	mov	r5, r0
  404c68:	f106 010c 	add.w	r1, r6, #12
  404c6c:	300c      	adds	r0, #12
  404c6e:	f000 fc5f 	bl	405530 <memcpy>
  404c72:	4629      	mov	r1, r5
  404c74:	2201      	movs	r2, #1
  404c76:	4620      	mov	r0, r4
  404c78:	f000 feac 	bl	4059d4 <__lshift>
  404c7c:	9006      	str	r0, [sp, #24]
  404c7e:	e4b5      	b.n	4045ec <_dtoa_r+0x56c>
  404c80:	2b39      	cmp	r3, #57	; 0x39
  404c82:	f8cd b018 	str.w	fp, [sp, #24]
  404c86:	46d0      	mov	r8, sl
  404c88:	f000 80a5 	beq.w	404dd6 <_dtoa_r+0xd56>
  404c8c:	f103 0a01 	add.w	sl, r3, #1
  404c90:	46b3      	mov	fp, r6
  404c92:	f887 a000 	strb.w	sl, [r7]
  404c96:	1c7d      	adds	r5, r7, #1
  404c98:	9e06      	ldr	r6, [sp, #24]
  404c9a:	e571      	b.n	404780 <_dtoa_r+0x700>
  404c9c:	465a      	mov	r2, fp
  404c9e:	46d0      	mov	r8, sl
  404ca0:	46b3      	mov	fp, r6
  404ca2:	469a      	mov	sl, r3
  404ca4:	4616      	mov	r6, r2
  404ca6:	e54f      	b.n	404748 <_dtoa_r+0x6c8>
  404ca8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404caa:	495e      	ldr	r1, [pc, #376]	; (404e24 <_dtoa_r+0xda4>)
  404cac:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  404cb0:	462a      	mov	r2, r5
  404cb2:	4633      	mov	r3, r6
  404cb4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  404cb8:	f001 fe18 	bl	4068ec <__aeabi_dmul>
  404cbc:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  404cc0:	4638      	mov	r0, r7
  404cc2:	4641      	mov	r1, r8
  404cc4:	f002 f8c2 	bl	406e4c <__aeabi_d2iz>
  404cc8:	4605      	mov	r5, r0
  404cca:	f001 fda9 	bl	406820 <__aeabi_i2d>
  404cce:	460b      	mov	r3, r1
  404cd0:	4602      	mov	r2, r0
  404cd2:	4641      	mov	r1, r8
  404cd4:	4638      	mov	r0, r7
  404cd6:	f001 fc55 	bl	406584 <__aeabi_dsub>
  404cda:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404cdc:	460f      	mov	r7, r1
  404cde:	9904      	ldr	r1, [sp, #16]
  404ce0:	3530      	adds	r5, #48	; 0x30
  404ce2:	2b01      	cmp	r3, #1
  404ce4:	700d      	strb	r5, [r1, #0]
  404ce6:	4606      	mov	r6, r0
  404ce8:	f101 0501 	add.w	r5, r1, #1
  404cec:	d026      	beq.n	404d3c <_dtoa_r+0xcbc>
  404cee:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404cf0:	9a04      	ldr	r2, [sp, #16]
  404cf2:	f8df b13c 	ldr.w	fp, [pc, #316]	; 404e30 <_dtoa_r+0xdb0>
  404cf6:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  404cfa:	4413      	add	r3, r2
  404cfc:	f04f 0a00 	mov.w	sl, #0
  404d00:	4699      	mov	r9, r3
  404d02:	4652      	mov	r2, sl
  404d04:	465b      	mov	r3, fp
  404d06:	4630      	mov	r0, r6
  404d08:	4639      	mov	r1, r7
  404d0a:	f001 fdef 	bl	4068ec <__aeabi_dmul>
  404d0e:	460f      	mov	r7, r1
  404d10:	4606      	mov	r6, r0
  404d12:	f002 f89b 	bl	406e4c <__aeabi_d2iz>
  404d16:	4680      	mov	r8, r0
  404d18:	f001 fd82 	bl	406820 <__aeabi_i2d>
  404d1c:	f108 0830 	add.w	r8, r8, #48	; 0x30
  404d20:	4602      	mov	r2, r0
  404d22:	460b      	mov	r3, r1
  404d24:	4630      	mov	r0, r6
  404d26:	4639      	mov	r1, r7
  404d28:	f001 fc2c 	bl	406584 <__aeabi_dsub>
  404d2c:	f805 8b01 	strb.w	r8, [r5], #1
  404d30:	454d      	cmp	r5, r9
  404d32:	4606      	mov	r6, r0
  404d34:	460f      	mov	r7, r1
  404d36:	d1e4      	bne.n	404d02 <_dtoa_r+0xc82>
  404d38:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  404d3c:	4b3b      	ldr	r3, [pc, #236]	; (404e2c <_dtoa_r+0xdac>)
  404d3e:	2200      	movs	r2, #0
  404d40:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  404d44:	f001 fc20 	bl	406588 <__adddf3>
  404d48:	4632      	mov	r2, r6
  404d4a:	463b      	mov	r3, r7
  404d4c:	f002 f840 	bl	406dd0 <__aeabi_dcmplt>
  404d50:	2800      	cmp	r0, #0
  404d52:	d046      	beq.n	404de2 <_dtoa_r+0xd62>
  404d54:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404d56:	9302      	str	r3, [sp, #8]
  404d58:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  404d5c:	f7ff bb43 	b.w	4043e6 <_dtoa_r+0x366>
  404d60:	f04f 0800 	mov.w	r8, #0
  404d64:	4646      	mov	r6, r8
  404d66:	e6a9      	b.n	404abc <_dtoa_r+0xa3c>
  404d68:	9b08      	ldr	r3, [sp, #32]
  404d6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404d6c:	1a9d      	subs	r5, r3, r2
  404d6e:	2300      	movs	r3, #0
  404d70:	f7ff bb71 	b.w	404456 <_dtoa_r+0x3d6>
  404d74:	9b18      	ldr	r3, [sp, #96]	; 0x60
  404d76:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404d78:	9d08      	ldr	r5, [sp, #32]
  404d7a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  404d7e:	f7ff bb6a 	b.w	404456 <_dtoa_r+0x3d6>
  404d82:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  404d86:	f04f 0a02 	mov.w	sl, #2
  404d8a:	e56e      	b.n	40486a <_dtoa_r+0x7ea>
  404d8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404d8e:	2b00      	cmp	r3, #0
  404d90:	f43f aeb8 	beq.w	404b04 <_dtoa_r+0xa84>
  404d94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404d96:	2b00      	cmp	r3, #0
  404d98:	f77f aede 	ble.w	404b58 <_dtoa_r+0xad8>
  404d9c:	2200      	movs	r2, #0
  404d9e:	4b24      	ldr	r3, [pc, #144]	; (404e30 <_dtoa_r+0xdb0>)
  404da0:	4638      	mov	r0, r7
  404da2:	4641      	mov	r1, r8
  404da4:	f001 fda2 	bl	4068ec <__aeabi_dmul>
  404da8:	4607      	mov	r7, r0
  404daa:	4688      	mov	r8, r1
  404dac:	f10a 0001 	add.w	r0, sl, #1
  404db0:	f001 fd36 	bl	406820 <__aeabi_i2d>
  404db4:	463a      	mov	r2, r7
  404db6:	4643      	mov	r3, r8
  404db8:	f001 fd98 	bl	4068ec <__aeabi_dmul>
  404dbc:	2200      	movs	r2, #0
  404dbe:	4b17      	ldr	r3, [pc, #92]	; (404e1c <_dtoa_r+0xd9c>)
  404dc0:	f001 fbe2 	bl	406588 <__adddf3>
  404dc4:	9a02      	ldr	r2, [sp, #8]
  404dc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404dc8:	9312      	str	r3, [sp, #72]	; 0x48
  404dca:	3a01      	subs	r2, #1
  404dcc:	4605      	mov	r5, r0
  404dce:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  404dd2:	9215      	str	r2, [sp, #84]	; 0x54
  404dd4:	e56a      	b.n	4048ac <_dtoa_r+0x82c>
  404dd6:	2239      	movs	r2, #57	; 0x39
  404dd8:	46b3      	mov	fp, r6
  404dda:	703a      	strb	r2, [r7, #0]
  404ddc:	9e06      	ldr	r6, [sp, #24]
  404dde:	1c7d      	adds	r5, r7, #1
  404de0:	e4c0      	b.n	404764 <_dtoa_r+0x6e4>
  404de2:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  404de6:	2000      	movs	r0, #0
  404de8:	4910      	ldr	r1, [pc, #64]	; (404e2c <_dtoa_r+0xdac>)
  404dea:	f001 fbcb 	bl	406584 <__aeabi_dsub>
  404dee:	4632      	mov	r2, r6
  404df0:	463b      	mov	r3, r7
  404df2:	f002 f80b 	bl	406e0c <__aeabi_dcmpgt>
  404df6:	b908      	cbnz	r0, 404dfc <_dtoa_r+0xd7c>
  404df8:	e6ae      	b.n	404b58 <_dtoa_r+0xad8>
  404dfa:	4615      	mov	r5, r2
  404dfc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404e00:	2b30      	cmp	r3, #48	; 0x30
  404e02:	f105 32ff 	add.w	r2, r5, #4294967295
  404e06:	d0f8      	beq.n	404dfa <_dtoa_r+0xd7a>
  404e08:	e5d7      	b.n	4049ba <_dtoa_r+0x93a>
  404e0a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  404e0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404e10:	9302      	str	r3, [sp, #8]
  404e12:	f7ff bae8 	b.w	4043e6 <_dtoa_r+0x366>
  404e16:	970c      	str	r7, [sp, #48]	; 0x30
  404e18:	f7ff bba5 	b.w	404566 <_dtoa_r+0x4e6>
  404e1c:	401c0000 	.word	0x401c0000
  404e20:	40140000 	.word	0x40140000
  404e24:	00407058 	.word	0x00407058
  404e28:	00407030 	.word	0x00407030
  404e2c:	3fe00000 	.word	0x3fe00000
  404e30:	40240000 	.word	0x40240000
  404e34:	2b39      	cmp	r3, #57	; 0x39
  404e36:	f8cd b018 	str.w	fp, [sp, #24]
  404e3a:	46d0      	mov	r8, sl
  404e3c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  404e40:	469a      	mov	sl, r3
  404e42:	d0c8      	beq.n	404dd6 <_dtoa_r+0xd56>
  404e44:	f1bb 0f00 	cmp.w	fp, #0
  404e48:	f73f aebf 	bgt.w	404bca <_dtoa_r+0xb4a>
  404e4c:	e6bf      	b.n	404bce <_dtoa_r+0xb4e>
  404e4e:	f47f aebe 	bne.w	404bce <_dtoa_r+0xb4e>
  404e52:	f01a 0f01 	tst.w	sl, #1
  404e56:	f43f aeba 	beq.w	404bce <_dtoa_r+0xb4e>
  404e5a:	e6b2      	b.n	404bc2 <_dtoa_r+0xb42>
  404e5c:	f04f 0800 	mov.w	r8, #0
  404e60:	4646      	mov	r6, r8
  404e62:	e5e9      	b.n	404a38 <_dtoa_r+0x9b8>
  404e64:	4631      	mov	r1, r6
  404e66:	2300      	movs	r3, #0
  404e68:	220a      	movs	r2, #10
  404e6a:	4620      	mov	r0, r4
  404e6c:	f000 fc36 	bl	4056dc <__multadd>
  404e70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404e72:	2b00      	cmp	r3, #0
  404e74:	4606      	mov	r6, r0
  404e76:	dd0a      	ble.n	404e8e <_dtoa_r+0xe0e>
  404e78:	930a      	str	r3, [sp, #40]	; 0x28
  404e7a:	f7ff bbaa 	b.w	4045d2 <_dtoa_r+0x552>
  404e7e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404e80:	2b02      	cmp	r3, #2
  404e82:	dc23      	bgt.n	404ecc <_dtoa_r+0xe4c>
  404e84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404e86:	e43b      	b.n	404700 <_dtoa_r+0x680>
  404e88:	f04f 0a02 	mov.w	sl, #2
  404e8c:	e4ed      	b.n	40486a <_dtoa_r+0x7ea>
  404e8e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404e90:	2b02      	cmp	r3, #2
  404e92:	dc1b      	bgt.n	404ecc <_dtoa_r+0xe4c>
  404e94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404e96:	e7ef      	b.n	404e78 <_dtoa_r+0xdf8>
  404e98:	2500      	movs	r5, #0
  404e9a:	6465      	str	r5, [r4, #68]	; 0x44
  404e9c:	4629      	mov	r1, r5
  404e9e:	4620      	mov	r0, r4
  404ea0:	f000 fbec 	bl	40567c <_Balloc>
  404ea4:	f04f 33ff 	mov.w	r3, #4294967295
  404ea8:	930a      	str	r3, [sp, #40]	; 0x28
  404eaa:	930f      	str	r3, [sp, #60]	; 0x3c
  404eac:	2301      	movs	r3, #1
  404eae:	9004      	str	r0, [sp, #16]
  404eb0:	9525      	str	r5, [sp, #148]	; 0x94
  404eb2:	6420      	str	r0, [r4, #64]	; 0x40
  404eb4:	930b      	str	r3, [sp, #44]	; 0x2c
  404eb6:	f7ff b9dd 	b.w	404274 <_dtoa_r+0x1f4>
  404eba:	2501      	movs	r5, #1
  404ebc:	f7ff b9a5 	b.w	40420a <_dtoa_r+0x18a>
  404ec0:	f43f ab69 	beq.w	404596 <_dtoa_r+0x516>
  404ec4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  404ec8:	f7ff bbf9 	b.w	4046be <_dtoa_r+0x63e>
  404ecc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404ece:	930a      	str	r3, [sp, #40]	; 0x28
  404ed0:	e5e5      	b.n	404a9e <_dtoa_r+0xa1e>
  404ed2:	bf00      	nop

00404ed4 <__libc_fini_array>:
  404ed4:	b538      	push	{r3, r4, r5, lr}
  404ed6:	4c0a      	ldr	r4, [pc, #40]	; (404f00 <__libc_fini_array+0x2c>)
  404ed8:	4d0a      	ldr	r5, [pc, #40]	; (404f04 <__libc_fini_array+0x30>)
  404eda:	1b64      	subs	r4, r4, r5
  404edc:	10a4      	asrs	r4, r4, #2
  404ede:	d00a      	beq.n	404ef6 <__libc_fini_array+0x22>
  404ee0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  404ee4:	3b01      	subs	r3, #1
  404ee6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  404eea:	3c01      	subs	r4, #1
  404eec:	f855 3904 	ldr.w	r3, [r5], #-4
  404ef0:	4798      	blx	r3
  404ef2:	2c00      	cmp	r4, #0
  404ef4:	d1f9      	bne.n	404eea <__libc_fini_array+0x16>
  404ef6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404efa:	f002 b9ab 	b.w	407254 <_fini>
  404efe:	bf00      	nop
  404f00:	00407264 	.word	0x00407264
  404f04:	00407260 	.word	0x00407260

00404f08 <_localeconv_r>:
  404f08:	4a04      	ldr	r2, [pc, #16]	; (404f1c <_localeconv_r+0x14>)
  404f0a:	4b05      	ldr	r3, [pc, #20]	; (404f20 <_localeconv_r+0x18>)
  404f0c:	6812      	ldr	r2, [r2, #0]
  404f0e:	6b50      	ldr	r0, [r2, #52]	; 0x34
  404f10:	2800      	cmp	r0, #0
  404f12:	bf08      	it	eq
  404f14:	4618      	moveq	r0, r3
  404f16:	30f0      	adds	r0, #240	; 0xf0
  404f18:	4770      	bx	lr
  404f1a:	bf00      	nop
  404f1c:	20400010 	.word	0x20400010
  404f20:	20400854 	.word	0x20400854

00404f24 <__retarget_lock_acquire_recursive>:
  404f24:	4770      	bx	lr
  404f26:	bf00      	nop

00404f28 <__retarget_lock_release_recursive>:
  404f28:	4770      	bx	lr
  404f2a:	bf00      	nop

00404f2c <_malloc_r>:
  404f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404f30:	f101 060b 	add.w	r6, r1, #11
  404f34:	2e16      	cmp	r6, #22
  404f36:	b083      	sub	sp, #12
  404f38:	4605      	mov	r5, r0
  404f3a:	f240 809e 	bls.w	40507a <_malloc_r+0x14e>
  404f3e:	f036 0607 	bics.w	r6, r6, #7
  404f42:	f100 80bd 	bmi.w	4050c0 <_malloc_r+0x194>
  404f46:	42b1      	cmp	r1, r6
  404f48:	f200 80ba 	bhi.w	4050c0 <_malloc_r+0x194>
  404f4c:	f000 fb8a 	bl	405664 <__malloc_lock>
  404f50:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  404f54:	f0c0 8293 	bcc.w	40547e <_malloc_r+0x552>
  404f58:	0a73      	lsrs	r3, r6, #9
  404f5a:	f000 80b8 	beq.w	4050ce <_malloc_r+0x1a2>
  404f5e:	2b04      	cmp	r3, #4
  404f60:	f200 8179 	bhi.w	405256 <_malloc_r+0x32a>
  404f64:	09b3      	lsrs	r3, r6, #6
  404f66:	f103 0039 	add.w	r0, r3, #57	; 0x39
  404f6a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  404f6e:	00c3      	lsls	r3, r0, #3
  404f70:	4fbf      	ldr	r7, [pc, #764]	; (405270 <_malloc_r+0x344>)
  404f72:	443b      	add	r3, r7
  404f74:	f1a3 0108 	sub.w	r1, r3, #8
  404f78:	685c      	ldr	r4, [r3, #4]
  404f7a:	42a1      	cmp	r1, r4
  404f7c:	d106      	bne.n	404f8c <_malloc_r+0x60>
  404f7e:	e00c      	b.n	404f9a <_malloc_r+0x6e>
  404f80:	2a00      	cmp	r2, #0
  404f82:	f280 80aa 	bge.w	4050da <_malloc_r+0x1ae>
  404f86:	68e4      	ldr	r4, [r4, #12]
  404f88:	42a1      	cmp	r1, r4
  404f8a:	d006      	beq.n	404f9a <_malloc_r+0x6e>
  404f8c:	6863      	ldr	r3, [r4, #4]
  404f8e:	f023 0303 	bic.w	r3, r3, #3
  404f92:	1b9a      	subs	r2, r3, r6
  404f94:	2a0f      	cmp	r2, #15
  404f96:	ddf3      	ble.n	404f80 <_malloc_r+0x54>
  404f98:	4670      	mov	r0, lr
  404f9a:	693c      	ldr	r4, [r7, #16]
  404f9c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 405284 <_malloc_r+0x358>
  404fa0:	4574      	cmp	r4, lr
  404fa2:	f000 81ab 	beq.w	4052fc <_malloc_r+0x3d0>
  404fa6:	6863      	ldr	r3, [r4, #4]
  404fa8:	f023 0303 	bic.w	r3, r3, #3
  404fac:	1b9a      	subs	r2, r3, r6
  404fae:	2a0f      	cmp	r2, #15
  404fb0:	f300 8190 	bgt.w	4052d4 <_malloc_r+0x3a8>
  404fb4:	2a00      	cmp	r2, #0
  404fb6:	f8c7 e014 	str.w	lr, [r7, #20]
  404fba:	f8c7 e010 	str.w	lr, [r7, #16]
  404fbe:	f280 809d 	bge.w	4050fc <_malloc_r+0x1d0>
  404fc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404fc6:	f080 8161 	bcs.w	40528c <_malloc_r+0x360>
  404fca:	08db      	lsrs	r3, r3, #3
  404fcc:	f103 0c01 	add.w	ip, r3, #1
  404fd0:	1099      	asrs	r1, r3, #2
  404fd2:	687a      	ldr	r2, [r7, #4]
  404fd4:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  404fd8:	f8c4 8008 	str.w	r8, [r4, #8]
  404fdc:	2301      	movs	r3, #1
  404fde:	408b      	lsls	r3, r1
  404fe0:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  404fe4:	4313      	orrs	r3, r2
  404fe6:	3908      	subs	r1, #8
  404fe8:	60e1      	str	r1, [r4, #12]
  404fea:	607b      	str	r3, [r7, #4]
  404fec:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  404ff0:	f8c8 400c 	str.w	r4, [r8, #12]
  404ff4:	1082      	asrs	r2, r0, #2
  404ff6:	2401      	movs	r4, #1
  404ff8:	4094      	lsls	r4, r2
  404ffa:	429c      	cmp	r4, r3
  404ffc:	f200 808b 	bhi.w	405116 <_malloc_r+0x1ea>
  405000:	421c      	tst	r4, r3
  405002:	d106      	bne.n	405012 <_malloc_r+0xe6>
  405004:	f020 0003 	bic.w	r0, r0, #3
  405008:	0064      	lsls	r4, r4, #1
  40500a:	421c      	tst	r4, r3
  40500c:	f100 0004 	add.w	r0, r0, #4
  405010:	d0fa      	beq.n	405008 <_malloc_r+0xdc>
  405012:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  405016:	46cc      	mov	ip, r9
  405018:	4680      	mov	r8, r0
  40501a:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40501e:	459c      	cmp	ip, r3
  405020:	d107      	bne.n	405032 <_malloc_r+0x106>
  405022:	e16d      	b.n	405300 <_malloc_r+0x3d4>
  405024:	2a00      	cmp	r2, #0
  405026:	f280 817b 	bge.w	405320 <_malloc_r+0x3f4>
  40502a:	68db      	ldr	r3, [r3, #12]
  40502c:	459c      	cmp	ip, r3
  40502e:	f000 8167 	beq.w	405300 <_malloc_r+0x3d4>
  405032:	6859      	ldr	r1, [r3, #4]
  405034:	f021 0103 	bic.w	r1, r1, #3
  405038:	1b8a      	subs	r2, r1, r6
  40503a:	2a0f      	cmp	r2, #15
  40503c:	ddf2      	ble.n	405024 <_malloc_r+0xf8>
  40503e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  405042:	f8d3 8008 	ldr.w	r8, [r3, #8]
  405046:	9300      	str	r3, [sp, #0]
  405048:	199c      	adds	r4, r3, r6
  40504a:	4628      	mov	r0, r5
  40504c:	f046 0601 	orr.w	r6, r6, #1
  405050:	f042 0501 	orr.w	r5, r2, #1
  405054:	605e      	str	r6, [r3, #4]
  405056:	f8c8 c00c 	str.w	ip, [r8, #12]
  40505a:	f8cc 8008 	str.w	r8, [ip, #8]
  40505e:	617c      	str	r4, [r7, #20]
  405060:	613c      	str	r4, [r7, #16]
  405062:	f8c4 e00c 	str.w	lr, [r4, #12]
  405066:	f8c4 e008 	str.w	lr, [r4, #8]
  40506a:	6065      	str	r5, [r4, #4]
  40506c:	505a      	str	r2, [r3, r1]
  40506e:	f000 faff 	bl	405670 <__malloc_unlock>
  405072:	9b00      	ldr	r3, [sp, #0]
  405074:	f103 0408 	add.w	r4, r3, #8
  405078:	e01e      	b.n	4050b8 <_malloc_r+0x18c>
  40507a:	2910      	cmp	r1, #16
  40507c:	d820      	bhi.n	4050c0 <_malloc_r+0x194>
  40507e:	f000 faf1 	bl	405664 <__malloc_lock>
  405082:	2610      	movs	r6, #16
  405084:	2318      	movs	r3, #24
  405086:	2002      	movs	r0, #2
  405088:	4f79      	ldr	r7, [pc, #484]	; (405270 <_malloc_r+0x344>)
  40508a:	443b      	add	r3, r7
  40508c:	f1a3 0208 	sub.w	r2, r3, #8
  405090:	685c      	ldr	r4, [r3, #4]
  405092:	4294      	cmp	r4, r2
  405094:	f000 813d 	beq.w	405312 <_malloc_r+0x3e6>
  405098:	6863      	ldr	r3, [r4, #4]
  40509a:	68e1      	ldr	r1, [r4, #12]
  40509c:	68a6      	ldr	r6, [r4, #8]
  40509e:	f023 0303 	bic.w	r3, r3, #3
  4050a2:	4423      	add	r3, r4
  4050a4:	4628      	mov	r0, r5
  4050a6:	685a      	ldr	r2, [r3, #4]
  4050a8:	60f1      	str	r1, [r6, #12]
  4050aa:	f042 0201 	orr.w	r2, r2, #1
  4050ae:	608e      	str	r6, [r1, #8]
  4050b0:	605a      	str	r2, [r3, #4]
  4050b2:	f000 fadd 	bl	405670 <__malloc_unlock>
  4050b6:	3408      	adds	r4, #8
  4050b8:	4620      	mov	r0, r4
  4050ba:	b003      	add	sp, #12
  4050bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4050c0:	2400      	movs	r4, #0
  4050c2:	230c      	movs	r3, #12
  4050c4:	4620      	mov	r0, r4
  4050c6:	602b      	str	r3, [r5, #0]
  4050c8:	b003      	add	sp, #12
  4050ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4050ce:	2040      	movs	r0, #64	; 0x40
  4050d0:	f44f 7300 	mov.w	r3, #512	; 0x200
  4050d4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4050d8:	e74a      	b.n	404f70 <_malloc_r+0x44>
  4050da:	4423      	add	r3, r4
  4050dc:	68e1      	ldr	r1, [r4, #12]
  4050de:	685a      	ldr	r2, [r3, #4]
  4050e0:	68a6      	ldr	r6, [r4, #8]
  4050e2:	f042 0201 	orr.w	r2, r2, #1
  4050e6:	60f1      	str	r1, [r6, #12]
  4050e8:	4628      	mov	r0, r5
  4050ea:	608e      	str	r6, [r1, #8]
  4050ec:	605a      	str	r2, [r3, #4]
  4050ee:	f000 fabf 	bl	405670 <__malloc_unlock>
  4050f2:	3408      	adds	r4, #8
  4050f4:	4620      	mov	r0, r4
  4050f6:	b003      	add	sp, #12
  4050f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4050fc:	4423      	add	r3, r4
  4050fe:	4628      	mov	r0, r5
  405100:	685a      	ldr	r2, [r3, #4]
  405102:	f042 0201 	orr.w	r2, r2, #1
  405106:	605a      	str	r2, [r3, #4]
  405108:	f000 fab2 	bl	405670 <__malloc_unlock>
  40510c:	3408      	adds	r4, #8
  40510e:	4620      	mov	r0, r4
  405110:	b003      	add	sp, #12
  405112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405116:	68bc      	ldr	r4, [r7, #8]
  405118:	6863      	ldr	r3, [r4, #4]
  40511a:	f023 0803 	bic.w	r8, r3, #3
  40511e:	45b0      	cmp	r8, r6
  405120:	d304      	bcc.n	40512c <_malloc_r+0x200>
  405122:	eba8 0306 	sub.w	r3, r8, r6
  405126:	2b0f      	cmp	r3, #15
  405128:	f300 8085 	bgt.w	405236 <_malloc_r+0x30a>
  40512c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 405288 <_malloc_r+0x35c>
  405130:	4b50      	ldr	r3, [pc, #320]	; (405274 <_malloc_r+0x348>)
  405132:	f8d9 2000 	ldr.w	r2, [r9]
  405136:	681b      	ldr	r3, [r3, #0]
  405138:	3201      	adds	r2, #1
  40513a:	4433      	add	r3, r6
  40513c:	eb04 0a08 	add.w	sl, r4, r8
  405140:	f000 8155 	beq.w	4053ee <_malloc_r+0x4c2>
  405144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  405148:	330f      	adds	r3, #15
  40514a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40514e:	f02b 0b0f 	bic.w	fp, fp, #15
  405152:	4659      	mov	r1, fp
  405154:	4628      	mov	r0, r5
  405156:	f000 fd8b 	bl	405c70 <_sbrk_r>
  40515a:	1c41      	adds	r1, r0, #1
  40515c:	4602      	mov	r2, r0
  40515e:	f000 80fc 	beq.w	40535a <_malloc_r+0x42e>
  405162:	4582      	cmp	sl, r0
  405164:	f200 80f7 	bhi.w	405356 <_malloc_r+0x42a>
  405168:	4b43      	ldr	r3, [pc, #268]	; (405278 <_malloc_r+0x34c>)
  40516a:	6819      	ldr	r1, [r3, #0]
  40516c:	4459      	add	r1, fp
  40516e:	6019      	str	r1, [r3, #0]
  405170:	f000 814d 	beq.w	40540e <_malloc_r+0x4e2>
  405174:	f8d9 0000 	ldr.w	r0, [r9]
  405178:	3001      	adds	r0, #1
  40517a:	bf1b      	ittet	ne
  40517c:	eba2 0a0a 	subne.w	sl, r2, sl
  405180:	4451      	addne	r1, sl
  405182:	f8c9 2000 	streq.w	r2, [r9]
  405186:	6019      	strne	r1, [r3, #0]
  405188:	f012 0107 	ands.w	r1, r2, #7
  40518c:	f000 8115 	beq.w	4053ba <_malloc_r+0x48e>
  405190:	f1c1 0008 	rsb	r0, r1, #8
  405194:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  405198:	4402      	add	r2, r0
  40519a:	3108      	adds	r1, #8
  40519c:	eb02 090b 	add.w	r9, r2, fp
  4051a0:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4051a4:	eba1 0909 	sub.w	r9, r1, r9
  4051a8:	4649      	mov	r1, r9
  4051aa:	4628      	mov	r0, r5
  4051ac:	9301      	str	r3, [sp, #4]
  4051ae:	9200      	str	r2, [sp, #0]
  4051b0:	f000 fd5e 	bl	405c70 <_sbrk_r>
  4051b4:	1c43      	adds	r3, r0, #1
  4051b6:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4051ba:	f000 8143 	beq.w	405444 <_malloc_r+0x518>
  4051be:	1a80      	subs	r0, r0, r2
  4051c0:	4448      	add	r0, r9
  4051c2:	f040 0001 	orr.w	r0, r0, #1
  4051c6:	6819      	ldr	r1, [r3, #0]
  4051c8:	60ba      	str	r2, [r7, #8]
  4051ca:	4449      	add	r1, r9
  4051cc:	42bc      	cmp	r4, r7
  4051ce:	6050      	str	r0, [r2, #4]
  4051d0:	6019      	str	r1, [r3, #0]
  4051d2:	d017      	beq.n	405204 <_malloc_r+0x2d8>
  4051d4:	f1b8 0f0f 	cmp.w	r8, #15
  4051d8:	f240 80fb 	bls.w	4053d2 <_malloc_r+0x4a6>
  4051dc:	6860      	ldr	r0, [r4, #4]
  4051de:	f1a8 020c 	sub.w	r2, r8, #12
  4051e2:	f022 0207 	bic.w	r2, r2, #7
  4051e6:	eb04 0e02 	add.w	lr, r4, r2
  4051ea:	f000 0001 	and.w	r0, r0, #1
  4051ee:	f04f 0c05 	mov.w	ip, #5
  4051f2:	4310      	orrs	r0, r2
  4051f4:	2a0f      	cmp	r2, #15
  4051f6:	6060      	str	r0, [r4, #4]
  4051f8:	f8ce c004 	str.w	ip, [lr, #4]
  4051fc:	f8ce c008 	str.w	ip, [lr, #8]
  405200:	f200 8117 	bhi.w	405432 <_malloc_r+0x506>
  405204:	4b1d      	ldr	r3, [pc, #116]	; (40527c <_malloc_r+0x350>)
  405206:	68bc      	ldr	r4, [r7, #8]
  405208:	681a      	ldr	r2, [r3, #0]
  40520a:	4291      	cmp	r1, r2
  40520c:	bf88      	it	hi
  40520e:	6019      	strhi	r1, [r3, #0]
  405210:	4b1b      	ldr	r3, [pc, #108]	; (405280 <_malloc_r+0x354>)
  405212:	681a      	ldr	r2, [r3, #0]
  405214:	4291      	cmp	r1, r2
  405216:	6862      	ldr	r2, [r4, #4]
  405218:	bf88      	it	hi
  40521a:	6019      	strhi	r1, [r3, #0]
  40521c:	f022 0203 	bic.w	r2, r2, #3
  405220:	4296      	cmp	r6, r2
  405222:	eba2 0306 	sub.w	r3, r2, r6
  405226:	d801      	bhi.n	40522c <_malloc_r+0x300>
  405228:	2b0f      	cmp	r3, #15
  40522a:	dc04      	bgt.n	405236 <_malloc_r+0x30a>
  40522c:	4628      	mov	r0, r5
  40522e:	f000 fa1f 	bl	405670 <__malloc_unlock>
  405232:	2400      	movs	r4, #0
  405234:	e740      	b.n	4050b8 <_malloc_r+0x18c>
  405236:	19a2      	adds	r2, r4, r6
  405238:	f043 0301 	orr.w	r3, r3, #1
  40523c:	f046 0601 	orr.w	r6, r6, #1
  405240:	6066      	str	r6, [r4, #4]
  405242:	4628      	mov	r0, r5
  405244:	60ba      	str	r2, [r7, #8]
  405246:	6053      	str	r3, [r2, #4]
  405248:	f000 fa12 	bl	405670 <__malloc_unlock>
  40524c:	3408      	adds	r4, #8
  40524e:	4620      	mov	r0, r4
  405250:	b003      	add	sp, #12
  405252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405256:	2b14      	cmp	r3, #20
  405258:	d971      	bls.n	40533e <_malloc_r+0x412>
  40525a:	2b54      	cmp	r3, #84	; 0x54
  40525c:	f200 80a3 	bhi.w	4053a6 <_malloc_r+0x47a>
  405260:	0b33      	lsrs	r3, r6, #12
  405262:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  405266:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40526a:	00c3      	lsls	r3, r0, #3
  40526c:	e680      	b.n	404f70 <_malloc_r+0x44>
  40526e:	bf00      	nop
  405270:	20400444 	.word	0x20400444
  405274:	20400a98 	.word	0x20400a98
  405278:	20400a68 	.word	0x20400a68
  40527c:	20400a90 	.word	0x20400a90
  405280:	20400a94 	.word	0x20400a94
  405284:	2040044c 	.word	0x2040044c
  405288:	2040084c 	.word	0x2040084c
  40528c:	0a5a      	lsrs	r2, r3, #9
  40528e:	2a04      	cmp	r2, #4
  405290:	d95b      	bls.n	40534a <_malloc_r+0x41e>
  405292:	2a14      	cmp	r2, #20
  405294:	f200 80ae 	bhi.w	4053f4 <_malloc_r+0x4c8>
  405298:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40529c:	00c9      	lsls	r1, r1, #3
  40529e:	325b      	adds	r2, #91	; 0x5b
  4052a0:	eb07 0c01 	add.w	ip, r7, r1
  4052a4:	5879      	ldr	r1, [r7, r1]
  4052a6:	f1ac 0c08 	sub.w	ip, ip, #8
  4052aa:	458c      	cmp	ip, r1
  4052ac:	f000 8088 	beq.w	4053c0 <_malloc_r+0x494>
  4052b0:	684a      	ldr	r2, [r1, #4]
  4052b2:	f022 0203 	bic.w	r2, r2, #3
  4052b6:	4293      	cmp	r3, r2
  4052b8:	d273      	bcs.n	4053a2 <_malloc_r+0x476>
  4052ba:	6889      	ldr	r1, [r1, #8]
  4052bc:	458c      	cmp	ip, r1
  4052be:	d1f7      	bne.n	4052b0 <_malloc_r+0x384>
  4052c0:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4052c4:	687b      	ldr	r3, [r7, #4]
  4052c6:	60e2      	str	r2, [r4, #12]
  4052c8:	f8c4 c008 	str.w	ip, [r4, #8]
  4052cc:	6094      	str	r4, [r2, #8]
  4052ce:	f8cc 400c 	str.w	r4, [ip, #12]
  4052d2:	e68f      	b.n	404ff4 <_malloc_r+0xc8>
  4052d4:	19a1      	adds	r1, r4, r6
  4052d6:	f046 0c01 	orr.w	ip, r6, #1
  4052da:	f042 0601 	orr.w	r6, r2, #1
  4052de:	f8c4 c004 	str.w	ip, [r4, #4]
  4052e2:	4628      	mov	r0, r5
  4052e4:	6179      	str	r1, [r7, #20]
  4052e6:	6139      	str	r1, [r7, #16]
  4052e8:	f8c1 e00c 	str.w	lr, [r1, #12]
  4052ec:	f8c1 e008 	str.w	lr, [r1, #8]
  4052f0:	604e      	str	r6, [r1, #4]
  4052f2:	50e2      	str	r2, [r4, r3]
  4052f4:	f000 f9bc 	bl	405670 <__malloc_unlock>
  4052f8:	3408      	adds	r4, #8
  4052fa:	e6dd      	b.n	4050b8 <_malloc_r+0x18c>
  4052fc:	687b      	ldr	r3, [r7, #4]
  4052fe:	e679      	b.n	404ff4 <_malloc_r+0xc8>
  405300:	f108 0801 	add.w	r8, r8, #1
  405304:	f018 0f03 	tst.w	r8, #3
  405308:	f10c 0c08 	add.w	ip, ip, #8
  40530c:	f47f ae85 	bne.w	40501a <_malloc_r+0xee>
  405310:	e02d      	b.n	40536e <_malloc_r+0x442>
  405312:	68dc      	ldr	r4, [r3, #12]
  405314:	42a3      	cmp	r3, r4
  405316:	bf08      	it	eq
  405318:	3002      	addeq	r0, #2
  40531a:	f43f ae3e 	beq.w	404f9a <_malloc_r+0x6e>
  40531e:	e6bb      	b.n	405098 <_malloc_r+0x16c>
  405320:	4419      	add	r1, r3
  405322:	461c      	mov	r4, r3
  405324:	684a      	ldr	r2, [r1, #4]
  405326:	68db      	ldr	r3, [r3, #12]
  405328:	f854 6f08 	ldr.w	r6, [r4, #8]!
  40532c:	f042 0201 	orr.w	r2, r2, #1
  405330:	604a      	str	r2, [r1, #4]
  405332:	4628      	mov	r0, r5
  405334:	60f3      	str	r3, [r6, #12]
  405336:	609e      	str	r6, [r3, #8]
  405338:	f000 f99a 	bl	405670 <__malloc_unlock>
  40533c:	e6bc      	b.n	4050b8 <_malloc_r+0x18c>
  40533e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  405342:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  405346:	00c3      	lsls	r3, r0, #3
  405348:	e612      	b.n	404f70 <_malloc_r+0x44>
  40534a:	099a      	lsrs	r2, r3, #6
  40534c:	f102 0139 	add.w	r1, r2, #57	; 0x39
  405350:	00c9      	lsls	r1, r1, #3
  405352:	3238      	adds	r2, #56	; 0x38
  405354:	e7a4      	b.n	4052a0 <_malloc_r+0x374>
  405356:	42bc      	cmp	r4, r7
  405358:	d054      	beq.n	405404 <_malloc_r+0x4d8>
  40535a:	68bc      	ldr	r4, [r7, #8]
  40535c:	6862      	ldr	r2, [r4, #4]
  40535e:	f022 0203 	bic.w	r2, r2, #3
  405362:	e75d      	b.n	405220 <_malloc_r+0x2f4>
  405364:	f859 3908 	ldr.w	r3, [r9], #-8
  405368:	4599      	cmp	r9, r3
  40536a:	f040 8086 	bne.w	40547a <_malloc_r+0x54e>
  40536e:	f010 0f03 	tst.w	r0, #3
  405372:	f100 30ff 	add.w	r0, r0, #4294967295
  405376:	d1f5      	bne.n	405364 <_malloc_r+0x438>
  405378:	687b      	ldr	r3, [r7, #4]
  40537a:	ea23 0304 	bic.w	r3, r3, r4
  40537e:	607b      	str	r3, [r7, #4]
  405380:	0064      	lsls	r4, r4, #1
  405382:	429c      	cmp	r4, r3
  405384:	f63f aec7 	bhi.w	405116 <_malloc_r+0x1ea>
  405388:	2c00      	cmp	r4, #0
  40538a:	f43f aec4 	beq.w	405116 <_malloc_r+0x1ea>
  40538e:	421c      	tst	r4, r3
  405390:	4640      	mov	r0, r8
  405392:	f47f ae3e 	bne.w	405012 <_malloc_r+0xe6>
  405396:	0064      	lsls	r4, r4, #1
  405398:	421c      	tst	r4, r3
  40539a:	f100 0004 	add.w	r0, r0, #4
  40539e:	d0fa      	beq.n	405396 <_malloc_r+0x46a>
  4053a0:	e637      	b.n	405012 <_malloc_r+0xe6>
  4053a2:	468c      	mov	ip, r1
  4053a4:	e78c      	b.n	4052c0 <_malloc_r+0x394>
  4053a6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4053aa:	d815      	bhi.n	4053d8 <_malloc_r+0x4ac>
  4053ac:	0bf3      	lsrs	r3, r6, #15
  4053ae:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4053b2:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4053b6:	00c3      	lsls	r3, r0, #3
  4053b8:	e5da      	b.n	404f70 <_malloc_r+0x44>
  4053ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4053be:	e6ed      	b.n	40519c <_malloc_r+0x270>
  4053c0:	687b      	ldr	r3, [r7, #4]
  4053c2:	1092      	asrs	r2, r2, #2
  4053c4:	2101      	movs	r1, #1
  4053c6:	fa01 f202 	lsl.w	r2, r1, r2
  4053ca:	4313      	orrs	r3, r2
  4053cc:	607b      	str	r3, [r7, #4]
  4053ce:	4662      	mov	r2, ip
  4053d0:	e779      	b.n	4052c6 <_malloc_r+0x39a>
  4053d2:	2301      	movs	r3, #1
  4053d4:	6053      	str	r3, [r2, #4]
  4053d6:	e729      	b.n	40522c <_malloc_r+0x300>
  4053d8:	f240 5254 	movw	r2, #1364	; 0x554
  4053dc:	4293      	cmp	r3, r2
  4053de:	d822      	bhi.n	405426 <_malloc_r+0x4fa>
  4053e0:	0cb3      	lsrs	r3, r6, #18
  4053e2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4053e6:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4053ea:	00c3      	lsls	r3, r0, #3
  4053ec:	e5c0      	b.n	404f70 <_malloc_r+0x44>
  4053ee:	f103 0b10 	add.w	fp, r3, #16
  4053f2:	e6ae      	b.n	405152 <_malloc_r+0x226>
  4053f4:	2a54      	cmp	r2, #84	; 0x54
  4053f6:	d829      	bhi.n	40544c <_malloc_r+0x520>
  4053f8:	0b1a      	lsrs	r2, r3, #12
  4053fa:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4053fe:	00c9      	lsls	r1, r1, #3
  405400:	326e      	adds	r2, #110	; 0x6e
  405402:	e74d      	b.n	4052a0 <_malloc_r+0x374>
  405404:	4b20      	ldr	r3, [pc, #128]	; (405488 <_malloc_r+0x55c>)
  405406:	6819      	ldr	r1, [r3, #0]
  405408:	4459      	add	r1, fp
  40540a:	6019      	str	r1, [r3, #0]
  40540c:	e6b2      	b.n	405174 <_malloc_r+0x248>
  40540e:	f3ca 000b 	ubfx	r0, sl, #0, #12
  405412:	2800      	cmp	r0, #0
  405414:	f47f aeae 	bne.w	405174 <_malloc_r+0x248>
  405418:	eb08 030b 	add.w	r3, r8, fp
  40541c:	68ba      	ldr	r2, [r7, #8]
  40541e:	f043 0301 	orr.w	r3, r3, #1
  405422:	6053      	str	r3, [r2, #4]
  405424:	e6ee      	b.n	405204 <_malloc_r+0x2d8>
  405426:	207f      	movs	r0, #127	; 0x7f
  405428:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40542c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  405430:	e59e      	b.n	404f70 <_malloc_r+0x44>
  405432:	f104 0108 	add.w	r1, r4, #8
  405436:	4628      	mov	r0, r5
  405438:	9300      	str	r3, [sp, #0]
  40543a:	f000 fd8b 	bl	405f54 <_free_r>
  40543e:	9b00      	ldr	r3, [sp, #0]
  405440:	6819      	ldr	r1, [r3, #0]
  405442:	e6df      	b.n	405204 <_malloc_r+0x2d8>
  405444:	2001      	movs	r0, #1
  405446:	f04f 0900 	mov.w	r9, #0
  40544a:	e6bc      	b.n	4051c6 <_malloc_r+0x29a>
  40544c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405450:	d805      	bhi.n	40545e <_malloc_r+0x532>
  405452:	0bda      	lsrs	r2, r3, #15
  405454:	f102 0178 	add.w	r1, r2, #120	; 0x78
  405458:	00c9      	lsls	r1, r1, #3
  40545a:	3277      	adds	r2, #119	; 0x77
  40545c:	e720      	b.n	4052a0 <_malloc_r+0x374>
  40545e:	f240 5154 	movw	r1, #1364	; 0x554
  405462:	428a      	cmp	r2, r1
  405464:	d805      	bhi.n	405472 <_malloc_r+0x546>
  405466:	0c9a      	lsrs	r2, r3, #18
  405468:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40546c:	00c9      	lsls	r1, r1, #3
  40546e:	327c      	adds	r2, #124	; 0x7c
  405470:	e716      	b.n	4052a0 <_malloc_r+0x374>
  405472:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  405476:	227e      	movs	r2, #126	; 0x7e
  405478:	e712      	b.n	4052a0 <_malloc_r+0x374>
  40547a:	687b      	ldr	r3, [r7, #4]
  40547c:	e780      	b.n	405380 <_malloc_r+0x454>
  40547e:	08f0      	lsrs	r0, r6, #3
  405480:	f106 0308 	add.w	r3, r6, #8
  405484:	e600      	b.n	405088 <_malloc_r+0x15c>
  405486:	bf00      	nop
  405488:	20400a68 	.word	0x20400a68
  40548c:	00000000 	.word	0x00000000

00405490 <memchr>:
  405490:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405494:	2a10      	cmp	r2, #16
  405496:	db2b      	blt.n	4054f0 <memchr+0x60>
  405498:	f010 0f07 	tst.w	r0, #7
  40549c:	d008      	beq.n	4054b0 <memchr+0x20>
  40549e:	f810 3b01 	ldrb.w	r3, [r0], #1
  4054a2:	3a01      	subs	r2, #1
  4054a4:	428b      	cmp	r3, r1
  4054a6:	d02d      	beq.n	405504 <memchr+0x74>
  4054a8:	f010 0f07 	tst.w	r0, #7
  4054ac:	b342      	cbz	r2, 405500 <memchr+0x70>
  4054ae:	d1f6      	bne.n	40549e <memchr+0xe>
  4054b0:	b4f0      	push	{r4, r5, r6, r7}
  4054b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4054b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4054ba:	f022 0407 	bic.w	r4, r2, #7
  4054be:	f07f 0700 	mvns.w	r7, #0
  4054c2:	2300      	movs	r3, #0
  4054c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4054c8:	3c08      	subs	r4, #8
  4054ca:	ea85 0501 	eor.w	r5, r5, r1
  4054ce:	ea86 0601 	eor.w	r6, r6, r1
  4054d2:	fa85 f547 	uadd8	r5, r5, r7
  4054d6:	faa3 f587 	sel	r5, r3, r7
  4054da:	fa86 f647 	uadd8	r6, r6, r7
  4054de:	faa5 f687 	sel	r6, r5, r7
  4054e2:	b98e      	cbnz	r6, 405508 <memchr+0x78>
  4054e4:	d1ee      	bne.n	4054c4 <memchr+0x34>
  4054e6:	bcf0      	pop	{r4, r5, r6, r7}
  4054e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4054ec:	f002 0207 	and.w	r2, r2, #7
  4054f0:	b132      	cbz	r2, 405500 <memchr+0x70>
  4054f2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4054f6:	3a01      	subs	r2, #1
  4054f8:	ea83 0301 	eor.w	r3, r3, r1
  4054fc:	b113      	cbz	r3, 405504 <memchr+0x74>
  4054fe:	d1f8      	bne.n	4054f2 <memchr+0x62>
  405500:	2000      	movs	r0, #0
  405502:	4770      	bx	lr
  405504:	3801      	subs	r0, #1
  405506:	4770      	bx	lr
  405508:	2d00      	cmp	r5, #0
  40550a:	bf06      	itte	eq
  40550c:	4635      	moveq	r5, r6
  40550e:	3803      	subeq	r0, #3
  405510:	3807      	subne	r0, #7
  405512:	f015 0f01 	tst.w	r5, #1
  405516:	d107      	bne.n	405528 <memchr+0x98>
  405518:	3001      	adds	r0, #1
  40551a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40551e:	bf02      	ittt	eq
  405520:	3001      	addeq	r0, #1
  405522:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  405526:	3001      	addeq	r0, #1
  405528:	bcf0      	pop	{r4, r5, r6, r7}
  40552a:	3801      	subs	r0, #1
  40552c:	4770      	bx	lr
  40552e:	bf00      	nop

00405530 <memcpy>:
  405530:	4684      	mov	ip, r0
  405532:	ea41 0300 	orr.w	r3, r1, r0
  405536:	f013 0303 	ands.w	r3, r3, #3
  40553a:	d16d      	bne.n	405618 <memcpy+0xe8>
  40553c:	3a40      	subs	r2, #64	; 0x40
  40553e:	d341      	bcc.n	4055c4 <memcpy+0x94>
  405540:	f851 3b04 	ldr.w	r3, [r1], #4
  405544:	f840 3b04 	str.w	r3, [r0], #4
  405548:	f851 3b04 	ldr.w	r3, [r1], #4
  40554c:	f840 3b04 	str.w	r3, [r0], #4
  405550:	f851 3b04 	ldr.w	r3, [r1], #4
  405554:	f840 3b04 	str.w	r3, [r0], #4
  405558:	f851 3b04 	ldr.w	r3, [r1], #4
  40555c:	f840 3b04 	str.w	r3, [r0], #4
  405560:	f851 3b04 	ldr.w	r3, [r1], #4
  405564:	f840 3b04 	str.w	r3, [r0], #4
  405568:	f851 3b04 	ldr.w	r3, [r1], #4
  40556c:	f840 3b04 	str.w	r3, [r0], #4
  405570:	f851 3b04 	ldr.w	r3, [r1], #4
  405574:	f840 3b04 	str.w	r3, [r0], #4
  405578:	f851 3b04 	ldr.w	r3, [r1], #4
  40557c:	f840 3b04 	str.w	r3, [r0], #4
  405580:	f851 3b04 	ldr.w	r3, [r1], #4
  405584:	f840 3b04 	str.w	r3, [r0], #4
  405588:	f851 3b04 	ldr.w	r3, [r1], #4
  40558c:	f840 3b04 	str.w	r3, [r0], #4
  405590:	f851 3b04 	ldr.w	r3, [r1], #4
  405594:	f840 3b04 	str.w	r3, [r0], #4
  405598:	f851 3b04 	ldr.w	r3, [r1], #4
  40559c:	f840 3b04 	str.w	r3, [r0], #4
  4055a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4055a4:	f840 3b04 	str.w	r3, [r0], #4
  4055a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4055ac:	f840 3b04 	str.w	r3, [r0], #4
  4055b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4055b4:	f840 3b04 	str.w	r3, [r0], #4
  4055b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4055bc:	f840 3b04 	str.w	r3, [r0], #4
  4055c0:	3a40      	subs	r2, #64	; 0x40
  4055c2:	d2bd      	bcs.n	405540 <memcpy+0x10>
  4055c4:	3230      	adds	r2, #48	; 0x30
  4055c6:	d311      	bcc.n	4055ec <memcpy+0xbc>
  4055c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4055cc:	f840 3b04 	str.w	r3, [r0], #4
  4055d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4055d4:	f840 3b04 	str.w	r3, [r0], #4
  4055d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4055dc:	f840 3b04 	str.w	r3, [r0], #4
  4055e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4055e4:	f840 3b04 	str.w	r3, [r0], #4
  4055e8:	3a10      	subs	r2, #16
  4055ea:	d2ed      	bcs.n	4055c8 <memcpy+0x98>
  4055ec:	320c      	adds	r2, #12
  4055ee:	d305      	bcc.n	4055fc <memcpy+0xcc>
  4055f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4055f4:	f840 3b04 	str.w	r3, [r0], #4
  4055f8:	3a04      	subs	r2, #4
  4055fa:	d2f9      	bcs.n	4055f0 <memcpy+0xc0>
  4055fc:	3204      	adds	r2, #4
  4055fe:	d008      	beq.n	405612 <memcpy+0xe2>
  405600:	07d2      	lsls	r2, r2, #31
  405602:	bf1c      	itt	ne
  405604:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405608:	f800 3b01 	strbne.w	r3, [r0], #1
  40560c:	d301      	bcc.n	405612 <memcpy+0xe2>
  40560e:	880b      	ldrh	r3, [r1, #0]
  405610:	8003      	strh	r3, [r0, #0]
  405612:	4660      	mov	r0, ip
  405614:	4770      	bx	lr
  405616:	bf00      	nop
  405618:	2a08      	cmp	r2, #8
  40561a:	d313      	bcc.n	405644 <memcpy+0x114>
  40561c:	078b      	lsls	r3, r1, #30
  40561e:	d08d      	beq.n	40553c <memcpy+0xc>
  405620:	f010 0303 	ands.w	r3, r0, #3
  405624:	d08a      	beq.n	40553c <memcpy+0xc>
  405626:	f1c3 0304 	rsb	r3, r3, #4
  40562a:	1ad2      	subs	r2, r2, r3
  40562c:	07db      	lsls	r3, r3, #31
  40562e:	bf1c      	itt	ne
  405630:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405634:	f800 3b01 	strbne.w	r3, [r0], #1
  405638:	d380      	bcc.n	40553c <memcpy+0xc>
  40563a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40563e:	f820 3b02 	strh.w	r3, [r0], #2
  405642:	e77b      	b.n	40553c <memcpy+0xc>
  405644:	3a04      	subs	r2, #4
  405646:	d3d9      	bcc.n	4055fc <memcpy+0xcc>
  405648:	3a01      	subs	r2, #1
  40564a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40564e:	f800 3b01 	strb.w	r3, [r0], #1
  405652:	d2f9      	bcs.n	405648 <memcpy+0x118>
  405654:	780b      	ldrb	r3, [r1, #0]
  405656:	7003      	strb	r3, [r0, #0]
  405658:	784b      	ldrb	r3, [r1, #1]
  40565a:	7043      	strb	r3, [r0, #1]
  40565c:	788b      	ldrb	r3, [r1, #2]
  40565e:	7083      	strb	r3, [r0, #2]
  405660:	4660      	mov	r0, ip
  405662:	4770      	bx	lr

00405664 <__malloc_lock>:
  405664:	4801      	ldr	r0, [pc, #4]	; (40566c <__malloc_lock+0x8>)
  405666:	f7ff bc5d 	b.w	404f24 <__retarget_lock_acquire_recursive>
  40566a:	bf00      	nop
  40566c:	20400ab0 	.word	0x20400ab0

00405670 <__malloc_unlock>:
  405670:	4801      	ldr	r0, [pc, #4]	; (405678 <__malloc_unlock+0x8>)
  405672:	f7ff bc59 	b.w	404f28 <__retarget_lock_release_recursive>
  405676:	bf00      	nop
  405678:	20400ab0 	.word	0x20400ab0

0040567c <_Balloc>:
  40567c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40567e:	b570      	push	{r4, r5, r6, lr}
  405680:	4605      	mov	r5, r0
  405682:	460c      	mov	r4, r1
  405684:	b14b      	cbz	r3, 40569a <_Balloc+0x1e>
  405686:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  40568a:	b180      	cbz	r0, 4056ae <_Balloc+0x32>
  40568c:	6802      	ldr	r2, [r0, #0]
  40568e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  405692:	2300      	movs	r3, #0
  405694:	6103      	str	r3, [r0, #16]
  405696:	60c3      	str	r3, [r0, #12]
  405698:	bd70      	pop	{r4, r5, r6, pc}
  40569a:	2221      	movs	r2, #33	; 0x21
  40569c:	2104      	movs	r1, #4
  40569e:	f000 fbd9 	bl	405e54 <_calloc_r>
  4056a2:	64e8      	str	r0, [r5, #76]	; 0x4c
  4056a4:	4603      	mov	r3, r0
  4056a6:	2800      	cmp	r0, #0
  4056a8:	d1ed      	bne.n	405686 <_Balloc+0xa>
  4056aa:	2000      	movs	r0, #0
  4056ac:	bd70      	pop	{r4, r5, r6, pc}
  4056ae:	2101      	movs	r1, #1
  4056b0:	fa01 f604 	lsl.w	r6, r1, r4
  4056b4:	1d72      	adds	r2, r6, #5
  4056b6:	4628      	mov	r0, r5
  4056b8:	0092      	lsls	r2, r2, #2
  4056ba:	f000 fbcb 	bl	405e54 <_calloc_r>
  4056be:	2800      	cmp	r0, #0
  4056c0:	d0f3      	beq.n	4056aa <_Balloc+0x2e>
  4056c2:	6044      	str	r4, [r0, #4]
  4056c4:	6086      	str	r6, [r0, #8]
  4056c6:	e7e4      	b.n	405692 <_Balloc+0x16>

004056c8 <_Bfree>:
  4056c8:	b131      	cbz	r1, 4056d8 <_Bfree+0x10>
  4056ca:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4056cc:	684a      	ldr	r2, [r1, #4]
  4056ce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  4056d2:	6008      	str	r0, [r1, #0]
  4056d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4056d8:	4770      	bx	lr
  4056da:	bf00      	nop

004056dc <__multadd>:
  4056dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4056de:	690c      	ldr	r4, [r1, #16]
  4056e0:	b083      	sub	sp, #12
  4056e2:	460d      	mov	r5, r1
  4056e4:	4606      	mov	r6, r0
  4056e6:	f101 0e14 	add.w	lr, r1, #20
  4056ea:	2700      	movs	r7, #0
  4056ec:	f8de 0000 	ldr.w	r0, [lr]
  4056f0:	b281      	uxth	r1, r0
  4056f2:	fb02 3301 	mla	r3, r2, r1, r3
  4056f6:	0c01      	lsrs	r1, r0, #16
  4056f8:	0c18      	lsrs	r0, r3, #16
  4056fa:	fb02 0101 	mla	r1, r2, r1, r0
  4056fe:	b29b      	uxth	r3, r3
  405700:	3701      	adds	r7, #1
  405702:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  405706:	42bc      	cmp	r4, r7
  405708:	f84e 3b04 	str.w	r3, [lr], #4
  40570c:	ea4f 4311 	mov.w	r3, r1, lsr #16
  405710:	dcec      	bgt.n	4056ec <__multadd+0x10>
  405712:	b13b      	cbz	r3, 405724 <__multadd+0x48>
  405714:	68aa      	ldr	r2, [r5, #8]
  405716:	4294      	cmp	r4, r2
  405718:	da07      	bge.n	40572a <__multadd+0x4e>
  40571a:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40571e:	3401      	adds	r4, #1
  405720:	6153      	str	r3, [r2, #20]
  405722:	612c      	str	r4, [r5, #16]
  405724:	4628      	mov	r0, r5
  405726:	b003      	add	sp, #12
  405728:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40572a:	6869      	ldr	r1, [r5, #4]
  40572c:	9301      	str	r3, [sp, #4]
  40572e:	3101      	adds	r1, #1
  405730:	4630      	mov	r0, r6
  405732:	f7ff ffa3 	bl	40567c <_Balloc>
  405736:	692a      	ldr	r2, [r5, #16]
  405738:	3202      	adds	r2, #2
  40573a:	f105 010c 	add.w	r1, r5, #12
  40573e:	4607      	mov	r7, r0
  405740:	0092      	lsls	r2, r2, #2
  405742:	300c      	adds	r0, #12
  405744:	f7ff fef4 	bl	405530 <memcpy>
  405748:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40574a:	6869      	ldr	r1, [r5, #4]
  40574c:	9b01      	ldr	r3, [sp, #4]
  40574e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  405752:	6028      	str	r0, [r5, #0]
  405754:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  405758:	463d      	mov	r5, r7
  40575a:	e7de      	b.n	40571a <__multadd+0x3e>

0040575c <__hi0bits>:
  40575c:	0c02      	lsrs	r2, r0, #16
  40575e:	0412      	lsls	r2, r2, #16
  405760:	4603      	mov	r3, r0
  405762:	b9b2      	cbnz	r2, 405792 <__hi0bits+0x36>
  405764:	0403      	lsls	r3, r0, #16
  405766:	2010      	movs	r0, #16
  405768:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40576c:	bf04      	itt	eq
  40576e:	021b      	lsleq	r3, r3, #8
  405770:	3008      	addeq	r0, #8
  405772:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  405776:	bf04      	itt	eq
  405778:	011b      	lsleq	r3, r3, #4
  40577a:	3004      	addeq	r0, #4
  40577c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  405780:	bf04      	itt	eq
  405782:	009b      	lsleq	r3, r3, #2
  405784:	3002      	addeq	r0, #2
  405786:	2b00      	cmp	r3, #0
  405788:	db02      	blt.n	405790 <__hi0bits+0x34>
  40578a:	005b      	lsls	r3, r3, #1
  40578c:	d403      	bmi.n	405796 <__hi0bits+0x3a>
  40578e:	2020      	movs	r0, #32
  405790:	4770      	bx	lr
  405792:	2000      	movs	r0, #0
  405794:	e7e8      	b.n	405768 <__hi0bits+0xc>
  405796:	3001      	adds	r0, #1
  405798:	4770      	bx	lr
  40579a:	bf00      	nop

0040579c <__lo0bits>:
  40579c:	6803      	ldr	r3, [r0, #0]
  40579e:	f013 0207 	ands.w	r2, r3, #7
  4057a2:	4601      	mov	r1, r0
  4057a4:	d007      	beq.n	4057b6 <__lo0bits+0x1a>
  4057a6:	07da      	lsls	r2, r3, #31
  4057a8:	d421      	bmi.n	4057ee <__lo0bits+0x52>
  4057aa:	0798      	lsls	r0, r3, #30
  4057ac:	d421      	bmi.n	4057f2 <__lo0bits+0x56>
  4057ae:	089b      	lsrs	r3, r3, #2
  4057b0:	600b      	str	r3, [r1, #0]
  4057b2:	2002      	movs	r0, #2
  4057b4:	4770      	bx	lr
  4057b6:	b298      	uxth	r0, r3
  4057b8:	b198      	cbz	r0, 4057e2 <__lo0bits+0x46>
  4057ba:	4610      	mov	r0, r2
  4057bc:	f013 0fff 	tst.w	r3, #255	; 0xff
  4057c0:	bf04      	itt	eq
  4057c2:	0a1b      	lsreq	r3, r3, #8
  4057c4:	3008      	addeq	r0, #8
  4057c6:	071a      	lsls	r2, r3, #28
  4057c8:	bf04      	itt	eq
  4057ca:	091b      	lsreq	r3, r3, #4
  4057cc:	3004      	addeq	r0, #4
  4057ce:	079a      	lsls	r2, r3, #30
  4057d0:	bf04      	itt	eq
  4057d2:	089b      	lsreq	r3, r3, #2
  4057d4:	3002      	addeq	r0, #2
  4057d6:	07da      	lsls	r2, r3, #31
  4057d8:	d407      	bmi.n	4057ea <__lo0bits+0x4e>
  4057da:	085b      	lsrs	r3, r3, #1
  4057dc:	d104      	bne.n	4057e8 <__lo0bits+0x4c>
  4057de:	2020      	movs	r0, #32
  4057e0:	4770      	bx	lr
  4057e2:	0c1b      	lsrs	r3, r3, #16
  4057e4:	2010      	movs	r0, #16
  4057e6:	e7e9      	b.n	4057bc <__lo0bits+0x20>
  4057e8:	3001      	adds	r0, #1
  4057ea:	600b      	str	r3, [r1, #0]
  4057ec:	4770      	bx	lr
  4057ee:	2000      	movs	r0, #0
  4057f0:	4770      	bx	lr
  4057f2:	085b      	lsrs	r3, r3, #1
  4057f4:	600b      	str	r3, [r1, #0]
  4057f6:	2001      	movs	r0, #1
  4057f8:	4770      	bx	lr
  4057fa:	bf00      	nop

004057fc <__i2b>:
  4057fc:	b510      	push	{r4, lr}
  4057fe:	460c      	mov	r4, r1
  405800:	2101      	movs	r1, #1
  405802:	f7ff ff3b 	bl	40567c <_Balloc>
  405806:	2201      	movs	r2, #1
  405808:	6144      	str	r4, [r0, #20]
  40580a:	6102      	str	r2, [r0, #16]
  40580c:	bd10      	pop	{r4, pc}
  40580e:	bf00      	nop

00405810 <__multiply>:
  405810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405814:	690c      	ldr	r4, [r1, #16]
  405816:	6915      	ldr	r5, [r2, #16]
  405818:	42ac      	cmp	r4, r5
  40581a:	b083      	sub	sp, #12
  40581c:	468b      	mov	fp, r1
  40581e:	4616      	mov	r6, r2
  405820:	da04      	bge.n	40582c <__multiply+0x1c>
  405822:	4622      	mov	r2, r4
  405824:	46b3      	mov	fp, r6
  405826:	462c      	mov	r4, r5
  405828:	460e      	mov	r6, r1
  40582a:	4615      	mov	r5, r2
  40582c:	f8db 3008 	ldr.w	r3, [fp, #8]
  405830:	f8db 1004 	ldr.w	r1, [fp, #4]
  405834:	eb04 0805 	add.w	r8, r4, r5
  405838:	4598      	cmp	r8, r3
  40583a:	bfc8      	it	gt
  40583c:	3101      	addgt	r1, #1
  40583e:	f7ff ff1d 	bl	40567c <_Balloc>
  405842:	f100 0914 	add.w	r9, r0, #20
  405846:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  40584a:	45d1      	cmp	r9, sl
  40584c:	9000      	str	r0, [sp, #0]
  40584e:	d205      	bcs.n	40585c <__multiply+0x4c>
  405850:	464b      	mov	r3, r9
  405852:	2100      	movs	r1, #0
  405854:	f843 1b04 	str.w	r1, [r3], #4
  405858:	459a      	cmp	sl, r3
  40585a:	d8fb      	bhi.n	405854 <__multiply+0x44>
  40585c:	f106 0c14 	add.w	ip, r6, #20
  405860:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  405864:	f10b 0b14 	add.w	fp, fp, #20
  405868:	459c      	cmp	ip, r3
  40586a:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40586e:	d24c      	bcs.n	40590a <__multiply+0xfa>
  405870:	f8cd a004 	str.w	sl, [sp, #4]
  405874:	469a      	mov	sl, r3
  405876:	f8dc 5000 	ldr.w	r5, [ip]
  40587a:	b2af      	uxth	r7, r5
  40587c:	b1ef      	cbz	r7, 4058ba <__multiply+0xaa>
  40587e:	2100      	movs	r1, #0
  405880:	464d      	mov	r5, r9
  405882:	465e      	mov	r6, fp
  405884:	460c      	mov	r4, r1
  405886:	f856 2b04 	ldr.w	r2, [r6], #4
  40588a:	6828      	ldr	r0, [r5, #0]
  40588c:	b293      	uxth	r3, r2
  40588e:	b281      	uxth	r1, r0
  405890:	fb07 1303 	mla	r3, r7, r3, r1
  405894:	0c12      	lsrs	r2, r2, #16
  405896:	0c01      	lsrs	r1, r0, #16
  405898:	4423      	add	r3, r4
  40589a:	fb07 1102 	mla	r1, r7, r2, r1
  40589e:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  4058a2:	b29b      	uxth	r3, r3
  4058a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  4058a8:	45b6      	cmp	lr, r6
  4058aa:	f845 3b04 	str.w	r3, [r5], #4
  4058ae:	ea4f 4411 	mov.w	r4, r1, lsr #16
  4058b2:	d8e8      	bhi.n	405886 <__multiply+0x76>
  4058b4:	602c      	str	r4, [r5, #0]
  4058b6:	f8dc 5000 	ldr.w	r5, [ip]
  4058ba:	0c2d      	lsrs	r5, r5, #16
  4058bc:	d01d      	beq.n	4058fa <__multiply+0xea>
  4058be:	f8d9 3000 	ldr.w	r3, [r9]
  4058c2:	4648      	mov	r0, r9
  4058c4:	461c      	mov	r4, r3
  4058c6:	4659      	mov	r1, fp
  4058c8:	2200      	movs	r2, #0
  4058ca:	880e      	ldrh	r6, [r1, #0]
  4058cc:	0c24      	lsrs	r4, r4, #16
  4058ce:	fb05 4406 	mla	r4, r5, r6, r4
  4058d2:	4422      	add	r2, r4
  4058d4:	b29b      	uxth	r3, r3
  4058d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4058da:	f840 3b04 	str.w	r3, [r0], #4
  4058de:	f851 3b04 	ldr.w	r3, [r1], #4
  4058e2:	6804      	ldr	r4, [r0, #0]
  4058e4:	0c1b      	lsrs	r3, r3, #16
  4058e6:	b2a6      	uxth	r6, r4
  4058e8:	fb05 6303 	mla	r3, r5, r3, r6
  4058ec:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  4058f0:	458e      	cmp	lr, r1
  4058f2:	ea4f 4213 	mov.w	r2, r3, lsr #16
  4058f6:	d8e8      	bhi.n	4058ca <__multiply+0xba>
  4058f8:	6003      	str	r3, [r0, #0]
  4058fa:	f10c 0c04 	add.w	ip, ip, #4
  4058fe:	45e2      	cmp	sl, ip
  405900:	f109 0904 	add.w	r9, r9, #4
  405904:	d8b7      	bhi.n	405876 <__multiply+0x66>
  405906:	f8dd a004 	ldr.w	sl, [sp, #4]
  40590a:	f1b8 0f00 	cmp.w	r8, #0
  40590e:	dd0b      	ble.n	405928 <__multiply+0x118>
  405910:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  405914:	f1aa 0a04 	sub.w	sl, sl, #4
  405918:	b11b      	cbz	r3, 405922 <__multiply+0x112>
  40591a:	e005      	b.n	405928 <__multiply+0x118>
  40591c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  405920:	b913      	cbnz	r3, 405928 <__multiply+0x118>
  405922:	f1b8 0801 	subs.w	r8, r8, #1
  405926:	d1f9      	bne.n	40591c <__multiply+0x10c>
  405928:	9800      	ldr	r0, [sp, #0]
  40592a:	f8c0 8010 	str.w	r8, [r0, #16]
  40592e:	b003      	add	sp, #12
  405930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00405934 <__pow5mult>:
  405934:	f012 0303 	ands.w	r3, r2, #3
  405938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40593c:	4614      	mov	r4, r2
  40593e:	4607      	mov	r7, r0
  405940:	d12e      	bne.n	4059a0 <__pow5mult+0x6c>
  405942:	460d      	mov	r5, r1
  405944:	10a4      	asrs	r4, r4, #2
  405946:	d01c      	beq.n	405982 <__pow5mult+0x4e>
  405948:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  40594a:	b396      	cbz	r6, 4059b2 <__pow5mult+0x7e>
  40594c:	07e3      	lsls	r3, r4, #31
  40594e:	f04f 0800 	mov.w	r8, #0
  405952:	d406      	bmi.n	405962 <__pow5mult+0x2e>
  405954:	1064      	asrs	r4, r4, #1
  405956:	d014      	beq.n	405982 <__pow5mult+0x4e>
  405958:	6830      	ldr	r0, [r6, #0]
  40595a:	b1a8      	cbz	r0, 405988 <__pow5mult+0x54>
  40595c:	4606      	mov	r6, r0
  40595e:	07e3      	lsls	r3, r4, #31
  405960:	d5f8      	bpl.n	405954 <__pow5mult+0x20>
  405962:	4632      	mov	r2, r6
  405964:	4629      	mov	r1, r5
  405966:	4638      	mov	r0, r7
  405968:	f7ff ff52 	bl	405810 <__multiply>
  40596c:	b1b5      	cbz	r5, 40599c <__pow5mult+0x68>
  40596e:	686a      	ldr	r2, [r5, #4]
  405970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  405972:	1064      	asrs	r4, r4, #1
  405974:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  405978:	6029      	str	r1, [r5, #0]
  40597a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40597e:	4605      	mov	r5, r0
  405980:	d1ea      	bne.n	405958 <__pow5mult+0x24>
  405982:	4628      	mov	r0, r5
  405984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405988:	4632      	mov	r2, r6
  40598a:	4631      	mov	r1, r6
  40598c:	4638      	mov	r0, r7
  40598e:	f7ff ff3f 	bl	405810 <__multiply>
  405992:	6030      	str	r0, [r6, #0]
  405994:	f8c0 8000 	str.w	r8, [r0]
  405998:	4606      	mov	r6, r0
  40599a:	e7e0      	b.n	40595e <__pow5mult+0x2a>
  40599c:	4605      	mov	r5, r0
  40599e:	e7d9      	b.n	405954 <__pow5mult+0x20>
  4059a0:	1e5a      	subs	r2, r3, #1
  4059a2:	4d0b      	ldr	r5, [pc, #44]	; (4059d0 <__pow5mult+0x9c>)
  4059a4:	2300      	movs	r3, #0
  4059a6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  4059aa:	f7ff fe97 	bl	4056dc <__multadd>
  4059ae:	4605      	mov	r5, r0
  4059b0:	e7c8      	b.n	405944 <__pow5mult+0x10>
  4059b2:	2101      	movs	r1, #1
  4059b4:	4638      	mov	r0, r7
  4059b6:	f7ff fe61 	bl	40567c <_Balloc>
  4059ba:	f240 2171 	movw	r1, #625	; 0x271
  4059be:	2201      	movs	r2, #1
  4059c0:	2300      	movs	r3, #0
  4059c2:	6141      	str	r1, [r0, #20]
  4059c4:	6102      	str	r2, [r0, #16]
  4059c6:	4606      	mov	r6, r0
  4059c8:	64b8      	str	r0, [r7, #72]	; 0x48
  4059ca:	6003      	str	r3, [r0, #0]
  4059cc:	e7be      	b.n	40594c <__pow5mult+0x18>
  4059ce:	bf00      	nop
  4059d0:	00407120 	.word	0x00407120

004059d4 <__lshift>:
  4059d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4059d8:	4691      	mov	r9, r2
  4059da:	690a      	ldr	r2, [r1, #16]
  4059dc:	688b      	ldr	r3, [r1, #8]
  4059de:	ea4f 1469 	mov.w	r4, r9, asr #5
  4059e2:	eb04 0802 	add.w	r8, r4, r2
  4059e6:	f108 0501 	add.w	r5, r8, #1
  4059ea:	429d      	cmp	r5, r3
  4059ec:	460e      	mov	r6, r1
  4059ee:	4607      	mov	r7, r0
  4059f0:	6849      	ldr	r1, [r1, #4]
  4059f2:	dd04      	ble.n	4059fe <__lshift+0x2a>
  4059f4:	005b      	lsls	r3, r3, #1
  4059f6:	429d      	cmp	r5, r3
  4059f8:	f101 0101 	add.w	r1, r1, #1
  4059fc:	dcfa      	bgt.n	4059f4 <__lshift+0x20>
  4059fe:	4638      	mov	r0, r7
  405a00:	f7ff fe3c 	bl	40567c <_Balloc>
  405a04:	2c00      	cmp	r4, #0
  405a06:	f100 0314 	add.w	r3, r0, #20
  405a0a:	dd06      	ble.n	405a1a <__lshift+0x46>
  405a0c:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  405a10:	2100      	movs	r1, #0
  405a12:	f843 1b04 	str.w	r1, [r3], #4
  405a16:	429a      	cmp	r2, r3
  405a18:	d1fb      	bne.n	405a12 <__lshift+0x3e>
  405a1a:	6934      	ldr	r4, [r6, #16]
  405a1c:	f106 0114 	add.w	r1, r6, #20
  405a20:	f019 091f 	ands.w	r9, r9, #31
  405a24:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  405a28:	d01d      	beq.n	405a66 <__lshift+0x92>
  405a2a:	f1c9 0c20 	rsb	ip, r9, #32
  405a2e:	2200      	movs	r2, #0
  405a30:	680c      	ldr	r4, [r1, #0]
  405a32:	fa04 f409 	lsl.w	r4, r4, r9
  405a36:	4314      	orrs	r4, r2
  405a38:	f843 4b04 	str.w	r4, [r3], #4
  405a3c:	f851 2b04 	ldr.w	r2, [r1], #4
  405a40:	458e      	cmp	lr, r1
  405a42:	fa22 f20c 	lsr.w	r2, r2, ip
  405a46:	d8f3      	bhi.n	405a30 <__lshift+0x5c>
  405a48:	601a      	str	r2, [r3, #0]
  405a4a:	b10a      	cbz	r2, 405a50 <__lshift+0x7c>
  405a4c:	f108 0502 	add.w	r5, r8, #2
  405a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  405a52:	6872      	ldr	r2, [r6, #4]
  405a54:	3d01      	subs	r5, #1
  405a56:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  405a5a:	6105      	str	r5, [r0, #16]
  405a5c:	6031      	str	r1, [r6, #0]
  405a5e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  405a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405a66:	3b04      	subs	r3, #4
  405a68:	f851 2b04 	ldr.w	r2, [r1], #4
  405a6c:	f843 2f04 	str.w	r2, [r3, #4]!
  405a70:	458e      	cmp	lr, r1
  405a72:	d8f9      	bhi.n	405a68 <__lshift+0x94>
  405a74:	e7ec      	b.n	405a50 <__lshift+0x7c>
  405a76:	bf00      	nop

00405a78 <__mcmp>:
  405a78:	b430      	push	{r4, r5}
  405a7a:	690b      	ldr	r3, [r1, #16]
  405a7c:	4605      	mov	r5, r0
  405a7e:	6900      	ldr	r0, [r0, #16]
  405a80:	1ac0      	subs	r0, r0, r3
  405a82:	d10f      	bne.n	405aa4 <__mcmp+0x2c>
  405a84:	009b      	lsls	r3, r3, #2
  405a86:	3514      	adds	r5, #20
  405a88:	3114      	adds	r1, #20
  405a8a:	4419      	add	r1, r3
  405a8c:	442b      	add	r3, r5
  405a8e:	e001      	b.n	405a94 <__mcmp+0x1c>
  405a90:	429d      	cmp	r5, r3
  405a92:	d207      	bcs.n	405aa4 <__mcmp+0x2c>
  405a94:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  405a98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  405a9c:	4294      	cmp	r4, r2
  405a9e:	d0f7      	beq.n	405a90 <__mcmp+0x18>
  405aa0:	d302      	bcc.n	405aa8 <__mcmp+0x30>
  405aa2:	2001      	movs	r0, #1
  405aa4:	bc30      	pop	{r4, r5}
  405aa6:	4770      	bx	lr
  405aa8:	f04f 30ff 	mov.w	r0, #4294967295
  405aac:	e7fa      	b.n	405aa4 <__mcmp+0x2c>
  405aae:	bf00      	nop

00405ab0 <__mdiff>:
  405ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405ab4:	690f      	ldr	r7, [r1, #16]
  405ab6:	460e      	mov	r6, r1
  405ab8:	6911      	ldr	r1, [r2, #16]
  405aba:	1a7f      	subs	r7, r7, r1
  405abc:	2f00      	cmp	r7, #0
  405abe:	4690      	mov	r8, r2
  405ac0:	d117      	bne.n	405af2 <__mdiff+0x42>
  405ac2:	0089      	lsls	r1, r1, #2
  405ac4:	f106 0514 	add.w	r5, r6, #20
  405ac8:	f102 0e14 	add.w	lr, r2, #20
  405acc:	186b      	adds	r3, r5, r1
  405ace:	4471      	add	r1, lr
  405ad0:	e001      	b.n	405ad6 <__mdiff+0x26>
  405ad2:	429d      	cmp	r5, r3
  405ad4:	d25c      	bcs.n	405b90 <__mdiff+0xe0>
  405ad6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  405ada:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  405ade:	42a2      	cmp	r2, r4
  405ae0:	d0f7      	beq.n	405ad2 <__mdiff+0x22>
  405ae2:	d25e      	bcs.n	405ba2 <__mdiff+0xf2>
  405ae4:	4633      	mov	r3, r6
  405ae6:	462c      	mov	r4, r5
  405ae8:	4646      	mov	r6, r8
  405aea:	4675      	mov	r5, lr
  405aec:	4698      	mov	r8, r3
  405aee:	2701      	movs	r7, #1
  405af0:	e005      	b.n	405afe <__mdiff+0x4e>
  405af2:	db58      	blt.n	405ba6 <__mdiff+0xf6>
  405af4:	f106 0514 	add.w	r5, r6, #20
  405af8:	f108 0414 	add.w	r4, r8, #20
  405afc:	2700      	movs	r7, #0
  405afe:	6871      	ldr	r1, [r6, #4]
  405b00:	f7ff fdbc 	bl	40567c <_Balloc>
  405b04:	f8d8 3010 	ldr.w	r3, [r8, #16]
  405b08:	6936      	ldr	r6, [r6, #16]
  405b0a:	60c7      	str	r7, [r0, #12]
  405b0c:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  405b10:	46a6      	mov	lr, r4
  405b12:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  405b16:	f100 0414 	add.w	r4, r0, #20
  405b1a:	2300      	movs	r3, #0
  405b1c:	f85e 1b04 	ldr.w	r1, [lr], #4
  405b20:	f855 8b04 	ldr.w	r8, [r5], #4
  405b24:	b28a      	uxth	r2, r1
  405b26:	fa13 f388 	uxtah	r3, r3, r8
  405b2a:	0c09      	lsrs	r1, r1, #16
  405b2c:	1a9a      	subs	r2, r3, r2
  405b2e:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  405b32:	eb03 4322 	add.w	r3, r3, r2, asr #16
  405b36:	b292      	uxth	r2, r2
  405b38:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  405b3c:	45f4      	cmp	ip, lr
  405b3e:	f844 2b04 	str.w	r2, [r4], #4
  405b42:	ea4f 4323 	mov.w	r3, r3, asr #16
  405b46:	d8e9      	bhi.n	405b1c <__mdiff+0x6c>
  405b48:	42af      	cmp	r7, r5
  405b4a:	d917      	bls.n	405b7c <__mdiff+0xcc>
  405b4c:	46a4      	mov	ip, r4
  405b4e:	46ae      	mov	lr, r5
  405b50:	f85e 2b04 	ldr.w	r2, [lr], #4
  405b54:	fa13 f382 	uxtah	r3, r3, r2
  405b58:	1419      	asrs	r1, r3, #16
  405b5a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  405b5e:	b29b      	uxth	r3, r3
  405b60:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  405b64:	4577      	cmp	r7, lr
  405b66:	f84c 2b04 	str.w	r2, [ip], #4
  405b6a:	ea4f 4321 	mov.w	r3, r1, asr #16
  405b6e:	d8ef      	bhi.n	405b50 <__mdiff+0xa0>
  405b70:	43ed      	mvns	r5, r5
  405b72:	442f      	add	r7, r5
  405b74:	f027 0703 	bic.w	r7, r7, #3
  405b78:	3704      	adds	r7, #4
  405b7a:	443c      	add	r4, r7
  405b7c:	3c04      	subs	r4, #4
  405b7e:	b922      	cbnz	r2, 405b8a <__mdiff+0xda>
  405b80:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  405b84:	3e01      	subs	r6, #1
  405b86:	2b00      	cmp	r3, #0
  405b88:	d0fa      	beq.n	405b80 <__mdiff+0xd0>
  405b8a:	6106      	str	r6, [r0, #16]
  405b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405b90:	2100      	movs	r1, #0
  405b92:	f7ff fd73 	bl	40567c <_Balloc>
  405b96:	2201      	movs	r2, #1
  405b98:	2300      	movs	r3, #0
  405b9a:	6102      	str	r2, [r0, #16]
  405b9c:	6143      	str	r3, [r0, #20]
  405b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405ba2:	4674      	mov	r4, lr
  405ba4:	e7ab      	b.n	405afe <__mdiff+0x4e>
  405ba6:	4633      	mov	r3, r6
  405ba8:	f106 0414 	add.w	r4, r6, #20
  405bac:	f102 0514 	add.w	r5, r2, #20
  405bb0:	4616      	mov	r6, r2
  405bb2:	2701      	movs	r7, #1
  405bb4:	4698      	mov	r8, r3
  405bb6:	e7a2      	b.n	405afe <__mdiff+0x4e>

00405bb8 <__d2b>:
  405bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405bbc:	b082      	sub	sp, #8
  405bbe:	2101      	movs	r1, #1
  405bc0:	461c      	mov	r4, r3
  405bc2:	f3c3 570a 	ubfx	r7, r3, #20, #11
  405bc6:	4615      	mov	r5, r2
  405bc8:	9e08      	ldr	r6, [sp, #32]
  405bca:	f7ff fd57 	bl	40567c <_Balloc>
  405bce:	f3c4 0413 	ubfx	r4, r4, #0, #20
  405bd2:	4680      	mov	r8, r0
  405bd4:	b10f      	cbz	r7, 405bda <__d2b+0x22>
  405bd6:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  405bda:	9401      	str	r4, [sp, #4]
  405bdc:	b31d      	cbz	r5, 405c26 <__d2b+0x6e>
  405bde:	a802      	add	r0, sp, #8
  405be0:	f840 5d08 	str.w	r5, [r0, #-8]!
  405be4:	f7ff fdda 	bl	40579c <__lo0bits>
  405be8:	2800      	cmp	r0, #0
  405bea:	d134      	bne.n	405c56 <__d2b+0x9e>
  405bec:	e89d 000c 	ldmia.w	sp, {r2, r3}
  405bf0:	f8c8 2014 	str.w	r2, [r8, #20]
  405bf4:	2b00      	cmp	r3, #0
  405bf6:	bf0c      	ite	eq
  405bf8:	2101      	moveq	r1, #1
  405bfa:	2102      	movne	r1, #2
  405bfc:	f8c8 3018 	str.w	r3, [r8, #24]
  405c00:	f8c8 1010 	str.w	r1, [r8, #16]
  405c04:	b9df      	cbnz	r7, 405c3e <__d2b+0x86>
  405c06:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  405c0a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  405c0e:	6030      	str	r0, [r6, #0]
  405c10:	6918      	ldr	r0, [r3, #16]
  405c12:	f7ff fda3 	bl	40575c <__hi0bits>
  405c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405c18:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  405c1c:	6018      	str	r0, [r3, #0]
  405c1e:	4640      	mov	r0, r8
  405c20:	b002      	add	sp, #8
  405c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405c26:	a801      	add	r0, sp, #4
  405c28:	f7ff fdb8 	bl	40579c <__lo0bits>
  405c2c:	9b01      	ldr	r3, [sp, #4]
  405c2e:	f8c8 3014 	str.w	r3, [r8, #20]
  405c32:	2101      	movs	r1, #1
  405c34:	3020      	adds	r0, #32
  405c36:	f8c8 1010 	str.w	r1, [r8, #16]
  405c3a:	2f00      	cmp	r7, #0
  405c3c:	d0e3      	beq.n	405c06 <__d2b+0x4e>
  405c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405c40:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  405c44:	4407      	add	r7, r0
  405c46:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  405c4a:	6037      	str	r7, [r6, #0]
  405c4c:	6018      	str	r0, [r3, #0]
  405c4e:	4640      	mov	r0, r8
  405c50:	b002      	add	sp, #8
  405c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405c56:	e89d 000a 	ldmia.w	sp, {r1, r3}
  405c5a:	f1c0 0220 	rsb	r2, r0, #32
  405c5e:	fa03 f202 	lsl.w	r2, r3, r2
  405c62:	430a      	orrs	r2, r1
  405c64:	40c3      	lsrs	r3, r0
  405c66:	9301      	str	r3, [sp, #4]
  405c68:	f8c8 2014 	str.w	r2, [r8, #20]
  405c6c:	e7c2      	b.n	405bf4 <__d2b+0x3c>
  405c6e:	bf00      	nop

00405c70 <_sbrk_r>:
  405c70:	b538      	push	{r3, r4, r5, lr}
  405c72:	4c07      	ldr	r4, [pc, #28]	; (405c90 <_sbrk_r+0x20>)
  405c74:	2300      	movs	r3, #0
  405c76:	4605      	mov	r5, r0
  405c78:	4608      	mov	r0, r1
  405c7a:	6023      	str	r3, [r4, #0]
  405c7c:	f7fb feec 	bl	401a58 <_sbrk>
  405c80:	1c43      	adds	r3, r0, #1
  405c82:	d000      	beq.n	405c86 <_sbrk_r+0x16>
  405c84:	bd38      	pop	{r3, r4, r5, pc}
  405c86:	6823      	ldr	r3, [r4, #0]
  405c88:	2b00      	cmp	r3, #0
  405c8a:	d0fb      	beq.n	405c84 <_sbrk_r+0x14>
  405c8c:	602b      	str	r3, [r5, #0]
  405c8e:	bd38      	pop	{r3, r4, r5, pc}
  405c90:	20400ac4 	.word	0x20400ac4

00405c94 <__ssprint_r>:
  405c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405c98:	6893      	ldr	r3, [r2, #8]
  405c9a:	b083      	sub	sp, #12
  405c9c:	4690      	mov	r8, r2
  405c9e:	2b00      	cmp	r3, #0
  405ca0:	d070      	beq.n	405d84 <__ssprint_r+0xf0>
  405ca2:	4682      	mov	sl, r0
  405ca4:	460c      	mov	r4, r1
  405ca6:	6817      	ldr	r7, [r2, #0]
  405ca8:	688d      	ldr	r5, [r1, #8]
  405caa:	6808      	ldr	r0, [r1, #0]
  405cac:	e042      	b.n	405d34 <__ssprint_r+0xa0>
  405cae:	89a3      	ldrh	r3, [r4, #12]
  405cb0:	f413 6f90 	tst.w	r3, #1152	; 0x480
  405cb4:	d02e      	beq.n	405d14 <__ssprint_r+0x80>
  405cb6:	6965      	ldr	r5, [r4, #20]
  405cb8:	6921      	ldr	r1, [r4, #16]
  405cba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  405cbe:	eba0 0b01 	sub.w	fp, r0, r1
  405cc2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  405cc6:	f10b 0001 	add.w	r0, fp, #1
  405cca:	106d      	asrs	r5, r5, #1
  405ccc:	4430      	add	r0, r6
  405cce:	42a8      	cmp	r0, r5
  405cd0:	462a      	mov	r2, r5
  405cd2:	bf84      	itt	hi
  405cd4:	4605      	movhi	r5, r0
  405cd6:	462a      	movhi	r2, r5
  405cd8:	055b      	lsls	r3, r3, #21
  405cda:	d538      	bpl.n	405d4e <__ssprint_r+0xba>
  405cdc:	4611      	mov	r1, r2
  405cde:	4650      	mov	r0, sl
  405ce0:	f7ff f924 	bl	404f2c <_malloc_r>
  405ce4:	2800      	cmp	r0, #0
  405ce6:	d03c      	beq.n	405d62 <__ssprint_r+0xce>
  405ce8:	465a      	mov	r2, fp
  405cea:	6921      	ldr	r1, [r4, #16]
  405cec:	9001      	str	r0, [sp, #4]
  405cee:	f7ff fc1f 	bl	405530 <memcpy>
  405cf2:	89a2      	ldrh	r2, [r4, #12]
  405cf4:	9b01      	ldr	r3, [sp, #4]
  405cf6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  405cfa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  405cfe:	81a2      	strh	r2, [r4, #12]
  405d00:	eba5 020b 	sub.w	r2, r5, fp
  405d04:	eb03 000b 	add.w	r0, r3, fp
  405d08:	6165      	str	r5, [r4, #20]
  405d0a:	6123      	str	r3, [r4, #16]
  405d0c:	6020      	str	r0, [r4, #0]
  405d0e:	60a2      	str	r2, [r4, #8]
  405d10:	4635      	mov	r5, r6
  405d12:	46b3      	mov	fp, r6
  405d14:	465a      	mov	r2, fp
  405d16:	4649      	mov	r1, r9
  405d18:	f000 fa18 	bl	40614c <memmove>
  405d1c:	f8d8 3008 	ldr.w	r3, [r8, #8]
  405d20:	68a2      	ldr	r2, [r4, #8]
  405d22:	6820      	ldr	r0, [r4, #0]
  405d24:	1b55      	subs	r5, r2, r5
  405d26:	4458      	add	r0, fp
  405d28:	1b9e      	subs	r6, r3, r6
  405d2a:	60a5      	str	r5, [r4, #8]
  405d2c:	6020      	str	r0, [r4, #0]
  405d2e:	f8c8 6008 	str.w	r6, [r8, #8]
  405d32:	b33e      	cbz	r6, 405d84 <__ssprint_r+0xf0>
  405d34:	687e      	ldr	r6, [r7, #4]
  405d36:	463b      	mov	r3, r7
  405d38:	3708      	adds	r7, #8
  405d3a:	2e00      	cmp	r6, #0
  405d3c:	d0fa      	beq.n	405d34 <__ssprint_r+0xa0>
  405d3e:	42ae      	cmp	r6, r5
  405d40:	f8d3 9000 	ldr.w	r9, [r3]
  405d44:	46ab      	mov	fp, r5
  405d46:	d2b2      	bcs.n	405cae <__ssprint_r+0x1a>
  405d48:	4635      	mov	r5, r6
  405d4a:	46b3      	mov	fp, r6
  405d4c:	e7e2      	b.n	405d14 <__ssprint_r+0x80>
  405d4e:	4650      	mov	r0, sl
  405d50:	f000 fa60 	bl	406214 <_realloc_r>
  405d54:	4603      	mov	r3, r0
  405d56:	2800      	cmp	r0, #0
  405d58:	d1d2      	bne.n	405d00 <__ssprint_r+0x6c>
  405d5a:	6921      	ldr	r1, [r4, #16]
  405d5c:	4650      	mov	r0, sl
  405d5e:	f000 f8f9 	bl	405f54 <_free_r>
  405d62:	230c      	movs	r3, #12
  405d64:	f8ca 3000 	str.w	r3, [sl]
  405d68:	89a3      	ldrh	r3, [r4, #12]
  405d6a:	2200      	movs	r2, #0
  405d6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405d70:	f04f 30ff 	mov.w	r0, #4294967295
  405d74:	81a3      	strh	r3, [r4, #12]
  405d76:	f8c8 2008 	str.w	r2, [r8, #8]
  405d7a:	f8c8 2004 	str.w	r2, [r8, #4]
  405d7e:	b003      	add	sp, #12
  405d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405d84:	2000      	movs	r0, #0
  405d86:	f8c8 0004 	str.w	r0, [r8, #4]
  405d8a:	b003      	add	sp, #12
  405d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00405d90 <__register_exitproc>:
  405d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405d94:	4d2c      	ldr	r5, [pc, #176]	; (405e48 <__register_exitproc+0xb8>)
  405d96:	4606      	mov	r6, r0
  405d98:	6828      	ldr	r0, [r5, #0]
  405d9a:	4698      	mov	r8, r3
  405d9c:	460f      	mov	r7, r1
  405d9e:	4691      	mov	r9, r2
  405da0:	f7ff f8c0 	bl	404f24 <__retarget_lock_acquire_recursive>
  405da4:	4b29      	ldr	r3, [pc, #164]	; (405e4c <__register_exitproc+0xbc>)
  405da6:	681c      	ldr	r4, [r3, #0]
  405da8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  405dac:	2b00      	cmp	r3, #0
  405dae:	d03e      	beq.n	405e2e <__register_exitproc+0x9e>
  405db0:	685a      	ldr	r2, [r3, #4]
  405db2:	2a1f      	cmp	r2, #31
  405db4:	dc1c      	bgt.n	405df0 <__register_exitproc+0x60>
  405db6:	f102 0e01 	add.w	lr, r2, #1
  405dba:	b176      	cbz	r6, 405dda <__register_exitproc+0x4a>
  405dbc:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  405dc0:	2401      	movs	r4, #1
  405dc2:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  405dc6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  405dca:	4094      	lsls	r4, r2
  405dcc:	4320      	orrs	r0, r4
  405dce:	2e02      	cmp	r6, #2
  405dd0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  405dd4:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  405dd8:	d023      	beq.n	405e22 <__register_exitproc+0x92>
  405dda:	3202      	adds	r2, #2
  405ddc:	f8c3 e004 	str.w	lr, [r3, #4]
  405de0:	6828      	ldr	r0, [r5, #0]
  405de2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  405de6:	f7ff f89f 	bl	404f28 <__retarget_lock_release_recursive>
  405dea:	2000      	movs	r0, #0
  405dec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405df0:	4b17      	ldr	r3, [pc, #92]	; (405e50 <__register_exitproc+0xc0>)
  405df2:	b30b      	cbz	r3, 405e38 <__register_exitproc+0xa8>
  405df4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  405df8:	f3af 8000 	nop.w
  405dfc:	4603      	mov	r3, r0
  405dfe:	b1d8      	cbz	r0, 405e38 <__register_exitproc+0xa8>
  405e00:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  405e04:	6002      	str	r2, [r0, #0]
  405e06:	2100      	movs	r1, #0
  405e08:	6041      	str	r1, [r0, #4]
  405e0a:	460a      	mov	r2, r1
  405e0c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  405e10:	f04f 0e01 	mov.w	lr, #1
  405e14:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  405e18:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  405e1c:	2e00      	cmp	r6, #0
  405e1e:	d0dc      	beq.n	405dda <__register_exitproc+0x4a>
  405e20:	e7cc      	b.n	405dbc <__register_exitproc+0x2c>
  405e22:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  405e26:	430c      	orrs	r4, r1
  405e28:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  405e2c:	e7d5      	b.n	405dda <__register_exitproc+0x4a>
  405e2e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  405e32:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  405e36:	e7bb      	b.n	405db0 <__register_exitproc+0x20>
  405e38:	6828      	ldr	r0, [r5, #0]
  405e3a:	f7ff f875 	bl	404f28 <__retarget_lock_release_recursive>
  405e3e:	f04f 30ff 	mov.w	r0, #4294967295
  405e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405e46:	bf00      	nop
  405e48:	20400440 	.word	0x20400440
  405e4c:	00406f90 	.word	0x00406f90
  405e50:	00000000 	.word	0x00000000

00405e54 <_calloc_r>:
  405e54:	b510      	push	{r4, lr}
  405e56:	fb02 f101 	mul.w	r1, r2, r1
  405e5a:	f7ff f867 	bl	404f2c <_malloc_r>
  405e5e:	4604      	mov	r4, r0
  405e60:	b1d8      	cbz	r0, 405e9a <_calloc_r+0x46>
  405e62:	f850 2c04 	ldr.w	r2, [r0, #-4]
  405e66:	f022 0203 	bic.w	r2, r2, #3
  405e6a:	3a04      	subs	r2, #4
  405e6c:	2a24      	cmp	r2, #36	; 0x24
  405e6e:	d818      	bhi.n	405ea2 <_calloc_r+0x4e>
  405e70:	2a13      	cmp	r2, #19
  405e72:	d914      	bls.n	405e9e <_calloc_r+0x4a>
  405e74:	2300      	movs	r3, #0
  405e76:	2a1b      	cmp	r2, #27
  405e78:	6003      	str	r3, [r0, #0]
  405e7a:	6043      	str	r3, [r0, #4]
  405e7c:	d916      	bls.n	405eac <_calloc_r+0x58>
  405e7e:	2a24      	cmp	r2, #36	; 0x24
  405e80:	6083      	str	r3, [r0, #8]
  405e82:	60c3      	str	r3, [r0, #12]
  405e84:	bf11      	iteee	ne
  405e86:	f100 0210 	addne.w	r2, r0, #16
  405e8a:	6103      	streq	r3, [r0, #16]
  405e8c:	6143      	streq	r3, [r0, #20]
  405e8e:	f100 0218 	addeq.w	r2, r0, #24
  405e92:	2300      	movs	r3, #0
  405e94:	6013      	str	r3, [r2, #0]
  405e96:	6053      	str	r3, [r2, #4]
  405e98:	6093      	str	r3, [r2, #8]
  405e9a:	4620      	mov	r0, r4
  405e9c:	bd10      	pop	{r4, pc}
  405e9e:	4602      	mov	r2, r0
  405ea0:	e7f7      	b.n	405e92 <_calloc_r+0x3e>
  405ea2:	2100      	movs	r1, #0
  405ea4:	f7fc fcea 	bl	40287c <memset>
  405ea8:	4620      	mov	r0, r4
  405eaa:	bd10      	pop	{r4, pc}
  405eac:	f100 0208 	add.w	r2, r0, #8
  405eb0:	e7ef      	b.n	405e92 <_calloc_r+0x3e>
  405eb2:	bf00      	nop

00405eb4 <_malloc_trim_r>:
  405eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405eb6:	4f24      	ldr	r7, [pc, #144]	; (405f48 <_malloc_trim_r+0x94>)
  405eb8:	460c      	mov	r4, r1
  405eba:	4606      	mov	r6, r0
  405ebc:	f7ff fbd2 	bl	405664 <__malloc_lock>
  405ec0:	68bb      	ldr	r3, [r7, #8]
  405ec2:	685d      	ldr	r5, [r3, #4]
  405ec4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  405ec8:	310f      	adds	r1, #15
  405eca:	f025 0503 	bic.w	r5, r5, #3
  405ece:	4429      	add	r1, r5
  405ed0:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  405ed4:	f021 010f 	bic.w	r1, r1, #15
  405ed8:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  405edc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  405ee0:	db07      	blt.n	405ef2 <_malloc_trim_r+0x3e>
  405ee2:	2100      	movs	r1, #0
  405ee4:	4630      	mov	r0, r6
  405ee6:	f7ff fec3 	bl	405c70 <_sbrk_r>
  405eea:	68bb      	ldr	r3, [r7, #8]
  405eec:	442b      	add	r3, r5
  405eee:	4298      	cmp	r0, r3
  405ef0:	d004      	beq.n	405efc <_malloc_trim_r+0x48>
  405ef2:	4630      	mov	r0, r6
  405ef4:	f7ff fbbc 	bl	405670 <__malloc_unlock>
  405ef8:	2000      	movs	r0, #0
  405efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405efc:	4261      	negs	r1, r4
  405efe:	4630      	mov	r0, r6
  405f00:	f7ff feb6 	bl	405c70 <_sbrk_r>
  405f04:	3001      	adds	r0, #1
  405f06:	d00d      	beq.n	405f24 <_malloc_trim_r+0x70>
  405f08:	4b10      	ldr	r3, [pc, #64]	; (405f4c <_malloc_trim_r+0x98>)
  405f0a:	68ba      	ldr	r2, [r7, #8]
  405f0c:	6819      	ldr	r1, [r3, #0]
  405f0e:	1b2d      	subs	r5, r5, r4
  405f10:	f045 0501 	orr.w	r5, r5, #1
  405f14:	4630      	mov	r0, r6
  405f16:	1b09      	subs	r1, r1, r4
  405f18:	6055      	str	r5, [r2, #4]
  405f1a:	6019      	str	r1, [r3, #0]
  405f1c:	f7ff fba8 	bl	405670 <__malloc_unlock>
  405f20:	2001      	movs	r0, #1
  405f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405f24:	2100      	movs	r1, #0
  405f26:	4630      	mov	r0, r6
  405f28:	f7ff fea2 	bl	405c70 <_sbrk_r>
  405f2c:	68ba      	ldr	r2, [r7, #8]
  405f2e:	1a83      	subs	r3, r0, r2
  405f30:	2b0f      	cmp	r3, #15
  405f32:	ddde      	ble.n	405ef2 <_malloc_trim_r+0x3e>
  405f34:	4c06      	ldr	r4, [pc, #24]	; (405f50 <_malloc_trim_r+0x9c>)
  405f36:	4905      	ldr	r1, [pc, #20]	; (405f4c <_malloc_trim_r+0x98>)
  405f38:	6824      	ldr	r4, [r4, #0]
  405f3a:	f043 0301 	orr.w	r3, r3, #1
  405f3e:	1b00      	subs	r0, r0, r4
  405f40:	6053      	str	r3, [r2, #4]
  405f42:	6008      	str	r0, [r1, #0]
  405f44:	e7d5      	b.n	405ef2 <_malloc_trim_r+0x3e>
  405f46:	bf00      	nop
  405f48:	20400444 	.word	0x20400444
  405f4c:	20400a68 	.word	0x20400a68
  405f50:	2040084c 	.word	0x2040084c

00405f54 <_free_r>:
  405f54:	2900      	cmp	r1, #0
  405f56:	d044      	beq.n	405fe2 <_free_r+0x8e>
  405f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405f5c:	460d      	mov	r5, r1
  405f5e:	4680      	mov	r8, r0
  405f60:	f7ff fb80 	bl	405664 <__malloc_lock>
  405f64:	f855 7c04 	ldr.w	r7, [r5, #-4]
  405f68:	4969      	ldr	r1, [pc, #420]	; (406110 <_free_r+0x1bc>)
  405f6a:	f027 0301 	bic.w	r3, r7, #1
  405f6e:	f1a5 0408 	sub.w	r4, r5, #8
  405f72:	18e2      	adds	r2, r4, r3
  405f74:	688e      	ldr	r6, [r1, #8]
  405f76:	6850      	ldr	r0, [r2, #4]
  405f78:	42b2      	cmp	r2, r6
  405f7a:	f020 0003 	bic.w	r0, r0, #3
  405f7e:	d05e      	beq.n	40603e <_free_r+0xea>
  405f80:	07fe      	lsls	r6, r7, #31
  405f82:	6050      	str	r0, [r2, #4]
  405f84:	d40b      	bmi.n	405f9e <_free_r+0x4a>
  405f86:	f855 7c08 	ldr.w	r7, [r5, #-8]
  405f8a:	1be4      	subs	r4, r4, r7
  405f8c:	f101 0e08 	add.w	lr, r1, #8
  405f90:	68a5      	ldr	r5, [r4, #8]
  405f92:	4575      	cmp	r5, lr
  405f94:	443b      	add	r3, r7
  405f96:	d06d      	beq.n	406074 <_free_r+0x120>
  405f98:	68e7      	ldr	r7, [r4, #12]
  405f9a:	60ef      	str	r7, [r5, #12]
  405f9c:	60bd      	str	r5, [r7, #8]
  405f9e:	1815      	adds	r5, r2, r0
  405fa0:	686d      	ldr	r5, [r5, #4]
  405fa2:	07ed      	lsls	r5, r5, #31
  405fa4:	d53e      	bpl.n	406024 <_free_r+0xd0>
  405fa6:	f043 0201 	orr.w	r2, r3, #1
  405faa:	6062      	str	r2, [r4, #4]
  405fac:	50e3      	str	r3, [r4, r3]
  405fae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405fb2:	d217      	bcs.n	405fe4 <_free_r+0x90>
  405fb4:	08db      	lsrs	r3, r3, #3
  405fb6:	1c58      	adds	r0, r3, #1
  405fb8:	109a      	asrs	r2, r3, #2
  405fba:	684d      	ldr	r5, [r1, #4]
  405fbc:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  405fc0:	60a7      	str	r7, [r4, #8]
  405fc2:	2301      	movs	r3, #1
  405fc4:	4093      	lsls	r3, r2
  405fc6:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  405fca:	432b      	orrs	r3, r5
  405fcc:	3a08      	subs	r2, #8
  405fce:	60e2      	str	r2, [r4, #12]
  405fd0:	604b      	str	r3, [r1, #4]
  405fd2:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  405fd6:	60fc      	str	r4, [r7, #12]
  405fd8:	4640      	mov	r0, r8
  405fda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405fde:	f7ff bb47 	b.w	405670 <__malloc_unlock>
  405fe2:	4770      	bx	lr
  405fe4:	0a5a      	lsrs	r2, r3, #9
  405fe6:	2a04      	cmp	r2, #4
  405fe8:	d852      	bhi.n	406090 <_free_r+0x13c>
  405fea:	099a      	lsrs	r2, r3, #6
  405fec:	f102 0739 	add.w	r7, r2, #57	; 0x39
  405ff0:	00ff      	lsls	r7, r7, #3
  405ff2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  405ff6:	19c8      	adds	r0, r1, r7
  405ff8:	59ca      	ldr	r2, [r1, r7]
  405ffa:	3808      	subs	r0, #8
  405ffc:	4290      	cmp	r0, r2
  405ffe:	d04f      	beq.n	4060a0 <_free_r+0x14c>
  406000:	6851      	ldr	r1, [r2, #4]
  406002:	f021 0103 	bic.w	r1, r1, #3
  406006:	428b      	cmp	r3, r1
  406008:	d232      	bcs.n	406070 <_free_r+0x11c>
  40600a:	6892      	ldr	r2, [r2, #8]
  40600c:	4290      	cmp	r0, r2
  40600e:	d1f7      	bne.n	406000 <_free_r+0xac>
  406010:	68c3      	ldr	r3, [r0, #12]
  406012:	60a0      	str	r0, [r4, #8]
  406014:	60e3      	str	r3, [r4, #12]
  406016:	609c      	str	r4, [r3, #8]
  406018:	60c4      	str	r4, [r0, #12]
  40601a:	4640      	mov	r0, r8
  40601c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406020:	f7ff bb26 	b.w	405670 <__malloc_unlock>
  406024:	6895      	ldr	r5, [r2, #8]
  406026:	4f3b      	ldr	r7, [pc, #236]	; (406114 <_free_r+0x1c0>)
  406028:	42bd      	cmp	r5, r7
  40602a:	4403      	add	r3, r0
  40602c:	d040      	beq.n	4060b0 <_free_r+0x15c>
  40602e:	68d0      	ldr	r0, [r2, #12]
  406030:	60e8      	str	r0, [r5, #12]
  406032:	f043 0201 	orr.w	r2, r3, #1
  406036:	6085      	str	r5, [r0, #8]
  406038:	6062      	str	r2, [r4, #4]
  40603a:	50e3      	str	r3, [r4, r3]
  40603c:	e7b7      	b.n	405fae <_free_r+0x5a>
  40603e:	07ff      	lsls	r7, r7, #31
  406040:	4403      	add	r3, r0
  406042:	d407      	bmi.n	406054 <_free_r+0x100>
  406044:	f855 2c08 	ldr.w	r2, [r5, #-8]
  406048:	1aa4      	subs	r4, r4, r2
  40604a:	4413      	add	r3, r2
  40604c:	68a0      	ldr	r0, [r4, #8]
  40604e:	68e2      	ldr	r2, [r4, #12]
  406050:	60c2      	str	r2, [r0, #12]
  406052:	6090      	str	r0, [r2, #8]
  406054:	4a30      	ldr	r2, [pc, #192]	; (406118 <_free_r+0x1c4>)
  406056:	6812      	ldr	r2, [r2, #0]
  406058:	f043 0001 	orr.w	r0, r3, #1
  40605c:	4293      	cmp	r3, r2
  40605e:	6060      	str	r0, [r4, #4]
  406060:	608c      	str	r4, [r1, #8]
  406062:	d3b9      	bcc.n	405fd8 <_free_r+0x84>
  406064:	4b2d      	ldr	r3, [pc, #180]	; (40611c <_free_r+0x1c8>)
  406066:	4640      	mov	r0, r8
  406068:	6819      	ldr	r1, [r3, #0]
  40606a:	f7ff ff23 	bl	405eb4 <_malloc_trim_r>
  40606e:	e7b3      	b.n	405fd8 <_free_r+0x84>
  406070:	4610      	mov	r0, r2
  406072:	e7cd      	b.n	406010 <_free_r+0xbc>
  406074:	1811      	adds	r1, r2, r0
  406076:	6849      	ldr	r1, [r1, #4]
  406078:	07c9      	lsls	r1, r1, #31
  40607a:	d444      	bmi.n	406106 <_free_r+0x1b2>
  40607c:	6891      	ldr	r1, [r2, #8]
  40607e:	68d2      	ldr	r2, [r2, #12]
  406080:	60ca      	str	r2, [r1, #12]
  406082:	4403      	add	r3, r0
  406084:	f043 0001 	orr.w	r0, r3, #1
  406088:	6091      	str	r1, [r2, #8]
  40608a:	6060      	str	r0, [r4, #4]
  40608c:	50e3      	str	r3, [r4, r3]
  40608e:	e7a3      	b.n	405fd8 <_free_r+0x84>
  406090:	2a14      	cmp	r2, #20
  406092:	d816      	bhi.n	4060c2 <_free_r+0x16e>
  406094:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  406098:	00ff      	lsls	r7, r7, #3
  40609a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40609e:	e7aa      	b.n	405ff6 <_free_r+0xa2>
  4060a0:	10aa      	asrs	r2, r5, #2
  4060a2:	2301      	movs	r3, #1
  4060a4:	684d      	ldr	r5, [r1, #4]
  4060a6:	4093      	lsls	r3, r2
  4060a8:	432b      	orrs	r3, r5
  4060aa:	604b      	str	r3, [r1, #4]
  4060ac:	4603      	mov	r3, r0
  4060ae:	e7b0      	b.n	406012 <_free_r+0xbe>
  4060b0:	f043 0201 	orr.w	r2, r3, #1
  4060b4:	614c      	str	r4, [r1, #20]
  4060b6:	610c      	str	r4, [r1, #16]
  4060b8:	60e5      	str	r5, [r4, #12]
  4060ba:	60a5      	str	r5, [r4, #8]
  4060bc:	6062      	str	r2, [r4, #4]
  4060be:	50e3      	str	r3, [r4, r3]
  4060c0:	e78a      	b.n	405fd8 <_free_r+0x84>
  4060c2:	2a54      	cmp	r2, #84	; 0x54
  4060c4:	d806      	bhi.n	4060d4 <_free_r+0x180>
  4060c6:	0b1a      	lsrs	r2, r3, #12
  4060c8:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4060cc:	00ff      	lsls	r7, r7, #3
  4060ce:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4060d2:	e790      	b.n	405ff6 <_free_r+0xa2>
  4060d4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4060d8:	d806      	bhi.n	4060e8 <_free_r+0x194>
  4060da:	0bda      	lsrs	r2, r3, #15
  4060dc:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4060e0:	00ff      	lsls	r7, r7, #3
  4060e2:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4060e6:	e786      	b.n	405ff6 <_free_r+0xa2>
  4060e8:	f240 5054 	movw	r0, #1364	; 0x554
  4060ec:	4282      	cmp	r2, r0
  4060ee:	d806      	bhi.n	4060fe <_free_r+0x1aa>
  4060f0:	0c9a      	lsrs	r2, r3, #18
  4060f2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4060f6:	00ff      	lsls	r7, r7, #3
  4060f8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4060fc:	e77b      	b.n	405ff6 <_free_r+0xa2>
  4060fe:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  406102:	257e      	movs	r5, #126	; 0x7e
  406104:	e777      	b.n	405ff6 <_free_r+0xa2>
  406106:	f043 0101 	orr.w	r1, r3, #1
  40610a:	6061      	str	r1, [r4, #4]
  40610c:	6013      	str	r3, [r2, #0]
  40610e:	e763      	b.n	405fd8 <_free_r+0x84>
  406110:	20400444 	.word	0x20400444
  406114:	2040044c 	.word	0x2040044c
  406118:	20400850 	.word	0x20400850
  40611c:	20400a98 	.word	0x20400a98

00406120 <__ascii_mbtowc>:
  406120:	b082      	sub	sp, #8
  406122:	b149      	cbz	r1, 406138 <__ascii_mbtowc+0x18>
  406124:	b15a      	cbz	r2, 40613e <__ascii_mbtowc+0x1e>
  406126:	b16b      	cbz	r3, 406144 <__ascii_mbtowc+0x24>
  406128:	7813      	ldrb	r3, [r2, #0]
  40612a:	600b      	str	r3, [r1, #0]
  40612c:	7812      	ldrb	r2, [r2, #0]
  40612e:	1c10      	adds	r0, r2, #0
  406130:	bf18      	it	ne
  406132:	2001      	movne	r0, #1
  406134:	b002      	add	sp, #8
  406136:	4770      	bx	lr
  406138:	a901      	add	r1, sp, #4
  40613a:	2a00      	cmp	r2, #0
  40613c:	d1f3      	bne.n	406126 <__ascii_mbtowc+0x6>
  40613e:	4610      	mov	r0, r2
  406140:	b002      	add	sp, #8
  406142:	4770      	bx	lr
  406144:	f06f 0001 	mvn.w	r0, #1
  406148:	e7f4      	b.n	406134 <__ascii_mbtowc+0x14>
  40614a:	bf00      	nop

0040614c <memmove>:
  40614c:	4288      	cmp	r0, r1
  40614e:	b5f0      	push	{r4, r5, r6, r7, lr}
  406150:	d90d      	bls.n	40616e <memmove+0x22>
  406152:	188b      	adds	r3, r1, r2
  406154:	4298      	cmp	r0, r3
  406156:	d20a      	bcs.n	40616e <memmove+0x22>
  406158:	1884      	adds	r4, r0, r2
  40615a:	2a00      	cmp	r2, #0
  40615c:	d051      	beq.n	406202 <memmove+0xb6>
  40615e:	4622      	mov	r2, r4
  406160:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  406164:	f802 4d01 	strb.w	r4, [r2, #-1]!
  406168:	4299      	cmp	r1, r3
  40616a:	d1f9      	bne.n	406160 <memmove+0x14>
  40616c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40616e:	2a0f      	cmp	r2, #15
  406170:	d948      	bls.n	406204 <memmove+0xb8>
  406172:	ea41 0300 	orr.w	r3, r1, r0
  406176:	079b      	lsls	r3, r3, #30
  406178:	d146      	bne.n	406208 <memmove+0xbc>
  40617a:	f100 0410 	add.w	r4, r0, #16
  40617e:	f101 0310 	add.w	r3, r1, #16
  406182:	4615      	mov	r5, r2
  406184:	f853 6c10 	ldr.w	r6, [r3, #-16]
  406188:	f844 6c10 	str.w	r6, [r4, #-16]
  40618c:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  406190:	f844 6c0c 	str.w	r6, [r4, #-12]
  406194:	f853 6c08 	ldr.w	r6, [r3, #-8]
  406198:	f844 6c08 	str.w	r6, [r4, #-8]
  40619c:	3d10      	subs	r5, #16
  40619e:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4061a2:	f844 6c04 	str.w	r6, [r4, #-4]
  4061a6:	2d0f      	cmp	r5, #15
  4061a8:	f103 0310 	add.w	r3, r3, #16
  4061ac:	f104 0410 	add.w	r4, r4, #16
  4061b0:	d8e8      	bhi.n	406184 <memmove+0x38>
  4061b2:	f1a2 0310 	sub.w	r3, r2, #16
  4061b6:	f023 030f 	bic.w	r3, r3, #15
  4061ba:	f002 0e0f 	and.w	lr, r2, #15
  4061be:	3310      	adds	r3, #16
  4061c0:	f1be 0f03 	cmp.w	lr, #3
  4061c4:	4419      	add	r1, r3
  4061c6:	4403      	add	r3, r0
  4061c8:	d921      	bls.n	40620e <memmove+0xc2>
  4061ca:	1f1e      	subs	r6, r3, #4
  4061cc:	460d      	mov	r5, r1
  4061ce:	4674      	mov	r4, lr
  4061d0:	3c04      	subs	r4, #4
  4061d2:	f855 7b04 	ldr.w	r7, [r5], #4
  4061d6:	f846 7f04 	str.w	r7, [r6, #4]!
  4061da:	2c03      	cmp	r4, #3
  4061dc:	d8f8      	bhi.n	4061d0 <memmove+0x84>
  4061de:	f1ae 0404 	sub.w	r4, lr, #4
  4061e2:	f024 0403 	bic.w	r4, r4, #3
  4061e6:	3404      	adds	r4, #4
  4061e8:	4421      	add	r1, r4
  4061ea:	4423      	add	r3, r4
  4061ec:	f002 0203 	and.w	r2, r2, #3
  4061f0:	b162      	cbz	r2, 40620c <memmove+0xc0>
  4061f2:	3b01      	subs	r3, #1
  4061f4:	440a      	add	r2, r1
  4061f6:	f811 4b01 	ldrb.w	r4, [r1], #1
  4061fa:	f803 4f01 	strb.w	r4, [r3, #1]!
  4061fe:	428a      	cmp	r2, r1
  406200:	d1f9      	bne.n	4061f6 <memmove+0xaa>
  406202:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406204:	4603      	mov	r3, r0
  406206:	e7f3      	b.n	4061f0 <memmove+0xa4>
  406208:	4603      	mov	r3, r0
  40620a:	e7f2      	b.n	4061f2 <memmove+0xa6>
  40620c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40620e:	4672      	mov	r2, lr
  406210:	e7ee      	b.n	4061f0 <memmove+0xa4>
  406212:	bf00      	nop

00406214 <_realloc_r>:
  406214:	2900      	cmp	r1, #0
  406216:	f000 8095 	beq.w	406344 <_realloc_r+0x130>
  40621a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40621e:	460d      	mov	r5, r1
  406220:	4616      	mov	r6, r2
  406222:	b083      	sub	sp, #12
  406224:	4680      	mov	r8, r0
  406226:	f106 070b 	add.w	r7, r6, #11
  40622a:	f7ff fa1b 	bl	405664 <__malloc_lock>
  40622e:	f855 ec04 	ldr.w	lr, [r5, #-4]
  406232:	2f16      	cmp	r7, #22
  406234:	f02e 0403 	bic.w	r4, lr, #3
  406238:	f1a5 0908 	sub.w	r9, r5, #8
  40623c:	d83c      	bhi.n	4062b8 <_realloc_r+0xa4>
  40623e:	2210      	movs	r2, #16
  406240:	4617      	mov	r7, r2
  406242:	42be      	cmp	r6, r7
  406244:	d83d      	bhi.n	4062c2 <_realloc_r+0xae>
  406246:	4294      	cmp	r4, r2
  406248:	da43      	bge.n	4062d2 <_realloc_r+0xbe>
  40624a:	4bc4      	ldr	r3, [pc, #784]	; (40655c <_realloc_r+0x348>)
  40624c:	6899      	ldr	r1, [r3, #8]
  40624e:	eb09 0004 	add.w	r0, r9, r4
  406252:	4288      	cmp	r0, r1
  406254:	f000 80b4 	beq.w	4063c0 <_realloc_r+0x1ac>
  406258:	6843      	ldr	r3, [r0, #4]
  40625a:	f023 0101 	bic.w	r1, r3, #1
  40625e:	4401      	add	r1, r0
  406260:	6849      	ldr	r1, [r1, #4]
  406262:	07c9      	lsls	r1, r1, #31
  406264:	d54c      	bpl.n	406300 <_realloc_r+0xec>
  406266:	f01e 0f01 	tst.w	lr, #1
  40626a:	f000 809b 	beq.w	4063a4 <_realloc_r+0x190>
  40626e:	4631      	mov	r1, r6
  406270:	4640      	mov	r0, r8
  406272:	f7fe fe5b 	bl	404f2c <_malloc_r>
  406276:	4606      	mov	r6, r0
  406278:	2800      	cmp	r0, #0
  40627a:	d03a      	beq.n	4062f2 <_realloc_r+0xde>
  40627c:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406280:	f023 0301 	bic.w	r3, r3, #1
  406284:	444b      	add	r3, r9
  406286:	f1a0 0208 	sub.w	r2, r0, #8
  40628a:	429a      	cmp	r2, r3
  40628c:	f000 8121 	beq.w	4064d2 <_realloc_r+0x2be>
  406290:	1f22      	subs	r2, r4, #4
  406292:	2a24      	cmp	r2, #36	; 0x24
  406294:	f200 8107 	bhi.w	4064a6 <_realloc_r+0x292>
  406298:	2a13      	cmp	r2, #19
  40629a:	f200 80db 	bhi.w	406454 <_realloc_r+0x240>
  40629e:	4603      	mov	r3, r0
  4062a0:	462a      	mov	r2, r5
  4062a2:	6811      	ldr	r1, [r2, #0]
  4062a4:	6019      	str	r1, [r3, #0]
  4062a6:	6851      	ldr	r1, [r2, #4]
  4062a8:	6059      	str	r1, [r3, #4]
  4062aa:	6892      	ldr	r2, [r2, #8]
  4062ac:	609a      	str	r2, [r3, #8]
  4062ae:	4629      	mov	r1, r5
  4062b0:	4640      	mov	r0, r8
  4062b2:	f7ff fe4f 	bl	405f54 <_free_r>
  4062b6:	e01c      	b.n	4062f2 <_realloc_r+0xde>
  4062b8:	f027 0707 	bic.w	r7, r7, #7
  4062bc:	2f00      	cmp	r7, #0
  4062be:	463a      	mov	r2, r7
  4062c0:	dabf      	bge.n	406242 <_realloc_r+0x2e>
  4062c2:	2600      	movs	r6, #0
  4062c4:	230c      	movs	r3, #12
  4062c6:	4630      	mov	r0, r6
  4062c8:	f8c8 3000 	str.w	r3, [r8]
  4062cc:	b003      	add	sp, #12
  4062ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4062d2:	462e      	mov	r6, r5
  4062d4:	1be3      	subs	r3, r4, r7
  4062d6:	2b0f      	cmp	r3, #15
  4062d8:	d81e      	bhi.n	406318 <_realloc_r+0x104>
  4062da:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4062de:	f003 0301 	and.w	r3, r3, #1
  4062e2:	4323      	orrs	r3, r4
  4062e4:	444c      	add	r4, r9
  4062e6:	f8c9 3004 	str.w	r3, [r9, #4]
  4062ea:	6863      	ldr	r3, [r4, #4]
  4062ec:	f043 0301 	orr.w	r3, r3, #1
  4062f0:	6063      	str	r3, [r4, #4]
  4062f2:	4640      	mov	r0, r8
  4062f4:	f7ff f9bc 	bl	405670 <__malloc_unlock>
  4062f8:	4630      	mov	r0, r6
  4062fa:	b003      	add	sp, #12
  4062fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406300:	f023 0303 	bic.w	r3, r3, #3
  406304:	18e1      	adds	r1, r4, r3
  406306:	4291      	cmp	r1, r2
  406308:	db1f      	blt.n	40634a <_realloc_r+0x136>
  40630a:	68c3      	ldr	r3, [r0, #12]
  40630c:	6882      	ldr	r2, [r0, #8]
  40630e:	462e      	mov	r6, r5
  406310:	60d3      	str	r3, [r2, #12]
  406312:	460c      	mov	r4, r1
  406314:	609a      	str	r2, [r3, #8]
  406316:	e7dd      	b.n	4062d4 <_realloc_r+0xc0>
  406318:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40631c:	eb09 0107 	add.w	r1, r9, r7
  406320:	f002 0201 	and.w	r2, r2, #1
  406324:	444c      	add	r4, r9
  406326:	f043 0301 	orr.w	r3, r3, #1
  40632a:	4317      	orrs	r7, r2
  40632c:	f8c9 7004 	str.w	r7, [r9, #4]
  406330:	604b      	str	r3, [r1, #4]
  406332:	6863      	ldr	r3, [r4, #4]
  406334:	f043 0301 	orr.w	r3, r3, #1
  406338:	3108      	adds	r1, #8
  40633a:	6063      	str	r3, [r4, #4]
  40633c:	4640      	mov	r0, r8
  40633e:	f7ff fe09 	bl	405f54 <_free_r>
  406342:	e7d6      	b.n	4062f2 <_realloc_r+0xde>
  406344:	4611      	mov	r1, r2
  406346:	f7fe bdf1 	b.w	404f2c <_malloc_r>
  40634a:	f01e 0f01 	tst.w	lr, #1
  40634e:	d18e      	bne.n	40626e <_realloc_r+0x5a>
  406350:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406354:	eba9 0a01 	sub.w	sl, r9, r1
  406358:	f8da 1004 	ldr.w	r1, [sl, #4]
  40635c:	f021 0103 	bic.w	r1, r1, #3
  406360:	440b      	add	r3, r1
  406362:	4423      	add	r3, r4
  406364:	4293      	cmp	r3, r2
  406366:	db25      	blt.n	4063b4 <_realloc_r+0x1a0>
  406368:	68c2      	ldr	r2, [r0, #12]
  40636a:	6881      	ldr	r1, [r0, #8]
  40636c:	4656      	mov	r6, sl
  40636e:	60ca      	str	r2, [r1, #12]
  406370:	6091      	str	r1, [r2, #8]
  406372:	f8da 100c 	ldr.w	r1, [sl, #12]
  406376:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40637a:	1f22      	subs	r2, r4, #4
  40637c:	2a24      	cmp	r2, #36	; 0x24
  40637e:	60c1      	str	r1, [r0, #12]
  406380:	6088      	str	r0, [r1, #8]
  406382:	f200 8094 	bhi.w	4064ae <_realloc_r+0x29a>
  406386:	2a13      	cmp	r2, #19
  406388:	d96f      	bls.n	40646a <_realloc_r+0x256>
  40638a:	6829      	ldr	r1, [r5, #0]
  40638c:	f8ca 1008 	str.w	r1, [sl, #8]
  406390:	6869      	ldr	r1, [r5, #4]
  406392:	f8ca 100c 	str.w	r1, [sl, #12]
  406396:	2a1b      	cmp	r2, #27
  406398:	f200 80a2 	bhi.w	4064e0 <_realloc_r+0x2cc>
  40639c:	3508      	adds	r5, #8
  40639e:	f10a 0210 	add.w	r2, sl, #16
  4063a2:	e063      	b.n	40646c <_realloc_r+0x258>
  4063a4:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4063a8:	eba9 0a03 	sub.w	sl, r9, r3
  4063ac:	f8da 1004 	ldr.w	r1, [sl, #4]
  4063b0:	f021 0103 	bic.w	r1, r1, #3
  4063b4:	1863      	adds	r3, r4, r1
  4063b6:	4293      	cmp	r3, r2
  4063b8:	f6ff af59 	blt.w	40626e <_realloc_r+0x5a>
  4063bc:	4656      	mov	r6, sl
  4063be:	e7d8      	b.n	406372 <_realloc_r+0x15e>
  4063c0:	6841      	ldr	r1, [r0, #4]
  4063c2:	f021 0b03 	bic.w	fp, r1, #3
  4063c6:	44a3      	add	fp, r4
  4063c8:	f107 0010 	add.w	r0, r7, #16
  4063cc:	4583      	cmp	fp, r0
  4063ce:	da56      	bge.n	40647e <_realloc_r+0x26a>
  4063d0:	f01e 0f01 	tst.w	lr, #1
  4063d4:	f47f af4b 	bne.w	40626e <_realloc_r+0x5a>
  4063d8:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4063dc:	eba9 0a01 	sub.w	sl, r9, r1
  4063e0:	f8da 1004 	ldr.w	r1, [sl, #4]
  4063e4:	f021 0103 	bic.w	r1, r1, #3
  4063e8:	448b      	add	fp, r1
  4063ea:	4558      	cmp	r0, fp
  4063ec:	dce2      	bgt.n	4063b4 <_realloc_r+0x1a0>
  4063ee:	4656      	mov	r6, sl
  4063f0:	f8da 100c 	ldr.w	r1, [sl, #12]
  4063f4:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4063f8:	1f22      	subs	r2, r4, #4
  4063fa:	2a24      	cmp	r2, #36	; 0x24
  4063fc:	60c1      	str	r1, [r0, #12]
  4063fe:	6088      	str	r0, [r1, #8]
  406400:	f200 808f 	bhi.w	406522 <_realloc_r+0x30e>
  406404:	2a13      	cmp	r2, #19
  406406:	f240 808a 	bls.w	40651e <_realloc_r+0x30a>
  40640a:	6829      	ldr	r1, [r5, #0]
  40640c:	f8ca 1008 	str.w	r1, [sl, #8]
  406410:	6869      	ldr	r1, [r5, #4]
  406412:	f8ca 100c 	str.w	r1, [sl, #12]
  406416:	2a1b      	cmp	r2, #27
  406418:	f200 808a 	bhi.w	406530 <_realloc_r+0x31c>
  40641c:	3508      	adds	r5, #8
  40641e:	f10a 0210 	add.w	r2, sl, #16
  406422:	6829      	ldr	r1, [r5, #0]
  406424:	6011      	str	r1, [r2, #0]
  406426:	6869      	ldr	r1, [r5, #4]
  406428:	6051      	str	r1, [r2, #4]
  40642a:	68a9      	ldr	r1, [r5, #8]
  40642c:	6091      	str	r1, [r2, #8]
  40642e:	eb0a 0107 	add.w	r1, sl, r7
  406432:	ebab 0207 	sub.w	r2, fp, r7
  406436:	f042 0201 	orr.w	r2, r2, #1
  40643a:	6099      	str	r1, [r3, #8]
  40643c:	604a      	str	r2, [r1, #4]
  40643e:	f8da 3004 	ldr.w	r3, [sl, #4]
  406442:	f003 0301 	and.w	r3, r3, #1
  406446:	431f      	orrs	r7, r3
  406448:	4640      	mov	r0, r8
  40644a:	f8ca 7004 	str.w	r7, [sl, #4]
  40644e:	f7ff f90f 	bl	405670 <__malloc_unlock>
  406452:	e751      	b.n	4062f8 <_realloc_r+0xe4>
  406454:	682b      	ldr	r3, [r5, #0]
  406456:	6003      	str	r3, [r0, #0]
  406458:	686b      	ldr	r3, [r5, #4]
  40645a:	6043      	str	r3, [r0, #4]
  40645c:	2a1b      	cmp	r2, #27
  40645e:	d82d      	bhi.n	4064bc <_realloc_r+0x2a8>
  406460:	f100 0308 	add.w	r3, r0, #8
  406464:	f105 0208 	add.w	r2, r5, #8
  406468:	e71b      	b.n	4062a2 <_realloc_r+0x8e>
  40646a:	4632      	mov	r2, r6
  40646c:	6829      	ldr	r1, [r5, #0]
  40646e:	6011      	str	r1, [r2, #0]
  406470:	6869      	ldr	r1, [r5, #4]
  406472:	6051      	str	r1, [r2, #4]
  406474:	68a9      	ldr	r1, [r5, #8]
  406476:	6091      	str	r1, [r2, #8]
  406478:	461c      	mov	r4, r3
  40647a:	46d1      	mov	r9, sl
  40647c:	e72a      	b.n	4062d4 <_realloc_r+0xc0>
  40647e:	eb09 0107 	add.w	r1, r9, r7
  406482:	ebab 0b07 	sub.w	fp, fp, r7
  406486:	f04b 0201 	orr.w	r2, fp, #1
  40648a:	6099      	str	r1, [r3, #8]
  40648c:	604a      	str	r2, [r1, #4]
  40648e:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406492:	f003 0301 	and.w	r3, r3, #1
  406496:	431f      	orrs	r7, r3
  406498:	4640      	mov	r0, r8
  40649a:	f845 7c04 	str.w	r7, [r5, #-4]
  40649e:	f7ff f8e7 	bl	405670 <__malloc_unlock>
  4064a2:	462e      	mov	r6, r5
  4064a4:	e728      	b.n	4062f8 <_realloc_r+0xe4>
  4064a6:	4629      	mov	r1, r5
  4064a8:	f7ff fe50 	bl	40614c <memmove>
  4064ac:	e6ff      	b.n	4062ae <_realloc_r+0x9a>
  4064ae:	4629      	mov	r1, r5
  4064b0:	4630      	mov	r0, r6
  4064b2:	461c      	mov	r4, r3
  4064b4:	46d1      	mov	r9, sl
  4064b6:	f7ff fe49 	bl	40614c <memmove>
  4064ba:	e70b      	b.n	4062d4 <_realloc_r+0xc0>
  4064bc:	68ab      	ldr	r3, [r5, #8]
  4064be:	6083      	str	r3, [r0, #8]
  4064c0:	68eb      	ldr	r3, [r5, #12]
  4064c2:	60c3      	str	r3, [r0, #12]
  4064c4:	2a24      	cmp	r2, #36	; 0x24
  4064c6:	d017      	beq.n	4064f8 <_realloc_r+0x2e4>
  4064c8:	f100 0310 	add.w	r3, r0, #16
  4064cc:	f105 0210 	add.w	r2, r5, #16
  4064d0:	e6e7      	b.n	4062a2 <_realloc_r+0x8e>
  4064d2:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4064d6:	f023 0303 	bic.w	r3, r3, #3
  4064da:	441c      	add	r4, r3
  4064dc:	462e      	mov	r6, r5
  4064de:	e6f9      	b.n	4062d4 <_realloc_r+0xc0>
  4064e0:	68a9      	ldr	r1, [r5, #8]
  4064e2:	f8ca 1010 	str.w	r1, [sl, #16]
  4064e6:	68e9      	ldr	r1, [r5, #12]
  4064e8:	f8ca 1014 	str.w	r1, [sl, #20]
  4064ec:	2a24      	cmp	r2, #36	; 0x24
  4064ee:	d00c      	beq.n	40650a <_realloc_r+0x2f6>
  4064f0:	3510      	adds	r5, #16
  4064f2:	f10a 0218 	add.w	r2, sl, #24
  4064f6:	e7b9      	b.n	40646c <_realloc_r+0x258>
  4064f8:	692b      	ldr	r3, [r5, #16]
  4064fa:	6103      	str	r3, [r0, #16]
  4064fc:	696b      	ldr	r3, [r5, #20]
  4064fe:	6143      	str	r3, [r0, #20]
  406500:	f105 0218 	add.w	r2, r5, #24
  406504:	f100 0318 	add.w	r3, r0, #24
  406508:	e6cb      	b.n	4062a2 <_realloc_r+0x8e>
  40650a:	692a      	ldr	r2, [r5, #16]
  40650c:	f8ca 2018 	str.w	r2, [sl, #24]
  406510:	696a      	ldr	r2, [r5, #20]
  406512:	f8ca 201c 	str.w	r2, [sl, #28]
  406516:	3518      	adds	r5, #24
  406518:	f10a 0220 	add.w	r2, sl, #32
  40651c:	e7a6      	b.n	40646c <_realloc_r+0x258>
  40651e:	4632      	mov	r2, r6
  406520:	e77f      	b.n	406422 <_realloc_r+0x20e>
  406522:	4629      	mov	r1, r5
  406524:	4630      	mov	r0, r6
  406526:	9301      	str	r3, [sp, #4]
  406528:	f7ff fe10 	bl	40614c <memmove>
  40652c:	9b01      	ldr	r3, [sp, #4]
  40652e:	e77e      	b.n	40642e <_realloc_r+0x21a>
  406530:	68a9      	ldr	r1, [r5, #8]
  406532:	f8ca 1010 	str.w	r1, [sl, #16]
  406536:	68e9      	ldr	r1, [r5, #12]
  406538:	f8ca 1014 	str.w	r1, [sl, #20]
  40653c:	2a24      	cmp	r2, #36	; 0x24
  40653e:	d003      	beq.n	406548 <_realloc_r+0x334>
  406540:	3510      	adds	r5, #16
  406542:	f10a 0218 	add.w	r2, sl, #24
  406546:	e76c      	b.n	406422 <_realloc_r+0x20e>
  406548:	692a      	ldr	r2, [r5, #16]
  40654a:	f8ca 2018 	str.w	r2, [sl, #24]
  40654e:	696a      	ldr	r2, [r5, #20]
  406550:	f8ca 201c 	str.w	r2, [sl, #28]
  406554:	3518      	adds	r5, #24
  406556:	f10a 0220 	add.w	r2, sl, #32
  40655a:	e762      	b.n	406422 <_realloc_r+0x20e>
  40655c:	20400444 	.word	0x20400444

00406560 <__ascii_wctomb>:
  406560:	b121      	cbz	r1, 40656c <__ascii_wctomb+0xc>
  406562:	2aff      	cmp	r2, #255	; 0xff
  406564:	d804      	bhi.n	406570 <__ascii_wctomb+0x10>
  406566:	700a      	strb	r2, [r1, #0]
  406568:	2001      	movs	r0, #1
  40656a:	4770      	bx	lr
  40656c:	4608      	mov	r0, r1
  40656e:	4770      	bx	lr
  406570:	238a      	movs	r3, #138	; 0x8a
  406572:	6003      	str	r3, [r0, #0]
  406574:	f04f 30ff 	mov.w	r0, #4294967295
  406578:	4770      	bx	lr
  40657a:	bf00      	nop

0040657c <__aeabi_drsub>:
  40657c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  406580:	e002      	b.n	406588 <__adddf3>
  406582:	bf00      	nop

00406584 <__aeabi_dsub>:
  406584:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00406588 <__adddf3>:
  406588:	b530      	push	{r4, r5, lr}
  40658a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40658e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  406592:	ea94 0f05 	teq	r4, r5
  406596:	bf08      	it	eq
  406598:	ea90 0f02 	teqeq	r0, r2
  40659c:	bf1f      	itttt	ne
  40659e:	ea54 0c00 	orrsne.w	ip, r4, r0
  4065a2:	ea55 0c02 	orrsne.w	ip, r5, r2
  4065a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4065aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4065ae:	f000 80e2 	beq.w	406776 <__adddf3+0x1ee>
  4065b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4065b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4065ba:	bfb8      	it	lt
  4065bc:	426d      	neglt	r5, r5
  4065be:	dd0c      	ble.n	4065da <__adddf3+0x52>
  4065c0:	442c      	add	r4, r5
  4065c2:	ea80 0202 	eor.w	r2, r0, r2
  4065c6:	ea81 0303 	eor.w	r3, r1, r3
  4065ca:	ea82 0000 	eor.w	r0, r2, r0
  4065ce:	ea83 0101 	eor.w	r1, r3, r1
  4065d2:	ea80 0202 	eor.w	r2, r0, r2
  4065d6:	ea81 0303 	eor.w	r3, r1, r3
  4065da:	2d36      	cmp	r5, #54	; 0x36
  4065dc:	bf88      	it	hi
  4065de:	bd30      	pophi	{r4, r5, pc}
  4065e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4065e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4065e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4065ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4065f0:	d002      	beq.n	4065f8 <__adddf3+0x70>
  4065f2:	4240      	negs	r0, r0
  4065f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4065f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4065fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
  406600:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  406604:	d002      	beq.n	40660c <__adddf3+0x84>
  406606:	4252      	negs	r2, r2
  406608:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40660c:	ea94 0f05 	teq	r4, r5
  406610:	f000 80a7 	beq.w	406762 <__adddf3+0x1da>
  406614:	f1a4 0401 	sub.w	r4, r4, #1
  406618:	f1d5 0e20 	rsbs	lr, r5, #32
  40661c:	db0d      	blt.n	40663a <__adddf3+0xb2>
  40661e:	fa02 fc0e 	lsl.w	ip, r2, lr
  406622:	fa22 f205 	lsr.w	r2, r2, r5
  406626:	1880      	adds	r0, r0, r2
  406628:	f141 0100 	adc.w	r1, r1, #0
  40662c:	fa03 f20e 	lsl.w	r2, r3, lr
  406630:	1880      	adds	r0, r0, r2
  406632:	fa43 f305 	asr.w	r3, r3, r5
  406636:	4159      	adcs	r1, r3
  406638:	e00e      	b.n	406658 <__adddf3+0xd0>
  40663a:	f1a5 0520 	sub.w	r5, r5, #32
  40663e:	f10e 0e20 	add.w	lr, lr, #32
  406642:	2a01      	cmp	r2, #1
  406644:	fa03 fc0e 	lsl.w	ip, r3, lr
  406648:	bf28      	it	cs
  40664a:	f04c 0c02 	orrcs.w	ip, ip, #2
  40664e:	fa43 f305 	asr.w	r3, r3, r5
  406652:	18c0      	adds	r0, r0, r3
  406654:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  406658:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40665c:	d507      	bpl.n	40666e <__adddf3+0xe6>
  40665e:	f04f 0e00 	mov.w	lr, #0
  406662:	f1dc 0c00 	rsbs	ip, ip, #0
  406666:	eb7e 0000 	sbcs.w	r0, lr, r0
  40666a:	eb6e 0101 	sbc.w	r1, lr, r1
  40666e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  406672:	d31b      	bcc.n	4066ac <__adddf3+0x124>
  406674:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  406678:	d30c      	bcc.n	406694 <__adddf3+0x10c>
  40667a:	0849      	lsrs	r1, r1, #1
  40667c:	ea5f 0030 	movs.w	r0, r0, rrx
  406680:	ea4f 0c3c 	mov.w	ip, ip, rrx
  406684:	f104 0401 	add.w	r4, r4, #1
  406688:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40668c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  406690:	f080 809a 	bcs.w	4067c8 <__adddf3+0x240>
  406694:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  406698:	bf08      	it	eq
  40669a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40669e:	f150 0000 	adcs.w	r0, r0, #0
  4066a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4066a6:	ea41 0105 	orr.w	r1, r1, r5
  4066aa:	bd30      	pop	{r4, r5, pc}
  4066ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4066b0:	4140      	adcs	r0, r0
  4066b2:	eb41 0101 	adc.w	r1, r1, r1
  4066b6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4066ba:	f1a4 0401 	sub.w	r4, r4, #1
  4066be:	d1e9      	bne.n	406694 <__adddf3+0x10c>
  4066c0:	f091 0f00 	teq	r1, #0
  4066c4:	bf04      	itt	eq
  4066c6:	4601      	moveq	r1, r0
  4066c8:	2000      	moveq	r0, #0
  4066ca:	fab1 f381 	clz	r3, r1
  4066ce:	bf08      	it	eq
  4066d0:	3320      	addeq	r3, #32
  4066d2:	f1a3 030b 	sub.w	r3, r3, #11
  4066d6:	f1b3 0220 	subs.w	r2, r3, #32
  4066da:	da0c      	bge.n	4066f6 <__adddf3+0x16e>
  4066dc:	320c      	adds	r2, #12
  4066de:	dd08      	ble.n	4066f2 <__adddf3+0x16a>
  4066e0:	f102 0c14 	add.w	ip, r2, #20
  4066e4:	f1c2 020c 	rsb	r2, r2, #12
  4066e8:	fa01 f00c 	lsl.w	r0, r1, ip
  4066ec:	fa21 f102 	lsr.w	r1, r1, r2
  4066f0:	e00c      	b.n	40670c <__adddf3+0x184>
  4066f2:	f102 0214 	add.w	r2, r2, #20
  4066f6:	bfd8      	it	le
  4066f8:	f1c2 0c20 	rsble	ip, r2, #32
  4066fc:	fa01 f102 	lsl.w	r1, r1, r2
  406700:	fa20 fc0c 	lsr.w	ip, r0, ip
  406704:	bfdc      	itt	le
  406706:	ea41 010c 	orrle.w	r1, r1, ip
  40670a:	4090      	lslle	r0, r2
  40670c:	1ae4      	subs	r4, r4, r3
  40670e:	bfa2      	ittt	ge
  406710:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  406714:	4329      	orrge	r1, r5
  406716:	bd30      	popge	{r4, r5, pc}
  406718:	ea6f 0404 	mvn.w	r4, r4
  40671c:	3c1f      	subs	r4, #31
  40671e:	da1c      	bge.n	40675a <__adddf3+0x1d2>
  406720:	340c      	adds	r4, #12
  406722:	dc0e      	bgt.n	406742 <__adddf3+0x1ba>
  406724:	f104 0414 	add.w	r4, r4, #20
  406728:	f1c4 0220 	rsb	r2, r4, #32
  40672c:	fa20 f004 	lsr.w	r0, r0, r4
  406730:	fa01 f302 	lsl.w	r3, r1, r2
  406734:	ea40 0003 	orr.w	r0, r0, r3
  406738:	fa21 f304 	lsr.w	r3, r1, r4
  40673c:	ea45 0103 	orr.w	r1, r5, r3
  406740:	bd30      	pop	{r4, r5, pc}
  406742:	f1c4 040c 	rsb	r4, r4, #12
  406746:	f1c4 0220 	rsb	r2, r4, #32
  40674a:	fa20 f002 	lsr.w	r0, r0, r2
  40674e:	fa01 f304 	lsl.w	r3, r1, r4
  406752:	ea40 0003 	orr.w	r0, r0, r3
  406756:	4629      	mov	r1, r5
  406758:	bd30      	pop	{r4, r5, pc}
  40675a:	fa21 f004 	lsr.w	r0, r1, r4
  40675e:	4629      	mov	r1, r5
  406760:	bd30      	pop	{r4, r5, pc}
  406762:	f094 0f00 	teq	r4, #0
  406766:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40676a:	bf06      	itte	eq
  40676c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  406770:	3401      	addeq	r4, #1
  406772:	3d01      	subne	r5, #1
  406774:	e74e      	b.n	406614 <__adddf3+0x8c>
  406776:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40677a:	bf18      	it	ne
  40677c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  406780:	d029      	beq.n	4067d6 <__adddf3+0x24e>
  406782:	ea94 0f05 	teq	r4, r5
  406786:	bf08      	it	eq
  406788:	ea90 0f02 	teqeq	r0, r2
  40678c:	d005      	beq.n	40679a <__adddf3+0x212>
  40678e:	ea54 0c00 	orrs.w	ip, r4, r0
  406792:	bf04      	itt	eq
  406794:	4619      	moveq	r1, r3
  406796:	4610      	moveq	r0, r2
  406798:	bd30      	pop	{r4, r5, pc}
  40679a:	ea91 0f03 	teq	r1, r3
  40679e:	bf1e      	ittt	ne
  4067a0:	2100      	movne	r1, #0
  4067a2:	2000      	movne	r0, #0
  4067a4:	bd30      	popne	{r4, r5, pc}
  4067a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4067aa:	d105      	bne.n	4067b8 <__adddf3+0x230>
  4067ac:	0040      	lsls	r0, r0, #1
  4067ae:	4149      	adcs	r1, r1
  4067b0:	bf28      	it	cs
  4067b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4067b6:	bd30      	pop	{r4, r5, pc}
  4067b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4067bc:	bf3c      	itt	cc
  4067be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4067c2:	bd30      	popcc	{r4, r5, pc}
  4067c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4067c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4067cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4067d0:	f04f 0000 	mov.w	r0, #0
  4067d4:	bd30      	pop	{r4, r5, pc}
  4067d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4067da:	bf1a      	itte	ne
  4067dc:	4619      	movne	r1, r3
  4067de:	4610      	movne	r0, r2
  4067e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4067e4:	bf1c      	itt	ne
  4067e6:	460b      	movne	r3, r1
  4067e8:	4602      	movne	r2, r0
  4067ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4067ee:	bf06      	itte	eq
  4067f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4067f4:	ea91 0f03 	teqeq	r1, r3
  4067f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4067fc:	bd30      	pop	{r4, r5, pc}
  4067fe:	bf00      	nop

00406800 <__aeabi_ui2d>:
  406800:	f090 0f00 	teq	r0, #0
  406804:	bf04      	itt	eq
  406806:	2100      	moveq	r1, #0
  406808:	4770      	bxeq	lr
  40680a:	b530      	push	{r4, r5, lr}
  40680c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  406810:	f104 0432 	add.w	r4, r4, #50	; 0x32
  406814:	f04f 0500 	mov.w	r5, #0
  406818:	f04f 0100 	mov.w	r1, #0
  40681c:	e750      	b.n	4066c0 <__adddf3+0x138>
  40681e:	bf00      	nop

00406820 <__aeabi_i2d>:
  406820:	f090 0f00 	teq	r0, #0
  406824:	bf04      	itt	eq
  406826:	2100      	moveq	r1, #0
  406828:	4770      	bxeq	lr
  40682a:	b530      	push	{r4, r5, lr}
  40682c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  406830:	f104 0432 	add.w	r4, r4, #50	; 0x32
  406834:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  406838:	bf48      	it	mi
  40683a:	4240      	negmi	r0, r0
  40683c:	f04f 0100 	mov.w	r1, #0
  406840:	e73e      	b.n	4066c0 <__adddf3+0x138>
  406842:	bf00      	nop

00406844 <__aeabi_f2d>:
  406844:	0042      	lsls	r2, r0, #1
  406846:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40684a:	ea4f 0131 	mov.w	r1, r1, rrx
  40684e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  406852:	bf1f      	itttt	ne
  406854:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  406858:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40685c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  406860:	4770      	bxne	lr
  406862:	f092 0f00 	teq	r2, #0
  406866:	bf14      	ite	ne
  406868:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40686c:	4770      	bxeq	lr
  40686e:	b530      	push	{r4, r5, lr}
  406870:	f44f 7460 	mov.w	r4, #896	; 0x380
  406874:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  406878:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40687c:	e720      	b.n	4066c0 <__adddf3+0x138>
  40687e:	bf00      	nop

00406880 <__aeabi_ul2d>:
  406880:	ea50 0201 	orrs.w	r2, r0, r1
  406884:	bf08      	it	eq
  406886:	4770      	bxeq	lr
  406888:	b530      	push	{r4, r5, lr}
  40688a:	f04f 0500 	mov.w	r5, #0
  40688e:	e00a      	b.n	4068a6 <__aeabi_l2d+0x16>

00406890 <__aeabi_l2d>:
  406890:	ea50 0201 	orrs.w	r2, r0, r1
  406894:	bf08      	it	eq
  406896:	4770      	bxeq	lr
  406898:	b530      	push	{r4, r5, lr}
  40689a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40689e:	d502      	bpl.n	4068a6 <__aeabi_l2d+0x16>
  4068a0:	4240      	negs	r0, r0
  4068a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4068a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4068aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4068ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4068b2:	f43f aedc 	beq.w	40666e <__adddf3+0xe6>
  4068b6:	f04f 0203 	mov.w	r2, #3
  4068ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4068be:	bf18      	it	ne
  4068c0:	3203      	addne	r2, #3
  4068c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4068c6:	bf18      	it	ne
  4068c8:	3203      	addne	r2, #3
  4068ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4068ce:	f1c2 0320 	rsb	r3, r2, #32
  4068d2:	fa00 fc03 	lsl.w	ip, r0, r3
  4068d6:	fa20 f002 	lsr.w	r0, r0, r2
  4068da:	fa01 fe03 	lsl.w	lr, r1, r3
  4068de:	ea40 000e 	orr.w	r0, r0, lr
  4068e2:	fa21 f102 	lsr.w	r1, r1, r2
  4068e6:	4414      	add	r4, r2
  4068e8:	e6c1      	b.n	40666e <__adddf3+0xe6>
  4068ea:	bf00      	nop

004068ec <__aeabi_dmul>:
  4068ec:	b570      	push	{r4, r5, r6, lr}
  4068ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4068f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4068f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4068fa:	bf1d      	ittte	ne
  4068fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  406900:	ea94 0f0c 	teqne	r4, ip
  406904:	ea95 0f0c 	teqne	r5, ip
  406908:	f000 f8de 	bleq	406ac8 <__aeabi_dmul+0x1dc>
  40690c:	442c      	add	r4, r5
  40690e:	ea81 0603 	eor.w	r6, r1, r3
  406912:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  406916:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40691a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40691e:	bf18      	it	ne
  406920:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  406924:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  406928:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40692c:	d038      	beq.n	4069a0 <__aeabi_dmul+0xb4>
  40692e:	fba0 ce02 	umull	ip, lr, r0, r2
  406932:	f04f 0500 	mov.w	r5, #0
  406936:	fbe1 e502 	umlal	lr, r5, r1, r2
  40693a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40693e:	fbe0 e503 	umlal	lr, r5, r0, r3
  406942:	f04f 0600 	mov.w	r6, #0
  406946:	fbe1 5603 	umlal	r5, r6, r1, r3
  40694a:	f09c 0f00 	teq	ip, #0
  40694e:	bf18      	it	ne
  406950:	f04e 0e01 	orrne.w	lr, lr, #1
  406954:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  406958:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40695c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  406960:	d204      	bcs.n	40696c <__aeabi_dmul+0x80>
  406962:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  406966:	416d      	adcs	r5, r5
  406968:	eb46 0606 	adc.w	r6, r6, r6
  40696c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  406970:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  406974:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  406978:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40697c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  406980:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  406984:	bf88      	it	hi
  406986:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40698a:	d81e      	bhi.n	4069ca <__aeabi_dmul+0xde>
  40698c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  406990:	bf08      	it	eq
  406992:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  406996:	f150 0000 	adcs.w	r0, r0, #0
  40699a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40699e:	bd70      	pop	{r4, r5, r6, pc}
  4069a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4069a4:	ea46 0101 	orr.w	r1, r6, r1
  4069a8:	ea40 0002 	orr.w	r0, r0, r2
  4069ac:	ea81 0103 	eor.w	r1, r1, r3
  4069b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4069b4:	bfc2      	ittt	gt
  4069b6:	ebd4 050c 	rsbsgt	r5, r4, ip
  4069ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4069be:	bd70      	popgt	{r4, r5, r6, pc}
  4069c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4069c4:	f04f 0e00 	mov.w	lr, #0
  4069c8:	3c01      	subs	r4, #1
  4069ca:	f300 80ab 	bgt.w	406b24 <__aeabi_dmul+0x238>
  4069ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4069d2:	bfde      	ittt	le
  4069d4:	2000      	movle	r0, #0
  4069d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4069da:	bd70      	pople	{r4, r5, r6, pc}
  4069dc:	f1c4 0400 	rsb	r4, r4, #0
  4069e0:	3c20      	subs	r4, #32
  4069e2:	da35      	bge.n	406a50 <__aeabi_dmul+0x164>
  4069e4:	340c      	adds	r4, #12
  4069e6:	dc1b      	bgt.n	406a20 <__aeabi_dmul+0x134>
  4069e8:	f104 0414 	add.w	r4, r4, #20
  4069ec:	f1c4 0520 	rsb	r5, r4, #32
  4069f0:	fa00 f305 	lsl.w	r3, r0, r5
  4069f4:	fa20 f004 	lsr.w	r0, r0, r4
  4069f8:	fa01 f205 	lsl.w	r2, r1, r5
  4069fc:	ea40 0002 	orr.w	r0, r0, r2
  406a00:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  406a04:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  406a08:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  406a0c:	fa21 f604 	lsr.w	r6, r1, r4
  406a10:	eb42 0106 	adc.w	r1, r2, r6
  406a14:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  406a18:	bf08      	it	eq
  406a1a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  406a1e:	bd70      	pop	{r4, r5, r6, pc}
  406a20:	f1c4 040c 	rsb	r4, r4, #12
  406a24:	f1c4 0520 	rsb	r5, r4, #32
  406a28:	fa00 f304 	lsl.w	r3, r0, r4
  406a2c:	fa20 f005 	lsr.w	r0, r0, r5
  406a30:	fa01 f204 	lsl.w	r2, r1, r4
  406a34:	ea40 0002 	orr.w	r0, r0, r2
  406a38:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  406a3c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  406a40:	f141 0100 	adc.w	r1, r1, #0
  406a44:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  406a48:	bf08      	it	eq
  406a4a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  406a4e:	bd70      	pop	{r4, r5, r6, pc}
  406a50:	f1c4 0520 	rsb	r5, r4, #32
  406a54:	fa00 f205 	lsl.w	r2, r0, r5
  406a58:	ea4e 0e02 	orr.w	lr, lr, r2
  406a5c:	fa20 f304 	lsr.w	r3, r0, r4
  406a60:	fa01 f205 	lsl.w	r2, r1, r5
  406a64:	ea43 0302 	orr.w	r3, r3, r2
  406a68:	fa21 f004 	lsr.w	r0, r1, r4
  406a6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  406a70:	fa21 f204 	lsr.w	r2, r1, r4
  406a74:	ea20 0002 	bic.w	r0, r0, r2
  406a78:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  406a7c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  406a80:	bf08      	it	eq
  406a82:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  406a86:	bd70      	pop	{r4, r5, r6, pc}
  406a88:	f094 0f00 	teq	r4, #0
  406a8c:	d10f      	bne.n	406aae <__aeabi_dmul+0x1c2>
  406a8e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  406a92:	0040      	lsls	r0, r0, #1
  406a94:	eb41 0101 	adc.w	r1, r1, r1
  406a98:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  406a9c:	bf08      	it	eq
  406a9e:	3c01      	subeq	r4, #1
  406aa0:	d0f7      	beq.n	406a92 <__aeabi_dmul+0x1a6>
  406aa2:	ea41 0106 	orr.w	r1, r1, r6
  406aa6:	f095 0f00 	teq	r5, #0
  406aaa:	bf18      	it	ne
  406aac:	4770      	bxne	lr
  406aae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  406ab2:	0052      	lsls	r2, r2, #1
  406ab4:	eb43 0303 	adc.w	r3, r3, r3
  406ab8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  406abc:	bf08      	it	eq
  406abe:	3d01      	subeq	r5, #1
  406ac0:	d0f7      	beq.n	406ab2 <__aeabi_dmul+0x1c6>
  406ac2:	ea43 0306 	orr.w	r3, r3, r6
  406ac6:	4770      	bx	lr
  406ac8:	ea94 0f0c 	teq	r4, ip
  406acc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  406ad0:	bf18      	it	ne
  406ad2:	ea95 0f0c 	teqne	r5, ip
  406ad6:	d00c      	beq.n	406af2 <__aeabi_dmul+0x206>
  406ad8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  406adc:	bf18      	it	ne
  406ade:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  406ae2:	d1d1      	bne.n	406a88 <__aeabi_dmul+0x19c>
  406ae4:	ea81 0103 	eor.w	r1, r1, r3
  406ae8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  406aec:	f04f 0000 	mov.w	r0, #0
  406af0:	bd70      	pop	{r4, r5, r6, pc}
  406af2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  406af6:	bf06      	itte	eq
  406af8:	4610      	moveq	r0, r2
  406afa:	4619      	moveq	r1, r3
  406afc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  406b00:	d019      	beq.n	406b36 <__aeabi_dmul+0x24a>
  406b02:	ea94 0f0c 	teq	r4, ip
  406b06:	d102      	bne.n	406b0e <__aeabi_dmul+0x222>
  406b08:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  406b0c:	d113      	bne.n	406b36 <__aeabi_dmul+0x24a>
  406b0e:	ea95 0f0c 	teq	r5, ip
  406b12:	d105      	bne.n	406b20 <__aeabi_dmul+0x234>
  406b14:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  406b18:	bf1c      	itt	ne
  406b1a:	4610      	movne	r0, r2
  406b1c:	4619      	movne	r1, r3
  406b1e:	d10a      	bne.n	406b36 <__aeabi_dmul+0x24a>
  406b20:	ea81 0103 	eor.w	r1, r1, r3
  406b24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  406b28:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  406b2c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  406b30:	f04f 0000 	mov.w	r0, #0
  406b34:	bd70      	pop	{r4, r5, r6, pc}
  406b36:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  406b3a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  406b3e:	bd70      	pop	{r4, r5, r6, pc}

00406b40 <__aeabi_ddiv>:
  406b40:	b570      	push	{r4, r5, r6, lr}
  406b42:	f04f 0cff 	mov.w	ip, #255	; 0xff
  406b46:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  406b4a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  406b4e:	bf1d      	ittte	ne
  406b50:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  406b54:	ea94 0f0c 	teqne	r4, ip
  406b58:	ea95 0f0c 	teqne	r5, ip
  406b5c:	f000 f8a7 	bleq	406cae <__aeabi_ddiv+0x16e>
  406b60:	eba4 0405 	sub.w	r4, r4, r5
  406b64:	ea81 0e03 	eor.w	lr, r1, r3
  406b68:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  406b6c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  406b70:	f000 8088 	beq.w	406c84 <__aeabi_ddiv+0x144>
  406b74:	ea4f 3303 	mov.w	r3, r3, lsl #12
  406b78:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  406b7c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  406b80:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  406b84:	ea4f 2202 	mov.w	r2, r2, lsl #8
  406b88:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  406b8c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  406b90:	ea4f 2600 	mov.w	r6, r0, lsl #8
  406b94:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  406b98:	429d      	cmp	r5, r3
  406b9a:	bf08      	it	eq
  406b9c:	4296      	cmpeq	r6, r2
  406b9e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  406ba2:	f504 7440 	add.w	r4, r4, #768	; 0x300
  406ba6:	d202      	bcs.n	406bae <__aeabi_ddiv+0x6e>
  406ba8:	085b      	lsrs	r3, r3, #1
  406baa:	ea4f 0232 	mov.w	r2, r2, rrx
  406bae:	1ab6      	subs	r6, r6, r2
  406bb0:	eb65 0503 	sbc.w	r5, r5, r3
  406bb4:	085b      	lsrs	r3, r3, #1
  406bb6:	ea4f 0232 	mov.w	r2, r2, rrx
  406bba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  406bbe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  406bc2:	ebb6 0e02 	subs.w	lr, r6, r2
  406bc6:	eb75 0e03 	sbcs.w	lr, r5, r3
  406bca:	bf22      	ittt	cs
  406bcc:	1ab6      	subcs	r6, r6, r2
  406bce:	4675      	movcs	r5, lr
  406bd0:	ea40 000c 	orrcs.w	r0, r0, ip
  406bd4:	085b      	lsrs	r3, r3, #1
  406bd6:	ea4f 0232 	mov.w	r2, r2, rrx
  406bda:	ebb6 0e02 	subs.w	lr, r6, r2
  406bde:	eb75 0e03 	sbcs.w	lr, r5, r3
  406be2:	bf22      	ittt	cs
  406be4:	1ab6      	subcs	r6, r6, r2
  406be6:	4675      	movcs	r5, lr
  406be8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  406bec:	085b      	lsrs	r3, r3, #1
  406bee:	ea4f 0232 	mov.w	r2, r2, rrx
  406bf2:	ebb6 0e02 	subs.w	lr, r6, r2
  406bf6:	eb75 0e03 	sbcs.w	lr, r5, r3
  406bfa:	bf22      	ittt	cs
  406bfc:	1ab6      	subcs	r6, r6, r2
  406bfe:	4675      	movcs	r5, lr
  406c00:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  406c04:	085b      	lsrs	r3, r3, #1
  406c06:	ea4f 0232 	mov.w	r2, r2, rrx
  406c0a:	ebb6 0e02 	subs.w	lr, r6, r2
  406c0e:	eb75 0e03 	sbcs.w	lr, r5, r3
  406c12:	bf22      	ittt	cs
  406c14:	1ab6      	subcs	r6, r6, r2
  406c16:	4675      	movcs	r5, lr
  406c18:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  406c1c:	ea55 0e06 	orrs.w	lr, r5, r6
  406c20:	d018      	beq.n	406c54 <__aeabi_ddiv+0x114>
  406c22:	ea4f 1505 	mov.w	r5, r5, lsl #4
  406c26:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  406c2a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  406c2e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  406c32:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  406c36:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  406c3a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  406c3e:	d1c0      	bne.n	406bc2 <__aeabi_ddiv+0x82>
  406c40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  406c44:	d10b      	bne.n	406c5e <__aeabi_ddiv+0x11e>
  406c46:	ea41 0100 	orr.w	r1, r1, r0
  406c4a:	f04f 0000 	mov.w	r0, #0
  406c4e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  406c52:	e7b6      	b.n	406bc2 <__aeabi_ddiv+0x82>
  406c54:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  406c58:	bf04      	itt	eq
  406c5a:	4301      	orreq	r1, r0
  406c5c:	2000      	moveq	r0, #0
  406c5e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  406c62:	bf88      	it	hi
  406c64:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  406c68:	f63f aeaf 	bhi.w	4069ca <__aeabi_dmul+0xde>
  406c6c:	ebb5 0c03 	subs.w	ip, r5, r3
  406c70:	bf04      	itt	eq
  406c72:	ebb6 0c02 	subseq.w	ip, r6, r2
  406c76:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  406c7a:	f150 0000 	adcs.w	r0, r0, #0
  406c7e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  406c82:	bd70      	pop	{r4, r5, r6, pc}
  406c84:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  406c88:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  406c8c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  406c90:	bfc2      	ittt	gt
  406c92:	ebd4 050c 	rsbsgt	r5, r4, ip
  406c96:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  406c9a:	bd70      	popgt	{r4, r5, r6, pc}
  406c9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  406ca0:	f04f 0e00 	mov.w	lr, #0
  406ca4:	3c01      	subs	r4, #1
  406ca6:	e690      	b.n	4069ca <__aeabi_dmul+0xde>
  406ca8:	ea45 0e06 	orr.w	lr, r5, r6
  406cac:	e68d      	b.n	4069ca <__aeabi_dmul+0xde>
  406cae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  406cb2:	ea94 0f0c 	teq	r4, ip
  406cb6:	bf08      	it	eq
  406cb8:	ea95 0f0c 	teqeq	r5, ip
  406cbc:	f43f af3b 	beq.w	406b36 <__aeabi_dmul+0x24a>
  406cc0:	ea94 0f0c 	teq	r4, ip
  406cc4:	d10a      	bne.n	406cdc <__aeabi_ddiv+0x19c>
  406cc6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  406cca:	f47f af34 	bne.w	406b36 <__aeabi_dmul+0x24a>
  406cce:	ea95 0f0c 	teq	r5, ip
  406cd2:	f47f af25 	bne.w	406b20 <__aeabi_dmul+0x234>
  406cd6:	4610      	mov	r0, r2
  406cd8:	4619      	mov	r1, r3
  406cda:	e72c      	b.n	406b36 <__aeabi_dmul+0x24a>
  406cdc:	ea95 0f0c 	teq	r5, ip
  406ce0:	d106      	bne.n	406cf0 <__aeabi_ddiv+0x1b0>
  406ce2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  406ce6:	f43f aefd 	beq.w	406ae4 <__aeabi_dmul+0x1f8>
  406cea:	4610      	mov	r0, r2
  406cec:	4619      	mov	r1, r3
  406cee:	e722      	b.n	406b36 <__aeabi_dmul+0x24a>
  406cf0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  406cf4:	bf18      	it	ne
  406cf6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  406cfa:	f47f aec5 	bne.w	406a88 <__aeabi_dmul+0x19c>
  406cfe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  406d02:	f47f af0d 	bne.w	406b20 <__aeabi_dmul+0x234>
  406d06:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  406d0a:	f47f aeeb 	bne.w	406ae4 <__aeabi_dmul+0x1f8>
  406d0e:	e712      	b.n	406b36 <__aeabi_dmul+0x24a>

00406d10 <__gedf2>:
  406d10:	f04f 3cff 	mov.w	ip, #4294967295
  406d14:	e006      	b.n	406d24 <__cmpdf2+0x4>
  406d16:	bf00      	nop

00406d18 <__ledf2>:
  406d18:	f04f 0c01 	mov.w	ip, #1
  406d1c:	e002      	b.n	406d24 <__cmpdf2+0x4>
  406d1e:	bf00      	nop

00406d20 <__cmpdf2>:
  406d20:	f04f 0c01 	mov.w	ip, #1
  406d24:	f84d cd04 	str.w	ip, [sp, #-4]!
  406d28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  406d2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406d30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  406d34:	bf18      	it	ne
  406d36:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  406d3a:	d01b      	beq.n	406d74 <__cmpdf2+0x54>
  406d3c:	b001      	add	sp, #4
  406d3e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  406d42:	bf0c      	ite	eq
  406d44:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  406d48:	ea91 0f03 	teqne	r1, r3
  406d4c:	bf02      	ittt	eq
  406d4e:	ea90 0f02 	teqeq	r0, r2
  406d52:	2000      	moveq	r0, #0
  406d54:	4770      	bxeq	lr
  406d56:	f110 0f00 	cmn.w	r0, #0
  406d5a:	ea91 0f03 	teq	r1, r3
  406d5e:	bf58      	it	pl
  406d60:	4299      	cmppl	r1, r3
  406d62:	bf08      	it	eq
  406d64:	4290      	cmpeq	r0, r2
  406d66:	bf2c      	ite	cs
  406d68:	17d8      	asrcs	r0, r3, #31
  406d6a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  406d6e:	f040 0001 	orr.w	r0, r0, #1
  406d72:	4770      	bx	lr
  406d74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  406d78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406d7c:	d102      	bne.n	406d84 <__cmpdf2+0x64>
  406d7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  406d82:	d107      	bne.n	406d94 <__cmpdf2+0x74>
  406d84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  406d88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406d8c:	d1d6      	bne.n	406d3c <__cmpdf2+0x1c>
  406d8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  406d92:	d0d3      	beq.n	406d3c <__cmpdf2+0x1c>
  406d94:	f85d 0b04 	ldr.w	r0, [sp], #4
  406d98:	4770      	bx	lr
  406d9a:	bf00      	nop

00406d9c <__aeabi_cdrcmple>:
  406d9c:	4684      	mov	ip, r0
  406d9e:	4610      	mov	r0, r2
  406da0:	4662      	mov	r2, ip
  406da2:	468c      	mov	ip, r1
  406da4:	4619      	mov	r1, r3
  406da6:	4663      	mov	r3, ip
  406da8:	e000      	b.n	406dac <__aeabi_cdcmpeq>
  406daa:	bf00      	nop

00406dac <__aeabi_cdcmpeq>:
  406dac:	b501      	push	{r0, lr}
  406dae:	f7ff ffb7 	bl	406d20 <__cmpdf2>
  406db2:	2800      	cmp	r0, #0
  406db4:	bf48      	it	mi
  406db6:	f110 0f00 	cmnmi.w	r0, #0
  406dba:	bd01      	pop	{r0, pc}

00406dbc <__aeabi_dcmpeq>:
  406dbc:	f84d ed08 	str.w	lr, [sp, #-8]!
  406dc0:	f7ff fff4 	bl	406dac <__aeabi_cdcmpeq>
  406dc4:	bf0c      	ite	eq
  406dc6:	2001      	moveq	r0, #1
  406dc8:	2000      	movne	r0, #0
  406dca:	f85d fb08 	ldr.w	pc, [sp], #8
  406dce:	bf00      	nop

00406dd0 <__aeabi_dcmplt>:
  406dd0:	f84d ed08 	str.w	lr, [sp, #-8]!
  406dd4:	f7ff ffea 	bl	406dac <__aeabi_cdcmpeq>
  406dd8:	bf34      	ite	cc
  406dda:	2001      	movcc	r0, #1
  406ddc:	2000      	movcs	r0, #0
  406dde:	f85d fb08 	ldr.w	pc, [sp], #8
  406de2:	bf00      	nop

00406de4 <__aeabi_dcmple>:
  406de4:	f84d ed08 	str.w	lr, [sp, #-8]!
  406de8:	f7ff ffe0 	bl	406dac <__aeabi_cdcmpeq>
  406dec:	bf94      	ite	ls
  406dee:	2001      	movls	r0, #1
  406df0:	2000      	movhi	r0, #0
  406df2:	f85d fb08 	ldr.w	pc, [sp], #8
  406df6:	bf00      	nop

00406df8 <__aeabi_dcmpge>:
  406df8:	f84d ed08 	str.w	lr, [sp, #-8]!
  406dfc:	f7ff ffce 	bl	406d9c <__aeabi_cdrcmple>
  406e00:	bf94      	ite	ls
  406e02:	2001      	movls	r0, #1
  406e04:	2000      	movhi	r0, #0
  406e06:	f85d fb08 	ldr.w	pc, [sp], #8
  406e0a:	bf00      	nop

00406e0c <__aeabi_dcmpgt>:
  406e0c:	f84d ed08 	str.w	lr, [sp, #-8]!
  406e10:	f7ff ffc4 	bl	406d9c <__aeabi_cdrcmple>
  406e14:	bf34      	ite	cc
  406e16:	2001      	movcc	r0, #1
  406e18:	2000      	movcs	r0, #0
  406e1a:	f85d fb08 	ldr.w	pc, [sp], #8
  406e1e:	bf00      	nop

00406e20 <__aeabi_dcmpun>:
  406e20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  406e24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406e28:	d102      	bne.n	406e30 <__aeabi_dcmpun+0x10>
  406e2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  406e2e:	d10a      	bne.n	406e46 <__aeabi_dcmpun+0x26>
  406e30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  406e34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406e38:	d102      	bne.n	406e40 <__aeabi_dcmpun+0x20>
  406e3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  406e3e:	d102      	bne.n	406e46 <__aeabi_dcmpun+0x26>
  406e40:	f04f 0000 	mov.w	r0, #0
  406e44:	4770      	bx	lr
  406e46:	f04f 0001 	mov.w	r0, #1
  406e4a:	4770      	bx	lr

00406e4c <__aeabi_d2iz>:
  406e4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  406e50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  406e54:	d215      	bcs.n	406e82 <__aeabi_d2iz+0x36>
  406e56:	d511      	bpl.n	406e7c <__aeabi_d2iz+0x30>
  406e58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  406e5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  406e60:	d912      	bls.n	406e88 <__aeabi_d2iz+0x3c>
  406e62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  406e66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  406e6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  406e6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  406e72:	fa23 f002 	lsr.w	r0, r3, r2
  406e76:	bf18      	it	ne
  406e78:	4240      	negne	r0, r0
  406e7a:	4770      	bx	lr
  406e7c:	f04f 0000 	mov.w	r0, #0
  406e80:	4770      	bx	lr
  406e82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  406e86:	d105      	bne.n	406e94 <__aeabi_d2iz+0x48>
  406e88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  406e8c:	bf08      	it	eq
  406e8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  406e92:	4770      	bx	lr
  406e94:	f04f 0000 	mov.w	r0, #0
  406e98:	4770      	bx	lr
  406e9a:	bf00      	nop
  406e9c:	0000005b 	.word	0x0000005b
  406ea0:	0000205d 	.word	0x0000205d
  406ea4:	00000a0d 	.word	0x00000a0d
  406ea8:	00005441 	.word	0x00005441
  406eac:	522b5441 	.word	0x522b5441
  406eb0:	54455345 	.word	0x54455345
  406eb4:	00000000 	.word	0x00000000
  406eb8:	4e2b5441 	.word	0x4e2b5441
  406ebc:	43454d41 	.word	0x43454d41
  406ec0:	6e65696c 	.word	0x6e65696c
  406ec4:	00000074 	.word	0x00000074
  406ec8:	30316d68 	.word	0x30316d68
  406ecc:	696c635f 	.word	0x696c635f
  406ed0:	5f746e65 	.word	0x5f746e65
  406ed4:	74696e69 	.word	0x74696e69
  406ed8:	00000000 	.word	0x00000000
  406edc:	492b5441 	.word	0x492b5441
  406ee0:	31454d4d 	.word	0x31454d4d
  406ee4:	00000000 	.word	0x00000000
  406ee8:	522b5441 	.word	0x522b5441
  406eec:	31454c4f 	.word	0x31454c4f
  406ef0:	00000000 	.word	0x00000000
  406ef4:	442b5441 	.word	0x442b5441
  406ef8:	3f435349 	.word	0x3f435349
  406efc:	00000000 	.word	0x00000000
  406f00:	432b5441 	.word	0x432b5441
  406f04:	34444e4f 	.word	0x34444e4f
  406f08:	39333633 	.word	0x39333633
  406f0c:	44423844 	.word	0x44423844
  406f10:	00004431 	.word	0x00004431
  406f14:	67616c66 	.word	0x67616c66
  406f18:	66656220 	.word	0x66656220
  406f1c:	2065726f 	.word	0x2065726f
  406f20:	0a206425 	.word	0x0a206425
  406f24:	00000000 	.word	0x00000000
  406f28:	00000021 	.word	0x00000021
  406f2c:	67616c66 	.word	0x67616c66
  406f30:	74756220 	.word	0x74756220
  406f34:	64252074 	.word	0x64252074
  406f38:	00000a20 	.word	0x00000a20
  406f3c:	63696e49 	.word	0x63696e49
  406f40:	696c6169 	.word	0x696c6169
  406f44:	646e617a 	.word	0x646e617a
  406f48:	2e2e2e6f 	.word	0x2e2e2e6f
  406f4c:	00000a0d 	.word	0x00000a0d
  406f50:	666e6f43 	.word	0x666e6f43
  406f54:	48206769 	.word	0x48206769
  406f58:	20353043 	.word	0x20353043
  406f5c:	65696c43 	.word	0x65696c43
  406f60:	2e2e746e 	.word	0x2e2e746e
  406f64:	000a0d2e 	.word	0x000a0d2e
  406f68:	67616c66 	.word	0x67616c66
  406f6c:	20642520 	.word	0x20642520
  406f70:	0000000a 	.word	0x0000000a
  406f74:	72746e65 	.word	0x72746e65
  406f78:	2e2e756f 	.word	0x2e2e756f
  406f7c:	000a0d2e 	.word	0x000a0d2e
  406f80:	0a206425 	.word	0x0a206425
  406f84:	00000000 	.word	0x00000000
  406f88:	6f636e65 	.word	0x6f636e65
  406f8c:	00726564 	.word	0x00726564

00406f90 <_global_impure_ptr>:
  406f90:	20400018 00464e49 00666e69 004e414e     ..@ INF.inf.NAN.
  406fa0:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  406fb0:	46454443 00000000 33323130 37363534     CDEF....01234567
  406fc0:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  406fd0:	0000296c 00000030                       l)..0...

00406fd8 <blanks.7223>:
  406fd8:	20202020 20202020 20202020 20202020                     

00406fe8 <zeroes.7224>:
  406fe8:	30303030 30303030 30303030 30303030     0000000000000000
  406ff8:	33323130 37363534 62613938 66656463     0123456789abcdef
  407008:	6a696867 6e6d6c6b 7271706f 76757473     ghijklmnopqrstuv
  407018:	7a797877 00000000 69666e49 7974696e     wxyz....Infinity
  407028:	00000000 004e614e                       ....NaN.

00407030 <__mprec_bigtens>:
  407030:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  407040:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  407050:	7f73bf3c 75154fdd                       <.s..O.u

00407058 <__mprec_tens>:
  407058:	00000000 3ff00000 00000000 40240000     .......?......$@
  407068:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  407078:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  407088:	00000000 412e8480 00000000 416312d0     .......A......cA
  407098:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  4070a8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  4070b8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  4070c8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  4070d8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  4070e8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  4070f8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  407108:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  407118:	79d99db4 44ea7843                       ...yCx.D

00407120 <p05.6055>:
  407120:	00000005 00000019 0000007d 00000043     ........}...C...
  407130:	49534f50 00000058 0000002e              POSIX.......

0040713c <_ctype_>:
  40713c:	20202000 20202020 28282020 20282828     .         ((((( 
  40714c:	20202020 20202020 20202020 20202020                     
  40715c:	10108820 10101010 10101010 10101010      ...............
  40716c:	04040410 04040404 10040404 10101010     ................
  40717c:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40718c:	01010101 01010101 01010101 10101010     ................
  40719c:	42421010 42424242 02020202 02020202     ..BBBBBB........
  4071ac:	02020202 02020202 02020202 10101010     ................
  4071bc:	00000020 00000000 00000000 00000000      ...............
	...

00407240 <_init>:
  407240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407242:	bf00      	nop
  407244:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407246:	bc08      	pop	{r3}
  407248:	469e      	mov	lr, r3
  40724a:	4770      	bx	lr

0040724c <__init_array_start>:
  40724c:	00403f39 	.word	0x00403f39

00407250 <__frame_dummy_init_array_entry>:
  407250:	00400165                                e.@.

00407254 <_fini>:
  407254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407256:	bf00      	nop
  407258:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40725a:	bc08      	pop	{r3}
  40725c:	469e      	mov	lr, r3
  40725e:	4770      	bx	lr

00407260 <__fini_array_start>:
  407260:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <_impure_ptr>:
20400010:	0018 2040 0000 0000                         ..@ ....

20400018 <impure_data>:
20400018:	0000 0000 0304 2040 036c 2040 03d4 2040     ......@ l.@ ..@ 
	...
204000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400440 <__atexit_recursive_mutex>:
20400440:	0aa0 2040                                   ..@ 

20400444 <__malloc_av_>:
	...
2040044c:	0444 2040 0444 2040 044c 2040 044c 2040     D.@ D.@ L.@ L.@ 
2040045c:	0454 2040 0454 2040 045c 2040 045c 2040     T.@ T.@ \.@ \.@ 
2040046c:	0464 2040 0464 2040 046c 2040 046c 2040     d.@ d.@ l.@ l.@ 
2040047c:	0474 2040 0474 2040 047c 2040 047c 2040     t.@ t.@ |.@ |.@ 
2040048c:	0484 2040 0484 2040 048c 2040 048c 2040     ..@ ..@ ..@ ..@ 
2040049c:	0494 2040 0494 2040 049c 2040 049c 2040     ..@ ..@ ..@ ..@ 
204004ac:	04a4 2040 04a4 2040 04ac 2040 04ac 2040     ..@ ..@ ..@ ..@ 
204004bc:	04b4 2040 04b4 2040 04bc 2040 04bc 2040     ..@ ..@ ..@ ..@ 
204004cc:	04c4 2040 04c4 2040 04cc 2040 04cc 2040     ..@ ..@ ..@ ..@ 
204004dc:	04d4 2040 04d4 2040 04dc 2040 04dc 2040     ..@ ..@ ..@ ..@ 
204004ec:	04e4 2040 04e4 2040 04ec 2040 04ec 2040     ..@ ..@ ..@ ..@ 
204004fc:	04f4 2040 04f4 2040 04fc 2040 04fc 2040     ..@ ..@ ..@ ..@ 
2040050c:	0504 2040 0504 2040 050c 2040 050c 2040     ..@ ..@ ..@ ..@ 
2040051c:	0514 2040 0514 2040 051c 2040 051c 2040     ..@ ..@ ..@ ..@ 
2040052c:	0524 2040 0524 2040 052c 2040 052c 2040     $.@ $.@ ,.@ ,.@ 
2040053c:	0534 2040 0534 2040 053c 2040 053c 2040     4.@ 4.@ <.@ <.@ 
2040054c:	0544 2040 0544 2040 054c 2040 054c 2040     D.@ D.@ L.@ L.@ 
2040055c:	0554 2040 0554 2040 055c 2040 055c 2040     T.@ T.@ \.@ \.@ 
2040056c:	0564 2040 0564 2040 056c 2040 056c 2040     d.@ d.@ l.@ l.@ 
2040057c:	0574 2040 0574 2040 057c 2040 057c 2040     t.@ t.@ |.@ |.@ 
2040058c:	0584 2040 0584 2040 058c 2040 058c 2040     ..@ ..@ ..@ ..@ 
2040059c:	0594 2040 0594 2040 059c 2040 059c 2040     ..@ ..@ ..@ ..@ 
204005ac:	05a4 2040 05a4 2040 05ac 2040 05ac 2040     ..@ ..@ ..@ ..@ 
204005bc:	05b4 2040 05b4 2040 05bc 2040 05bc 2040     ..@ ..@ ..@ ..@ 
204005cc:	05c4 2040 05c4 2040 05cc 2040 05cc 2040     ..@ ..@ ..@ ..@ 
204005dc:	05d4 2040 05d4 2040 05dc 2040 05dc 2040     ..@ ..@ ..@ ..@ 
204005ec:	05e4 2040 05e4 2040 05ec 2040 05ec 2040     ..@ ..@ ..@ ..@ 
204005fc:	05f4 2040 05f4 2040 05fc 2040 05fc 2040     ..@ ..@ ..@ ..@ 
2040060c:	0604 2040 0604 2040 060c 2040 060c 2040     ..@ ..@ ..@ ..@ 
2040061c:	0614 2040 0614 2040 061c 2040 061c 2040     ..@ ..@ ..@ ..@ 
2040062c:	0624 2040 0624 2040 062c 2040 062c 2040     $.@ $.@ ,.@ ,.@ 
2040063c:	0634 2040 0634 2040 063c 2040 063c 2040     4.@ 4.@ <.@ <.@ 
2040064c:	0644 2040 0644 2040 064c 2040 064c 2040     D.@ D.@ L.@ L.@ 
2040065c:	0654 2040 0654 2040 065c 2040 065c 2040     T.@ T.@ \.@ \.@ 
2040066c:	0664 2040 0664 2040 066c 2040 066c 2040     d.@ d.@ l.@ l.@ 
2040067c:	0674 2040 0674 2040 067c 2040 067c 2040     t.@ t.@ |.@ |.@ 
2040068c:	0684 2040 0684 2040 068c 2040 068c 2040     ..@ ..@ ..@ ..@ 
2040069c:	0694 2040 0694 2040 069c 2040 069c 2040     ..@ ..@ ..@ ..@ 
204006ac:	06a4 2040 06a4 2040 06ac 2040 06ac 2040     ..@ ..@ ..@ ..@ 
204006bc:	06b4 2040 06b4 2040 06bc 2040 06bc 2040     ..@ ..@ ..@ ..@ 
204006cc:	06c4 2040 06c4 2040 06cc 2040 06cc 2040     ..@ ..@ ..@ ..@ 
204006dc:	06d4 2040 06d4 2040 06dc 2040 06dc 2040     ..@ ..@ ..@ ..@ 
204006ec:	06e4 2040 06e4 2040 06ec 2040 06ec 2040     ..@ ..@ ..@ ..@ 
204006fc:	06f4 2040 06f4 2040 06fc 2040 06fc 2040     ..@ ..@ ..@ ..@ 
2040070c:	0704 2040 0704 2040 070c 2040 070c 2040     ..@ ..@ ..@ ..@ 
2040071c:	0714 2040 0714 2040 071c 2040 071c 2040     ..@ ..@ ..@ ..@ 
2040072c:	0724 2040 0724 2040 072c 2040 072c 2040     $.@ $.@ ,.@ ,.@ 
2040073c:	0734 2040 0734 2040 073c 2040 073c 2040     4.@ 4.@ <.@ <.@ 
2040074c:	0744 2040 0744 2040 074c 2040 074c 2040     D.@ D.@ L.@ L.@ 
2040075c:	0754 2040 0754 2040 075c 2040 075c 2040     T.@ T.@ \.@ \.@ 
2040076c:	0764 2040 0764 2040 076c 2040 076c 2040     d.@ d.@ l.@ l.@ 
2040077c:	0774 2040 0774 2040 077c 2040 077c 2040     t.@ t.@ |.@ |.@ 
2040078c:	0784 2040 0784 2040 078c 2040 078c 2040     ..@ ..@ ..@ ..@ 
2040079c:	0794 2040 0794 2040 079c 2040 079c 2040     ..@ ..@ ..@ ..@ 
204007ac:	07a4 2040 07a4 2040 07ac 2040 07ac 2040     ..@ ..@ ..@ ..@ 
204007bc:	07b4 2040 07b4 2040 07bc 2040 07bc 2040     ..@ ..@ ..@ ..@ 
204007cc:	07c4 2040 07c4 2040 07cc 2040 07cc 2040     ..@ ..@ ..@ ..@ 
204007dc:	07d4 2040 07d4 2040 07dc 2040 07dc 2040     ..@ ..@ ..@ ..@ 
204007ec:	07e4 2040 07e4 2040 07ec 2040 07ec 2040     ..@ ..@ ..@ ..@ 
204007fc:	07f4 2040 07f4 2040 07fc 2040 07fc 2040     ..@ ..@ ..@ ..@ 
2040080c:	0804 2040 0804 2040 080c 2040 080c 2040     ..@ ..@ ..@ ..@ 
2040081c:	0814 2040 0814 2040 081c 2040 081c 2040     ..@ ..@ ..@ ..@ 
2040082c:	0824 2040 0824 2040 082c 2040 082c 2040     $.@ $.@ ,.@ ,.@ 
2040083c:	0834 2040 0834 2040 083c 2040 083c 2040     4.@ 4.@ <.@ <.@ 

2040084c <__malloc_sbrk_base>:
2040084c:	ffff ffff                                   ....

20400850 <__malloc_trim_threshold>:
20400850:	0000 0002                                   ....

20400854 <__global_locale>:
20400854:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400874:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400894:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400914:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400934:	6561 0040 6121 0040 0000 0000 713c 0040     ae@.!a@.....<q@.
20400944:	7138 0040 6fb4 0040 6fb4 0040 6fb4 0040     8q@..o@..o@..o@.
20400954:	6fb4 0040 6fb4 0040 6fb4 0040 6fb4 0040     .o@..o@..o@..o@.
20400964:	6fb4 0040 6fb4 0040 ffff ffff ffff ffff     .o@..o@.........
20400974:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2040099c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
