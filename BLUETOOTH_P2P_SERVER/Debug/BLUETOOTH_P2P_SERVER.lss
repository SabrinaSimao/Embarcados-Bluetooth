
BLUETOOTH_P2P_SERVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004838  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00404838  00404838  00014838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d8  20400000  00404840  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0003ab14  204009d8  00405218  000209d8  2**2
                  ALLOC
  4 .stack        00002004  2043b4ec  0043fd2c  000209d8  2**0
                  ALLOC
  5 .heap         00000200  2043d4f0  00441d30  000209d8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209d8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020a06  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001ba78  00000000  00000000  00020a5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003b50  00000000  00000000  0003c4d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000cc0  00000000  00000000  00040027  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000214fe  00000000  00000000  00040ce7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ec37  00000000  00000000  000621e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008d98a  00000000  00000000  00070e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00005d61  00000000  00000000  000fe7a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cd0  00000000  00000000  00104507  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002820  00000000  00000000  001051d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	f0 d4 43 20 a1 0e 40 00 9d 0e 40 00 9d 0e 40 00     ..C ..@...@...@.
  400010:	9d 0e 40 00 9d 0e 40 00 9d 0e 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	9d 0e 40 00 9d 0e 40 00 00 00 00 00 9d 0e 40 00     ..@...@.......@.
  40003c:	d9 11 40 00 9d 0e 40 00 9d 0e 40 00 9d 0e 40 00     ..@...@...@...@.
  40004c:	9d 0e 40 00 9d 0e 40 00 9d 0e 40 00 9d 0e 40 00     ..@...@...@...@.
  40005c:	9d 0e 40 00 9d 0e 40 00 00 00 00 00 c5 0c 40 00     ..@...@.......@.
  40006c:	d9 0c 40 00 ed 0c 40 00 9d 0e 40 00 9d 0e 40 00     ..@...@...@...@.
  40007c:	9d 0e 40 00 01 0d 40 00 15 0d 40 00 9d 0e 40 00     ..@...@...@...@.
  40008c:	9d 0e 40 00 9d 0e 40 00 9d 0e 40 00 9d 0e 40 00     ..@...@...@...@.
  40009c:	e9 11 40 00 9d 0e 40 00 9d 0e 40 00 9d 0e 40 00     ..@...@...@...@.
  4000ac:	9d 0e 40 00 9d 0e 40 00 89 05 40 00 9d 0e 40 00     ..@...@...@...@.
  4000bc:	9d 0e 40 00 9d 0e 40 00 9d 0e 40 00 9d 0e 40 00     ..@...@...@...@.
  4000cc:	9d 0e 40 00 00 00 00 00 9d 0e 40 00 00 00 00 00     ..@.......@.....
  4000dc:	9d 0e 40 00 9d 05 40 00 9d 0e 40 00 9d 0e 40 00     ..@...@...@...@.
  4000ec:	9d 0e 40 00 9d 0e 40 00 9d 0e 40 00 9d 0e 40 00     ..@...@...@...@.
  4000fc:	9d 0e 40 00 9d 0e 40 00 9d 0e 40 00 9d 0e 40 00     ..@...@...@...@.
  40010c:	9d 0e 40 00 9d 0e 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 9d 0e 40 00 9d 0e 40 00 9d 0e 40 00     ......@...@...@.
  40012c:	9d 0e 40 00 9d 0e 40 00 00 00 00 00 9d 0e 40 00     ..@...@.......@.
  40013c:	9d 0e 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009d8 	.word	0x204009d8
  40015c:	00000000 	.word	0x00000000
  400160:	00404840 	.word	0x00404840

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00404840 	.word	0x00404840
  4001a0:	204009dc 	.word	0x204009dc
  4001a4:	00404840 	.word	0x00404840
  4001a8:	00000000 	.word	0x00000000

004001ac <ppbuf_insert_active>:

int ppbuf_insert_active(ppbuf_t *p, void *data, int size){
	int ret = 0;
	unsigned char *ptr;

	if(p == NULL || data == NULL || size == 0) {
  4001ac:	2a00      	cmp	r2, #0
  4001ae:	bf18      	it	ne
  4001b0:	2900      	cmpne	r1, #0
  4001b2:	d023      	beq.n	4001fc <ppbuf_insert_active+0x50>
int ppbuf_insert_active(ppbuf_t *p, void *data, int size){
  4001b4:	b570      	push	{r4, r5, r6, lr}
  4001b6:	460b      	mov	r3, r1
  4001b8:	4615      	mov	r5, r2
	if(p == NULL || data == NULL || size == 0) {
  4001ba:	b1c8      	cbz	r0, 4001f0 <ppbuf_insert_active+0x44>
		/* check your parameters */
		ret = -1;
	} else {
		if(size > (p->buffer_size - p->put_index)) {
  4001bc:	6886      	ldr	r6, [r0, #8]
  4001be:	68c2      	ldr	r2, [r0, #12]
  4001c0:	1ab1      	subs	r1, r6, r2
  4001c2:	428d      	cmp	r5, r1
  4001c4:	dc17      	bgt.n	4001f6 <ppbuf_insert_active+0x4a>
  4001c6:	4619      	mov	r1, r3
  4001c8:	4604      	mov	r4, r0
			/* not enough room for new samples */
			ret = -1;
		} else {
			/* take the current position */
			int mem_position = ((p->ping) * p->buffer_size) + p->put_index;
  4001ca:	7903      	ldrb	r3, [r0, #4]
  4001cc:	fb06 2303 	mla	r3, r6, r3, r2
			ptr = (unsigned char *)p->buffer_data; //uint8_t

			/* copy the contents */
			memcpy(&ptr[mem_position], data, size);
  4001d0:	6800      	ldr	r0, [r0, #0]
  4001d2:	462a      	mov	r2, r5
  4001d4:	4418      	add	r0, r3
  4001d6:	4b0b      	ldr	r3, [pc, #44]	; (400204 <ppbuf_insert_active+0x58>)
  4001d8:	4798      	blx	r3

			/* update put index */
			p->put_index += size;
  4001da:	68e2      	ldr	r2, [r4, #12]
  4001dc:	442a      	add	r2, r5
  4001de:	60e2      	str	r2, [r4, #12]
			p->full_signal = (p->put_index >= p->buffer_size?true:false);
  4001e0:	68a3      	ldr	r3, [r4, #8]
  4001e2:	429a      	cmp	r2, r3
  4001e4:	bfb4      	ite	lt
  4001e6:	2200      	movlt	r2, #0
  4001e8:	2201      	movge	r2, #1
  4001ea:	7522      	strb	r2, [r4, #20]

			/* swap will only generated when ppbuf_get_full_signal is called */
			ret = 0;
  4001ec:	2000      	movs	r0, #0
  4001ee:	bd70      	pop	{r4, r5, r6, pc}
		ret = -1;
  4001f0:	f04f 30ff 	mov.w	r0, #4294967295
  4001f4:	bd70      	pop	{r4, r5, r6, pc}
			ret = -1;
  4001f6:	f04f 30ff 	mov.w	r0, #4294967295
		}
	}
	return(ret);
}
  4001fa:	bd70      	pop	{r4, r5, r6, pc}
		ret = -1;
  4001fc:	f04f 30ff 	mov.w	r0, #4294967295
}
  400200:	4770      	bx	lr
  400202:	bf00      	nop
  400204:	00401755 	.word	0x00401755

00400208 <ppbuf_remove_inactive>:

int ppbuf_remove_inactive(ppbuf_t *p, void *data, int size){
	int ret = 0;
	unsigned char *ptr;

	if(p == NULL || data == NULL || size == 0) {
  400208:	2a00      	cmp	r2, #0
  40020a:	bf18      	it	ne
  40020c:	2900      	cmpne	r1, #0
  40020e:	d01d      	beq.n	40024c <ppbuf_remove_inactive+0x44>
int ppbuf_remove_inactive(ppbuf_t *p, void *data, int size){
  400210:	b570      	push	{r4, r5, r6, lr}
  400212:	460b      	mov	r3, r1
  400214:	4615      	mov	r5, r2
	if(p == NULL || data == NULL || size == 0) {
  400216:	b198      	cbz	r0, 400240 <ppbuf_remove_inactive+0x38>
		/* check your parameters */
		ret = -1;
	} else {
		if(size > (p->buffer_size - p->get_index)) {
  400218:	6886      	ldr	r6, [r0, #8]
  40021a:	6902      	ldr	r2, [r0, #16]
  40021c:	1ab1      	subs	r1, r6, r2
  40021e:	428d      	cmp	r5, r1
  400220:	dc11      	bgt.n	400246 <ppbuf_remove_inactive+0x3e>
  400222:	4604      	mov	r4, r0
			/* not enough data in sample buffer */
			ret = -1;
		} else {
			/* take the current position */
			int mem_position = ((p->pong) * p->buffer_size) + p->get_index;
  400224:	7941      	ldrb	r1, [r0, #5]
  400226:	fb06 2101 	mla	r1, r6, r1, r2
			ptr = (unsigned char *)p->buffer_data;

			/* copy the contents */
			memcpy(data,&ptr[mem_position], size);
  40022a:	6800      	ldr	r0, [r0, #0]
  40022c:	462a      	mov	r2, r5
  40022e:	4401      	add	r1, r0
  400230:	4618      	mov	r0, r3
  400232:	4b08      	ldr	r3, [pc, #32]	; (400254 <ppbuf_remove_inactive+0x4c>)
  400234:	4798      	blx	r3

			/* update put index */
			p->get_index += size;
  400236:	6923      	ldr	r3, [r4, #16]
  400238:	442b      	add	r3, r5
  40023a:	6123      	str	r3, [r4, #16]

			/* when buffer is empty we are not able to extract anymore data */
			ret = 0;
  40023c:	2000      	movs	r0, #0
  40023e:	bd70      	pop	{r4, r5, r6, pc}
		ret = -1;
  400240:	f04f 30ff 	mov.w	r0, #4294967295
  400244:	bd70      	pop	{r4, r5, r6, pc}
			ret = -1;
  400246:	f04f 30ff 	mov.w	r0, #4294967295
		}
	}
	return(ret);


}
  40024a:	bd70      	pop	{r4, r5, r6, pc}
		ret = -1;
  40024c:	f04f 30ff 	mov.w	r0, #4294967295
}
  400250:	4770      	bx	lr
  400252:	bf00      	nop
  400254:	00401755 	.word	0x00401755

00400258 <ppbuf_get_full_signal>:
	return(ret);
}

bool ppbuf_get_full_signal(ppbuf_t *p, bool consume) {
	/* take the last signaled full occurrence */
	bool ret = (p != NULL ? p->full_signal : false);
  400258:	b198      	cbz	r0, 400282 <ppbuf_get_full_signal+0x2a>
  40025a:	4603      	mov	r3, r0
  40025c:	7d00      	ldrb	r0, [r0, #20]
  40025e:	b178      	cbz	r0, 400280 <ppbuf_get_full_signal+0x28>

	if((consume != false) && (p != NULL) && (ret != false)) {
  400260:	b171      	cbz	r1, 400280 <ppbuf_get_full_signal+0x28>
bool ppbuf_get_full_signal(ppbuf_t *p, bool consume) {
  400262:	b410      	push	{r4}
		p->full_signal = false;
  400264:	2400      	movs	r4, #0
  400266:	751c      	strb	r4, [r3, #20]

		/* swap the buffer switches */
		p->ping = p->ping ^ p->pong;
  400268:	7958      	ldrb	r0, [r3, #5]
  40026a:	791a      	ldrb	r2, [r3, #4]
  40026c:	4042      	eors	r2, r0
		p->pong = p->pong ^ p->ping;
  40026e:	4050      	eors	r0, r2
  400270:	7158      	strb	r0, [r3, #5]
		p->ping = p->ping ^ p->pong;
  400272:	4042      	eors	r2, r0
  400274:	711a      	strb	r2, [r3, #4]

		/* resets the buffer position */
		p->get_index = 0;
  400276:	611c      	str	r4, [r3, #16]
		p->put_index = 0;
  400278:	60dc      	str	r4, [r3, #12]
	bool ret = (p != NULL ? p->full_signal : false);
  40027a:	4608      	mov	r0, r1
	}

	return(ret);
}
  40027c:	f85d 4b04 	ldr.w	r4, [sp], #4
  400280:	4770      	bx	lr
  400282:	2000      	movs	r0, #0
  400284:	4770      	bx	lr
	...

00400288 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  40028c:	b980      	cbnz	r0, 4002b0 <_read+0x28>
  40028e:	460c      	mov	r4, r1
  400290:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400292:	2a00      	cmp	r2, #0
  400294:	dd0f      	ble.n	4002b6 <_read+0x2e>
  400296:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400298:	4e08      	ldr	r6, [pc, #32]	; (4002bc <_read+0x34>)
  40029a:	4d09      	ldr	r5, [pc, #36]	; (4002c0 <_read+0x38>)
  40029c:	6830      	ldr	r0, [r6, #0]
  40029e:	4621      	mov	r1, r4
  4002a0:	682b      	ldr	r3, [r5, #0]
  4002a2:	4798      	blx	r3
		ptr++;
  4002a4:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  4002a6:	42bc      	cmp	r4, r7
  4002a8:	d1f8      	bne.n	40029c <_read+0x14>
		nChars++;
	}
	return nChars;
}
  4002aa:	4640      	mov	r0, r8
  4002ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4002b0:	f04f 38ff 	mov.w	r8, #4294967295
  4002b4:	e7f9      	b.n	4002aa <_read+0x22>
	for (; len > 0; --len) {
  4002b6:	4680      	mov	r8, r0
  4002b8:	e7f7      	b.n	4002aa <_read+0x22>
  4002ba:	bf00      	nop
  4002bc:	2043b440 	.word	0x2043b440
  4002c0:	2043b438 	.word	0x2043b438

004002c4 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4002c4:	3801      	subs	r0, #1
  4002c6:	2802      	cmp	r0, #2
  4002c8:	d815      	bhi.n	4002f6 <_write+0x32>
{
  4002ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4002ce:	460e      	mov	r6, r1
  4002d0:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  4002d2:	b19a      	cbz	r2, 4002fc <_write+0x38>
  4002d4:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4002d6:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400310 <_write+0x4c>
  4002da:	4f0c      	ldr	r7, [pc, #48]	; (40030c <_write+0x48>)
  4002dc:	f8d8 0000 	ldr.w	r0, [r8]
  4002e0:	f815 1b01 	ldrb.w	r1, [r5], #1
  4002e4:	683b      	ldr	r3, [r7, #0]
  4002e6:	4798      	blx	r3
  4002e8:	2800      	cmp	r0, #0
  4002ea:	db0a      	blt.n	400302 <_write+0x3e>
  4002ec:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4002ee:	3c01      	subs	r4, #1
  4002f0:	d1f4      	bne.n	4002dc <_write+0x18>
  4002f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4002f6:	f04f 30ff 	mov.w	r0, #4294967295
  4002fa:	4770      	bx	lr
	for (; len != 0; --len) {
  4002fc:	4610      	mov	r0, r2
  4002fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400302:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40030a:	bf00      	nop
  40030c:	2043b43c 	.word	0x2043b43c
  400310:	2043b440 	.word	0x2043b440

00400314 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  400314:	b570      	push	{r4, r5, r6, lr}
  400316:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  400318:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  40031a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  40031c:	4013      	ands	r3, r2
  40031e:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400320:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  400322:	4e1c      	ldr	r6, [pc, #112]	; (400394 <afec_process_callback+0x80>)
  400324:	4d1c      	ldr	r5, [pc, #112]	; (400398 <afec_process_callback+0x84>)
  400326:	42a8      	cmp	r0, r5
  400328:	bf14      	ite	ne
  40032a:	2000      	movne	r0, #0
  40032c:	2001      	moveq	r0, #1
  40032e:	0105      	lsls	r5, r0, #4
  400330:	e00b      	b.n	40034a <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  400332:	2c0e      	cmp	r4, #14
  400334:	d81e      	bhi.n	400374 <afec_process_callback+0x60>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  400336:	9a01      	ldr	r2, [sp, #4]
  400338:	f104 010c 	add.w	r1, r4, #12
  40033c:	2301      	movs	r3, #1
  40033e:	408b      	lsls	r3, r1
  400340:	4213      	tst	r3, r2
  400342:	d110      	bne.n	400366 <afec_process_callback+0x52>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400344:	3401      	adds	r4, #1
  400346:	2c10      	cmp	r4, #16
  400348:	d022      	beq.n	400390 <afec_process_callback+0x7c>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  40034a:	2c0b      	cmp	r4, #11
  40034c:	d8f1      	bhi.n	400332 <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  40034e:	9a01      	ldr	r2, [sp, #4]
  400350:	2301      	movs	r3, #1
  400352:	40a3      	lsls	r3, r4
  400354:	4213      	tst	r3, r2
  400356:	d0f5      	beq.n	400344 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400358:	192b      	adds	r3, r5, r4
  40035a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  40035e:	2b00      	cmp	r3, #0
  400360:	d0f0      	beq.n	400344 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400362:	4798      	blx	r3
  400364:	e7ee      	b.n	400344 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400366:	192b      	adds	r3, r5, r4
  400368:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  40036c:	2b00      	cmp	r3, #0
  40036e:	d0e9      	beq.n	400344 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400370:	4798      	blx	r3
  400372:	e7e7      	b.n	400344 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  400374:	9a01      	ldr	r2, [sp, #4]
  400376:	f104 010f 	add.w	r1, r4, #15
  40037a:	2301      	movs	r3, #1
  40037c:	408b      	lsls	r3, r1
  40037e:	4213      	tst	r3, r2
  400380:	d0e0      	beq.n	400344 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400382:	192b      	adds	r3, r5, r4
  400384:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400388:	2b00      	cmp	r3, #0
  40038a:	d0db      	beq.n	400344 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  40038c:	4798      	blx	r3
  40038e:	e7d9      	b.n	400344 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400390:	b002      	add	sp, #8
  400392:	bd70      	pop	{r4, r5, r6, pc}
  400394:	2043b444 	.word	0x2043b444
  400398:	40064000 	.word	0x40064000

0040039c <afec_ch_set_config>:
{
  40039c:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  40039e:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  4003a0:	2301      	movs	r3, #1
  4003a2:	408b      	lsls	r3, r1
  4003a4:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  4003a8:	7815      	ldrb	r5, [r2, #0]
  4003aa:	2d00      	cmp	r5, #0
  4003ac:	bf08      	it	eq
  4003ae:	2300      	moveq	r3, #0
  4003b0:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  4003b2:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  4003b4:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  4003b6:	004b      	lsls	r3, r1, #1
  4003b8:	2103      	movs	r1, #3
  4003ba:	4099      	lsls	r1, r3
  4003bc:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  4003c0:	7851      	ldrb	r1, [r2, #1]
  4003c2:	4099      	lsls	r1, r3
  4003c4:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  4003c6:	6541      	str	r1, [r0, #84]	; 0x54
}
  4003c8:	bc30      	pop	{r4, r5}
  4003ca:	4770      	bx	lr

004003cc <afec_temp_sensor_set_config>:
	reg = ((config->rctc) ? AFEC_TEMPMR_RTCT : 0) | (config->mode);
  4003cc:	784b      	ldrb	r3, [r1, #1]
  4003ce:	780a      	ldrb	r2, [r1, #0]
  4003d0:	4313      	orrs	r3, r2
	afec->AFEC_TEMPMR = reg;
  4003d2:	6703      	str	r3, [r0, #112]	; 0x70
			AFEC_TEMPCWR_THIGHTHRES(config->high_threshold);
  4003d4:	888a      	ldrh	r2, [r1, #4]
	afec->AFEC_TEMPCWR = AFEC_TEMPCWR_TLOWTHRES(config->low_threshold) |
  4003d6:	884b      	ldrh	r3, [r1, #2]
  4003d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4003dc:	6743      	str	r3, [r0, #116]	; 0x74
  4003de:	4770      	bx	lr

004003e0 <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  4003e0:	2200      	movs	r2, #0
  4003e2:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  4003e4:	4b08      	ldr	r3, [pc, #32]	; (400408 <afec_get_config_defaults+0x28>)
  4003e6:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  4003e8:	4b08      	ldr	r3, [pc, #32]	; (40040c <afec_get_config_defaults+0x2c>)
  4003ea:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  4003ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  4003f0:	60c3      	str	r3, [r0, #12]
		cfg->tracktim = 2;
  4003f2:	2302      	movs	r3, #2
  4003f4:	7403      	strb	r3, [r0, #16]
		cfg->transfer = 1;
  4003f6:	2301      	movs	r3, #1
  4003f8:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  4003fa:	7483      	strb	r3, [r0, #18]
		cfg->useq = false;
  4003fc:	74c2      	strb	r2, [r0, #19]
		cfg->tag = true;
  4003fe:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  400400:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  400402:	7583      	strb	r3, [r0, #22]
  400404:	4770      	bx	lr
  400406:	bf00      	nop
  400408:	11e1a300 	.word	0x11e1a300
  40040c:	005b8d80 	.word	0x005b8d80

00400410 <afec_ch_get_config_defaults>:
	cfg->diff = false;
  400410:	2300      	movs	r3, #0
  400412:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  400414:	2301      	movs	r3, #1
  400416:	7043      	strb	r3, [r0, #1]
  400418:	4770      	bx	lr

0040041a <afec_temp_sensor_get_config_defaults>:
	cfg->rctc = false;
  40041a:	2300      	movs	r3, #0
  40041c:	7003      	strb	r3, [r0, #0]
	cfg->mode= AFEC_TEMP_CMP_MODE_2;
  40041e:	2320      	movs	r3, #32
  400420:	7043      	strb	r3, [r0, #1]
	cfg->low_threshold= 0xFF;
  400422:	23ff      	movs	r3, #255	; 0xff
  400424:	8043      	strh	r3, [r0, #2]
	cfg->high_threshold= 0xFFF;
  400426:	f640 73ff 	movw	r3, #4095	; 0xfff
  40042a:	8083      	strh	r3, [r0, #4]
  40042c:	4770      	bx	lr
	...

00400430 <afec_init>:
	return afec->AFEC_ISR;
  400430:	6b02      	ldr	r2, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  400432:	f012 7280 	ands.w	r2, r2, #16777216	; 0x1000000
  400436:	d001      	beq.n	40043c <afec_init+0xc>
		return STATUS_ERR_BUSY;
  400438:	2019      	movs	r0, #25
  40043a:	4770      	bx	lr
{
  40043c:	b410      	push	{r4}
	afec->AFEC_CR = AFEC_CR_SWRST;
  40043e:	2301      	movs	r3, #1
  400440:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400442:	7ccb      	ldrb	r3, [r1, #19]
  400444:	2b00      	cmp	r3, #0
  400446:	bf18      	it	ne
  400448:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  40044c:	684b      	ldr	r3, [r1, #4]
  40044e:	688c      	ldr	r4, [r1, #8]
  400450:	fbb3 f3f4 	udiv	r3, r3, r4
  400454:	3b01      	subs	r3, #1
  400456:	021b      	lsls	r3, r3, #8
  400458:	b29b      	uxth	r3, r3
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40045a:	68cc      	ldr	r4, [r1, #12]
  40045c:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  400460:	4323      	orrs	r3, r4
			AFEC_MR_TRACKTIM(config->tracktim) |
  400462:	7c0c      	ldrb	r4, [r1, #16]
  400464:	0624      	lsls	r4, r4, #24
  400466:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40046a:	4323      	orrs	r3, r4
			AFEC_MR_TRANSFER(config->transfer) |
  40046c:	7c4c      	ldrb	r4, [r1, #17]
  40046e:	0724      	lsls	r4, r4, #28
  400470:	f004 5440 	and.w	r4, r4, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400474:	4323      	orrs	r3, r4
  400476:	4313      	orrs	r3, r2
	afec->AFEC_MR = reg;
  400478:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  40047a:	7d0b      	ldrb	r3, [r1, #20]
  40047c:	2b00      	cmp	r3, #0
  40047e:	bf14      	ite	ne
  400480:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  400484:	2300      	moveq	r3, #0
  400486:	680a      	ldr	r2, [r1, #0]
  400488:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  40048a:	7d4a      	ldrb	r2, [r1, #21]
  40048c:	2a00      	cmp	r2, #0
  40048e:	bf14      	ite	ne
  400490:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  400494:	2200      	moveq	r2, #0
			(config->resolution) |
  400496:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400498:	6083      	str	r3, [r0, #8]
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  40049a:	7d8b      	ldrb	r3, [r1, #22]
  40049c:	021b      	lsls	r3, r3, #8
  40049e:	f403 7340 	and.w	r3, r3, #768	; 0x300
  4004a2:	f043 030c 	orr.w	r3, r3, #12
  4004a6:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  4004aa:	4b0f      	ldr	r3, [pc, #60]	; (4004e8 <afec_init+0xb8>)
  4004ac:	4298      	cmp	r0, r3
  4004ae:	d006      	beq.n	4004be <afec_init+0x8e>
	if(afec == AFEC1) {
  4004b0:	4b0e      	ldr	r3, [pc, #56]	; (4004ec <afec_init+0xbc>)
  4004b2:	4298      	cmp	r0, r3
  4004b4:	d00d      	beq.n	4004d2 <afec_init+0xa2>
	return STATUS_OK;
  4004b6:	2000      	movs	r0, #0
}
  4004b8:	f85d 4b04 	ldr.w	r4, [sp], #4
  4004bc:	4770      	bx	lr
  4004be:	4b0c      	ldr	r3, [pc, #48]	; (4004f0 <afec_init+0xc0>)
  4004c0:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[0][i] = 0;
  4004c4:	2200      	movs	r2, #0
  4004c6:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  4004ca:	428b      	cmp	r3, r1
  4004cc:	d1fb      	bne.n	4004c6 <afec_init+0x96>
	return STATUS_OK;
  4004ce:	2000      	movs	r0, #0
  4004d0:	e7f2      	b.n	4004b8 <afec_init+0x88>
  4004d2:	4b08      	ldr	r3, [pc, #32]	; (4004f4 <afec_init+0xc4>)
  4004d4:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[1][i] = 0;
  4004d8:	2200      	movs	r2, #0
  4004da:	f843 2b04 	str.w	r2, [r3], #4
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  4004de:	428b      	cmp	r3, r1
  4004e0:	d1fb      	bne.n	4004da <afec_init+0xaa>
	return STATUS_OK;
  4004e2:	2000      	movs	r0, #0
  4004e4:	e7e8      	b.n	4004b8 <afec_init+0x88>
  4004e6:	bf00      	nop
  4004e8:	4003c000 	.word	0x4003c000
  4004ec:	40064000 	.word	0x40064000
  4004f0:	2043b440 	.word	0x2043b440
  4004f4:	2043b484 	.word	0x2043b484

004004f8 <afec_enable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  4004f8:	4b0c      	ldr	r3, [pc, #48]	; (40052c <afec_enable_interrupt+0x34>)
  4004fa:	4299      	cmp	r1, r3
  4004fc:	d007      	beq.n	40050e <afec_enable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  4004fe:	290b      	cmp	r1, #11
  400500:	d80b      	bhi.n	40051a <afec_enable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  400502:	d006      	beq.n	400512 <afec_enable_interrupt+0x1a>
			afec->AFEC_IER = 1 << interrupt_source;
  400504:	2301      	movs	r3, #1
  400506:	fa03 f101 	lsl.w	r1, r3, r1
  40050a:	6241      	str	r1, [r0, #36]	; 0x24
  40050c:	4770      	bx	lr
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  40050e:	6243      	str	r3, [r0, #36]	; 0x24
		return;
  400510:	4770      	bx	lr
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  400512:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400516:	6243      	str	r3, [r0, #36]	; 0x24
  400518:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  40051a:	290e      	cmp	r1, #14
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  40051c:	bf94      	ite	ls
  40051e:	310c      	addls	r1, #12
				+ AFEC_INTERRUPT_GAP2);
  400520:	310f      	addhi	r1, #15
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  400522:	2301      	movs	r3, #1
  400524:	fa03 f101 	lsl.w	r1, r3, r1
  400528:	6241      	str	r1, [r0, #36]	; 0x24
  40052a:	4770      	bx	lr
  40052c:	47000fff 	.word	0x47000fff

00400530 <afec_set_callback>:
{
  400530:	b538      	push	{r3, r4, r5, lr}
	if (afec == AFEC1) {
  400532:	4c11      	ldr	r4, [pc, #68]	; (400578 <afec_set_callback+0x48>)
  400534:	42a0      	cmp	r0, r4
	afec_callback_pointer[i][source] = callback;
  400536:	bf0c      	ite	eq
  400538:	2410      	moveq	r4, #16
  40053a:	2400      	movne	r4, #0
  40053c:	440c      	add	r4, r1
  40053e:	4d0f      	ldr	r5, [pc, #60]	; (40057c <afec_set_callback+0x4c>)
  400540:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
	if (!i) {
  400544:	d10a      	bne.n	40055c <afec_set_callback+0x2c>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400546:	4a0e      	ldr	r2, [pc, #56]	; (400580 <afec_set_callback+0x50>)
  400548:	f44f 7480 	mov.w	r4, #256	; 0x100
  40054c:	f8c2 4184 	str.w	r4, [r2, #388]	; 0x184
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400550:	015b      	lsls	r3, r3, #5
  400552:	b2db      	uxtb	r3, r3
  400554:	f882 3328 	strb.w	r3, [r2, #808]	; 0x328
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400558:	6054      	str	r4, [r2, #4]
  40055a:	e009      	b.n	400570 <afec_set_callback+0x40>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40055c:	4a08      	ldr	r2, [pc, #32]	; (400580 <afec_set_callback+0x50>)
  40055e:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
  400562:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400566:	015b      	lsls	r3, r3, #5
  400568:	b2db      	uxtb	r3, r3
  40056a:	f882 331d 	strb.w	r3, [r2, #797]	; 0x31d
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40056e:	6014      	str	r4, [r2, #0]
	afec_enable_interrupt(afec, source);
  400570:	4b04      	ldr	r3, [pc, #16]	; (400584 <afec_set_callback+0x54>)
  400572:	4798      	blx	r3
  400574:	bd38      	pop	{r3, r4, r5, pc}
  400576:	bf00      	nop
  400578:	40064000 	.word	0x40064000
  40057c:	2043b444 	.word	0x2043b444
  400580:	e000e100 	.word	0xe000e100
  400584:	004004f9 	.word	0x004004f9

00400588 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  400588:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  40058a:	4802      	ldr	r0, [pc, #8]	; (400594 <AFEC0_Handler+0xc>)
  40058c:	4b02      	ldr	r3, [pc, #8]	; (400598 <AFEC0_Handler+0x10>)
  40058e:	4798      	blx	r3
  400590:	bd08      	pop	{r3, pc}
  400592:	bf00      	nop
  400594:	4003c000 	.word	0x4003c000
  400598:	00400315 	.word	0x00400315

0040059c <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  40059c:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  40059e:	4802      	ldr	r0, [pc, #8]	; (4005a8 <AFEC1_Handler+0xc>)
  4005a0:	4b02      	ldr	r3, [pc, #8]	; (4005ac <AFEC1_Handler+0x10>)
  4005a2:	4798      	blx	r3
  4005a4:	bd08      	pop	{r3, pc}
  4005a6:	bf00      	nop
  4005a8:	40064000 	.word	0x40064000
  4005ac:	00400315 	.word	0x00400315

004005b0 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  4005b0:	b500      	push	{lr}
  4005b2:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  4005b4:	4b13      	ldr	r3, [pc, #76]	; (400604 <afec_enable+0x54>)
  4005b6:	4298      	cmp	r0, r3
  4005b8:	bf0c      	ite	eq
  4005ba:	2028      	moveq	r0, #40	; 0x28
  4005bc:	201d      	movne	r0, #29
  4005be:	4b12      	ldr	r3, [pc, #72]	; (400608 <afec_enable+0x58>)
  4005c0:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  4005c2:	4b12      	ldr	r3, [pc, #72]	; (40060c <afec_enable+0x5c>)
  4005c4:	789b      	ldrb	r3, [r3, #2]
  4005c6:	2bff      	cmp	r3, #255	; 0xff
  4005c8:	d01a      	beq.n	400600 <afec_enable+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4005ca:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4005ce:	fab3 f383 	clz	r3, r3
  4005d2:	095b      	lsrs	r3, r3, #5
  4005d4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4005d6:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4005d8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4005dc:	2200      	movs	r2, #0
  4005de:	4b0c      	ldr	r3, [pc, #48]	; (400610 <afec_enable+0x60>)
  4005e0:	701a      	strb	r2, [r3, #0]
	return flags;
  4005e2:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  4005e4:	4a09      	ldr	r2, [pc, #36]	; (40060c <afec_enable+0x5c>)
  4005e6:	7893      	ldrb	r3, [r2, #2]
  4005e8:	3301      	adds	r3, #1
  4005ea:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4005ec:	b129      	cbz	r1, 4005fa <afec_enable+0x4a>
		cpu_irq_enable();
  4005ee:	2201      	movs	r2, #1
  4005f0:	4b07      	ldr	r3, [pc, #28]	; (400610 <afec_enable+0x60>)
  4005f2:	701a      	strb	r2, [r3, #0]
  4005f4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4005f8:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  4005fa:	b003      	add	sp, #12
  4005fc:	f85d fb04 	ldr.w	pc, [sp], #4
  400600:	e7fe      	b.n	400600 <afec_enable+0x50>
  400602:	bf00      	nop
  400604:	40064000 	.word	0x40064000
  400608:	00400e49 	.word	0x00400e49
  40060c:	2043b430 	.word	0x2043b430
  400610:	2040000a 	.word	0x2040000a

00400614 <dacc_reset>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_reset(Dacc *p_dacc)
{
	p_dacc->DACC_CR = DACC_CR_SWRST;
  400614:	2301      	movs	r3, #1
  400616:	6003      	str	r3, [r0, #0]
  400618:	4770      	bx	lr

0040061a <dacc_get_interrupt_status>:
 *
 * \return The interrupt status.
 */
uint32_t dacc_get_interrupt_status(Dacc *p_dacc)
{
	return p_dacc->DACC_ISR;
  40061a:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
  40061c:	4770      	bx	lr

0040061e <dacc_write_conversion_data>:
 * \param ul_data The data to be transferred to analog value. 
 * \param channel The channel to convert the data ul_data
 */
void dacc_write_conversion_data(Dacc *p_dacc, uint32_t ul_data, uint32_t channel)
{
	p_dacc->DACC_CDR[channel] = ul_data;
  40061e:	3206      	adds	r2, #6
  400620:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  400624:	6051      	str	r1, [r2, #4]
  400626:	4770      	bx	lr

00400628 <dacc_enable_channel>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
  400628:	2901      	cmp	r1, #1
  40062a:	d901      	bls.n	400630 <dacc_enable_channel+0x8>
		return DACC_RC_INVALID_PARAM;
  40062c:	2001      	movs	r0, #1

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
	return DACC_RC_OK;
}
  40062e:	4770      	bx	lr
	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
  400630:	2301      	movs	r3, #1
  400632:	fa03 f101 	lsl.w	r1, r3, r1
  400636:	6101      	str	r1, [r0, #16]
	return DACC_RC_OK;
  400638:	2000      	movs	r0, #0
  40063a:	4770      	bx	lr

0040063c <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  40063c:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40063e:	0189      	lsls	r1, r1, #6
  400640:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400642:	2402      	movs	r4, #2
  400644:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400646:	f04f 31ff 	mov.w	r1, #4294967295
  40064a:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  40064c:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  40064e:	605a      	str	r2, [r3, #4]
}
  400650:	f85d 4b04 	ldr.w	r4, [sp], #4
  400654:	4770      	bx	lr

00400656 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400656:	0189      	lsls	r1, r1, #6
  400658:	2305      	movs	r3, #5
  40065a:	5043      	str	r3, [r0, r1]
  40065c:	4770      	bx	lr

0040065e <tc_write_ra>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RA = ul_value;
  40065e:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  400662:	614a      	str	r2, [r1, #20]
  400664:	4770      	bx	lr

00400666 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400666:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  40066a:	61ca      	str	r2, [r1, #28]
  40066c:	4770      	bx	lr

0040066e <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40066e:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  400672:	6a08      	ldr	r0, [r1, #32]
}
  400674:	4770      	bx	lr

00400676 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400676:	b4f0      	push	{r4, r5, r6, r7}
  400678:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40067a:	2402      	movs	r4, #2
  40067c:	9401      	str	r4, [sp, #4]
  40067e:	2408      	movs	r4, #8
  400680:	9402      	str	r4, [sp, #8]
  400682:	2420      	movs	r4, #32
  400684:	9403      	str	r4, [sp, #12]
  400686:	2480      	movs	r4, #128	; 0x80
  400688:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  40068a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40068c:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40068e:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  400690:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  400694:	d814      	bhi.n	4006c0 <tc_find_mck_divisor+0x4a>
  400696:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400698:	42a0      	cmp	r0, r4
  40069a:	d217      	bcs.n	4006cc <tc_find_mck_divisor+0x56>
  40069c:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  40069e:	af01      	add	r7, sp, #4
  4006a0:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  4006a4:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  4006a8:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  4006aa:	4284      	cmp	r4, r0
  4006ac:	d30a      	bcc.n	4006c4 <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  4006ae:	4286      	cmp	r6, r0
  4006b0:	d90d      	bls.n	4006ce <tc_find_mck_divisor+0x58>
			ul_index++) {
  4006b2:	3501      	adds	r5, #1
	for (ul_index = 0;
  4006b4:	2d05      	cmp	r5, #5
  4006b6:	d1f3      	bne.n	4006a0 <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  4006b8:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  4006ba:	b006      	add	sp, #24
  4006bc:	bcf0      	pop	{r4, r5, r6, r7}
  4006be:	4770      	bx	lr
			return 0;
  4006c0:	2000      	movs	r0, #0
  4006c2:	e7fa      	b.n	4006ba <tc_find_mck_divisor+0x44>
  4006c4:	2000      	movs	r0, #0
  4006c6:	e7f8      	b.n	4006ba <tc_find_mck_divisor+0x44>
	return 1;
  4006c8:	2001      	movs	r0, #1
  4006ca:	e7f6      	b.n	4006ba <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  4006cc:	2500      	movs	r5, #0
	if (p_uldiv) {
  4006ce:	b12a      	cbz	r2, 4006dc <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  4006d0:	a906      	add	r1, sp, #24
  4006d2:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  4006d6:	f851 1c14 	ldr.w	r1, [r1, #-20]
  4006da:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  4006dc:	2b00      	cmp	r3, #0
  4006de:	d0f3      	beq.n	4006c8 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  4006e0:	601d      	str	r5, [r3, #0]
	return 1;
  4006e2:	2001      	movs	r0, #1
  4006e4:	e7e9      	b.n	4006ba <tc_find_mck_divisor+0x44>

004006e6 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4006e6:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4006e8:	010b      	lsls	r3, r1, #4
  4006ea:	4293      	cmp	r3, r2
  4006ec:	d914      	bls.n	400718 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4006ee:	00c9      	lsls	r1, r1, #3
  4006f0:	084b      	lsrs	r3, r1, #1
  4006f2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  4006f6:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  4006fa:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4006fc:	1e5c      	subs	r4, r3, #1
  4006fe:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400702:	428c      	cmp	r4, r1
  400704:	d901      	bls.n	40070a <usart_set_async_baudrate+0x24>
		return 1;
  400706:	2001      	movs	r0, #1
  400708:	e017      	b.n	40073a <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  40070a:	6841      	ldr	r1, [r0, #4]
  40070c:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400710:	6041      	str	r1, [r0, #4]
  400712:	e00c      	b.n	40072e <usart_set_async_baudrate+0x48>
		return 1;
  400714:	2001      	movs	r0, #1
  400716:	e010      	b.n	40073a <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400718:	0859      	lsrs	r1, r3, #1
  40071a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  40071e:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  400722:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400724:	1e5c      	subs	r4, r3, #1
  400726:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  40072a:	428c      	cmp	r4, r1
  40072c:	d8f2      	bhi.n	400714 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  40072e:	0412      	lsls	r2, r2, #16
  400730:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400734:	431a      	orrs	r2, r3
  400736:	6202      	str	r2, [r0, #32]

	return 0;
  400738:	2000      	movs	r0, #0
}
  40073a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40073e:	4770      	bx	lr

00400740 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400740:	4b08      	ldr	r3, [pc, #32]	; (400764 <usart_reset+0x24>)
  400742:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  400746:	2300      	movs	r3, #0
  400748:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  40074a:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  40074c:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40074e:	2388      	movs	r3, #136	; 0x88
  400750:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400752:	2324      	movs	r3, #36	; 0x24
  400754:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  400756:	f44f 7380 	mov.w	r3, #256	; 0x100
  40075a:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  40075c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400760:	6003      	str	r3, [r0, #0]
  400762:	4770      	bx	lr
  400764:	55534100 	.word	0x55534100

00400768 <usart_init_rs232>:
{
  400768:	b570      	push	{r4, r5, r6, lr}
  40076a:	4605      	mov	r5, r0
  40076c:	460c      	mov	r4, r1
  40076e:	4616      	mov	r6, r2
	usart_reset(p_usart);
  400770:	4b0f      	ldr	r3, [pc, #60]	; (4007b0 <usart_init_rs232+0x48>)
  400772:	4798      	blx	r3
	ul_reg_val = 0;
  400774:	2200      	movs	r2, #0
  400776:	4b0f      	ldr	r3, [pc, #60]	; (4007b4 <usart_init_rs232+0x4c>)
  400778:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  40077a:	b1a4      	cbz	r4, 4007a6 <usart_init_rs232+0x3e>
  40077c:	4632      	mov	r2, r6
  40077e:	6821      	ldr	r1, [r4, #0]
  400780:	4628      	mov	r0, r5
  400782:	4b0d      	ldr	r3, [pc, #52]	; (4007b8 <usart_init_rs232+0x50>)
  400784:	4798      	blx	r3
  400786:	4602      	mov	r2, r0
  400788:	b978      	cbnz	r0, 4007aa <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40078a:	6863      	ldr	r3, [r4, #4]
  40078c:	68a1      	ldr	r1, [r4, #8]
  40078e:	430b      	orrs	r3, r1
  400790:	6921      	ldr	r1, [r4, #16]
  400792:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400794:	68e1      	ldr	r1, [r4, #12]
  400796:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400798:	4906      	ldr	r1, [pc, #24]	; (4007b4 <usart_init_rs232+0x4c>)
  40079a:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  40079c:	6869      	ldr	r1, [r5, #4]
  40079e:	430b      	orrs	r3, r1
  4007a0:	606b      	str	r3, [r5, #4]
}
  4007a2:	4610      	mov	r0, r2
  4007a4:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  4007a6:	2201      	movs	r2, #1
  4007a8:	e7fb      	b.n	4007a2 <usart_init_rs232+0x3a>
  4007aa:	2201      	movs	r2, #1
  4007ac:	e7f9      	b.n	4007a2 <usart_init_rs232+0x3a>
  4007ae:	bf00      	nop
  4007b0:	00400741 	.word	0x00400741
  4007b4:	204009f4 	.word	0x204009f4
  4007b8:	004006e7 	.word	0x004006e7

004007bc <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  4007bc:	2340      	movs	r3, #64	; 0x40
  4007be:	6003      	str	r3, [r0, #0]
  4007c0:	4770      	bx	lr

004007c2 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  4007c2:	2310      	movs	r3, #16
  4007c4:	6003      	str	r3, [r0, #0]
  4007c6:	4770      	bx	lr

004007c8 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4007c8:	6943      	ldr	r3, [r0, #20]
  4007ca:	f013 0f02 	tst.w	r3, #2
  4007ce:	d004      	beq.n	4007da <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  4007d0:	f3c1 0108 	ubfx	r1, r1, #0, #9
  4007d4:	61c1      	str	r1, [r0, #28]
	return 0;
  4007d6:	2000      	movs	r0, #0
  4007d8:	4770      	bx	lr
		return 1;
  4007da:	2001      	movs	r0, #1
}
  4007dc:	4770      	bx	lr

004007de <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4007de:	6943      	ldr	r3, [r0, #20]
  4007e0:	f013 0f01 	tst.w	r3, #1
  4007e4:	d005      	beq.n	4007f2 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4007e6:	6983      	ldr	r3, [r0, #24]
  4007e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4007ec:	600b      	str	r3, [r1, #0]
	return 0;
  4007ee:	2000      	movs	r0, #0
  4007f0:	4770      	bx	lr
		return 1;
  4007f2:	2001      	movs	r0, #1
}
  4007f4:	4770      	bx	lr
	...

004007f8 <usart_serial_write_packet>:
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
  4007f8:	2a00      	cmp	r2, #0
  4007fa:	d054      	beq.n	4008a6 <usart_serial_write_packet+0xae>
{
  4007fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400800:	4692      	mov	sl, r2
  400802:	4606      	mov	r6, r0
  400804:	460f      	mov	r7, r1
  400806:	448a      	add	sl, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400808:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 4008c4 <usart_serial_write_packet+0xcc>
		while (uart_write((Uart*)p_usart, c)!=0);
  40080c:	4d27      	ldr	r5, [pc, #156]	; (4008ac <usart_serial_write_packet+0xb4>)
		return 1;
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40080e:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 4008c8 <usart_serial_write_packet+0xd0>
  400812:	e006      	b.n	400822 <usart_serial_write_packet+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  400814:	4621      	mov	r1, r4
  400816:	4640      	mov	r0, r8
  400818:	47a8      	blx	r5
  40081a:	2800      	cmp	r0, #0
  40081c:	d1fa      	bne.n	400814 <usart_serial_write_packet+0x1c>
	while (len) {
  40081e:	45ba      	cmp	sl, r7
  400820:	d03e      	beq.n	4008a0 <usart_serial_write_packet+0xa8>
		usart_serial_putchar(usart, *data);
  400822:	f817 4b01 	ldrb.w	r4, [r7], #1
	if (UART0 == (Uart*)p_usart) {
  400826:	4546      	cmp	r6, r8
  400828:	d0f4      	beq.n	400814 <usart_serial_write_packet+0x1c>
	if (UART1 == (Uart*)p_usart) {
  40082a:	454e      	cmp	r6, r9
  40082c:	d016      	beq.n	40085c <usart_serial_write_packet+0x64>
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  40082e:	4b20      	ldr	r3, [pc, #128]	; (4008b0 <usart_serial_write_packet+0xb8>)
  400830:	429e      	cmp	r6, r3
  400832:	d019      	beq.n	400868 <usart_serial_write_packet+0x70>
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  400834:	4b1f      	ldr	r3, [pc, #124]	; (4008b4 <usart_serial_write_packet+0xbc>)
  400836:	429e      	cmp	r6, r3
  400838:	d01c      	beq.n	400874 <usart_serial_write_packet+0x7c>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40083a:	4b1f      	ldr	r3, [pc, #124]	; (4008b8 <usart_serial_write_packet+0xc0>)
  40083c:	429e      	cmp	r6, r3
  40083e:	d01f      	beq.n	400880 <usart_serial_write_packet+0x88>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400840:	4b1e      	ldr	r3, [pc, #120]	; (4008bc <usart_serial_write_packet+0xc4>)
  400842:	429e      	cmp	r6, r3
  400844:	d024      	beq.n	400890 <usart_serial_write_packet+0x98>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  400846:	4b1e      	ldr	r3, [pc, #120]	; (4008c0 <usart_serial_write_packet+0xc8>)
  400848:	429e      	cmp	r6, r3
  40084a:	d1e8      	bne.n	40081e <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  40084c:	f8df b07c 	ldr.w	fp, [pc, #124]	; 4008cc <usart_serial_write_packet+0xd4>
  400850:	4621      	mov	r1, r4
  400852:	481b      	ldr	r0, [pc, #108]	; (4008c0 <usart_serial_write_packet+0xc8>)
  400854:	47d8      	blx	fp
  400856:	2800      	cmp	r0, #0
  400858:	d1fa      	bne.n	400850 <usart_serial_write_packet+0x58>
  40085a:	e7e0      	b.n	40081e <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  40085c:	4621      	mov	r1, r4
  40085e:	4648      	mov	r0, r9
  400860:	47a8      	blx	r5
  400862:	2800      	cmp	r0, #0
  400864:	d1fa      	bne.n	40085c <usart_serial_write_packet+0x64>
  400866:	e7da      	b.n	40081e <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  400868:	4621      	mov	r1, r4
  40086a:	4811      	ldr	r0, [pc, #68]	; (4008b0 <usart_serial_write_packet+0xb8>)
  40086c:	47a8      	blx	r5
  40086e:	2800      	cmp	r0, #0
  400870:	d1fa      	bne.n	400868 <usart_serial_write_packet+0x70>
  400872:	e7d4      	b.n	40081e <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  400874:	4621      	mov	r1, r4
  400876:	480f      	ldr	r0, [pc, #60]	; (4008b4 <usart_serial_write_packet+0xbc>)
  400878:	47a8      	blx	r5
  40087a:	2800      	cmp	r0, #0
  40087c:	d1fa      	bne.n	400874 <usart_serial_write_packet+0x7c>
  40087e:	e7ce      	b.n	40081e <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  400880:	f8df b048 	ldr.w	fp, [pc, #72]	; 4008cc <usart_serial_write_packet+0xd4>
  400884:	4621      	mov	r1, r4
  400886:	480c      	ldr	r0, [pc, #48]	; (4008b8 <usart_serial_write_packet+0xc0>)
  400888:	47d8      	blx	fp
  40088a:	2800      	cmp	r0, #0
  40088c:	d1fa      	bne.n	400884 <usart_serial_write_packet+0x8c>
  40088e:	e7c6      	b.n	40081e <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  400890:	f8df b038 	ldr.w	fp, [pc, #56]	; 4008cc <usart_serial_write_packet+0xd4>
  400894:	4621      	mov	r1, r4
  400896:	4809      	ldr	r0, [pc, #36]	; (4008bc <usart_serial_write_packet+0xc4>)
  400898:	47d8      	blx	fp
  40089a:	2800      	cmp	r0, #0
  40089c:	d1fa      	bne.n	400894 <usart_serial_write_packet+0x9c>
  40089e:	e7be      	b.n	40081e <usart_serial_write_packet+0x26>
		len--;
		data++;
	}
	return STATUS_OK;
}
  4008a0:	2000      	movs	r0, #0
  4008a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4008a6:	2000      	movs	r0, #0
  4008a8:	4770      	bx	lr
  4008aa:	bf00      	nop
  4008ac:	004008d1 	.word	0x004008d1
  4008b0:	400e1a00 	.word	0x400e1a00
  4008b4:	400e1c00 	.word	0x400e1c00
  4008b8:	40024000 	.word	0x40024000
  4008bc:	40028000 	.word	0x40028000
  4008c0:	4002c000 	.word	0x4002c000
  4008c4:	400e0800 	.word	0x400e0800
  4008c8:	400e0a00 	.word	0x400e0a00
  4008cc:	004007c9 	.word	0x004007c9

004008d0 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4008d0:	6943      	ldr	r3, [r0, #20]
  4008d2:	f013 0f02 	tst.w	r3, #2
  4008d6:	d002      	beq.n	4008de <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4008d8:	61c1      	str	r1, [r0, #28]
	return 0;
  4008da:	2000      	movs	r0, #0
  4008dc:	4770      	bx	lr
		return 1;
  4008de:	2001      	movs	r0, #1
}
  4008e0:	4770      	bx	lr
	...

004008e4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4008e4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4008e6:	4810      	ldr	r0, [pc, #64]	; (400928 <sysclk_init+0x44>)
  4008e8:	4b10      	ldr	r3, [pc, #64]	; (40092c <sysclk_init+0x48>)
  4008ea:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4008ec:	213e      	movs	r1, #62	; 0x3e
  4008ee:	2000      	movs	r0, #0
  4008f0:	4b0f      	ldr	r3, [pc, #60]	; (400930 <sysclk_init+0x4c>)
  4008f2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4008f4:	4c0f      	ldr	r4, [pc, #60]	; (400934 <sysclk_init+0x50>)
  4008f6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4008f8:	2800      	cmp	r0, #0
  4008fa:	d0fc      	beq.n	4008f6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4008fc:	4b0e      	ldr	r3, [pc, #56]	; (400938 <sysclk_init+0x54>)
  4008fe:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400900:	4a0e      	ldr	r2, [pc, #56]	; (40093c <sysclk_init+0x58>)
  400902:	4b0f      	ldr	r3, [pc, #60]	; (400940 <sysclk_init+0x5c>)
  400904:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400906:	4c0f      	ldr	r4, [pc, #60]	; (400944 <sysclk_init+0x60>)
  400908:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40090a:	2800      	cmp	r0, #0
  40090c:	d0fc      	beq.n	400908 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  40090e:	2002      	movs	r0, #2
  400910:	4b0d      	ldr	r3, [pc, #52]	; (400948 <sysclk_init+0x64>)
  400912:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400914:	2000      	movs	r0, #0
  400916:	4b0d      	ldr	r3, [pc, #52]	; (40094c <sysclk_init+0x68>)
  400918:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40091a:	4b0d      	ldr	r3, [pc, #52]	; (400950 <sysclk_init+0x6c>)
  40091c:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40091e:	4802      	ldr	r0, [pc, #8]	; (400928 <sysclk_init+0x44>)
  400920:	4b02      	ldr	r3, [pc, #8]	; (40092c <sysclk_init+0x48>)
  400922:	4798      	blx	r3
  400924:	bd10      	pop	{r4, pc}
  400926:	bf00      	nop
  400928:	11e1a300 	.word	0x11e1a300
  40092c:	00401075 	.word	0x00401075
  400930:	00400dc5 	.word	0x00400dc5
  400934:	00400e19 	.word	0x00400e19
  400938:	00400e29 	.word	0x00400e29
  40093c:	20183f01 	.word	0x20183f01
  400940:	400e0600 	.word	0x400e0600
  400944:	00400e39 	.word	0x00400e39
  400948:	00400d29 	.word	0x00400d29
  40094c:	00400d61 	.word	0x00400d61
  400950:	00400f69 	.word	0x00400f69

00400954 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400956:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40095a:	4b5c      	ldr	r3, [pc, #368]	; (400acc <board_init+0x178>)
  40095c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  40095e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400962:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400966:	4b5a      	ldr	r3, [pc, #360]	; (400ad0 <board_init+0x17c>)
  400968:	2200      	movs	r2, #0
  40096a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  40096e:	695a      	ldr	r2, [r3, #20]
  400970:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400974:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  400976:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40097a:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  40097e:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  400982:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400986:	f007 0007 	and.w	r0, r7, #7
  40098a:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40098c:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400990:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400994:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400998:	f3bf 8f4f 	dsb	sy
  40099c:	f04f 34ff 	mov.w	r4, #4294967295
  4009a0:	fa04 fc00 	lsl.w	ip, r4, r0
  4009a4:	fa06 f000 	lsl.w	r0, r6, r0
  4009a8:	fa04 f40e 	lsl.w	r4, r4, lr
  4009ac:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  4009b0:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  4009b2:	463a      	mov	r2, r7
  4009b4:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  4009b6:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  4009ba:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  4009be:	3a01      	subs	r2, #1
  4009c0:	4423      	add	r3, r4
  4009c2:	f1b2 3fff 	cmp.w	r2, #4294967295
  4009c6:	d1f6      	bne.n	4009b6 <board_init+0x62>
        } while(sets--);
  4009c8:	3e01      	subs	r6, #1
  4009ca:	4460      	add	r0, ip
  4009cc:	f1b6 3fff 	cmp.w	r6, #4294967295
  4009d0:	d1ef      	bne.n	4009b2 <board_init+0x5e>
  4009d2:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  4009d6:	4b3e      	ldr	r3, [pc, #248]	; (400ad0 <board_init+0x17c>)
  4009d8:	695a      	ldr	r2, [r3, #20]
  4009da:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  4009de:	615a      	str	r2, [r3, #20]
  4009e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4009e4:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4009e8:	4a3a      	ldr	r2, [pc, #232]	; (400ad4 <board_init+0x180>)
  4009ea:	493b      	ldr	r1, [pc, #236]	; (400ad8 <board_init+0x184>)
  4009ec:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4009ee:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  4009f2:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  4009f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4009f8:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  4009fc:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400a00:	f022 0201 	bic.w	r2, r2, #1
  400a04:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400a08:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400a0c:	f022 0201 	bic.w	r2, r2, #1
  400a10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400a14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400a18:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400a1c:	200a      	movs	r0, #10
  400a1e:	4c2f      	ldr	r4, [pc, #188]	; (400adc <board_init+0x188>)
  400a20:	47a0      	blx	r4
  400a22:	200b      	movs	r0, #11
  400a24:	47a0      	blx	r4
  400a26:	200c      	movs	r0, #12
  400a28:	47a0      	blx	r4
  400a2a:	2010      	movs	r0, #16
  400a2c:	47a0      	blx	r4
  400a2e:	2011      	movs	r0, #17
  400a30:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400a32:	4b2b      	ldr	r3, [pc, #172]	; (400ae0 <board_init+0x18c>)
  400a34:	f44f 7280 	mov.w	r2, #256	; 0x100
  400a38:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400a3a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400a3e:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400a40:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400a44:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400a48:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400a4a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400a4e:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400a50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400a54:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400a56:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400a58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400a5c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400a5e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400a62:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400a64:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400a66:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400a6a:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400a6c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400a70:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400a74:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400a78:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400a7c:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400a7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400a82:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400a84:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400a86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400a8a:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400a8c:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400a90:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400a92:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400a94:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400a98:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400a9a:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400a9c:	4a11      	ldr	r2, [pc, #68]	; (400ae4 <board_init+0x190>)
  400a9e:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400aa2:	f043 0310 	orr.w	r3, r3, #16
  400aa6:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  400aaa:	4b0f      	ldr	r3, [pc, #60]	; (400ae8 <board_init+0x194>)
  400aac:	2210      	movs	r2, #16
  400aae:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400ab0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400ab4:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400ab6:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400ab8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400abc:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400abe:	4311      	orrs	r1, r2
  400ac0:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400ac2:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400ac4:	4311      	orrs	r1, r2
  400ac6:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400ac8:	605a      	str	r2, [r3, #4]
  400aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400acc:	400e1850 	.word	0x400e1850
  400ad0:	e000ed00 	.word	0xe000ed00
  400ad4:	400e0c00 	.word	0x400e0c00
  400ad8:	5a00080c 	.word	0x5a00080c
  400adc:	00400e49 	.word	0x00400e49
  400ae0:	400e1200 	.word	0x400e1200
  400ae4:	40088000 	.word	0x40088000
  400ae8:	400e1000 	.word	0x400e1000

00400aec <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400aec:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400aee:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400af2:	d03a      	beq.n	400b6a <pio_set_peripheral+0x7e>
  400af4:	d813      	bhi.n	400b1e <pio_set_peripheral+0x32>
  400af6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400afa:	d025      	beq.n	400b48 <pio_set_peripheral+0x5c>
  400afc:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400b00:	d10a      	bne.n	400b18 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400b02:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400b04:	4313      	orrs	r3, r2
  400b06:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400b08:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400b0a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400b0c:	400b      	ands	r3, r1
  400b0e:	ea23 0302 	bic.w	r3, r3, r2
  400b12:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400b14:	6042      	str	r2, [r0, #4]
  400b16:	4770      	bx	lr
	switch (ul_type) {
  400b18:	2900      	cmp	r1, #0
  400b1a:	d1fb      	bne.n	400b14 <pio_set_peripheral+0x28>
  400b1c:	4770      	bx	lr
  400b1e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400b22:	d021      	beq.n	400b68 <pio_set_peripheral+0x7c>
  400b24:	d809      	bhi.n	400b3a <pio_set_peripheral+0x4e>
  400b26:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400b2a:	d1f3      	bne.n	400b14 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400b2c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400b2e:	4313      	orrs	r3, r2
  400b30:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400b32:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400b34:	4313      	orrs	r3, r2
  400b36:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400b38:	e7ec      	b.n	400b14 <pio_set_peripheral+0x28>
	switch (ul_type) {
  400b3a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400b3e:	d013      	beq.n	400b68 <pio_set_peripheral+0x7c>
  400b40:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400b44:	d010      	beq.n	400b68 <pio_set_peripheral+0x7c>
  400b46:	e7e5      	b.n	400b14 <pio_set_peripheral+0x28>
{
  400b48:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400b4a:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400b4c:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400b4e:	43d3      	mvns	r3, r2
  400b50:	4021      	ands	r1, r4
  400b52:	461c      	mov	r4, r3
  400b54:	4019      	ands	r1, r3
  400b56:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400b58:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400b5a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400b5c:	400b      	ands	r3, r1
  400b5e:	4023      	ands	r3, r4
  400b60:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400b62:	6042      	str	r2, [r0, #4]
}
  400b64:	f85d 4b04 	ldr.w	r4, [sp], #4
  400b68:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400b6a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400b6c:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400b6e:	400b      	ands	r3, r1
  400b70:	ea23 0302 	bic.w	r3, r3, r2
  400b74:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400b76:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400b78:	4313      	orrs	r3, r2
  400b7a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400b7c:	e7ca      	b.n	400b14 <pio_set_peripheral+0x28>

00400b7e <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400b7e:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400b80:	f012 0f01 	tst.w	r2, #1
  400b84:	d10d      	bne.n	400ba2 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400b86:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400b88:	f012 0f0a 	tst.w	r2, #10
  400b8c:	d00b      	beq.n	400ba6 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  400b8e:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400b90:	f012 0f02 	tst.w	r2, #2
  400b94:	d109      	bne.n	400baa <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400b96:	f012 0f08 	tst.w	r2, #8
  400b9a:	d008      	beq.n	400bae <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400b9c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400ba0:	e005      	b.n	400bae <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  400ba2:	6641      	str	r1, [r0, #100]	; 0x64
  400ba4:	e7f0      	b.n	400b88 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400ba6:	6241      	str	r1, [r0, #36]	; 0x24
  400ba8:	e7f2      	b.n	400b90 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400baa:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400bae:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400bb0:	6001      	str	r1, [r0, #0]
  400bb2:	4770      	bx	lr

00400bb4 <pio_set_output>:
{
  400bb4:	b410      	push	{r4}
  400bb6:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400bb8:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400bba:	b94c      	cbnz	r4, 400bd0 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400bbc:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400bbe:	b14b      	cbz	r3, 400bd4 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400bc0:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400bc2:	b94a      	cbnz	r2, 400bd8 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400bc4:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400bc6:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400bc8:	6001      	str	r1, [r0, #0]
}
  400bca:	f85d 4b04 	ldr.w	r4, [sp], #4
  400bce:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400bd0:	6641      	str	r1, [r0, #100]	; 0x64
  400bd2:	e7f4      	b.n	400bbe <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400bd4:	6541      	str	r1, [r0, #84]	; 0x54
  400bd6:	e7f4      	b.n	400bc2 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400bd8:	6301      	str	r1, [r0, #48]	; 0x30
  400bda:	e7f4      	b.n	400bc6 <pio_set_output+0x12>

00400bdc <pio_configure>:
{
  400bdc:	b570      	push	{r4, r5, r6, lr}
  400bde:	b082      	sub	sp, #8
  400be0:	4605      	mov	r5, r0
  400be2:	4616      	mov	r6, r2
  400be4:	461c      	mov	r4, r3
	switch (ul_type) {
  400be6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400bea:	d014      	beq.n	400c16 <pio_configure+0x3a>
  400bec:	d90a      	bls.n	400c04 <pio_configure+0x28>
  400bee:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400bf2:	d024      	beq.n	400c3e <pio_configure+0x62>
  400bf4:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400bf8:	d021      	beq.n	400c3e <pio_configure+0x62>
  400bfa:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400bfe:	d017      	beq.n	400c30 <pio_configure+0x54>
		return 0;
  400c00:	2000      	movs	r0, #0
  400c02:	e01a      	b.n	400c3a <pio_configure+0x5e>
	switch (ul_type) {
  400c04:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400c08:	d005      	beq.n	400c16 <pio_configure+0x3a>
  400c0a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400c0e:	d002      	beq.n	400c16 <pio_configure+0x3a>
  400c10:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400c14:	d1f4      	bne.n	400c00 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  400c16:	4632      	mov	r2, r6
  400c18:	4628      	mov	r0, r5
  400c1a:	4b11      	ldr	r3, [pc, #68]	; (400c60 <pio_configure+0x84>)
  400c1c:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400c1e:	f014 0f01 	tst.w	r4, #1
  400c22:	d102      	bne.n	400c2a <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  400c24:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  400c26:	2001      	movs	r0, #1
  400c28:	e007      	b.n	400c3a <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  400c2a:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  400c2c:	2001      	movs	r0, #1
  400c2e:	e004      	b.n	400c3a <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  400c30:	461a      	mov	r2, r3
  400c32:	4631      	mov	r1, r6
  400c34:	4b0b      	ldr	r3, [pc, #44]	; (400c64 <pio_configure+0x88>)
  400c36:	4798      	blx	r3
	return 1;
  400c38:	2001      	movs	r0, #1
}
  400c3a:	b002      	add	sp, #8
  400c3c:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400c3e:	f004 0301 	and.w	r3, r4, #1
  400c42:	9300      	str	r3, [sp, #0]
  400c44:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400c48:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400c4c:	bf14      	ite	ne
  400c4e:	2200      	movne	r2, #0
  400c50:	2201      	moveq	r2, #1
  400c52:	4631      	mov	r1, r6
  400c54:	4628      	mov	r0, r5
  400c56:	4c04      	ldr	r4, [pc, #16]	; (400c68 <pio_configure+0x8c>)
  400c58:	47a0      	blx	r4
	return 1;
  400c5a:	2001      	movs	r0, #1
		break;
  400c5c:	e7ed      	b.n	400c3a <pio_configure+0x5e>
  400c5e:	bf00      	nop
  400c60:	00400aed 	.word	0x00400aed
  400c64:	00400b7f 	.word	0x00400b7f
  400c68:	00400bb5 	.word	0x00400bb5

00400c6c <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400c6c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400c6e:	4770      	bx	lr

00400c70 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400c70:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400c72:	4770      	bx	lr

00400c74 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400c78:	4604      	mov	r4, r0
  400c7a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400c7c:	4b0e      	ldr	r3, [pc, #56]	; (400cb8 <pio_handler_process+0x44>)
  400c7e:	4798      	blx	r3
  400c80:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400c82:	4620      	mov	r0, r4
  400c84:	4b0d      	ldr	r3, [pc, #52]	; (400cbc <pio_handler_process+0x48>)
  400c86:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400c88:	4005      	ands	r5, r0
  400c8a:	d013      	beq.n	400cb4 <pio_handler_process+0x40>
  400c8c:	4c0c      	ldr	r4, [pc, #48]	; (400cc0 <pio_handler_process+0x4c>)
  400c8e:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400c92:	e003      	b.n	400c9c <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400c94:	42b4      	cmp	r4, r6
  400c96:	d00d      	beq.n	400cb4 <pio_handler_process+0x40>
  400c98:	3410      	adds	r4, #16
		while (status != 0) {
  400c9a:	b15d      	cbz	r5, 400cb4 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400c9c:	6820      	ldr	r0, [r4, #0]
  400c9e:	4540      	cmp	r0, r8
  400ca0:	d1f8      	bne.n	400c94 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400ca2:	6861      	ldr	r1, [r4, #4]
  400ca4:	4229      	tst	r1, r5
  400ca6:	d0f5      	beq.n	400c94 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400ca8:	68e3      	ldr	r3, [r4, #12]
  400caa:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400cac:	6863      	ldr	r3, [r4, #4]
  400cae:	ea25 0503 	bic.w	r5, r5, r3
  400cb2:	e7ef      	b.n	400c94 <pio_handler_process+0x20>
  400cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400cb8:	00400c6d 	.word	0x00400c6d
  400cbc:	00400c71 	.word	0x00400c71
  400cc0:	204009f8 	.word	0x204009f8

00400cc4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400cc4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400cc6:	210a      	movs	r1, #10
  400cc8:	4801      	ldr	r0, [pc, #4]	; (400cd0 <PIOA_Handler+0xc>)
  400cca:	4b02      	ldr	r3, [pc, #8]	; (400cd4 <PIOA_Handler+0x10>)
  400ccc:	4798      	blx	r3
  400cce:	bd08      	pop	{r3, pc}
  400cd0:	400e0e00 	.word	0x400e0e00
  400cd4:	00400c75 	.word	0x00400c75

00400cd8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400cd8:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400cda:	210b      	movs	r1, #11
  400cdc:	4801      	ldr	r0, [pc, #4]	; (400ce4 <PIOB_Handler+0xc>)
  400cde:	4b02      	ldr	r3, [pc, #8]	; (400ce8 <PIOB_Handler+0x10>)
  400ce0:	4798      	blx	r3
  400ce2:	bd08      	pop	{r3, pc}
  400ce4:	400e1000 	.word	0x400e1000
  400ce8:	00400c75 	.word	0x00400c75

00400cec <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400cec:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400cee:	210c      	movs	r1, #12
  400cf0:	4801      	ldr	r0, [pc, #4]	; (400cf8 <PIOC_Handler+0xc>)
  400cf2:	4b02      	ldr	r3, [pc, #8]	; (400cfc <PIOC_Handler+0x10>)
  400cf4:	4798      	blx	r3
  400cf6:	bd08      	pop	{r3, pc}
  400cf8:	400e1200 	.word	0x400e1200
  400cfc:	00400c75 	.word	0x00400c75

00400d00 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400d00:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400d02:	2110      	movs	r1, #16
  400d04:	4801      	ldr	r0, [pc, #4]	; (400d0c <PIOD_Handler+0xc>)
  400d06:	4b02      	ldr	r3, [pc, #8]	; (400d10 <PIOD_Handler+0x10>)
  400d08:	4798      	blx	r3
  400d0a:	bd08      	pop	{r3, pc}
  400d0c:	400e1400 	.word	0x400e1400
  400d10:	00400c75 	.word	0x00400c75

00400d14 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400d14:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400d16:	2111      	movs	r1, #17
  400d18:	4801      	ldr	r0, [pc, #4]	; (400d20 <PIOE_Handler+0xc>)
  400d1a:	4b02      	ldr	r3, [pc, #8]	; (400d24 <PIOE_Handler+0x10>)
  400d1c:	4798      	blx	r3
  400d1e:	bd08      	pop	{r3, pc}
  400d20:	400e1600 	.word	0x400e1600
  400d24:	00400c75 	.word	0x00400c75

00400d28 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400d28:	2803      	cmp	r0, #3
  400d2a:	d011      	beq.n	400d50 <pmc_mck_set_division+0x28>
  400d2c:	2804      	cmp	r0, #4
  400d2e:	d012      	beq.n	400d56 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400d30:	2802      	cmp	r0, #2
  400d32:	bf0c      	ite	eq
  400d34:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400d38:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400d3a:	4a08      	ldr	r2, [pc, #32]	; (400d5c <pmc_mck_set_division+0x34>)
  400d3c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400d3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400d42:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400d44:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400d46:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400d48:	f013 0f08 	tst.w	r3, #8
  400d4c:	d0fb      	beq.n	400d46 <pmc_mck_set_division+0x1e>
}
  400d4e:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400d50:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400d54:	e7f1      	b.n	400d3a <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400d56:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400d5a:	e7ee      	b.n	400d3a <pmc_mck_set_division+0x12>
  400d5c:	400e0600 	.word	0x400e0600

00400d60 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400d60:	4a17      	ldr	r2, [pc, #92]	; (400dc0 <pmc_switch_mck_to_pllack+0x60>)
  400d62:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400d68:	4318      	orrs	r0, r3
  400d6a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400d6c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400d6e:	f013 0f08 	tst.w	r3, #8
  400d72:	d10a      	bne.n	400d8a <pmc_switch_mck_to_pllack+0x2a>
  400d74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400d78:	4911      	ldr	r1, [pc, #68]	; (400dc0 <pmc_switch_mck_to_pllack+0x60>)
  400d7a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400d7c:	f012 0f08 	tst.w	r2, #8
  400d80:	d103      	bne.n	400d8a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400d82:	3b01      	subs	r3, #1
  400d84:	d1f9      	bne.n	400d7a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400d86:	2001      	movs	r0, #1
  400d88:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400d8a:	4a0d      	ldr	r2, [pc, #52]	; (400dc0 <pmc_switch_mck_to_pllack+0x60>)
  400d8c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400d8e:	f023 0303 	bic.w	r3, r3, #3
  400d92:	f043 0302 	orr.w	r3, r3, #2
  400d96:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400d98:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400d9a:	f013 0f08 	tst.w	r3, #8
  400d9e:	d10a      	bne.n	400db6 <pmc_switch_mck_to_pllack+0x56>
  400da0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400da4:	4906      	ldr	r1, [pc, #24]	; (400dc0 <pmc_switch_mck_to_pllack+0x60>)
  400da6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400da8:	f012 0f08 	tst.w	r2, #8
  400dac:	d105      	bne.n	400dba <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400dae:	3b01      	subs	r3, #1
  400db0:	d1f9      	bne.n	400da6 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400db2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400db4:	4770      	bx	lr
	return 0;
  400db6:	2000      	movs	r0, #0
  400db8:	4770      	bx	lr
  400dba:	2000      	movs	r0, #0
  400dbc:	4770      	bx	lr
  400dbe:	bf00      	nop
  400dc0:	400e0600 	.word	0x400e0600

00400dc4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400dc4:	b9a0      	cbnz	r0, 400df0 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400dc6:	480e      	ldr	r0, [pc, #56]	; (400e00 <pmc_switch_mainck_to_xtal+0x3c>)
  400dc8:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400dca:	0209      	lsls	r1, r1, #8
  400dcc:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400dce:	4a0d      	ldr	r2, [pc, #52]	; (400e04 <pmc_switch_mainck_to_xtal+0x40>)
  400dd0:	401a      	ands	r2, r3
  400dd2:	4b0d      	ldr	r3, [pc, #52]	; (400e08 <pmc_switch_mainck_to_xtal+0x44>)
  400dd4:	4313      	orrs	r3, r2
  400dd6:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400dd8:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400dda:	4602      	mov	r2, r0
  400ddc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400dde:	f013 0f01 	tst.w	r3, #1
  400de2:	d0fb      	beq.n	400ddc <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400de4:	4a06      	ldr	r2, [pc, #24]	; (400e00 <pmc_switch_mainck_to_xtal+0x3c>)
  400de6:	6a11      	ldr	r1, [r2, #32]
  400de8:	4b08      	ldr	r3, [pc, #32]	; (400e0c <pmc_switch_mainck_to_xtal+0x48>)
  400dea:	430b      	orrs	r3, r1
  400dec:	6213      	str	r3, [r2, #32]
  400dee:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400df0:	4903      	ldr	r1, [pc, #12]	; (400e00 <pmc_switch_mainck_to_xtal+0x3c>)
  400df2:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400df4:	4a06      	ldr	r2, [pc, #24]	; (400e10 <pmc_switch_mainck_to_xtal+0x4c>)
  400df6:	401a      	ands	r2, r3
  400df8:	4b06      	ldr	r3, [pc, #24]	; (400e14 <pmc_switch_mainck_to_xtal+0x50>)
  400dfa:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400dfc:	620b      	str	r3, [r1, #32]
  400dfe:	4770      	bx	lr
  400e00:	400e0600 	.word	0x400e0600
  400e04:	ffc8fffc 	.word	0xffc8fffc
  400e08:	00370001 	.word	0x00370001
  400e0c:	01370000 	.word	0x01370000
  400e10:	fec8fffc 	.word	0xfec8fffc
  400e14:	01370002 	.word	0x01370002

00400e18 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400e18:	4b02      	ldr	r3, [pc, #8]	; (400e24 <pmc_osc_is_ready_mainck+0xc>)
  400e1a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400e1c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400e20:	4770      	bx	lr
  400e22:	bf00      	nop
  400e24:	400e0600 	.word	0x400e0600

00400e28 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400e28:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400e2c:	4b01      	ldr	r3, [pc, #4]	; (400e34 <pmc_disable_pllack+0xc>)
  400e2e:	629a      	str	r2, [r3, #40]	; 0x28
  400e30:	4770      	bx	lr
  400e32:	bf00      	nop
  400e34:	400e0600 	.word	0x400e0600

00400e38 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400e38:	4b02      	ldr	r3, [pc, #8]	; (400e44 <pmc_is_locked_pllack+0xc>)
  400e3a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400e3c:	f000 0002 	and.w	r0, r0, #2
  400e40:	4770      	bx	lr
  400e42:	bf00      	nop
  400e44:	400e0600 	.word	0x400e0600

00400e48 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400e48:	283f      	cmp	r0, #63	; 0x3f
  400e4a:	d81e      	bhi.n	400e8a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400e4c:	281f      	cmp	r0, #31
  400e4e:	d80c      	bhi.n	400e6a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400e50:	4b11      	ldr	r3, [pc, #68]	; (400e98 <pmc_enable_periph_clk+0x50>)
  400e52:	699a      	ldr	r2, [r3, #24]
  400e54:	2301      	movs	r3, #1
  400e56:	4083      	lsls	r3, r0
  400e58:	4393      	bics	r3, r2
  400e5a:	d018      	beq.n	400e8e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400e5c:	2301      	movs	r3, #1
  400e5e:	fa03 f000 	lsl.w	r0, r3, r0
  400e62:	4b0d      	ldr	r3, [pc, #52]	; (400e98 <pmc_enable_periph_clk+0x50>)
  400e64:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400e66:	2000      	movs	r0, #0
  400e68:	4770      	bx	lr
		ul_id -= 32;
  400e6a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400e6c:	4b0a      	ldr	r3, [pc, #40]	; (400e98 <pmc_enable_periph_clk+0x50>)
  400e6e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400e72:	2301      	movs	r3, #1
  400e74:	4083      	lsls	r3, r0
  400e76:	4393      	bics	r3, r2
  400e78:	d00b      	beq.n	400e92 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400e7a:	2301      	movs	r3, #1
  400e7c:	fa03 f000 	lsl.w	r0, r3, r0
  400e80:	4b05      	ldr	r3, [pc, #20]	; (400e98 <pmc_enable_periph_clk+0x50>)
  400e82:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400e86:	2000      	movs	r0, #0
  400e88:	4770      	bx	lr
		return 1;
  400e8a:	2001      	movs	r0, #1
  400e8c:	4770      	bx	lr
	return 0;
  400e8e:	2000      	movs	r0, #0
  400e90:	4770      	bx	lr
  400e92:	2000      	movs	r0, #0
}
  400e94:	4770      	bx	lr
  400e96:	bf00      	nop
  400e98:	400e0600 	.word	0x400e0600

00400e9c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400e9c:	e7fe      	b.n	400e9c <Dummy_Handler>
	...

00400ea0 <Reset_Handler>:
{
  400ea0:	b500      	push	{lr}
  400ea2:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400ea4:	4b25      	ldr	r3, [pc, #148]	; (400f3c <Reset_Handler+0x9c>)
  400ea6:	4a26      	ldr	r2, [pc, #152]	; (400f40 <Reset_Handler+0xa0>)
  400ea8:	429a      	cmp	r2, r3
  400eaa:	d010      	beq.n	400ece <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  400eac:	4b25      	ldr	r3, [pc, #148]	; (400f44 <Reset_Handler+0xa4>)
  400eae:	4a23      	ldr	r2, [pc, #140]	; (400f3c <Reset_Handler+0x9c>)
  400eb0:	429a      	cmp	r2, r3
  400eb2:	d20c      	bcs.n	400ece <Reset_Handler+0x2e>
  400eb4:	3b01      	subs	r3, #1
  400eb6:	1a9b      	subs	r3, r3, r2
  400eb8:	f023 0303 	bic.w	r3, r3, #3
  400ebc:	3304      	adds	r3, #4
  400ebe:	4413      	add	r3, r2
  400ec0:	491f      	ldr	r1, [pc, #124]	; (400f40 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  400ec2:	f851 0b04 	ldr.w	r0, [r1], #4
  400ec6:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400eca:	429a      	cmp	r2, r3
  400ecc:	d1f9      	bne.n	400ec2 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  400ece:	4b1e      	ldr	r3, [pc, #120]	; (400f48 <Reset_Handler+0xa8>)
  400ed0:	4a1e      	ldr	r2, [pc, #120]	; (400f4c <Reset_Handler+0xac>)
  400ed2:	429a      	cmp	r2, r3
  400ed4:	d20a      	bcs.n	400eec <Reset_Handler+0x4c>
  400ed6:	3b01      	subs	r3, #1
  400ed8:	1a9b      	subs	r3, r3, r2
  400eda:	f023 0303 	bic.w	r3, r3, #3
  400ede:	3304      	adds	r3, #4
  400ee0:	4413      	add	r3, r2
                *pDest++ = 0;
  400ee2:	2100      	movs	r1, #0
  400ee4:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400ee8:	4293      	cmp	r3, r2
  400eea:	d1fb      	bne.n	400ee4 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400eec:	4a18      	ldr	r2, [pc, #96]	; (400f50 <Reset_Handler+0xb0>)
  400eee:	4b19      	ldr	r3, [pc, #100]	; (400f54 <Reset_Handler+0xb4>)
  400ef0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400ef4:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400ef6:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400efa:	fab3 f383 	clz	r3, r3
  400efe:	095b      	lsrs	r3, r3, #5
  400f00:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400f02:	b672      	cpsid	i
  __ASM volatile ("dmb");
  400f04:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400f08:	2200      	movs	r2, #0
  400f0a:	4b13      	ldr	r3, [pc, #76]	; (400f58 <Reset_Handler+0xb8>)
  400f0c:	701a      	strb	r2, [r3, #0]
	return flags;
  400f0e:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400f10:	4a12      	ldr	r2, [pc, #72]	; (400f5c <Reset_Handler+0xbc>)
  400f12:	6813      	ldr	r3, [r2, #0]
  400f14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400f18:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  400f1a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400f1e:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  400f22:	b129      	cbz	r1, 400f30 <Reset_Handler+0x90>
		cpu_irq_enable();
  400f24:	2201      	movs	r2, #1
  400f26:	4b0c      	ldr	r3, [pc, #48]	; (400f58 <Reset_Handler+0xb8>)
  400f28:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  400f2a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400f2e:	b662      	cpsie	i
        __libc_init_array();
  400f30:	4b0b      	ldr	r3, [pc, #44]	; (400f60 <Reset_Handler+0xc0>)
  400f32:	4798      	blx	r3
        main();
  400f34:	4b0b      	ldr	r3, [pc, #44]	; (400f64 <Reset_Handler+0xc4>)
  400f36:	4798      	blx	r3
  400f38:	e7fe      	b.n	400f38 <Reset_Handler+0x98>
  400f3a:	bf00      	nop
  400f3c:	20400000 	.word	0x20400000
  400f40:	00404840 	.word	0x00404840
  400f44:	204009d8 	.word	0x204009d8
  400f48:	2043b4ec 	.word	0x2043b4ec
  400f4c:	204009d8 	.word	0x204009d8
  400f50:	e000ed00 	.word	0xe000ed00
  400f54:	00400000 	.word	0x00400000
  400f58:	2040000a 	.word	0x2040000a
  400f5c:	e000ed88 	.word	0xe000ed88
  400f60:	004016dd 	.word	0x004016dd
  400f64:	004014f1 	.word	0x004014f1

00400f68 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400f68:	4b3b      	ldr	r3, [pc, #236]	; (401058 <SystemCoreClockUpdate+0xf0>)
  400f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400f6c:	f003 0303 	and.w	r3, r3, #3
  400f70:	2b01      	cmp	r3, #1
  400f72:	d01d      	beq.n	400fb0 <SystemCoreClockUpdate+0x48>
  400f74:	b183      	cbz	r3, 400f98 <SystemCoreClockUpdate+0x30>
  400f76:	2b02      	cmp	r3, #2
  400f78:	d036      	beq.n	400fe8 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400f7a:	4b37      	ldr	r3, [pc, #220]	; (401058 <SystemCoreClockUpdate+0xf0>)
  400f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400f7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400f82:	2b70      	cmp	r3, #112	; 0x70
  400f84:	d05f      	beq.n	401046 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400f86:	4b34      	ldr	r3, [pc, #208]	; (401058 <SystemCoreClockUpdate+0xf0>)
  400f88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400f8a:	4934      	ldr	r1, [pc, #208]	; (40105c <SystemCoreClockUpdate+0xf4>)
  400f8c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400f90:	680b      	ldr	r3, [r1, #0]
  400f92:	40d3      	lsrs	r3, r2
  400f94:	600b      	str	r3, [r1, #0]
  400f96:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400f98:	4b31      	ldr	r3, [pc, #196]	; (401060 <SystemCoreClockUpdate+0xf8>)
  400f9a:	695b      	ldr	r3, [r3, #20]
  400f9c:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400fa0:	bf14      	ite	ne
  400fa2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400fa6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400faa:	4b2c      	ldr	r3, [pc, #176]	; (40105c <SystemCoreClockUpdate+0xf4>)
  400fac:	601a      	str	r2, [r3, #0]
  400fae:	e7e4      	b.n	400f7a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400fb0:	4b29      	ldr	r3, [pc, #164]	; (401058 <SystemCoreClockUpdate+0xf0>)
  400fb2:	6a1b      	ldr	r3, [r3, #32]
  400fb4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400fb8:	d003      	beq.n	400fc2 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400fba:	4a2a      	ldr	r2, [pc, #168]	; (401064 <SystemCoreClockUpdate+0xfc>)
  400fbc:	4b27      	ldr	r3, [pc, #156]	; (40105c <SystemCoreClockUpdate+0xf4>)
  400fbe:	601a      	str	r2, [r3, #0]
  400fc0:	e7db      	b.n	400f7a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400fc2:	4a29      	ldr	r2, [pc, #164]	; (401068 <SystemCoreClockUpdate+0x100>)
  400fc4:	4b25      	ldr	r3, [pc, #148]	; (40105c <SystemCoreClockUpdate+0xf4>)
  400fc6:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400fc8:	4b23      	ldr	r3, [pc, #140]	; (401058 <SystemCoreClockUpdate+0xf0>)
  400fca:	6a1b      	ldr	r3, [r3, #32]
  400fcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400fd0:	2b10      	cmp	r3, #16
  400fd2:	d005      	beq.n	400fe0 <SystemCoreClockUpdate+0x78>
  400fd4:	2b20      	cmp	r3, #32
  400fd6:	d1d0      	bne.n	400f7a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  400fd8:	4a22      	ldr	r2, [pc, #136]	; (401064 <SystemCoreClockUpdate+0xfc>)
  400fda:	4b20      	ldr	r3, [pc, #128]	; (40105c <SystemCoreClockUpdate+0xf4>)
  400fdc:	601a      	str	r2, [r3, #0]
          break;
  400fde:	e7cc      	b.n	400f7a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  400fe0:	4a22      	ldr	r2, [pc, #136]	; (40106c <SystemCoreClockUpdate+0x104>)
  400fe2:	4b1e      	ldr	r3, [pc, #120]	; (40105c <SystemCoreClockUpdate+0xf4>)
  400fe4:	601a      	str	r2, [r3, #0]
          break;
  400fe6:	e7c8      	b.n	400f7a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400fe8:	4b1b      	ldr	r3, [pc, #108]	; (401058 <SystemCoreClockUpdate+0xf0>)
  400fea:	6a1b      	ldr	r3, [r3, #32]
  400fec:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400ff0:	d016      	beq.n	401020 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400ff2:	4a1c      	ldr	r2, [pc, #112]	; (401064 <SystemCoreClockUpdate+0xfc>)
  400ff4:	4b19      	ldr	r3, [pc, #100]	; (40105c <SystemCoreClockUpdate+0xf4>)
  400ff6:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400ff8:	4b17      	ldr	r3, [pc, #92]	; (401058 <SystemCoreClockUpdate+0xf0>)
  400ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400ffc:	f003 0303 	and.w	r3, r3, #3
  401000:	2b02      	cmp	r3, #2
  401002:	d1ba      	bne.n	400f7a <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401004:	4a14      	ldr	r2, [pc, #80]	; (401058 <SystemCoreClockUpdate+0xf0>)
  401006:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401008:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40100a:	4814      	ldr	r0, [pc, #80]	; (40105c <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40100c:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401010:	6803      	ldr	r3, [r0, #0]
  401012:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401016:	b2d2      	uxtb	r2, r2
  401018:	fbb3 f3f2 	udiv	r3, r3, r2
  40101c:	6003      	str	r3, [r0, #0]
  40101e:	e7ac      	b.n	400f7a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401020:	4a11      	ldr	r2, [pc, #68]	; (401068 <SystemCoreClockUpdate+0x100>)
  401022:	4b0e      	ldr	r3, [pc, #56]	; (40105c <SystemCoreClockUpdate+0xf4>)
  401024:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401026:	4b0c      	ldr	r3, [pc, #48]	; (401058 <SystemCoreClockUpdate+0xf0>)
  401028:	6a1b      	ldr	r3, [r3, #32]
  40102a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40102e:	2b10      	cmp	r3, #16
  401030:	d005      	beq.n	40103e <SystemCoreClockUpdate+0xd6>
  401032:	2b20      	cmp	r3, #32
  401034:	d1e0      	bne.n	400ff8 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  401036:	4a0b      	ldr	r2, [pc, #44]	; (401064 <SystemCoreClockUpdate+0xfc>)
  401038:	4b08      	ldr	r3, [pc, #32]	; (40105c <SystemCoreClockUpdate+0xf4>)
  40103a:	601a      	str	r2, [r3, #0]
          break;
  40103c:	e7dc      	b.n	400ff8 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  40103e:	4a0b      	ldr	r2, [pc, #44]	; (40106c <SystemCoreClockUpdate+0x104>)
  401040:	4b06      	ldr	r3, [pc, #24]	; (40105c <SystemCoreClockUpdate+0xf4>)
  401042:	601a      	str	r2, [r3, #0]
          break;
  401044:	e7d8      	b.n	400ff8 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  401046:	4a05      	ldr	r2, [pc, #20]	; (40105c <SystemCoreClockUpdate+0xf4>)
  401048:	6813      	ldr	r3, [r2, #0]
  40104a:	4909      	ldr	r1, [pc, #36]	; (401070 <SystemCoreClockUpdate+0x108>)
  40104c:	fba1 1303 	umull	r1, r3, r1, r3
  401050:	085b      	lsrs	r3, r3, #1
  401052:	6013      	str	r3, [r2, #0]
  401054:	4770      	bx	lr
  401056:	bf00      	nop
  401058:	400e0600 	.word	0x400e0600
  40105c:	2040000c 	.word	0x2040000c
  401060:	400e1810 	.word	0x400e1810
  401064:	00b71b00 	.word	0x00b71b00
  401068:	003d0900 	.word	0x003d0900
  40106c:	007a1200 	.word	0x007a1200
  401070:	aaaaaaab 	.word	0xaaaaaaab

00401074 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401074:	4b16      	ldr	r3, [pc, #88]	; (4010d0 <system_init_flash+0x5c>)
  401076:	4298      	cmp	r0, r3
  401078:	d913      	bls.n	4010a2 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  40107a:	4b16      	ldr	r3, [pc, #88]	; (4010d4 <system_init_flash+0x60>)
  40107c:	4298      	cmp	r0, r3
  40107e:	d915      	bls.n	4010ac <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401080:	4b15      	ldr	r3, [pc, #84]	; (4010d8 <system_init_flash+0x64>)
  401082:	4298      	cmp	r0, r3
  401084:	d916      	bls.n	4010b4 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401086:	4b15      	ldr	r3, [pc, #84]	; (4010dc <system_init_flash+0x68>)
  401088:	4298      	cmp	r0, r3
  40108a:	d917      	bls.n	4010bc <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  40108c:	4b14      	ldr	r3, [pc, #80]	; (4010e0 <system_init_flash+0x6c>)
  40108e:	4298      	cmp	r0, r3
  401090:	d918      	bls.n	4010c4 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  401092:	4b14      	ldr	r3, [pc, #80]	; (4010e4 <system_init_flash+0x70>)
  401094:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401096:	bf94      	ite	ls
  401098:	4a13      	ldrls	r2, [pc, #76]	; (4010e8 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  40109a:	4a14      	ldrhi	r2, [pc, #80]	; (4010ec <system_init_flash+0x78>)
  40109c:	4b14      	ldr	r3, [pc, #80]	; (4010f0 <system_init_flash+0x7c>)
  40109e:	601a      	str	r2, [r3, #0]
  4010a0:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4010a2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4010a6:	4b12      	ldr	r3, [pc, #72]	; (4010f0 <system_init_flash+0x7c>)
  4010a8:	601a      	str	r2, [r3, #0]
  4010aa:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4010ac:	4a11      	ldr	r2, [pc, #68]	; (4010f4 <system_init_flash+0x80>)
  4010ae:	4b10      	ldr	r3, [pc, #64]	; (4010f0 <system_init_flash+0x7c>)
  4010b0:	601a      	str	r2, [r3, #0]
  4010b2:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4010b4:	4a10      	ldr	r2, [pc, #64]	; (4010f8 <system_init_flash+0x84>)
  4010b6:	4b0e      	ldr	r3, [pc, #56]	; (4010f0 <system_init_flash+0x7c>)
  4010b8:	601a      	str	r2, [r3, #0]
  4010ba:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4010bc:	4a0f      	ldr	r2, [pc, #60]	; (4010fc <system_init_flash+0x88>)
  4010be:	4b0c      	ldr	r3, [pc, #48]	; (4010f0 <system_init_flash+0x7c>)
  4010c0:	601a      	str	r2, [r3, #0]
  4010c2:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4010c4:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4010c8:	4b09      	ldr	r3, [pc, #36]	; (4010f0 <system_init_flash+0x7c>)
  4010ca:	601a      	str	r2, [r3, #0]
  4010cc:	4770      	bx	lr
  4010ce:	bf00      	nop
  4010d0:	015ef3bf 	.word	0x015ef3bf
  4010d4:	02bde77f 	.word	0x02bde77f
  4010d8:	041cdb3f 	.word	0x041cdb3f
  4010dc:	057bceff 	.word	0x057bceff
  4010e0:	06dac2bf 	.word	0x06dac2bf
  4010e4:	0839b67f 	.word	0x0839b67f
  4010e8:	04000500 	.word	0x04000500
  4010ec:	04000600 	.word	0x04000600
  4010f0:	400e0c00 	.word	0x400e0c00
  4010f4:	04000100 	.word	0x04000100
  4010f8:	04000200 	.word	0x04000200
  4010fc:	04000300 	.word	0x04000300

00401100 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401100:	4b0a      	ldr	r3, [pc, #40]	; (40112c <_sbrk+0x2c>)
  401102:	681b      	ldr	r3, [r3, #0]
  401104:	b153      	cbz	r3, 40111c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  401106:	4b09      	ldr	r3, [pc, #36]	; (40112c <_sbrk+0x2c>)
  401108:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  40110a:	181a      	adds	r2, r3, r0
  40110c:	4908      	ldr	r1, [pc, #32]	; (401130 <_sbrk+0x30>)
  40110e:	4291      	cmp	r1, r2
  401110:	db08      	blt.n	401124 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401112:	4610      	mov	r0, r2
  401114:	4a05      	ldr	r2, [pc, #20]	; (40112c <_sbrk+0x2c>)
  401116:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401118:	4618      	mov	r0, r3
  40111a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  40111c:	4a05      	ldr	r2, [pc, #20]	; (401134 <_sbrk+0x34>)
  40111e:	4b03      	ldr	r3, [pc, #12]	; (40112c <_sbrk+0x2c>)
  401120:	601a      	str	r2, [r3, #0]
  401122:	e7f0      	b.n	401106 <_sbrk+0x6>
		return (caddr_t) -1;	
  401124:	f04f 30ff 	mov.w	r0, #4294967295
}
  401128:	4770      	bx	lr
  40112a:	bf00      	nop
  40112c:	20400a68 	.word	0x20400a68
  401130:	2045fffc 	.word	0x2045fffc
  401134:	2043d6f0 	.word	0x2043d6f0

00401138 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401138:	f04f 30ff 	mov.w	r0, #4294967295
  40113c:	4770      	bx	lr

0040113e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  40113e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401142:	604b      	str	r3, [r1, #4]

	return 0;
}
  401144:	2000      	movs	r0, #0
  401146:	4770      	bx	lr

00401148 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401148:	2001      	movs	r0, #1
  40114a:	4770      	bx	lr

0040114c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  40114c:	2000      	movs	r0, #0
  40114e:	4770      	bx	lr

00401150 <AFEC_Temp_callback>:
 */

PPBUF_DECLARE(buffer,120000);
volatile uint32_t buf = 0;

static void AFEC_Temp_callback(void){
  401150:	b510      	push	{r4, lr}
	afec->AFEC_CSELR = afec_ch;
  401152:	4b17      	ldr	r3, [pc, #92]	; (4011b0 <AFEC_Temp_callback+0x60>)
  401154:	2100      	movs	r1, #0
  401156:	6659      	str	r1, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  401158:	6e9a      	ldr	r2, [r3, #104]	; 0x68
	/** The conversion data value */
	
	g_ul_value = afec_channel_get_value(AFEC0, canal_generico_pino);
  40115a:	4b16      	ldr	r3, [pc, #88]	; (4011b4 <AFEC_Temp_callback+0x64>)
  40115c:	601a      	str	r2, [r3, #0]
	
	//t[funcao_escolhida].test_function();
	
	
	// check swap
	if(ppbuf_get_full_signal(&buffer,false) == true) {
  40115e:	4816      	ldr	r0, [pc, #88]	; (4011b8 <AFEC_Temp_callback+0x68>)
  401160:	4b16      	ldr	r3, [pc, #88]	; (4011bc <AFEC_Temp_callback+0x6c>)
  401162:	4798      	blx	r3
  401164:	b9b8      	cbnz	r0, 401196 <AFEC_Temp_callback+0x46>
		ppbuf_get_full_signal(&buffer,true); // swap
	}
	
	ppbuf_insert_active(&buffer, &g_ul_value, sizeof(g_ul_value));
  401166:	4c14      	ldr	r4, [pc, #80]	; (4011b8 <AFEC_Temp_callback+0x68>)
  401168:	2204      	movs	r2, #4
  40116a:	4912      	ldr	r1, [pc, #72]	; (4011b4 <AFEC_Temp_callback+0x64>)
  40116c:	4620      	mov	r0, r4
  40116e:	4b14      	ldr	r3, [pc, #80]	; (4011c0 <AFEC_Temp_callback+0x70>)
  401170:	4798      	blx	r3
	
	/* gets the data on the pong buffer */
	ppbuf_remove_inactive(&buffer, &buf, sizeof(buf));
  401172:	2204      	movs	r2, #4
  401174:	4913      	ldr	r1, [pc, #76]	; (4011c4 <AFEC_Temp_callback+0x74>)
  401176:	4620      	mov	r0, r4
  401178:	4b13      	ldr	r3, [pc, #76]	; (4011c8 <AFEC_Temp_callback+0x78>)
  40117a:	4798      	blx	r3
	
	dacc_get_interrupt_status(DACC_BASE);
  40117c:	4813      	ldr	r0, [pc, #76]	; (4011cc <AFEC_Temp_callback+0x7c>)
  40117e:	4b14      	ldr	r3, [pc, #80]	; (4011d0 <AFEC_Temp_callback+0x80>)
  401180:	4798      	blx	r3
	
	if ((buffer.ping == 0)){
  401182:	7923      	ldrb	r3, [r4, #4]
  401184:	b163      	cbz	r3, 4011a0 <AFEC_Temp_callback+0x50>
		dacc_write_conversion_data(DACC_BASE, buf/4, DACC_CHANNEL);
	}
	else{
		dacc_write_conversion_data(DACC_BASE, buf/16, DACC_CHANNEL);
  401186:	4b0f      	ldr	r3, [pc, #60]	; (4011c4 <AFEC_Temp_callback+0x74>)
  401188:	6819      	ldr	r1, [r3, #0]
  40118a:	2200      	movs	r2, #0
  40118c:	0909      	lsrs	r1, r1, #4
  40118e:	480f      	ldr	r0, [pc, #60]	; (4011cc <AFEC_Temp_callback+0x7c>)
  401190:	4b10      	ldr	r3, [pc, #64]	; (4011d4 <AFEC_Temp_callback+0x84>)
  401192:	4798      	blx	r3
  401194:	bd10      	pop	{r4, pc}
		ppbuf_get_full_signal(&buffer,true); // swap
  401196:	2101      	movs	r1, #1
  401198:	4807      	ldr	r0, [pc, #28]	; (4011b8 <AFEC_Temp_callback+0x68>)
  40119a:	4b08      	ldr	r3, [pc, #32]	; (4011bc <AFEC_Temp_callback+0x6c>)
  40119c:	4798      	blx	r3
  40119e:	e7e2      	b.n	401166 <AFEC_Temp_callback+0x16>
		dacc_write_conversion_data(DACC_BASE, buf/4, DACC_CHANNEL);
  4011a0:	4b08      	ldr	r3, [pc, #32]	; (4011c4 <AFEC_Temp_callback+0x74>)
  4011a2:	6819      	ldr	r1, [r3, #0]
  4011a4:	2200      	movs	r2, #0
  4011a6:	0889      	lsrs	r1, r1, #2
  4011a8:	4808      	ldr	r0, [pc, #32]	; (4011cc <AFEC_Temp_callback+0x7c>)
  4011aa:	4b0a      	ldr	r3, [pc, #40]	; (4011d4 <AFEC_Temp_callback+0x84>)
  4011ac:	4798      	blx	r3
  4011ae:	bd10      	pop	{r4, pc}
  4011b0:	4003c000 	.word	0x4003c000
  4011b4:	20400a78 	.word	0x20400a78
  4011b8:	20400010 	.word	0x20400010
  4011bc:	00400259 	.word	0x00400259
  4011c0:	004001ad 	.word	0x004001ad
  4011c4:	20400a6c 	.word	0x20400a6c
  4011c8:	00400209 	.word	0x00400209
  4011cc:	40040000 	.word	0x40040000
  4011d0:	0040061b 	.word	0x0040061b
  4011d4:	0040061f 	.word	0x0040061f

004011d8 <SysTick_Handler>:
	g_systimer++;	
  4011d8:	4a02      	ldr	r2, [pc, #8]	; (4011e4 <SysTick_Handler+0xc>)
  4011da:	6813      	ldr	r3, [r2, #0]
  4011dc:	3301      	adds	r3, #1
  4011de:	6013      	str	r3, [r2, #0]
  4011e0:	4770      	bx	lr
  4011e2:	bf00      	nop
  4011e4:	20400a74 	.word	0x20400a74

004011e8 <TC0_Handler>:
void TC0_Handler(void){
  4011e8:	b500      	push	{lr}
  4011ea:	b083      	sub	sp, #12
	ul_dummy = tc_get_status(TC0, 0);
  4011ec:	2100      	movs	r1, #0
  4011ee:	4805      	ldr	r0, [pc, #20]	; (401204 <TC0_Handler+0x1c>)
  4011f0:	4b05      	ldr	r3, [pc, #20]	; (401208 <TC0_Handler+0x20>)
  4011f2:	4798      	blx	r3
  4011f4:	9001      	str	r0, [sp, #4]
	printf("kakaka \n");
  4011f6:	4805      	ldr	r0, [pc, #20]	; (40120c <TC0_Handler+0x24>)
  4011f8:	4b05      	ldr	r3, [pc, #20]	; (401210 <TC0_Handler+0x28>)
  4011fa:	4798      	blx	r3
	UNUSED(ul_dummy);
  4011fc:	9b01      	ldr	r3, [sp, #4]
}
  4011fe:	b003      	add	sp, #12
  401200:	f85d fb04 	ldr.w	pc, [sp], #4
  401204:	4000c000 	.word	0x4000c000
  401208:	0040066f 	.word	0x0040066f
  40120c:	00404614 	.word	0x00404614
  401210:	0040172d 	.word	0x0040172d

00401214 <usart_put_string>:
	}
}

void usart_put_string(Usart *usart, char str[]) {
  401214:	b538      	push	{r3, r4, r5, lr}
  401216:	4605      	mov	r5, r0
  401218:	460c      	mov	r4, r1
	usart_serial_write_packet(usart, str, strlen(str));
  40121a:	4608      	mov	r0, r1
  40121c:	4b03      	ldr	r3, [pc, #12]	; (40122c <usart_put_string+0x18>)
  40121e:	4798      	blx	r3
  401220:	4602      	mov	r2, r0
  401222:	4621      	mov	r1, r4
  401224:	4628      	mov	r0, r5
  401226:	4b02      	ldr	r3, [pc, #8]	; (401230 <usart_put_string+0x1c>)
  401228:	4798      	blx	r3
  40122a:	bd38      	pop	{r3, r4, r5, pc}
  40122c:	00401941 	.word	0x00401941
  401230:	004007f9 	.word	0x004007f9

00401234 <usart_get_string>:
}

int usart_get_string(Usart *usart, char buffer_get[], int bufferlen, int timeout_ms) {
  401234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401238:	b085      	sub	sp, #20
  40123a:	9001      	str	r0, [sp, #4]
  40123c:	468b      	mov	fp, r1
  40123e:	461f      	mov	r7, r3
	long timestart = g_systimer;
  401240:	4b10      	ldr	r3, [pc, #64]	; (401284 <usart_get_string+0x50>)
  401242:	681e      	ldr	r6, [r3, #0]
  401244:	f101 3aff 	add.w	sl, r1, #4294967295
  401248:	f102 38ff 	add.w	r8, r2, #4294967295
	uint32_t rx;
	uint32_t counter = 0;
  40124c:	2400      	movs	r4, #0
	
	while(g_systimer - timestart < timeout_ms && counter < bufferlen - 1) {
  40124e:	461d      	mov	r5, r3
		if(usart_read(usart, &rx) == 0) {
  401250:	f8df 9034 	ldr.w	r9, [pc, #52]	; 401288 <usart_get_string+0x54>
	while(g_systimer - timestart < timeout_ms && counter < bufferlen - 1) {
  401254:	682b      	ldr	r3, [r5, #0]
  401256:	1b9b      	subs	r3, r3, r6
  401258:	42bb      	cmp	r3, r7
  40125a:	da0c      	bge.n	401276 <usart_get_string+0x42>
  40125c:	4544      	cmp	r4, r8
  40125e:	d00a      	beq.n	401276 <usart_get_string+0x42>
		if(usart_read(usart, &rx) == 0) {
  401260:	a903      	add	r1, sp, #12
  401262:	9801      	ldr	r0, [sp, #4]
  401264:	47c8      	blx	r9
  401266:	2800      	cmp	r0, #0
  401268:	d1f4      	bne.n	401254 <usart_get_string+0x20>
			timestart = g_systimer; // reset timeout
  40126a:	682e      	ldr	r6, [r5, #0]
			buffer_get[counter++] = rx;
  40126c:	3401      	adds	r4, #1
  40126e:	9b03      	ldr	r3, [sp, #12]
  401270:	f80a 3f01 	strb.w	r3, [sl, #1]!
  401274:	e7ee      	b.n	401254 <usart_get_string+0x20>
		}
	}
	buffer_get[counter] = 0x00;
  401276:	2300      	movs	r3, #0
  401278:	f80b 3004 	strb.w	r3, [fp, r4]
	return counter;
}
  40127c:	4620      	mov	r0, r4
  40127e:	b005      	add	sp, #20
  401280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401284:	20400a74 	.word	0x20400a74
  401288:	004007df 	.word	0x004007df

0040128c <usart_send_command>:

void usart_send_command(Usart *usart, char buffer_rx[], int bufferlen, char buffer_tx[], int timeout) {
  40128c:	b570      	push	{r4, r5, r6, lr}
  40128e:	4604      	mov	r4, r0
  401290:	460d      	mov	r5, r1
  401292:	4616      	mov	r6, r2
	usart_put_string(usart, buffer_tx);
  401294:	4619      	mov	r1, r3
  401296:	4b04      	ldr	r3, [pc, #16]	; (4012a8 <usart_send_command+0x1c>)
  401298:	4798      	blx	r3
	usart_get_string(usart, buffer_rx, bufferlen, timeout);
  40129a:	9b04      	ldr	r3, [sp, #16]
  40129c:	4632      	mov	r2, r6
  40129e:	4629      	mov	r1, r5
  4012a0:	4620      	mov	r0, r4
  4012a2:	4c02      	ldr	r4, [pc, #8]	; (4012ac <usart_send_command+0x20>)
  4012a4:	47a0      	blx	r4
  4012a6:	bd70      	pop	{r4, r5, r6, pc}
  4012a8:	00401215 	.word	0x00401215
  4012ac:	00401235 	.word	0x00401235

004012b0 <usart_log>:
}

void usart_log(char* name, char* log) {
  4012b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4012b2:	4607      	mov	r7, r0
  4012b4:	460e      	mov	r6, r1
	usart_put_string(USART1, "[");
  4012b6:	4d09      	ldr	r5, [pc, #36]	; (4012dc <usart_log+0x2c>)
  4012b8:	4909      	ldr	r1, [pc, #36]	; (4012e0 <usart_log+0x30>)
  4012ba:	4628      	mov	r0, r5
  4012bc:	4c09      	ldr	r4, [pc, #36]	; (4012e4 <usart_log+0x34>)
  4012be:	47a0      	blx	r4
	usart_put_string(USART1, name);
  4012c0:	4639      	mov	r1, r7
  4012c2:	4628      	mov	r0, r5
  4012c4:	47a0      	blx	r4
	usart_put_string(USART1, "] ");
  4012c6:	4908      	ldr	r1, [pc, #32]	; (4012e8 <usart_log+0x38>)
  4012c8:	4628      	mov	r0, r5
  4012ca:	47a0      	blx	r4
	usart_put_string(USART1, log);
  4012cc:	4631      	mov	r1, r6
  4012ce:	4628      	mov	r0, r5
  4012d0:	47a0      	blx	r4
	usart_put_string(USART1, "\r\n");
  4012d2:	4906      	ldr	r1, [pc, #24]	; (4012ec <usart_log+0x3c>)
  4012d4:	4628      	mov	r0, r5
  4012d6:	47a0      	blx	r4
  4012d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4012da:	bf00      	nop
  4012dc:	40028000 	.word	0x40028000
  4012e0:	004046a4 	.word	0x004046a4
  4012e4:	00401215 	.word	0x00401215
  4012e8:	004046a8 	.word	0x004046a8
  4012ec:	00404670 	.word	0x00404670

004012f0 <config_console>:
}

void config_console(void) {
  4012f0:	b570      	push	{r4, r5, r6, lr}
  4012f2:	b086      	sub	sp, #24
	usart_settings.baudrate = opt->baudrate;
  4012f4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  4012f8:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  4012fa:	23c0      	movs	r3, #192	; 0xc0
  4012fc:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  4012fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401302:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  401304:	2300      	movs	r3, #0
  401306:	9303      	str	r3, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  401308:	9304      	str	r3, [sp, #16]
  40130a:	200e      	movs	r0, #14
  40130c:	4b09      	ldr	r3, [pc, #36]	; (401334 <config_console+0x44>)
  40130e:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  401310:	4c09      	ldr	r4, [pc, #36]	; (401338 <config_console+0x48>)
  401312:	4a0a      	ldr	r2, [pc, #40]	; (40133c <config_console+0x4c>)
  401314:	4669      	mov	r1, sp
  401316:	4620      	mov	r0, r4
  401318:	4b09      	ldr	r3, [pc, #36]	; (401340 <config_console+0x50>)
  40131a:	4798      	blx	r3
		usart_enable_tx(p_usart);
  40131c:	4620      	mov	r0, r4
  40131e:	4e09      	ldr	r6, [pc, #36]	; (401344 <config_console+0x54>)
  401320:	47b0      	blx	r6
		usart_enable_rx(p_usart);
  401322:	4620      	mov	r0, r4
  401324:	4d08      	ldr	r5, [pc, #32]	; (401348 <config_console+0x58>)
  401326:	47a8      	blx	r5
	config.baudrate = 115200;
	config.charlength = US_MR_CHRL_8_BIT;
	config.paritytype = US_MR_PAR_NO;
	config.stopbits = false;
	usart_serial_init(USART1, &config);
	usart_enable_tx(USART1);
  401328:	4620      	mov	r0, r4
  40132a:	47b0      	blx	r6
	usart_enable_rx(USART1);
  40132c:	4620      	mov	r0, r4
  40132e:	47a8      	blx	r5
}
  401330:	b006      	add	sp, #24
  401332:	bd70      	pop	{r4, r5, r6, pc}
  401334:	00400e49 	.word	0x00400e49
  401338:	40028000 	.word	0x40028000
  40133c:	08f0d180 	.word	0x08f0d180
  401340:	00400769 	.word	0x00400769
  401344:	004007bd 	.word	0x004007bd
  401348:	004007c3 	.word	0x004007c3

0040134c <hm10_config_server>:

void hm10_config_server(void) {
  40134c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401350:	b086      	sub	sp, #24
	usart_settings.baudrate = opt->baudrate;
  401352:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  401356:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  401358:	23c0      	movs	r3, #192	; 0xc0
  40135a:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  40135c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401360:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  401362:	2500      	movs	r5, #0
  401364:	9503      	str	r5, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  401366:	9504      	str	r5, [sp, #16]
  401368:	200d      	movs	r0, #13
  40136a:	4e13      	ldr	r6, [pc, #76]	; (4013b8 <hm10_config_server+0x6c>)
  40136c:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  40136e:	4c13      	ldr	r4, [pc, #76]	; (4013bc <hm10_config_server+0x70>)
  401370:	4a13      	ldr	r2, [pc, #76]	; (4013c0 <hm10_config_server+0x74>)
  401372:	4669      	mov	r1, sp
  401374:	4620      	mov	r0, r4
  401376:	4b13      	ldr	r3, [pc, #76]	; (4013c4 <hm10_config_server+0x78>)
  401378:	4798      	blx	r3
		usart_enable_tx(p_usart);
  40137a:	4620      	mov	r0, r4
  40137c:	f8df 8054 	ldr.w	r8, [pc, #84]	; 4013d4 <hm10_config_server+0x88>
  401380:	47c0      	blx	r8
		usart_enable_rx(p_usart);
  401382:	4620      	mov	r0, r4
  401384:	4f10      	ldr	r7, [pc, #64]	; (4013c8 <hm10_config_server+0x7c>)
  401386:	47b8      	blx	r7
	config.baudrate = 9600;
	config.charlength = US_MR_CHRL_8_BIT;
	config.paritytype = US_MR_PAR_NO;
	config.stopbits = false;
	usart_serial_init(USART0, &config);
	usart_enable_tx(USART0);
  401388:	4620      	mov	r0, r4
  40138a:	47c0      	blx	r8
	usart_enable_rx(USART0);
  40138c:	4620      	mov	r0, r4
  40138e:	47b8      	blx	r7
  401390:	200b      	movs	r0, #11
  401392:	47b0      	blx	r6
	sysclk_enable_peripheral_clock(ID_PIOB);
	//usart_init_rs232(USART0, &config, sysclk_get_peripheral_hz());


	// RX - PB0  TX - PB1
	pio_configure(PIOB, PIO_PERIPH_C, (1 << 0), PIO_DEFAULT);
  401394:	4e0d      	ldr	r6, [pc, #52]	; (4013cc <hm10_config_server+0x80>)
  401396:	462b      	mov	r3, r5
  401398:	2201      	movs	r2, #1
  40139a:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40139e:	4630      	mov	r0, r6
  4013a0:	4c0b      	ldr	r4, [pc, #44]	; (4013d0 <hm10_config_server+0x84>)
  4013a2:	47a0      	blx	r4
	pio_configure(PIOB, PIO_PERIPH_C, (1 << 1), PIO_DEFAULT);
  4013a4:	462b      	mov	r3, r5
  4013a6:	2202      	movs	r2, #2
  4013a8:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4013ac:	4630      	mov	r0, r6
  4013ae:	47a0      	blx	r4
	
	


}
  4013b0:	b006      	add	sp, #24
  4013b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4013b6:	bf00      	nop
  4013b8:	00400e49 	.word	0x00400e49
  4013bc:	40024000 	.word	0x40024000
  4013c0:	08f0d180 	.word	0x08f0d180
  4013c4:	00400769 	.word	0x00400769
  4013c8:	004007c3 	.word	0x004007c3
  4013cc:	400e1000 	.word	0x400e1000
  4013d0:	00400bdd 	.word	0x00400bdd
  4013d4:	004007bd 	.word	0x004007bd

004013d8 <hm10_server_init>:



int hm10_server_init(void) {
  4013d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4013da:	b0a3      	sub	sp, #140	; 0x8c
	char buffer_rx[128];
	usart_send_command(USART0, buffer_rx, 1000, "AT", 200);
  4013dc:	4e1a      	ldr	r6, [pc, #104]	; (401448 <hm10_server_init+0x70>)
  4013de:	4d1b      	ldr	r5, [pc, #108]	; (40144c <hm10_server_init+0x74>)
  4013e0:	27c8      	movs	r7, #200	; 0xc8
  4013e2:	9700      	str	r7, [sp, #0]
  4013e4:	4633      	mov	r3, r6
  4013e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4013ea:	a902      	add	r1, sp, #8
  4013ec:	4628      	mov	r0, r5
  4013ee:	4c18      	ldr	r4, [pc, #96]	; (401450 <hm10_server_init+0x78>)
  4013f0:	47a0      	blx	r4
	usart_send_command(USART0, buffer_rx, 1000, "AT", 200);
  4013f2:	9700      	str	r7, [sp, #0]
  4013f4:	4633      	mov	r3, r6
  4013f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4013fa:	a902      	add	r1, sp, #8
  4013fc:	4628      	mov	r0, r5
  4013fe:	47a0      	blx	r4
	usart_send_command(USART0, buffer_rx, 1000, "AT", 200);
  401400:	9700      	str	r7, [sp, #0]
  401402:	4633      	mov	r3, r6
  401404:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  401408:	a902      	add	r1, sp, #8
  40140a:	4628      	mov	r0, r5
  40140c:	47a0      	blx	r4
	usart_send_command(USART0, buffer_rx, 1000, "AT+RESET", 400);	
  40140e:	f44f 76c8 	mov.w	r6, #400	; 0x190
  401412:	9600      	str	r6, [sp, #0]
  401414:	4b0f      	ldr	r3, [pc, #60]	; (401454 <hm10_server_init+0x7c>)
  401416:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40141a:	a902      	add	r1, sp, #8
  40141c:	4628      	mov	r0, r5
  40141e:	47a0      	blx	r4
	usart_send_command(USART0, buffer_rx, 1000, "AT+NAMEServer", 400);
  401420:	9600      	str	r6, [sp, #0]
  401422:	4b0d      	ldr	r3, [pc, #52]	; (401458 <hm10_server_init+0x80>)
  401424:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  401428:	a902      	add	r1, sp, #8
  40142a:	4628      	mov	r0, r5
  40142c:	47a0      	blx	r4
	usart_send_command(USART0, buffer_rx, 1000, "AT+ROLE0", 400);
  40142e:	9600      	str	r6, [sp, #0]
  401430:	4b0a      	ldr	r3, [pc, #40]	; (40145c <hm10_server_init+0x84>)
  401432:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  401436:	a902      	add	r1, sp, #8
  401438:	4628      	mov	r0, r5
  40143a:	47a0      	blx	r4
	usart_log("hm10_server_init", buffer_rx);
  40143c:	a902      	add	r1, sp, #8
  40143e:	4808      	ldr	r0, [pc, #32]	; (401460 <hm10_server_init+0x88>)
  401440:	4b08      	ldr	r3, [pc, #32]	; (401464 <hm10_server_init+0x8c>)
  401442:	4798      	blx	r3
}
  401444:	b023      	add	sp, #140	; 0x8c
  401446:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401448:	00404620 	.word	0x00404620
  40144c:	40024000 	.word	0x40024000
  401450:	0040128d 	.word	0x0040128d
  401454:	00404624 	.word	0x00404624
  401458:	00404630 	.word	0x00404630
  40145c:	00404640 	.word	0x00404640
  401460:	0040464c 	.word	0x0040464c
  401464:	004012b1 	.word	0x004012b1

00401468 <TC_init>:

/**
* Configura TimerCounter (TC) para gerar uma interrupcao no canal (ID_TC e TC_CHANNEL)
* na taxa de especificada em freq.
*/
void TC_init(Tc * TC, int ID_TC, int TC_CHANNEL, int freq){
  401468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40146c:	b084      	sub	sp, #16
  40146e:	4605      	mov	r5, r0
  401470:	4616      	mov	r6, r2
  401472:	461f      	mov	r7, r3
	uint32_t ul_tcclks;
	uint32_t ul_sysclk = sysclk_get_cpu_hz();

	/* Configura o PMC */

	pmc_enable_periph_clk(ID_TC);
  401474:	4608      	mov	r0, r1
  401476:	4b16      	ldr	r3, [pc, #88]	; (4014d0 <TC_init+0x68>)
  401478:	4798      	blx	r3

	/** Configura o TC para operar em  4Mhz e interrupco no RC compare */
	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  40147a:	4c16      	ldr	r4, [pc, #88]	; (4014d4 <TC_init+0x6c>)
  40147c:	9400      	str	r4, [sp, #0]
  40147e:	ab02      	add	r3, sp, #8
  401480:	aa03      	add	r2, sp, #12
  401482:	4621      	mov	r1, r4
  401484:	4638      	mov	r0, r7
  401486:	f8df 8064 	ldr.w	r8, [pc, #100]	; 4014ec <TC_init+0x84>
  40148a:	47c0      	blx	r8
	
	//PMC->PMC_SCER = 1 << 14;
	ul_tcclks = 1;
  40148c:	2301      	movs	r3, #1
  40148e:	9302      	str	r3, [sp, #8]
	
	tc_init(TC, TC_CHANNEL, ul_tcclks 
  401490:	4a11      	ldr	r2, [pc, #68]	; (4014d8 <TC_init+0x70>)
  401492:	4631      	mov	r1, r6
  401494:	4628      	mov	r0, r5
  401496:	4b11      	ldr	r3, [pc, #68]	; (4014dc <TC_init+0x74>)
  401498:	4798      	blx	r3
							| TC_CMR_ACPA_SET /* RA Compare Effect: set */
							| TC_CMR_ACPC_CLEAR /* RC Compare Effect: clear */
							| TC_CMR_CPCTRG /* UP mode with automatic trigger on RC Compare */
	);
	
	tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq /8 );
  40149a:	9a03      	ldr	r2, [sp, #12]
  40149c:	fbb4 f2f2 	udiv	r2, r4, r2
  4014a0:	fbb2 f2f7 	udiv	r2, r2, r7
  4014a4:	08d2      	lsrs	r2, r2, #3
  4014a6:	4631      	mov	r1, r6
  4014a8:	4628      	mov	r0, r5
  4014aa:	4b0d      	ldr	r3, [pc, #52]	; (4014e0 <TC_init+0x78>)
  4014ac:	4798      	blx	r3
	tc_write_ra(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq / 8 / 2);
  4014ae:	9a03      	ldr	r2, [sp, #12]
  4014b0:	fbb4 f2f2 	udiv	r2, r4, r2
  4014b4:	fbb2 f2f7 	udiv	r2, r2, r7
  4014b8:	0912      	lsrs	r2, r2, #4
  4014ba:	4631      	mov	r1, r6
  4014bc:	4628      	mov	r0, r5
  4014be:	4b09      	ldr	r3, [pc, #36]	; (4014e4 <TC_init+0x7c>)
  4014c0:	4798      	blx	r3


	/* Inicializa o canal 0 do TC */
	tc_start(TC, TC_CHANNEL);
  4014c2:	4631      	mov	r1, r6
  4014c4:	4628      	mov	r0, r5
  4014c6:	4b08      	ldr	r3, [pc, #32]	; (4014e8 <TC_init+0x80>)
  4014c8:	4798      	blx	r3
}
  4014ca:	b004      	add	sp, #16
  4014cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4014d0:	00400e49 	.word	0x00400e49
  4014d4:	11e1a300 	.word	0x11e1a300
  4014d8:	0009c001 	.word	0x0009c001
  4014dc:	0040063d 	.word	0x0040063d
  4014e0:	00400667 	.word	0x00400667
  4014e4:	0040065f 	.word	0x0040065f
  4014e8:	00400657 	.word	0x00400657
  4014ec:	00400677 	.word	0x00400677

004014f0 <main>:

int main (void)
{
  4014f0:	b580      	push	{r7, lr}
  4014f2:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
	board_init();
  4014f6:	4b52      	ldr	r3, [pc, #328]	; (401640 <main+0x150>)
  4014f8:	4798      	blx	r3
	sysclk_init();
  4014fa:	4b52      	ldr	r3, [pc, #328]	; (401644 <main+0x154>)
  4014fc:	4798      	blx	r3
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  4014fe:	4b52      	ldr	r3, [pc, #328]	; (401648 <main+0x158>)
  401500:	4a52      	ldr	r2, [pc, #328]	; (40164c <main+0x15c>)
  401502:	605a      	str	r2, [r3, #4]
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401504:	21e0      	movs	r1, #224	; 0xe0
  401506:	4a52      	ldr	r2, [pc, #328]	; (401650 <main+0x160>)
  401508:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  40150c:	2500      	movs	r5, #0
  40150e:	609d      	str	r5, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  401510:	2207      	movs	r2, #7
  401512:	601a      	str	r2, [r3, #0]
	//delay_init();
	SysTick_Config(sysclk_get_cpu_hz() / 1000); // 1 ms
	config_console();
  401514:	4b4f      	ldr	r3, [pc, #316]	; (401654 <main+0x164>)
  401516:	4798      	blx	r3
	
	
	
	usart_put_string(USART1, "Inicializando...\r\n");
  401518:	4e4f      	ldr	r6, [pc, #316]	; (401658 <main+0x168>)
  40151a:	4950      	ldr	r1, [pc, #320]	; (40165c <main+0x16c>)
  40151c:	4630      	mov	r0, r6
  40151e:	4c50      	ldr	r4, [pc, #320]	; (401660 <main+0x170>)
  401520:	47a0      	blx	r4
	usart_put_string(USART1, "Config HC05 Server...\r\n");
  401522:	4950      	ldr	r1, [pc, #320]	; (401664 <main+0x174>)
  401524:	4630      	mov	r0, r6
  401526:	47a0      	blx	r4
	hm10_config_server();
  401528:	4b4f      	ldr	r3, [pc, #316]	; (401668 <main+0x178>)
  40152a:	4798      	blx	r3
	hm10_server_init();
  40152c:	4b4f      	ldr	r3, [pc, #316]	; (40166c <main+0x17c>)
  40152e:	4798      	blx	r3
  401530:	200a      	movs	r0, #10
  401532:	4e4f      	ldr	r6, [pc, #316]	; (401670 <main+0x180>)
  401534:	47b0      	blx	r6
  401536:	200b      	movs	r0, #11
  401538:	47b0      	blx	r6
  40153a:	200c      	movs	r0, #12
  40153c:	47b0      	blx	r6
  40153e:	2010      	movs	r0, #16
  401540:	47b0      	blx	r6
  401542:	2011      	movs	r0, #17
  401544:	47b0      	blx	r6
	afec_enable(AFEC0);
  401546:	4c4b      	ldr	r4, [pc, #300]	; (401674 <main+0x184>)
  401548:	4620      	mov	r0, r4
  40154a:	4b4b      	ldr	r3, [pc, #300]	; (401678 <main+0x188>)
  40154c:	4798      	blx	r3
	afec_get_config_defaults(&afec_cfg);
  40154e:	a803      	add	r0, sp, #12
  401550:	4b4a      	ldr	r3, [pc, #296]	; (40167c <main+0x18c>)
  401552:	4798      	blx	r3
	afec_init(AFEC0, &afec_cfg);
  401554:	a903      	add	r1, sp, #12
  401556:	4620      	mov	r0, r4
  401558:	4b49      	ldr	r3, [pc, #292]	; (401680 <main+0x190>)
  40155a:	4798      	blx	r3
	reg = afec->AFEC_MR;
  40155c:	6863      	ldr	r3, [r4, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  40155e:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
		reg |= trigger;
  401562:	f043 0303 	orr.w	r3, r3, #3
	afec->AFEC_MR = reg;
  401566:	6063      	str	r3, [r4, #4]
	AFEC0->AFEC_MR |= 3;
  401568:	6863      	ldr	r3, [r4, #4]
  40156a:	f043 0303 	orr.w	r3, r3, #3
  40156e:	6063      	str	r3, [r4, #4]
	afec_set_callback(AFEC0, AFEC_INTERRUPT_EOC_0,	AFEC_Temp_callback, 1); 
  401570:	2301      	movs	r3, #1
  401572:	4a44      	ldr	r2, [pc, #272]	; (401684 <main+0x194>)
  401574:	4629      	mov	r1, r5
  401576:	4620      	mov	r0, r4
  401578:	4f43      	ldr	r7, [pc, #268]	; (401688 <main+0x198>)
  40157a:	47b8      	blx	r7
	afec_ch_get_config_defaults(&afec_ch_cfg);
  40157c:	4668      	mov	r0, sp
  40157e:	4b43      	ldr	r3, [pc, #268]	; (40168c <main+0x19c>)
  401580:	4798      	blx	r3
	afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  401582:	f88d 5001 	strb.w	r5, [sp, #1]
	afec_ch_set_config(AFEC0, canal_generico_pino, &afec_ch_cfg);
  401586:	466a      	mov	r2, sp
  401588:	4629      	mov	r1, r5
  40158a:	4620      	mov	r0, r4
  40158c:	4b40      	ldr	r3, [pc, #256]	; (401690 <main+0x1a0>)
  40158e:	4798      	blx	r3
	afec->AFEC_CSELR = afec_ch;
  401590:	6665      	str	r5, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  401592:	f44f 7300 	mov.w	r3, #512	; 0x200
  401596:	66e3      	str	r3, [r4, #108]	; 0x6c
	afec_temp_sensor_get_config_defaults(&afec_temp_sensor_cfg);
  401598:	a801      	add	r0, sp, #4
  40159a:	4b3e      	ldr	r3, [pc, #248]	; (401694 <main+0x1a4>)
  40159c:	4798      	blx	r3
	afec_temp_sensor_set_config(AFEC0, &afec_temp_sensor_cfg);
  40159e:	a901      	add	r1, sp, #4
  4015a0:	4620      	mov	r0, r4
  4015a2:	4b3d      	ldr	r3, [pc, #244]	; (401698 <main+0x1a8>)
  4015a4:	4798      	blx	r3
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  4015a6:	2301      	movs	r3, #1
  4015a8:	6163      	str	r3, [r4, #20]
  4015aa:	201e      	movs	r0, #30
  4015ac:	47b0      	blx	r6
	dacc_reset(DACC_BASE);
  4015ae:	f504 4480 	add.w	r4, r4, #16384	; 0x4000
  4015b2:	4620      	mov	r0, r4
  4015b4:	4b39      	ldr	r3, [pc, #228]	; (40169c <main+0x1ac>)
  4015b6:	4798      	blx	r3
	dacc_enable_channel(DACC_BASE, DACC_CHANNEL);
  4015b8:	4629      	mov	r1, r5
  4015ba:	4620      	mov	r0, r4
  4015bc:	4b38      	ldr	r3, [pc, #224]	; (4016a0 <main+0x1b0>)
  4015be:	4798      	blx	r3
		
	/* inicializa e configura adc */
	config_ADC_TEMP();
	config_DAC();
		
	TC_init(TC0, ID_TC0, 0, 100000);
  4015c0:	4b38      	ldr	r3, [pc, #224]	; (4016a4 <main+0x1b4>)
  4015c2:	462a      	mov	r2, r5
  4015c4:	2117      	movs	r1, #23
  4015c6:	4838      	ldr	r0, [pc, #224]	; (4016a8 <main+0x1b8>)
  4015c8:	4c38      	ldr	r4, [pc, #224]	; (4016ac <main+0x1bc>)
  4015ca:	47a0      	blx	r4
	char *str;
	
	while(1) {
		
		
		usart_get_string(USART0, temp_instrucao, 1024, 1);
  4015cc:	4e38      	ldr	r6, [pc, #224]	; (4016b0 <main+0x1c0>)
			usart_log("Volume", volume);
			usart_log("String", str);
		}

		
		delay_ms(100);
  4015ce:	4d39      	ldr	r5, [pc, #228]	; (4016b4 <main+0x1c4>)
  4015d0:	e014      	b.n	4015fc <main+0x10c>
			usart_log("antes", temp_instrucao);
  4015d2:	a90a      	add	r1, sp, #40	; 0x28
  4015d4:	4838      	ldr	r0, [pc, #224]	; (4016b8 <main+0x1c8>)
  4015d6:	4c39      	ldr	r4, [pc, #228]	; (4016bc <main+0x1cc>)
  4015d8:	47a0      	blx	r4
			funcao_escolhida = strtol(temp_instrucao, &str, 10);
  4015da:	220a      	movs	r2, #10
  4015dc:	a909      	add	r1, sp, #36	; 0x24
  4015de:	a80a      	add	r0, sp, #40	; 0x28
  4015e0:	4b37      	ldr	r3, [pc, #220]	; (4016c0 <main+0x1d0>)
  4015e2:	4798      	blx	r3
  4015e4:	4b37      	ldr	r3, [pc, #220]	; (4016c4 <main+0x1d4>)
  4015e6:	7018      	strb	r0, [r3, #0]
			usart_log("Volume", funcao_escolhida);
  4015e8:	b2c1      	uxtb	r1, r0
  4015ea:	4837      	ldr	r0, [pc, #220]	; (4016c8 <main+0x1d8>)
  4015ec:	47a0      	blx	r4
			usart_log("String", str);
  4015ee:	9909      	ldr	r1, [sp, #36]	; 0x24
  4015f0:	4836      	ldr	r0, [pc, #216]	; (4016cc <main+0x1dc>)
  4015f2:	47a0      	blx	r4
  4015f4:	e00d      	b.n	401612 <main+0x122>
		delay_ms(100);
  4015f6:	4628      	mov	r0, r5
  4015f8:	4b35      	ldr	r3, [pc, #212]	; (4016d0 <main+0x1e0>)
  4015fa:	4798      	blx	r3
		usart_get_string(USART0, temp_instrucao, 1024, 1);
  4015fc:	2301      	movs	r3, #1
  4015fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401602:	a90a      	add	r1, sp, #40	; 0x28
  401604:	4630      	mov	r0, r6
  401606:	4c33      	ldr	r4, [pc, #204]	; (4016d4 <main+0x1e4>)
  401608:	47a0      	blx	r4
		if(temp_instrucao[0] == 105){ // checa se  uma instruo tipo i(intruo_geral)
  40160a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
  40160e:	2b69      	cmp	r3, #105	; 0x69
  401610:	d0df      	beq.n	4015d2 <main+0xe2>
		if(temp_instrucao[0] == 118){ // checa se  uma instruo tipo v(volume)
  401612:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
  401616:	2b76      	cmp	r3, #118	; 0x76
  401618:	d1ed      	bne.n	4015f6 <main+0x106>
			usart_log("antes", temp_instrucao);
  40161a:	a90a      	add	r1, sp, #40	; 0x28
  40161c:	4826      	ldr	r0, [pc, #152]	; (4016b8 <main+0x1c8>)
  40161e:	4c27      	ldr	r4, [pc, #156]	; (4016bc <main+0x1cc>)
  401620:	47a0      	blx	r4
			volume  = strtol(temp_instrucao, &str, 10);
  401622:	220a      	movs	r2, #10
  401624:	a909      	add	r1, sp, #36	; 0x24
  401626:	a80a      	add	r0, sp, #40	; 0x28
  401628:	4b25      	ldr	r3, [pc, #148]	; (4016c0 <main+0x1d0>)
  40162a:	4798      	blx	r3
  40162c:	4601      	mov	r1, r0
  40162e:	4b2a      	ldr	r3, [pc, #168]	; (4016d8 <main+0x1e8>)
  401630:	6018      	str	r0, [r3, #0]
			usart_log("Volume", volume);
  401632:	4825      	ldr	r0, [pc, #148]	; (4016c8 <main+0x1d8>)
  401634:	47a0      	blx	r4
			usart_log("String", str);
  401636:	9909      	ldr	r1, [sp, #36]	; 0x24
  401638:	4824      	ldr	r0, [pc, #144]	; (4016cc <main+0x1dc>)
  40163a:	47a0      	blx	r4
  40163c:	e7db      	b.n	4015f6 <main+0x106>
  40163e:	bf00      	nop
  401640:	00400955 	.word	0x00400955
  401644:	004008e5 	.word	0x004008e5
  401648:	e000e010 	.word	0xe000e010
  40164c:	000493df 	.word	0x000493df
  401650:	e000ed00 	.word	0xe000ed00
  401654:	004012f1 	.word	0x004012f1
  401658:	40028000 	.word	0x40028000
  40165c:	00404660 	.word	0x00404660
  401660:	00401215 	.word	0x00401215
  401664:	00404674 	.word	0x00404674
  401668:	0040134d 	.word	0x0040134d
  40166c:	004013d9 	.word	0x004013d9
  401670:	00400e49 	.word	0x00400e49
  401674:	4003c000 	.word	0x4003c000
  401678:	004005b1 	.word	0x004005b1
  40167c:	004003e1 	.word	0x004003e1
  401680:	00400431 	.word	0x00400431
  401684:	00401151 	.word	0x00401151
  401688:	00400531 	.word	0x00400531
  40168c:	00400411 	.word	0x00400411
  401690:	0040039d 	.word	0x0040039d
  401694:	0040041b 	.word	0x0040041b
  401698:	004003cd 	.word	0x004003cd
  40169c:	00400615 	.word	0x00400615
  4016a0:	00400629 	.word	0x00400629
  4016a4:	000186a0 	.word	0x000186a0
  4016a8:	4000c000 	.word	0x4000c000
  4016ac:	00401469 	.word	0x00401469
  4016b0:	40024000 	.word	0x40024000
  4016b4:	004d2b25 	.word	0x004d2b25
  4016b8:	0040468c 	.word	0x0040468c
  4016bc:	004012b1 	.word	0x004012b1
  4016c0:	00401b45 	.word	0x00401b45
  4016c4:	20400a70 	.word	0x20400a70
  4016c8:	00404694 	.word	0x00404694
  4016cc:	0040469c 	.word	0x0040469c
  4016d0:	20400001 	.word	0x20400001
  4016d4:	00401235 	.word	0x00401235
  4016d8:	20400028 	.word	0x20400028

004016dc <__libc_init_array>:
  4016dc:	b570      	push	{r4, r5, r6, lr}
  4016de:	4e0f      	ldr	r6, [pc, #60]	; (40171c <__libc_init_array+0x40>)
  4016e0:	4d0f      	ldr	r5, [pc, #60]	; (401720 <__libc_init_array+0x44>)
  4016e2:	1b76      	subs	r6, r6, r5
  4016e4:	10b6      	asrs	r6, r6, #2
  4016e6:	bf18      	it	ne
  4016e8:	2400      	movne	r4, #0
  4016ea:	d005      	beq.n	4016f8 <__libc_init_array+0x1c>
  4016ec:	3401      	adds	r4, #1
  4016ee:	f855 3b04 	ldr.w	r3, [r5], #4
  4016f2:	4798      	blx	r3
  4016f4:	42a6      	cmp	r6, r4
  4016f6:	d1f9      	bne.n	4016ec <__libc_init_array+0x10>
  4016f8:	4e0a      	ldr	r6, [pc, #40]	; (401724 <__libc_init_array+0x48>)
  4016fa:	4d0b      	ldr	r5, [pc, #44]	; (401728 <__libc_init_array+0x4c>)
  4016fc:	1b76      	subs	r6, r6, r5
  4016fe:	f003 f889 	bl	404814 <_init>
  401702:	10b6      	asrs	r6, r6, #2
  401704:	bf18      	it	ne
  401706:	2400      	movne	r4, #0
  401708:	d006      	beq.n	401718 <__libc_init_array+0x3c>
  40170a:	3401      	adds	r4, #1
  40170c:	f855 3b04 	ldr.w	r3, [r5], #4
  401710:	4798      	blx	r3
  401712:	42a6      	cmp	r6, r4
  401714:	d1f9      	bne.n	40170a <__libc_init_array+0x2e>
  401716:	bd70      	pop	{r4, r5, r6, pc}
  401718:	bd70      	pop	{r4, r5, r6, pc}
  40171a:	bf00      	nop
  40171c:	00404820 	.word	0x00404820
  401720:	00404820 	.word	0x00404820
  401724:	00404828 	.word	0x00404828
  401728:	00404820 	.word	0x00404820

0040172c <iprintf>:
  40172c:	b40f      	push	{r0, r1, r2, r3}
  40172e:	b500      	push	{lr}
  401730:	4907      	ldr	r1, [pc, #28]	; (401750 <iprintf+0x24>)
  401732:	b083      	sub	sp, #12
  401734:	ab04      	add	r3, sp, #16
  401736:	6808      	ldr	r0, [r1, #0]
  401738:	f853 2b04 	ldr.w	r2, [r3], #4
  40173c:	6881      	ldr	r1, [r0, #8]
  40173e:	9301      	str	r3, [sp, #4]
  401740:	f000 fa56 	bl	401bf0 <_vfiprintf_r>
  401744:	b003      	add	sp, #12
  401746:	f85d eb04 	ldr.w	lr, [sp], #4
  40174a:	b004      	add	sp, #16
  40174c:	4770      	bx	lr
  40174e:	bf00      	nop
  401750:	2040002c 	.word	0x2040002c

00401754 <memcpy>:
  401754:	4684      	mov	ip, r0
  401756:	ea41 0300 	orr.w	r3, r1, r0
  40175a:	f013 0303 	ands.w	r3, r3, #3
  40175e:	d16d      	bne.n	40183c <memcpy+0xe8>
  401760:	3a40      	subs	r2, #64	; 0x40
  401762:	d341      	bcc.n	4017e8 <memcpy+0x94>
  401764:	f851 3b04 	ldr.w	r3, [r1], #4
  401768:	f840 3b04 	str.w	r3, [r0], #4
  40176c:	f851 3b04 	ldr.w	r3, [r1], #4
  401770:	f840 3b04 	str.w	r3, [r0], #4
  401774:	f851 3b04 	ldr.w	r3, [r1], #4
  401778:	f840 3b04 	str.w	r3, [r0], #4
  40177c:	f851 3b04 	ldr.w	r3, [r1], #4
  401780:	f840 3b04 	str.w	r3, [r0], #4
  401784:	f851 3b04 	ldr.w	r3, [r1], #4
  401788:	f840 3b04 	str.w	r3, [r0], #4
  40178c:	f851 3b04 	ldr.w	r3, [r1], #4
  401790:	f840 3b04 	str.w	r3, [r0], #4
  401794:	f851 3b04 	ldr.w	r3, [r1], #4
  401798:	f840 3b04 	str.w	r3, [r0], #4
  40179c:	f851 3b04 	ldr.w	r3, [r1], #4
  4017a0:	f840 3b04 	str.w	r3, [r0], #4
  4017a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4017a8:	f840 3b04 	str.w	r3, [r0], #4
  4017ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4017b0:	f840 3b04 	str.w	r3, [r0], #4
  4017b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4017b8:	f840 3b04 	str.w	r3, [r0], #4
  4017bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4017c0:	f840 3b04 	str.w	r3, [r0], #4
  4017c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4017c8:	f840 3b04 	str.w	r3, [r0], #4
  4017cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4017d0:	f840 3b04 	str.w	r3, [r0], #4
  4017d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4017d8:	f840 3b04 	str.w	r3, [r0], #4
  4017dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4017e0:	f840 3b04 	str.w	r3, [r0], #4
  4017e4:	3a40      	subs	r2, #64	; 0x40
  4017e6:	d2bd      	bcs.n	401764 <memcpy+0x10>
  4017e8:	3230      	adds	r2, #48	; 0x30
  4017ea:	d311      	bcc.n	401810 <memcpy+0xbc>
  4017ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4017f0:	f840 3b04 	str.w	r3, [r0], #4
  4017f4:	f851 3b04 	ldr.w	r3, [r1], #4
  4017f8:	f840 3b04 	str.w	r3, [r0], #4
  4017fc:	f851 3b04 	ldr.w	r3, [r1], #4
  401800:	f840 3b04 	str.w	r3, [r0], #4
  401804:	f851 3b04 	ldr.w	r3, [r1], #4
  401808:	f840 3b04 	str.w	r3, [r0], #4
  40180c:	3a10      	subs	r2, #16
  40180e:	d2ed      	bcs.n	4017ec <memcpy+0x98>
  401810:	320c      	adds	r2, #12
  401812:	d305      	bcc.n	401820 <memcpy+0xcc>
  401814:	f851 3b04 	ldr.w	r3, [r1], #4
  401818:	f840 3b04 	str.w	r3, [r0], #4
  40181c:	3a04      	subs	r2, #4
  40181e:	d2f9      	bcs.n	401814 <memcpy+0xc0>
  401820:	3204      	adds	r2, #4
  401822:	d008      	beq.n	401836 <memcpy+0xe2>
  401824:	07d2      	lsls	r2, r2, #31
  401826:	bf1c      	itt	ne
  401828:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40182c:	f800 3b01 	strbne.w	r3, [r0], #1
  401830:	d301      	bcc.n	401836 <memcpy+0xe2>
  401832:	880b      	ldrh	r3, [r1, #0]
  401834:	8003      	strh	r3, [r0, #0]
  401836:	4660      	mov	r0, ip
  401838:	4770      	bx	lr
  40183a:	bf00      	nop
  40183c:	2a08      	cmp	r2, #8
  40183e:	d313      	bcc.n	401868 <memcpy+0x114>
  401840:	078b      	lsls	r3, r1, #30
  401842:	d08d      	beq.n	401760 <memcpy+0xc>
  401844:	f010 0303 	ands.w	r3, r0, #3
  401848:	d08a      	beq.n	401760 <memcpy+0xc>
  40184a:	f1c3 0304 	rsb	r3, r3, #4
  40184e:	1ad2      	subs	r2, r2, r3
  401850:	07db      	lsls	r3, r3, #31
  401852:	bf1c      	itt	ne
  401854:	f811 3b01 	ldrbne.w	r3, [r1], #1
  401858:	f800 3b01 	strbne.w	r3, [r0], #1
  40185c:	d380      	bcc.n	401760 <memcpy+0xc>
  40185e:	f831 3b02 	ldrh.w	r3, [r1], #2
  401862:	f820 3b02 	strh.w	r3, [r0], #2
  401866:	e77b      	b.n	401760 <memcpy+0xc>
  401868:	3a04      	subs	r2, #4
  40186a:	d3d9      	bcc.n	401820 <memcpy+0xcc>
  40186c:	3a01      	subs	r2, #1
  40186e:	f811 3b01 	ldrb.w	r3, [r1], #1
  401872:	f800 3b01 	strb.w	r3, [r0], #1
  401876:	d2f9      	bcs.n	40186c <memcpy+0x118>
  401878:	780b      	ldrb	r3, [r1, #0]
  40187a:	7003      	strb	r3, [r0, #0]
  40187c:	784b      	ldrb	r3, [r1, #1]
  40187e:	7043      	strb	r3, [r0, #1]
  401880:	788b      	ldrb	r3, [r1, #2]
  401882:	7083      	strb	r3, [r0, #2]
  401884:	4660      	mov	r0, ip
  401886:	4770      	bx	lr

00401888 <memset>:
  401888:	b470      	push	{r4, r5, r6}
  40188a:	0786      	lsls	r6, r0, #30
  40188c:	d046      	beq.n	40191c <memset+0x94>
  40188e:	1e54      	subs	r4, r2, #1
  401890:	2a00      	cmp	r2, #0
  401892:	d041      	beq.n	401918 <memset+0x90>
  401894:	b2ca      	uxtb	r2, r1
  401896:	4603      	mov	r3, r0
  401898:	e002      	b.n	4018a0 <memset+0x18>
  40189a:	f114 34ff 	adds.w	r4, r4, #4294967295
  40189e:	d33b      	bcc.n	401918 <memset+0x90>
  4018a0:	f803 2b01 	strb.w	r2, [r3], #1
  4018a4:	079d      	lsls	r5, r3, #30
  4018a6:	d1f8      	bne.n	40189a <memset+0x12>
  4018a8:	2c03      	cmp	r4, #3
  4018aa:	d92e      	bls.n	40190a <memset+0x82>
  4018ac:	b2cd      	uxtb	r5, r1
  4018ae:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4018b2:	2c0f      	cmp	r4, #15
  4018b4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4018b8:	d919      	bls.n	4018ee <memset+0x66>
  4018ba:	f103 0210 	add.w	r2, r3, #16
  4018be:	4626      	mov	r6, r4
  4018c0:	3e10      	subs	r6, #16
  4018c2:	2e0f      	cmp	r6, #15
  4018c4:	f842 5c10 	str.w	r5, [r2, #-16]
  4018c8:	f842 5c0c 	str.w	r5, [r2, #-12]
  4018cc:	f842 5c08 	str.w	r5, [r2, #-8]
  4018d0:	f842 5c04 	str.w	r5, [r2, #-4]
  4018d4:	f102 0210 	add.w	r2, r2, #16
  4018d8:	d8f2      	bhi.n	4018c0 <memset+0x38>
  4018da:	f1a4 0210 	sub.w	r2, r4, #16
  4018de:	f022 020f 	bic.w	r2, r2, #15
  4018e2:	f004 040f 	and.w	r4, r4, #15
  4018e6:	3210      	adds	r2, #16
  4018e8:	2c03      	cmp	r4, #3
  4018ea:	4413      	add	r3, r2
  4018ec:	d90d      	bls.n	40190a <memset+0x82>
  4018ee:	461e      	mov	r6, r3
  4018f0:	4622      	mov	r2, r4
  4018f2:	3a04      	subs	r2, #4
  4018f4:	2a03      	cmp	r2, #3
  4018f6:	f846 5b04 	str.w	r5, [r6], #4
  4018fa:	d8fa      	bhi.n	4018f2 <memset+0x6a>
  4018fc:	1f22      	subs	r2, r4, #4
  4018fe:	f022 0203 	bic.w	r2, r2, #3
  401902:	3204      	adds	r2, #4
  401904:	4413      	add	r3, r2
  401906:	f004 0403 	and.w	r4, r4, #3
  40190a:	b12c      	cbz	r4, 401918 <memset+0x90>
  40190c:	b2c9      	uxtb	r1, r1
  40190e:	441c      	add	r4, r3
  401910:	f803 1b01 	strb.w	r1, [r3], #1
  401914:	429c      	cmp	r4, r3
  401916:	d1fb      	bne.n	401910 <memset+0x88>
  401918:	bc70      	pop	{r4, r5, r6}
  40191a:	4770      	bx	lr
  40191c:	4614      	mov	r4, r2
  40191e:	4603      	mov	r3, r0
  401920:	e7c2      	b.n	4018a8 <memset+0x20>
  401922:	bf00      	nop
	...

00401940 <strlen>:
  401940:	f890 f000 	pld	[r0]
  401944:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  401948:	f020 0107 	bic.w	r1, r0, #7
  40194c:	f06f 0c00 	mvn.w	ip, #0
  401950:	f010 0407 	ands.w	r4, r0, #7
  401954:	f891 f020 	pld	[r1, #32]
  401958:	f040 8049 	bne.w	4019ee <strlen+0xae>
  40195c:	f04f 0400 	mov.w	r4, #0
  401960:	f06f 0007 	mvn.w	r0, #7
  401964:	e9d1 2300 	ldrd	r2, r3, [r1]
  401968:	f891 f040 	pld	[r1, #64]	; 0x40
  40196c:	f100 0008 	add.w	r0, r0, #8
  401970:	fa82 f24c 	uadd8	r2, r2, ip
  401974:	faa4 f28c 	sel	r2, r4, ip
  401978:	fa83 f34c 	uadd8	r3, r3, ip
  40197c:	faa2 f38c 	sel	r3, r2, ip
  401980:	bb4b      	cbnz	r3, 4019d6 <strlen+0x96>
  401982:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  401986:	fa82 f24c 	uadd8	r2, r2, ip
  40198a:	f100 0008 	add.w	r0, r0, #8
  40198e:	faa4 f28c 	sel	r2, r4, ip
  401992:	fa83 f34c 	uadd8	r3, r3, ip
  401996:	faa2 f38c 	sel	r3, r2, ip
  40199a:	b9e3      	cbnz	r3, 4019d6 <strlen+0x96>
  40199c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4019a0:	fa82 f24c 	uadd8	r2, r2, ip
  4019a4:	f100 0008 	add.w	r0, r0, #8
  4019a8:	faa4 f28c 	sel	r2, r4, ip
  4019ac:	fa83 f34c 	uadd8	r3, r3, ip
  4019b0:	faa2 f38c 	sel	r3, r2, ip
  4019b4:	b97b      	cbnz	r3, 4019d6 <strlen+0x96>
  4019b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4019ba:	f101 0120 	add.w	r1, r1, #32
  4019be:	fa82 f24c 	uadd8	r2, r2, ip
  4019c2:	f100 0008 	add.w	r0, r0, #8
  4019c6:	faa4 f28c 	sel	r2, r4, ip
  4019ca:	fa83 f34c 	uadd8	r3, r3, ip
  4019ce:	faa2 f38c 	sel	r3, r2, ip
  4019d2:	2b00      	cmp	r3, #0
  4019d4:	d0c6      	beq.n	401964 <strlen+0x24>
  4019d6:	2a00      	cmp	r2, #0
  4019d8:	bf04      	itt	eq
  4019da:	3004      	addeq	r0, #4
  4019dc:	461a      	moveq	r2, r3
  4019de:	ba12      	rev	r2, r2
  4019e0:	fab2 f282 	clz	r2, r2
  4019e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4019e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4019ec:	4770      	bx	lr
  4019ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  4019f2:	f004 0503 	and.w	r5, r4, #3
  4019f6:	f1c4 0000 	rsb	r0, r4, #0
  4019fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4019fe:	f014 0f04 	tst.w	r4, #4
  401a02:	f891 f040 	pld	[r1, #64]	; 0x40
  401a06:	fa0c f505 	lsl.w	r5, ip, r5
  401a0a:	ea62 0205 	orn	r2, r2, r5
  401a0e:	bf1c      	itt	ne
  401a10:	ea63 0305 	ornne	r3, r3, r5
  401a14:	4662      	movne	r2, ip
  401a16:	f04f 0400 	mov.w	r4, #0
  401a1a:	e7a9      	b.n	401970 <strlen+0x30>

00401a1c <_strtol_l.isra.0>:
  401a1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401a20:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  401a24:	460f      	mov	r7, r1
  401a26:	4680      	mov	r8, r0
  401a28:	4616      	mov	r6, r2
  401a2a:	461d      	mov	r5, r3
  401a2c:	468a      	mov	sl, r1
  401a2e:	e000      	b.n	401a32 <_strtol_l.isra.0+0x16>
  401a30:	46a2      	mov	sl, r4
  401a32:	4654      	mov	r4, sl
  401a34:	4648      	mov	r0, r9
  401a36:	f814 bb01 	ldrb.w	fp, [r4], #1
  401a3a:	f001 fc8b 	bl	403354 <__locale_ctype_ptr_l>
  401a3e:	4458      	add	r0, fp
  401a40:	7842      	ldrb	r2, [r0, #1]
  401a42:	f012 0208 	ands.w	r2, r2, #8
  401a46:	d1f3      	bne.n	401a30 <_strtol_l.isra.0+0x14>
  401a48:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
  401a4c:	d04f      	beq.n	401aee <_strtol_l.isra.0+0xd2>
  401a4e:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
  401a52:	bf04      	itt	eq
  401a54:	f894 b000 	ldrbeq.w	fp, [r4]
  401a58:	f10a 0402 	addeq.w	r4, sl, #2
  401a5c:	b11d      	cbz	r5, 401a66 <_strtol_l.isra.0+0x4a>
  401a5e:	2d10      	cmp	r5, #16
  401a60:	d056      	beq.n	401b10 <_strtol_l.isra.0+0xf4>
  401a62:	46ac      	mov	ip, r5
  401a64:	e004      	b.n	401a70 <_strtol_l.isra.0+0x54>
  401a66:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
  401a6a:	d060      	beq.n	401b2e <_strtol_l.isra.0+0x112>
  401a6c:	250a      	movs	r5, #10
  401a6e:	46ac      	mov	ip, r5
  401a70:	2a00      	cmp	r2, #0
  401a72:	bf0c      	ite	eq
  401a74:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
  401a78:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
  401a7c:	2100      	movs	r1, #0
  401a7e:	fbb9 fefc 	udiv	lr, r9, ip
  401a82:	4608      	mov	r0, r1
  401a84:	fb0c 9a1e 	mls	sl, ip, lr, r9
  401a88:	e005      	b.n	401a96 <_strtol_l.isra.0+0x7a>
  401a8a:	d029      	beq.n	401ae0 <_strtol_l.isra.0+0xc4>
  401a8c:	fb0c 3000 	mla	r0, ip, r0, r3
  401a90:	2101      	movs	r1, #1
  401a92:	f814 bb01 	ldrb.w	fp, [r4], #1
  401a96:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
  401a9a:	2b09      	cmp	r3, #9
  401a9c:	d905      	bls.n	401aaa <_strtol_l.isra.0+0x8e>
  401a9e:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
  401aa2:	2b19      	cmp	r3, #25
  401aa4:	d80b      	bhi.n	401abe <_strtol_l.isra.0+0xa2>
  401aa6:	f1ab 0337 	sub.w	r3, fp, #55	; 0x37
  401aaa:	429d      	cmp	r5, r3
  401aac:	dd0f      	ble.n	401ace <_strtol_l.isra.0+0xb2>
  401aae:	f1b1 3fff 	cmp.w	r1, #4294967295
  401ab2:	d0ee      	beq.n	401a92 <_strtol_l.isra.0+0x76>
  401ab4:	4586      	cmp	lr, r0
  401ab6:	d2e8      	bcs.n	401a8a <_strtol_l.isra.0+0x6e>
  401ab8:	f04f 31ff 	mov.w	r1, #4294967295
  401abc:	e7e9      	b.n	401a92 <_strtol_l.isra.0+0x76>
  401abe:	f1ab 0361 	sub.w	r3, fp, #97	; 0x61
  401ac2:	2b19      	cmp	r3, #25
  401ac4:	d803      	bhi.n	401ace <_strtol_l.isra.0+0xb2>
  401ac6:	f1ab 0357 	sub.w	r3, fp, #87	; 0x57
  401aca:	429d      	cmp	r5, r3
  401acc:	dcef      	bgt.n	401aae <_strtol_l.isra.0+0x92>
  401ace:	1c4b      	adds	r3, r1, #1
  401ad0:	d013      	beq.n	401afa <_strtol_l.isra.0+0xde>
  401ad2:	b102      	cbz	r2, 401ad6 <_strtol_l.isra.0+0xba>
  401ad4:	4240      	negs	r0, r0
  401ad6:	b146      	cbz	r6, 401aea <_strtol_l.isra.0+0xce>
  401ad8:	b9c1      	cbnz	r1, 401b0c <_strtol_l.isra.0+0xf0>
  401ada:	6037      	str	r7, [r6, #0]
  401adc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401ae0:	459a      	cmp	sl, r3
  401ae2:	dad3      	bge.n	401a8c <_strtol_l.isra.0+0x70>
  401ae4:	f04f 31ff 	mov.w	r1, #4294967295
  401ae8:	e7d3      	b.n	401a92 <_strtol_l.isra.0+0x76>
  401aea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401aee:	f894 b000 	ldrb.w	fp, [r4]
  401af2:	2201      	movs	r2, #1
  401af4:	f10a 0402 	add.w	r4, sl, #2
  401af8:	e7b0      	b.n	401a5c <_strtol_l.isra.0+0x40>
  401afa:	2322      	movs	r3, #34	; 0x22
  401afc:	f8c8 3000 	str.w	r3, [r8]
  401b00:	b1ee      	cbz	r6, 401b3e <_strtol_l.isra.0+0x122>
  401b02:	1e67      	subs	r7, r4, #1
  401b04:	4648      	mov	r0, r9
  401b06:	6037      	str	r7, [r6, #0]
  401b08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401b0c:	4681      	mov	r9, r0
  401b0e:	e7f8      	b.n	401b02 <_strtol_l.isra.0+0xe6>
  401b10:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
  401b14:	d1a5      	bne.n	401a62 <_strtol_l.isra.0+0x46>
  401b16:	7823      	ldrb	r3, [r4, #0]
  401b18:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  401b1c:	2b58      	cmp	r3, #88	; 0x58
  401b1e:	d1a0      	bne.n	401a62 <_strtol_l.isra.0+0x46>
  401b20:	f04f 0c10 	mov.w	ip, #16
  401b24:	f894 b001 	ldrb.w	fp, [r4, #1]
  401b28:	4665      	mov	r5, ip
  401b2a:	3402      	adds	r4, #2
  401b2c:	e7a0      	b.n	401a70 <_strtol_l.isra.0+0x54>
  401b2e:	7823      	ldrb	r3, [r4, #0]
  401b30:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  401b34:	2b58      	cmp	r3, #88	; 0x58
  401b36:	d0f3      	beq.n	401b20 <_strtol_l.isra.0+0x104>
  401b38:	2508      	movs	r5, #8
  401b3a:	46ac      	mov	ip, r5
  401b3c:	e798      	b.n	401a70 <_strtol_l.isra.0+0x54>
  401b3e:	4648      	mov	r0, r9
  401b40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00401b44 <strtol>:
  401b44:	b530      	push	{r4, r5, lr}
  401b46:	4c08      	ldr	r4, [pc, #32]	; (401b68 <strtol+0x24>)
  401b48:	4b08      	ldr	r3, [pc, #32]	; (401b6c <strtol+0x28>)
  401b4a:	6825      	ldr	r5, [r4, #0]
  401b4c:	6b6c      	ldr	r4, [r5, #52]	; 0x34
  401b4e:	b083      	sub	sp, #12
  401b50:	2c00      	cmp	r4, #0
  401b52:	bf08      	it	eq
  401b54:	461c      	moveq	r4, r3
  401b56:	9400      	str	r4, [sp, #0]
  401b58:	4613      	mov	r3, r2
  401b5a:	460a      	mov	r2, r1
  401b5c:	4601      	mov	r1, r0
  401b5e:	4628      	mov	r0, r5
  401b60:	f7ff ff5c 	bl	401a1c <_strtol_l.isra.0>
  401b64:	b003      	add	sp, #12
  401b66:	bd30      	pop	{r4, r5, pc}
  401b68:	2040002c 	.word	0x2040002c
  401b6c:	2040045c 	.word	0x2040045c

00401b70 <__sprint_r.part.0>:
  401b70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401b74:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  401b76:	049c      	lsls	r4, r3, #18
  401b78:	4693      	mov	fp, r2
  401b7a:	d52f      	bpl.n	401bdc <__sprint_r.part.0+0x6c>
  401b7c:	6893      	ldr	r3, [r2, #8]
  401b7e:	6812      	ldr	r2, [r2, #0]
  401b80:	b353      	cbz	r3, 401bd8 <__sprint_r.part.0+0x68>
  401b82:	460e      	mov	r6, r1
  401b84:	4607      	mov	r7, r0
  401b86:	f102 0908 	add.w	r9, r2, #8
  401b8a:	e919 0420 	ldmdb	r9, {r5, sl}
  401b8e:	ea5f 089a 	movs.w	r8, sl, lsr #2
  401b92:	d017      	beq.n	401bc4 <__sprint_r.part.0+0x54>
  401b94:	3d04      	subs	r5, #4
  401b96:	2400      	movs	r4, #0
  401b98:	e001      	b.n	401b9e <__sprint_r.part.0+0x2e>
  401b9a:	45a0      	cmp	r8, r4
  401b9c:	d010      	beq.n	401bc0 <__sprint_r.part.0+0x50>
  401b9e:	4632      	mov	r2, r6
  401ba0:	f855 1f04 	ldr.w	r1, [r5, #4]!
  401ba4:	4638      	mov	r0, r7
  401ba6:	f001 f8bb 	bl	402d20 <_fputwc_r>
  401baa:	1c43      	adds	r3, r0, #1
  401bac:	f104 0401 	add.w	r4, r4, #1
  401bb0:	d1f3      	bne.n	401b9a <__sprint_r.part.0+0x2a>
  401bb2:	2300      	movs	r3, #0
  401bb4:	f8cb 3008 	str.w	r3, [fp, #8]
  401bb8:	f8cb 3004 	str.w	r3, [fp, #4]
  401bbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401bc0:	f8db 3008 	ldr.w	r3, [fp, #8]
  401bc4:	f02a 0a03 	bic.w	sl, sl, #3
  401bc8:	eba3 030a 	sub.w	r3, r3, sl
  401bcc:	f8cb 3008 	str.w	r3, [fp, #8]
  401bd0:	f109 0908 	add.w	r9, r9, #8
  401bd4:	2b00      	cmp	r3, #0
  401bd6:	d1d8      	bne.n	401b8a <__sprint_r.part.0+0x1a>
  401bd8:	2000      	movs	r0, #0
  401bda:	e7ea      	b.n	401bb2 <__sprint_r.part.0+0x42>
  401bdc:	f001 fa0a 	bl	402ff4 <__sfvwrite_r>
  401be0:	2300      	movs	r3, #0
  401be2:	f8cb 3008 	str.w	r3, [fp, #8]
  401be6:	f8cb 3004 	str.w	r3, [fp, #4]
  401bea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401bee:	bf00      	nop

00401bf0 <_vfiprintf_r>:
  401bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401bf4:	b0ad      	sub	sp, #180	; 0xb4
  401bf6:	461d      	mov	r5, r3
  401bf8:	468b      	mov	fp, r1
  401bfa:	4690      	mov	r8, r2
  401bfc:	9307      	str	r3, [sp, #28]
  401bfe:	9006      	str	r0, [sp, #24]
  401c00:	b118      	cbz	r0, 401c0a <_vfiprintf_r+0x1a>
  401c02:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401c04:	2b00      	cmp	r3, #0
  401c06:	f000 80f3 	beq.w	401df0 <_vfiprintf_r+0x200>
  401c0a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401c0e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  401c12:	07df      	lsls	r7, r3, #31
  401c14:	b281      	uxth	r1, r0
  401c16:	d402      	bmi.n	401c1e <_vfiprintf_r+0x2e>
  401c18:	058e      	lsls	r6, r1, #22
  401c1a:	f140 80fc 	bpl.w	401e16 <_vfiprintf_r+0x226>
  401c1e:	048c      	lsls	r4, r1, #18
  401c20:	d40a      	bmi.n	401c38 <_vfiprintf_r+0x48>
  401c22:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401c26:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  401c2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  401c2e:	f8ab 100c 	strh.w	r1, [fp, #12]
  401c32:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  401c36:	b289      	uxth	r1, r1
  401c38:	0708      	lsls	r0, r1, #28
  401c3a:	f140 80b3 	bpl.w	401da4 <_vfiprintf_r+0x1b4>
  401c3e:	f8db 3010 	ldr.w	r3, [fp, #16]
  401c42:	2b00      	cmp	r3, #0
  401c44:	f000 80ae 	beq.w	401da4 <_vfiprintf_r+0x1b4>
  401c48:	f001 031a 	and.w	r3, r1, #26
  401c4c:	2b0a      	cmp	r3, #10
  401c4e:	f000 80b5 	beq.w	401dbc <_vfiprintf_r+0x1cc>
  401c52:	2300      	movs	r3, #0
  401c54:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  401c58:	930b      	str	r3, [sp, #44]	; 0x2c
  401c5a:	9311      	str	r3, [sp, #68]	; 0x44
  401c5c:	9310      	str	r3, [sp, #64]	; 0x40
  401c5e:	9303      	str	r3, [sp, #12]
  401c60:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  401c64:	46ca      	mov	sl, r9
  401c66:	f8cd b010 	str.w	fp, [sp, #16]
  401c6a:	f898 3000 	ldrb.w	r3, [r8]
  401c6e:	4644      	mov	r4, r8
  401c70:	b1fb      	cbz	r3, 401cb2 <_vfiprintf_r+0xc2>
  401c72:	2b25      	cmp	r3, #37	; 0x25
  401c74:	d102      	bne.n	401c7c <_vfiprintf_r+0x8c>
  401c76:	e01c      	b.n	401cb2 <_vfiprintf_r+0xc2>
  401c78:	2b25      	cmp	r3, #37	; 0x25
  401c7a:	d003      	beq.n	401c84 <_vfiprintf_r+0x94>
  401c7c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  401c80:	2b00      	cmp	r3, #0
  401c82:	d1f9      	bne.n	401c78 <_vfiprintf_r+0x88>
  401c84:	eba4 0508 	sub.w	r5, r4, r8
  401c88:	b19d      	cbz	r5, 401cb2 <_vfiprintf_r+0xc2>
  401c8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401c8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401c8e:	f8ca 8000 	str.w	r8, [sl]
  401c92:	3301      	adds	r3, #1
  401c94:	442a      	add	r2, r5
  401c96:	2b07      	cmp	r3, #7
  401c98:	f8ca 5004 	str.w	r5, [sl, #4]
  401c9c:	9211      	str	r2, [sp, #68]	; 0x44
  401c9e:	9310      	str	r3, [sp, #64]	; 0x40
  401ca0:	dd7a      	ble.n	401d98 <_vfiprintf_r+0x1a8>
  401ca2:	2a00      	cmp	r2, #0
  401ca4:	f040 84b0 	bne.w	402608 <_vfiprintf_r+0xa18>
  401ca8:	9b03      	ldr	r3, [sp, #12]
  401caa:	9210      	str	r2, [sp, #64]	; 0x40
  401cac:	442b      	add	r3, r5
  401cae:	46ca      	mov	sl, r9
  401cb0:	9303      	str	r3, [sp, #12]
  401cb2:	7823      	ldrb	r3, [r4, #0]
  401cb4:	2b00      	cmp	r3, #0
  401cb6:	f000 83e0 	beq.w	40247a <_vfiprintf_r+0x88a>
  401cba:	2000      	movs	r0, #0
  401cbc:	f04f 0300 	mov.w	r3, #0
  401cc0:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  401cc4:	f104 0801 	add.w	r8, r4, #1
  401cc8:	7862      	ldrb	r2, [r4, #1]
  401cca:	4605      	mov	r5, r0
  401ccc:	4606      	mov	r6, r0
  401cce:	4603      	mov	r3, r0
  401cd0:	f04f 34ff 	mov.w	r4, #4294967295
  401cd4:	f108 0801 	add.w	r8, r8, #1
  401cd8:	f1a2 0120 	sub.w	r1, r2, #32
  401cdc:	2958      	cmp	r1, #88	; 0x58
  401cde:	f200 82de 	bhi.w	40229e <_vfiprintf_r+0x6ae>
  401ce2:	e8df f011 	tbh	[pc, r1, lsl #1]
  401ce6:	0221      	.short	0x0221
  401ce8:	02dc02dc 	.word	0x02dc02dc
  401cec:	02dc0229 	.word	0x02dc0229
  401cf0:	02dc02dc 	.word	0x02dc02dc
  401cf4:	02dc02dc 	.word	0x02dc02dc
  401cf8:	028902dc 	.word	0x028902dc
  401cfc:	02dc0295 	.word	0x02dc0295
  401d00:	02bd00a2 	.word	0x02bd00a2
  401d04:	019f02dc 	.word	0x019f02dc
  401d08:	01a401a4 	.word	0x01a401a4
  401d0c:	01a401a4 	.word	0x01a401a4
  401d10:	01a401a4 	.word	0x01a401a4
  401d14:	01a401a4 	.word	0x01a401a4
  401d18:	02dc01a4 	.word	0x02dc01a4
  401d1c:	02dc02dc 	.word	0x02dc02dc
  401d20:	02dc02dc 	.word	0x02dc02dc
  401d24:	02dc02dc 	.word	0x02dc02dc
  401d28:	02dc02dc 	.word	0x02dc02dc
  401d2c:	01b202dc 	.word	0x01b202dc
  401d30:	02dc02dc 	.word	0x02dc02dc
  401d34:	02dc02dc 	.word	0x02dc02dc
  401d38:	02dc02dc 	.word	0x02dc02dc
  401d3c:	02dc02dc 	.word	0x02dc02dc
  401d40:	02dc02dc 	.word	0x02dc02dc
  401d44:	02dc0197 	.word	0x02dc0197
  401d48:	02dc02dc 	.word	0x02dc02dc
  401d4c:	02dc02dc 	.word	0x02dc02dc
  401d50:	02dc019b 	.word	0x02dc019b
  401d54:	025302dc 	.word	0x025302dc
  401d58:	02dc02dc 	.word	0x02dc02dc
  401d5c:	02dc02dc 	.word	0x02dc02dc
  401d60:	02dc02dc 	.word	0x02dc02dc
  401d64:	02dc02dc 	.word	0x02dc02dc
  401d68:	02dc02dc 	.word	0x02dc02dc
  401d6c:	021b025a 	.word	0x021b025a
  401d70:	02dc02dc 	.word	0x02dc02dc
  401d74:	026e02dc 	.word	0x026e02dc
  401d78:	02dc021b 	.word	0x02dc021b
  401d7c:	027302dc 	.word	0x027302dc
  401d80:	01f502dc 	.word	0x01f502dc
  401d84:	02090182 	.word	0x02090182
  401d88:	02dc02d7 	.word	0x02dc02d7
  401d8c:	02dc029a 	.word	0x02dc029a
  401d90:	02dc00a7 	.word	0x02dc00a7
  401d94:	022e02dc 	.word	0x022e02dc
  401d98:	f10a 0a08 	add.w	sl, sl, #8
  401d9c:	9b03      	ldr	r3, [sp, #12]
  401d9e:	442b      	add	r3, r5
  401da0:	9303      	str	r3, [sp, #12]
  401da2:	e786      	b.n	401cb2 <_vfiprintf_r+0xc2>
  401da4:	4659      	mov	r1, fp
  401da6:	9806      	ldr	r0, [sp, #24]
  401da8:	f000 fdac 	bl	402904 <__swsetup_r>
  401dac:	bb18      	cbnz	r0, 401df6 <_vfiprintf_r+0x206>
  401dae:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  401db2:	f001 031a 	and.w	r3, r1, #26
  401db6:	2b0a      	cmp	r3, #10
  401db8:	f47f af4b 	bne.w	401c52 <_vfiprintf_r+0x62>
  401dbc:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  401dc0:	2b00      	cmp	r3, #0
  401dc2:	f6ff af46 	blt.w	401c52 <_vfiprintf_r+0x62>
  401dc6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401dca:	07db      	lsls	r3, r3, #31
  401dcc:	d405      	bmi.n	401dda <_vfiprintf_r+0x1ea>
  401dce:	058f      	lsls	r7, r1, #22
  401dd0:	d403      	bmi.n	401dda <_vfiprintf_r+0x1ea>
  401dd2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401dd6:	f001 fac7 	bl	403368 <__retarget_lock_release_recursive>
  401dda:	462b      	mov	r3, r5
  401ddc:	4642      	mov	r2, r8
  401dde:	4659      	mov	r1, fp
  401de0:	9806      	ldr	r0, [sp, #24]
  401de2:	f000 fd4d 	bl	402880 <__sbprintf>
  401de6:	9003      	str	r0, [sp, #12]
  401de8:	9803      	ldr	r0, [sp, #12]
  401dea:	b02d      	add	sp, #180	; 0xb4
  401dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401df0:	f000 fef4 	bl	402bdc <__sinit>
  401df4:	e709      	b.n	401c0a <_vfiprintf_r+0x1a>
  401df6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401dfa:	07d9      	lsls	r1, r3, #31
  401dfc:	d404      	bmi.n	401e08 <_vfiprintf_r+0x218>
  401dfe:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  401e02:	059a      	lsls	r2, r3, #22
  401e04:	f140 84aa 	bpl.w	40275c <_vfiprintf_r+0xb6c>
  401e08:	f04f 33ff 	mov.w	r3, #4294967295
  401e0c:	9303      	str	r3, [sp, #12]
  401e0e:	9803      	ldr	r0, [sp, #12]
  401e10:	b02d      	add	sp, #180	; 0xb4
  401e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401e16:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401e1a:	f001 faa3 	bl	403364 <__retarget_lock_acquire_recursive>
  401e1e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  401e22:	b281      	uxth	r1, r0
  401e24:	e6fb      	b.n	401c1e <_vfiprintf_r+0x2e>
  401e26:	4276      	negs	r6, r6
  401e28:	9207      	str	r2, [sp, #28]
  401e2a:	f043 0304 	orr.w	r3, r3, #4
  401e2e:	f898 2000 	ldrb.w	r2, [r8]
  401e32:	e74f      	b.n	401cd4 <_vfiprintf_r+0xe4>
  401e34:	9608      	str	r6, [sp, #32]
  401e36:	069e      	lsls	r6, r3, #26
  401e38:	f100 8450 	bmi.w	4026dc <_vfiprintf_r+0xaec>
  401e3c:	9907      	ldr	r1, [sp, #28]
  401e3e:	06dd      	lsls	r5, r3, #27
  401e40:	460a      	mov	r2, r1
  401e42:	f100 83ef 	bmi.w	402624 <_vfiprintf_r+0xa34>
  401e46:	0658      	lsls	r0, r3, #25
  401e48:	f140 83ec 	bpl.w	402624 <_vfiprintf_r+0xa34>
  401e4c:	880e      	ldrh	r6, [r1, #0]
  401e4e:	3104      	adds	r1, #4
  401e50:	2700      	movs	r7, #0
  401e52:	2201      	movs	r2, #1
  401e54:	9107      	str	r1, [sp, #28]
  401e56:	f04f 0100 	mov.w	r1, #0
  401e5a:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  401e5e:	2500      	movs	r5, #0
  401e60:	1c61      	adds	r1, r4, #1
  401e62:	f000 8116 	beq.w	402092 <_vfiprintf_r+0x4a2>
  401e66:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  401e6a:	9102      	str	r1, [sp, #8]
  401e6c:	ea56 0107 	orrs.w	r1, r6, r7
  401e70:	f040 8114 	bne.w	40209c <_vfiprintf_r+0x4ac>
  401e74:	2c00      	cmp	r4, #0
  401e76:	f040 835c 	bne.w	402532 <_vfiprintf_r+0x942>
  401e7a:	2a00      	cmp	r2, #0
  401e7c:	f040 83b7 	bne.w	4025ee <_vfiprintf_r+0x9fe>
  401e80:	f013 0301 	ands.w	r3, r3, #1
  401e84:	9305      	str	r3, [sp, #20]
  401e86:	f000 8457 	beq.w	402738 <_vfiprintf_r+0xb48>
  401e8a:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  401e8e:	2330      	movs	r3, #48	; 0x30
  401e90:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  401e94:	9b05      	ldr	r3, [sp, #20]
  401e96:	42a3      	cmp	r3, r4
  401e98:	bfb8      	it	lt
  401e9a:	4623      	movlt	r3, r4
  401e9c:	9301      	str	r3, [sp, #4]
  401e9e:	b10d      	cbz	r5, 401ea4 <_vfiprintf_r+0x2b4>
  401ea0:	3301      	adds	r3, #1
  401ea2:	9301      	str	r3, [sp, #4]
  401ea4:	9b02      	ldr	r3, [sp, #8]
  401ea6:	f013 0302 	ands.w	r3, r3, #2
  401eaa:	9309      	str	r3, [sp, #36]	; 0x24
  401eac:	d002      	beq.n	401eb4 <_vfiprintf_r+0x2c4>
  401eae:	9b01      	ldr	r3, [sp, #4]
  401eb0:	3302      	adds	r3, #2
  401eb2:	9301      	str	r3, [sp, #4]
  401eb4:	9b02      	ldr	r3, [sp, #8]
  401eb6:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  401eba:	930a      	str	r3, [sp, #40]	; 0x28
  401ebc:	f040 8217 	bne.w	4022ee <_vfiprintf_r+0x6fe>
  401ec0:	9b08      	ldr	r3, [sp, #32]
  401ec2:	9a01      	ldr	r2, [sp, #4]
  401ec4:	1a9d      	subs	r5, r3, r2
  401ec6:	2d00      	cmp	r5, #0
  401ec8:	f340 8211 	ble.w	4022ee <_vfiprintf_r+0x6fe>
  401ecc:	2d10      	cmp	r5, #16
  401ece:	f340 8490 	ble.w	4027f2 <_vfiprintf_r+0xc02>
  401ed2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401ed4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401ed6:	4ec4      	ldr	r6, [pc, #784]	; (4021e8 <_vfiprintf_r+0x5f8>)
  401ed8:	46d6      	mov	lr, sl
  401eda:	2710      	movs	r7, #16
  401edc:	46a2      	mov	sl, r4
  401ede:	4619      	mov	r1, r3
  401ee0:	9c06      	ldr	r4, [sp, #24]
  401ee2:	e007      	b.n	401ef4 <_vfiprintf_r+0x304>
  401ee4:	f101 0c02 	add.w	ip, r1, #2
  401ee8:	f10e 0e08 	add.w	lr, lr, #8
  401eec:	4601      	mov	r1, r0
  401eee:	3d10      	subs	r5, #16
  401ef0:	2d10      	cmp	r5, #16
  401ef2:	dd11      	ble.n	401f18 <_vfiprintf_r+0x328>
  401ef4:	1c48      	adds	r0, r1, #1
  401ef6:	3210      	adds	r2, #16
  401ef8:	2807      	cmp	r0, #7
  401efa:	9211      	str	r2, [sp, #68]	; 0x44
  401efc:	e88e 00c0 	stmia.w	lr, {r6, r7}
  401f00:	9010      	str	r0, [sp, #64]	; 0x40
  401f02:	ddef      	ble.n	401ee4 <_vfiprintf_r+0x2f4>
  401f04:	2a00      	cmp	r2, #0
  401f06:	f040 81e4 	bne.w	4022d2 <_vfiprintf_r+0x6e2>
  401f0a:	3d10      	subs	r5, #16
  401f0c:	2d10      	cmp	r5, #16
  401f0e:	4611      	mov	r1, r2
  401f10:	f04f 0c01 	mov.w	ip, #1
  401f14:	46ce      	mov	lr, r9
  401f16:	dced      	bgt.n	401ef4 <_vfiprintf_r+0x304>
  401f18:	4654      	mov	r4, sl
  401f1a:	4661      	mov	r1, ip
  401f1c:	46f2      	mov	sl, lr
  401f1e:	442a      	add	r2, r5
  401f20:	2907      	cmp	r1, #7
  401f22:	9211      	str	r2, [sp, #68]	; 0x44
  401f24:	f8ca 6000 	str.w	r6, [sl]
  401f28:	f8ca 5004 	str.w	r5, [sl, #4]
  401f2c:	9110      	str	r1, [sp, #64]	; 0x40
  401f2e:	f300 82ec 	bgt.w	40250a <_vfiprintf_r+0x91a>
  401f32:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401f36:	f10a 0a08 	add.w	sl, sl, #8
  401f3a:	1c48      	adds	r0, r1, #1
  401f3c:	2d00      	cmp	r5, #0
  401f3e:	f040 81de 	bne.w	4022fe <_vfiprintf_r+0x70e>
  401f42:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401f44:	2b00      	cmp	r3, #0
  401f46:	f000 81f8 	beq.w	40233a <_vfiprintf_r+0x74a>
  401f4a:	3202      	adds	r2, #2
  401f4c:	a90e      	add	r1, sp, #56	; 0x38
  401f4e:	2302      	movs	r3, #2
  401f50:	2807      	cmp	r0, #7
  401f52:	9211      	str	r2, [sp, #68]	; 0x44
  401f54:	9010      	str	r0, [sp, #64]	; 0x40
  401f56:	e88a 000a 	stmia.w	sl, {r1, r3}
  401f5a:	f340 81ea 	ble.w	402332 <_vfiprintf_r+0x742>
  401f5e:	2a00      	cmp	r2, #0
  401f60:	f040 838c 	bne.w	40267c <_vfiprintf_r+0xa8c>
  401f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401f66:	2b80      	cmp	r3, #128	; 0x80
  401f68:	f04f 0001 	mov.w	r0, #1
  401f6c:	4611      	mov	r1, r2
  401f6e:	46ca      	mov	sl, r9
  401f70:	f040 81e7 	bne.w	402342 <_vfiprintf_r+0x752>
  401f74:	9b08      	ldr	r3, [sp, #32]
  401f76:	9d01      	ldr	r5, [sp, #4]
  401f78:	1b5e      	subs	r6, r3, r5
  401f7a:	2e00      	cmp	r6, #0
  401f7c:	f340 81e1 	ble.w	402342 <_vfiprintf_r+0x752>
  401f80:	2e10      	cmp	r6, #16
  401f82:	4d9a      	ldr	r5, [pc, #616]	; (4021ec <_vfiprintf_r+0x5fc>)
  401f84:	f340 8450 	ble.w	402828 <_vfiprintf_r+0xc38>
  401f88:	46d4      	mov	ip, sl
  401f8a:	2710      	movs	r7, #16
  401f8c:	46a2      	mov	sl, r4
  401f8e:	9c06      	ldr	r4, [sp, #24]
  401f90:	e007      	b.n	401fa2 <_vfiprintf_r+0x3b2>
  401f92:	f101 0e02 	add.w	lr, r1, #2
  401f96:	f10c 0c08 	add.w	ip, ip, #8
  401f9a:	4601      	mov	r1, r0
  401f9c:	3e10      	subs	r6, #16
  401f9e:	2e10      	cmp	r6, #16
  401fa0:	dd11      	ble.n	401fc6 <_vfiprintf_r+0x3d6>
  401fa2:	1c48      	adds	r0, r1, #1
  401fa4:	3210      	adds	r2, #16
  401fa6:	2807      	cmp	r0, #7
  401fa8:	9211      	str	r2, [sp, #68]	; 0x44
  401faa:	e88c 00a0 	stmia.w	ip, {r5, r7}
  401fae:	9010      	str	r0, [sp, #64]	; 0x40
  401fb0:	ddef      	ble.n	401f92 <_vfiprintf_r+0x3a2>
  401fb2:	2a00      	cmp	r2, #0
  401fb4:	f040 829d 	bne.w	4024f2 <_vfiprintf_r+0x902>
  401fb8:	3e10      	subs	r6, #16
  401fba:	2e10      	cmp	r6, #16
  401fbc:	f04f 0e01 	mov.w	lr, #1
  401fc0:	4611      	mov	r1, r2
  401fc2:	46cc      	mov	ip, r9
  401fc4:	dced      	bgt.n	401fa2 <_vfiprintf_r+0x3b2>
  401fc6:	4654      	mov	r4, sl
  401fc8:	46e2      	mov	sl, ip
  401fca:	4432      	add	r2, r6
  401fcc:	f1be 0f07 	cmp.w	lr, #7
  401fd0:	9211      	str	r2, [sp, #68]	; 0x44
  401fd2:	e88a 0060 	stmia.w	sl, {r5, r6}
  401fd6:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  401fda:	f300 8369 	bgt.w	4026b0 <_vfiprintf_r+0xac0>
  401fde:	f10a 0a08 	add.w	sl, sl, #8
  401fe2:	f10e 0001 	add.w	r0, lr, #1
  401fe6:	4671      	mov	r1, lr
  401fe8:	e1ab      	b.n	402342 <_vfiprintf_r+0x752>
  401fea:	9608      	str	r6, [sp, #32]
  401fec:	f013 0220 	ands.w	r2, r3, #32
  401ff0:	f040 838c 	bne.w	40270c <_vfiprintf_r+0xb1c>
  401ff4:	f013 0110 	ands.w	r1, r3, #16
  401ff8:	f040 831a 	bne.w	402630 <_vfiprintf_r+0xa40>
  401ffc:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  402000:	f000 8316 	beq.w	402630 <_vfiprintf_r+0xa40>
  402004:	9807      	ldr	r0, [sp, #28]
  402006:	460a      	mov	r2, r1
  402008:	4601      	mov	r1, r0
  40200a:	3104      	adds	r1, #4
  40200c:	8806      	ldrh	r6, [r0, #0]
  40200e:	9107      	str	r1, [sp, #28]
  402010:	2700      	movs	r7, #0
  402012:	e720      	b.n	401e56 <_vfiprintf_r+0x266>
  402014:	9608      	str	r6, [sp, #32]
  402016:	f043 0310 	orr.w	r3, r3, #16
  40201a:	e7e7      	b.n	401fec <_vfiprintf_r+0x3fc>
  40201c:	9608      	str	r6, [sp, #32]
  40201e:	f043 0310 	orr.w	r3, r3, #16
  402022:	e708      	b.n	401e36 <_vfiprintf_r+0x246>
  402024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402028:	f898 2000 	ldrb.w	r2, [r8]
  40202c:	e652      	b.n	401cd4 <_vfiprintf_r+0xe4>
  40202e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  402032:	2600      	movs	r6, #0
  402034:	f818 2b01 	ldrb.w	r2, [r8], #1
  402038:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40203c:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  402040:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  402044:	2909      	cmp	r1, #9
  402046:	d9f5      	bls.n	402034 <_vfiprintf_r+0x444>
  402048:	e646      	b.n	401cd8 <_vfiprintf_r+0xe8>
  40204a:	9608      	str	r6, [sp, #32]
  40204c:	2800      	cmp	r0, #0
  40204e:	f040 8408 	bne.w	402862 <_vfiprintf_r+0xc72>
  402052:	f043 0310 	orr.w	r3, r3, #16
  402056:	069e      	lsls	r6, r3, #26
  402058:	f100 834c 	bmi.w	4026f4 <_vfiprintf_r+0xb04>
  40205c:	06dd      	lsls	r5, r3, #27
  40205e:	f100 82f3 	bmi.w	402648 <_vfiprintf_r+0xa58>
  402062:	0658      	lsls	r0, r3, #25
  402064:	f140 82f0 	bpl.w	402648 <_vfiprintf_r+0xa58>
  402068:	9d07      	ldr	r5, [sp, #28]
  40206a:	f9b5 6000 	ldrsh.w	r6, [r5]
  40206e:	462a      	mov	r2, r5
  402070:	17f7      	asrs	r7, r6, #31
  402072:	3204      	adds	r2, #4
  402074:	4630      	mov	r0, r6
  402076:	4639      	mov	r1, r7
  402078:	9207      	str	r2, [sp, #28]
  40207a:	2800      	cmp	r0, #0
  40207c:	f171 0200 	sbcs.w	r2, r1, #0
  402080:	f2c0 835d 	blt.w	40273e <_vfiprintf_r+0xb4e>
  402084:	1c61      	adds	r1, r4, #1
  402086:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40208a:	f04f 0201 	mov.w	r2, #1
  40208e:	f47f aeea 	bne.w	401e66 <_vfiprintf_r+0x276>
  402092:	ea56 0107 	orrs.w	r1, r6, r7
  402096:	f000 824d 	beq.w	402534 <_vfiprintf_r+0x944>
  40209a:	9302      	str	r3, [sp, #8]
  40209c:	2a01      	cmp	r2, #1
  40209e:	f000 828c 	beq.w	4025ba <_vfiprintf_r+0x9ca>
  4020a2:	2a02      	cmp	r2, #2
  4020a4:	f040 825c 	bne.w	402560 <_vfiprintf_r+0x970>
  4020a8:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4020aa:	46cb      	mov	fp, r9
  4020ac:	0933      	lsrs	r3, r6, #4
  4020ae:	f006 010f 	and.w	r1, r6, #15
  4020b2:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4020b6:	093a      	lsrs	r2, r7, #4
  4020b8:	461e      	mov	r6, r3
  4020ba:	4617      	mov	r7, r2
  4020bc:	5c43      	ldrb	r3, [r0, r1]
  4020be:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  4020c2:	ea56 0307 	orrs.w	r3, r6, r7
  4020c6:	d1f1      	bne.n	4020ac <_vfiprintf_r+0x4bc>
  4020c8:	eba9 030b 	sub.w	r3, r9, fp
  4020cc:	9305      	str	r3, [sp, #20]
  4020ce:	e6e1      	b.n	401e94 <_vfiprintf_r+0x2a4>
  4020d0:	2800      	cmp	r0, #0
  4020d2:	f040 83c0 	bne.w	402856 <_vfiprintf_r+0xc66>
  4020d6:	0699      	lsls	r1, r3, #26
  4020d8:	f100 8367 	bmi.w	4027aa <_vfiprintf_r+0xbba>
  4020dc:	06da      	lsls	r2, r3, #27
  4020de:	f100 80f1 	bmi.w	4022c4 <_vfiprintf_r+0x6d4>
  4020e2:	065b      	lsls	r3, r3, #25
  4020e4:	f140 80ee 	bpl.w	4022c4 <_vfiprintf_r+0x6d4>
  4020e8:	9a07      	ldr	r2, [sp, #28]
  4020ea:	6813      	ldr	r3, [r2, #0]
  4020ec:	3204      	adds	r2, #4
  4020ee:	9207      	str	r2, [sp, #28]
  4020f0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4020f4:	801a      	strh	r2, [r3, #0]
  4020f6:	e5b8      	b.n	401c6a <_vfiprintf_r+0x7a>
  4020f8:	9807      	ldr	r0, [sp, #28]
  4020fa:	4a3d      	ldr	r2, [pc, #244]	; (4021f0 <_vfiprintf_r+0x600>)
  4020fc:	9608      	str	r6, [sp, #32]
  4020fe:	920b      	str	r2, [sp, #44]	; 0x2c
  402100:	6806      	ldr	r6, [r0, #0]
  402102:	2278      	movs	r2, #120	; 0x78
  402104:	2130      	movs	r1, #48	; 0x30
  402106:	3004      	adds	r0, #4
  402108:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40210c:	f043 0302 	orr.w	r3, r3, #2
  402110:	9007      	str	r0, [sp, #28]
  402112:	2700      	movs	r7, #0
  402114:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  402118:	2202      	movs	r2, #2
  40211a:	e69c      	b.n	401e56 <_vfiprintf_r+0x266>
  40211c:	9608      	str	r6, [sp, #32]
  40211e:	2800      	cmp	r0, #0
  402120:	d099      	beq.n	402056 <_vfiprintf_r+0x466>
  402122:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402126:	e796      	b.n	402056 <_vfiprintf_r+0x466>
  402128:	f898 2000 	ldrb.w	r2, [r8]
  40212c:	2d00      	cmp	r5, #0
  40212e:	f47f add1 	bne.w	401cd4 <_vfiprintf_r+0xe4>
  402132:	2001      	movs	r0, #1
  402134:	2520      	movs	r5, #32
  402136:	e5cd      	b.n	401cd4 <_vfiprintf_r+0xe4>
  402138:	f043 0301 	orr.w	r3, r3, #1
  40213c:	f898 2000 	ldrb.w	r2, [r8]
  402140:	e5c8      	b.n	401cd4 <_vfiprintf_r+0xe4>
  402142:	9608      	str	r6, [sp, #32]
  402144:	2800      	cmp	r0, #0
  402146:	f040 8393 	bne.w	402870 <_vfiprintf_r+0xc80>
  40214a:	4929      	ldr	r1, [pc, #164]	; (4021f0 <_vfiprintf_r+0x600>)
  40214c:	910b      	str	r1, [sp, #44]	; 0x2c
  40214e:	069f      	lsls	r7, r3, #26
  402150:	f100 82e8 	bmi.w	402724 <_vfiprintf_r+0xb34>
  402154:	9807      	ldr	r0, [sp, #28]
  402156:	06de      	lsls	r6, r3, #27
  402158:	4601      	mov	r1, r0
  40215a:	f100 8270 	bmi.w	40263e <_vfiprintf_r+0xa4e>
  40215e:	065d      	lsls	r5, r3, #25
  402160:	f140 826d 	bpl.w	40263e <_vfiprintf_r+0xa4e>
  402164:	3104      	adds	r1, #4
  402166:	8806      	ldrh	r6, [r0, #0]
  402168:	9107      	str	r1, [sp, #28]
  40216a:	2700      	movs	r7, #0
  40216c:	07d8      	lsls	r0, r3, #31
  40216e:	f140 8222 	bpl.w	4025b6 <_vfiprintf_r+0x9c6>
  402172:	ea56 0107 	orrs.w	r1, r6, r7
  402176:	f000 821e 	beq.w	4025b6 <_vfiprintf_r+0x9c6>
  40217a:	2130      	movs	r1, #48	; 0x30
  40217c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  402180:	f043 0302 	orr.w	r3, r3, #2
  402184:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  402188:	2202      	movs	r2, #2
  40218a:	e664      	b.n	401e56 <_vfiprintf_r+0x266>
  40218c:	9608      	str	r6, [sp, #32]
  40218e:	2800      	cmp	r0, #0
  402190:	f040 836b 	bne.w	40286a <_vfiprintf_r+0xc7a>
  402194:	4917      	ldr	r1, [pc, #92]	; (4021f4 <_vfiprintf_r+0x604>)
  402196:	910b      	str	r1, [sp, #44]	; 0x2c
  402198:	e7d9      	b.n	40214e <_vfiprintf_r+0x55e>
  40219a:	9907      	ldr	r1, [sp, #28]
  40219c:	9608      	str	r6, [sp, #32]
  40219e:	680a      	ldr	r2, [r1, #0]
  4021a0:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4021a4:	f04f 0000 	mov.w	r0, #0
  4021a8:	460a      	mov	r2, r1
  4021aa:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  4021ae:	3204      	adds	r2, #4
  4021b0:	2001      	movs	r0, #1
  4021b2:	9001      	str	r0, [sp, #4]
  4021b4:	9207      	str	r2, [sp, #28]
  4021b6:	9005      	str	r0, [sp, #20]
  4021b8:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4021bc:	9302      	str	r3, [sp, #8]
  4021be:	2400      	movs	r4, #0
  4021c0:	e670      	b.n	401ea4 <_vfiprintf_r+0x2b4>
  4021c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4021c6:	f898 2000 	ldrb.w	r2, [r8]
  4021ca:	e583      	b.n	401cd4 <_vfiprintf_r+0xe4>
  4021cc:	f898 2000 	ldrb.w	r2, [r8]
  4021d0:	2a6c      	cmp	r2, #108	; 0x6c
  4021d2:	bf03      	ittte	eq
  4021d4:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  4021d8:	f043 0320 	orreq.w	r3, r3, #32
  4021dc:	f108 0801 	addeq.w	r8, r8, #1
  4021e0:	f043 0310 	orrne.w	r3, r3, #16
  4021e4:	e576      	b.n	401cd4 <_vfiprintf_r+0xe4>
  4021e6:	bf00      	nop
  4021e8:	004046e0 	.word	0x004046e0
  4021ec:	004046f0 	.word	0x004046f0
  4021f0:	004046c4 	.word	0x004046c4
  4021f4:	004046b0 	.word	0x004046b0
  4021f8:	9907      	ldr	r1, [sp, #28]
  4021fa:	680e      	ldr	r6, [r1, #0]
  4021fc:	460a      	mov	r2, r1
  4021fe:	2e00      	cmp	r6, #0
  402200:	f102 0204 	add.w	r2, r2, #4
  402204:	f6ff ae0f 	blt.w	401e26 <_vfiprintf_r+0x236>
  402208:	9207      	str	r2, [sp, #28]
  40220a:	f898 2000 	ldrb.w	r2, [r8]
  40220e:	e561      	b.n	401cd4 <_vfiprintf_r+0xe4>
  402210:	f898 2000 	ldrb.w	r2, [r8]
  402214:	2001      	movs	r0, #1
  402216:	252b      	movs	r5, #43	; 0x2b
  402218:	e55c      	b.n	401cd4 <_vfiprintf_r+0xe4>
  40221a:	9907      	ldr	r1, [sp, #28]
  40221c:	9608      	str	r6, [sp, #32]
  40221e:	f8d1 b000 	ldr.w	fp, [r1]
  402222:	f04f 0200 	mov.w	r2, #0
  402226:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40222a:	1d0e      	adds	r6, r1, #4
  40222c:	f1bb 0f00 	cmp.w	fp, #0
  402230:	f000 82e5 	beq.w	4027fe <_vfiprintf_r+0xc0e>
  402234:	1c67      	adds	r7, r4, #1
  402236:	f000 82c4 	beq.w	4027c2 <_vfiprintf_r+0xbd2>
  40223a:	4622      	mov	r2, r4
  40223c:	2100      	movs	r1, #0
  40223e:	4658      	mov	r0, fp
  402240:	9301      	str	r3, [sp, #4]
  402242:	f001 fbd5 	bl	4039f0 <memchr>
  402246:	9b01      	ldr	r3, [sp, #4]
  402248:	2800      	cmp	r0, #0
  40224a:	f000 82e5 	beq.w	402818 <_vfiprintf_r+0xc28>
  40224e:	eba0 020b 	sub.w	r2, r0, fp
  402252:	9205      	str	r2, [sp, #20]
  402254:	9607      	str	r6, [sp, #28]
  402256:	9302      	str	r3, [sp, #8]
  402258:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40225c:	2400      	movs	r4, #0
  40225e:	e619      	b.n	401e94 <_vfiprintf_r+0x2a4>
  402260:	f898 2000 	ldrb.w	r2, [r8]
  402264:	2a2a      	cmp	r2, #42	; 0x2a
  402266:	f108 0701 	add.w	r7, r8, #1
  40226a:	f000 82e9 	beq.w	402840 <_vfiprintf_r+0xc50>
  40226e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  402272:	2909      	cmp	r1, #9
  402274:	46b8      	mov	r8, r7
  402276:	f04f 0400 	mov.w	r4, #0
  40227a:	f63f ad2d 	bhi.w	401cd8 <_vfiprintf_r+0xe8>
  40227e:	f818 2b01 	ldrb.w	r2, [r8], #1
  402282:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  402286:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  40228a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40228e:	2909      	cmp	r1, #9
  402290:	d9f5      	bls.n	40227e <_vfiprintf_r+0x68e>
  402292:	e521      	b.n	401cd8 <_vfiprintf_r+0xe8>
  402294:	f043 0320 	orr.w	r3, r3, #32
  402298:	f898 2000 	ldrb.w	r2, [r8]
  40229c:	e51a      	b.n	401cd4 <_vfiprintf_r+0xe4>
  40229e:	9608      	str	r6, [sp, #32]
  4022a0:	2800      	cmp	r0, #0
  4022a2:	f040 82db 	bne.w	40285c <_vfiprintf_r+0xc6c>
  4022a6:	2a00      	cmp	r2, #0
  4022a8:	f000 80e7 	beq.w	40247a <_vfiprintf_r+0x88a>
  4022ac:	2101      	movs	r1, #1
  4022ae:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4022b2:	f04f 0200 	mov.w	r2, #0
  4022b6:	9101      	str	r1, [sp, #4]
  4022b8:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4022bc:	9105      	str	r1, [sp, #20]
  4022be:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4022c2:	e77b      	b.n	4021bc <_vfiprintf_r+0x5cc>
  4022c4:	9a07      	ldr	r2, [sp, #28]
  4022c6:	6813      	ldr	r3, [r2, #0]
  4022c8:	3204      	adds	r2, #4
  4022ca:	9207      	str	r2, [sp, #28]
  4022cc:	9a03      	ldr	r2, [sp, #12]
  4022ce:	601a      	str	r2, [r3, #0]
  4022d0:	e4cb      	b.n	401c6a <_vfiprintf_r+0x7a>
  4022d2:	aa0f      	add	r2, sp, #60	; 0x3c
  4022d4:	9904      	ldr	r1, [sp, #16]
  4022d6:	4620      	mov	r0, r4
  4022d8:	f7ff fc4a 	bl	401b70 <__sprint_r.part.0>
  4022dc:	2800      	cmp	r0, #0
  4022de:	f040 8139 	bne.w	402554 <_vfiprintf_r+0x964>
  4022e2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4022e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4022e6:	f101 0c01 	add.w	ip, r1, #1
  4022ea:	46ce      	mov	lr, r9
  4022ec:	e5ff      	b.n	401eee <_vfiprintf_r+0x2fe>
  4022ee:	9910      	ldr	r1, [sp, #64]	; 0x40
  4022f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4022f2:	1c48      	adds	r0, r1, #1
  4022f4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4022f8:	2d00      	cmp	r5, #0
  4022fa:	f43f ae22 	beq.w	401f42 <_vfiprintf_r+0x352>
  4022fe:	3201      	adds	r2, #1
  402300:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  402304:	2101      	movs	r1, #1
  402306:	2807      	cmp	r0, #7
  402308:	9211      	str	r2, [sp, #68]	; 0x44
  40230a:	9010      	str	r0, [sp, #64]	; 0x40
  40230c:	f8ca 5000 	str.w	r5, [sl]
  402310:	f8ca 1004 	str.w	r1, [sl, #4]
  402314:	f340 8108 	ble.w	402528 <_vfiprintf_r+0x938>
  402318:	2a00      	cmp	r2, #0
  40231a:	f040 81bc 	bne.w	402696 <_vfiprintf_r+0xaa6>
  40231e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402320:	2b00      	cmp	r3, #0
  402322:	f43f ae1f 	beq.w	401f64 <_vfiprintf_r+0x374>
  402326:	ab0e      	add	r3, sp, #56	; 0x38
  402328:	2202      	movs	r2, #2
  40232a:	4608      	mov	r0, r1
  40232c:	931c      	str	r3, [sp, #112]	; 0x70
  40232e:	921d      	str	r2, [sp, #116]	; 0x74
  402330:	46ca      	mov	sl, r9
  402332:	4601      	mov	r1, r0
  402334:	f10a 0a08 	add.w	sl, sl, #8
  402338:	3001      	adds	r0, #1
  40233a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40233c:	2b80      	cmp	r3, #128	; 0x80
  40233e:	f43f ae19 	beq.w	401f74 <_vfiprintf_r+0x384>
  402342:	9b05      	ldr	r3, [sp, #20]
  402344:	1ae4      	subs	r4, r4, r3
  402346:	2c00      	cmp	r4, #0
  402348:	dd2e      	ble.n	4023a8 <_vfiprintf_r+0x7b8>
  40234a:	2c10      	cmp	r4, #16
  40234c:	4db3      	ldr	r5, [pc, #716]	; (40261c <_vfiprintf_r+0xa2c>)
  40234e:	dd1e      	ble.n	40238e <_vfiprintf_r+0x79e>
  402350:	46d6      	mov	lr, sl
  402352:	2610      	movs	r6, #16
  402354:	9f06      	ldr	r7, [sp, #24]
  402356:	f8dd a010 	ldr.w	sl, [sp, #16]
  40235a:	e006      	b.n	40236a <_vfiprintf_r+0x77a>
  40235c:	1c88      	adds	r0, r1, #2
  40235e:	f10e 0e08 	add.w	lr, lr, #8
  402362:	4619      	mov	r1, r3
  402364:	3c10      	subs	r4, #16
  402366:	2c10      	cmp	r4, #16
  402368:	dd10      	ble.n	40238c <_vfiprintf_r+0x79c>
  40236a:	1c4b      	adds	r3, r1, #1
  40236c:	3210      	adds	r2, #16
  40236e:	2b07      	cmp	r3, #7
  402370:	9211      	str	r2, [sp, #68]	; 0x44
  402372:	e88e 0060 	stmia.w	lr, {r5, r6}
  402376:	9310      	str	r3, [sp, #64]	; 0x40
  402378:	ddf0      	ble.n	40235c <_vfiprintf_r+0x76c>
  40237a:	2a00      	cmp	r2, #0
  40237c:	d165      	bne.n	40244a <_vfiprintf_r+0x85a>
  40237e:	3c10      	subs	r4, #16
  402380:	2c10      	cmp	r4, #16
  402382:	f04f 0001 	mov.w	r0, #1
  402386:	4611      	mov	r1, r2
  402388:	46ce      	mov	lr, r9
  40238a:	dcee      	bgt.n	40236a <_vfiprintf_r+0x77a>
  40238c:	46f2      	mov	sl, lr
  40238e:	4422      	add	r2, r4
  402390:	2807      	cmp	r0, #7
  402392:	9211      	str	r2, [sp, #68]	; 0x44
  402394:	f8ca 5000 	str.w	r5, [sl]
  402398:	f8ca 4004 	str.w	r4, [sl, #4]
  40239c:	9010      	str	r0, [sp, #64]	; 0x40
  40239e:	f300 8085 	bgt.w	4024ac <_vfiprintf_r+0x8bc>
  4023a2:	f10a 0a08 	add.w	sl, sl, #8
  4023a6:	3001      	adds	r0, #1
  4023a8:	9905      	ldr	r1, [sp, #20]
  4023aa:	f8ca b000 	str.w	fp, [sl]
  4023ae:	440a      	add	r2, r1
  4023b0:	2807      	cmp	r0, #7
  4023b2:	9211      	str	r2, [sp, #68]	; 0x44
  4023b4:	f8ca 1004 	str.w	r1, [sl, #4]
  4023b8:	9010      	str	r0, [sp, #64]	; 0x40
  4023ba:	f340 8082 	ble.w	4024c2 <_vfiprintf_r+0x8d2>
  4023be:	2a00      	cmp	r2, #0
  4023c0:	f040 8118 	bne.w	4025f4 <_vfiprintf_r+0xa04>
  4023c4:	9b02      	ldr	r3, [sp, #8]
  4023c6:	9210      	str	r2, [sp, #64]	; 0x40
  4023c8:	0758      	lsls	r0, r3, #29
  4023ca:	d535      	bpl.n	402438 <_vfiprintf_r+0x848>
  4023cc:	9b08      	ldr	r3, [sp, #32]
  4023ce:	9901      	ldr	r1, [sp, #4]
  4023d0:	1a5c      	subs	r4, r3, r1
  4023d2:	2c00      	cmp	r4, #0
  4023d4:	f340 80e7 	ble.w	4025a6 <_vfiprintf_r+0x9b6>
  4023d8:	46ca      	mov	sl, r9
  4023da:	2c10      	cmp	r4, #16
  4023dc:	f340 8218 	ble.w	402810 <_vfiprintf_r+0xc20>
  4023e0:	9910      	ldr	r1, [sp, #64]	; 0x40
  4023e2:	4e8f      	ldr	r6, [pc, #572]	; (402620 <_vfiprintf_r+0xa30>)
  4023e4:	9f06      	ldr	r7, [sp, #24]
  4023e6:	f8dd b010 	ldr.w	fp, [sp, #16]
  4023ea:	2510      	movs	r5, #16
  4023ec:	e006      	b.n	4023fc <_vfiprintf_r+0x80c>
  4023ee:	1c88      	adds	r0, r1, #2
  4023f0:	f10a 0a08 	add.w	sl, sl, #8
  4023f4:	4619      	mov	r1, r3
  4023f6:	3c10      	subs	r4, #16
  4023f8:	2c10      	cmp	r4, #16
  4023fa:	dd11      	ble.n	402420 <_vfiprintf_r+0x830>
  4023fc:	1c4b      	adds	r3, r1, #1
  4023fe:	3210      	adds	r2, #16
  402400:	2b07      	cmp	r3, #7
  402402:	9211      	str	r2, [sp, #68]	; 0x44
  402404:	f8ca 6000 	str.w	r6, [sl]
  402408:	f8ca 5004 	str.w	r5, [sl, #4]
  40240c:	9310      	str	r3, [sp, #64]	; 0x40
  40240e:	ddee      	ble.n	4023ee <_vfiprintf_r+0x7fe>
  402410:	bb42      	cbnz	r2, 402464 <_vfiprintf_r+0x874>
  402412:	3c10      	subs	r4, #16
  402414:	2c10      	cmp	r4, #16
  402416:	f04f 0001 	mov.w	r0, #1
  40241a:	4611      	mov	r1, r2
  40241c:	46ca      	mov	sl, r9
  40241e:	dced      	bgt.n	4023fc <_vfiprintf_r+0x80c>
  402420:	4422      	add	r2, r4
  402422:	2807      	cmp	r0, #7
  402424:	9211      	str	r2, [sp, #68]	; 0x44
  402426:	f8ca 6000 	str.w	r6, [sl]
  40242a:	f8ca 4004 	str.w	r4, [sl, #4]
  40242e:	9010      	str	r0, [sp, #64]	; 0x40
  402430:	dd51      	ble.n	4024d6 <_vfiprintf_r+0x8e6>
  402432:	2a00      	cmp	r2, #0
  402434:	f040 819b 	bne.w	40276e <_vfiprintf_r+0xb7e>
  402438:	9b03      	ldr	r3, [sp, #12]
  40243a:	9a08      	ldr	r2, [sp, #32]
  40243c:	9901      	ldr	r1, [sp, #4]
  40243e:	428a      	cmp	r2, r1
  402440:	bfac      	ite	ge
  402442:	189b      	addge	r3, r3, r2
  402444:	185b      	addlt	r3, r3, r1
  402446:	9303      	str	r3, [sp, #12]
  402448:	e04e      	b.n	4024e8 <_vfiprintf_r+0x8f8>
  40244a:	aa0f      	add	r2, sp, #60	; 0x3c
  40244c:	4651      	mov	r1, sl
  40244e:	4638      	mov	r0, r7
  402450:	f7ff fb8e 	bl	401b70 <__sprint_r.part.0>
  402454:	2800      	cmp	r0, #0
  402456:	f040 813f 	bne.w	4026d8 <_vfiprintf_r+0xae8>
  40245a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40245c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40245e:	1c48      	adds	r0, r1, #1
  402460:	46ce      	mov	lr, r9
  402462:	e77f      	b.n	402364 <_vfiprintf_r+0x774>
  402464:	aa0f      	add	r2, sp, #60	; 0x3c
  402466:	4659      	mov	r1, fp
  402468:	4638      	mov	r0, r7
  40246a:	f7ff fb81 	bl	401b70 <__sprint_r.part.0>
  40246e:	b960      	cbnz	r0, 40248a <_vfiprintf_r+0x89a>
  402470:	9910      	ldr	r1, [sp, #64]	; 0x40
  402472:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402474:	1c48      	adds	r0, r1, #1
  402476:	46ca      	mov	sl, r9
  402478:	e7bd      	b.n	4023f6 <_vfiprintf_r+0x806>
  40247a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40247c:	f8dd b010 	ldr.w	fp, [sp, #16]
  402480:	2b00      	cmp	r3, #0
  402482:	f040 81d4 	bne.w	40282e <_vfiprintf_r+0xc3e>
  402486:	2300      	movs	r3, #0
  402488:	9310      	str	r3, [sp, #64]	; 0x40
  40248a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40248e:	f013 0f01 	tst.w	r3, #1
  402492:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  402496:	d102      	bne.n	40249e <_vfiprintf_r+0x8ae>
  402498:	059a      	lsls	r2, r3, #22
  40249a:	f140 80de 	bpl.w	40265a <_vfiprintf_r+0xa6a>
  40249e:	065b      	lsls	r3, r3, #25
  4024a0:	f53f acb2 	bmi.w	401e08 <_vfiprintf_r+0x218>
  4024a4:	9803      	ldr	r0, [sp, #12]
  4024a6:	b02d      	add	sp, #180	; 0xb4
  4024a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4024ac:	2a00      	cmp	r2, #0
  4024ae:	f040 8106 	bne.w	4026be <_vfiprintf_r+0xace>
  4024b2:	9a05      	ldr	r2, [sp, #20]
  4024b4:	921d      	str	r2, [sp, #116]	; 0x74
  4024b6:	2301      	movs	r3, #1
  4024b8:	9211      	str	r2, [sp, #68]	; 0x44
  4024ba:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  4024be:	9310      	str	r3, [sp, #64]	; 0x40
  4024c0:	46ca      	mov	sl, r9
  4024c2:	f10a 0a08 	add.w	sl, sl, #8
  4024c6:	9b02      	ldr	r3, [sp, #8]
  4024c8:	0759      	lsls	r1, r3, #29
  4024ca:	d504      	bpl.n	4024d6 <_vfiprintf_r+0x8e6>
  4024cc:	9b08      	ldr	r3, [sp, #32]
  4024ce:	9901      	ldr	r1, [sp, #4]
  4024d0:	1a5c      	subs	r4, r3, r1
  4024d2:	2c00      	cmp	r4, #0
  4024d4:	dc81      	bgt.n	4023da <_vfiprintf_r+0x7ea>
  4024d6:	9b03      	ldr	r3, [sp, #12]
  4024d8:	9908      	ldr	r1, [sp, #32]
  4024da:	9801      	ldr	r0, [sp, #4]
  4024dc:	4281      	cmp	r1, r0
  4024de:	bfac      	ite	ge
  4024e0:	185b      	addge	r3, r3, r1
  4024e2:	181b      	addlt	r3, r3, r0
  4024e4:	9303      	str	r3, [sp, #12]
  4024e6:	bb72      	cbnz	r2, 402546 <_vfiprintf_r+0x956>
  4024e8:	2300      	movs	r3, #0
  4024ea:	9310      	str	r3, [sp, #64]	; 0x40
  4024ec:	46ca      	mov	sl, r9
  4024ee:	f7ff bbbc 	b.w	401c6a <_vfiprintf_r+0x7a>
  4024f2:	aa0f      	add	r2, sp, #60	; 0x3c
  4024f4:	9904      	ldr	r1, [sp, #16]
  4024f6:	4620      	mov	r0, r4
  4024f8:	f7ff fb3a 	bl	401b70 <__sprint_r.part.0>
  4024fc:	bb50      	cbnz	r0, 402554 <_vfiprintf_r+0x964>
  4024fe:	9910      	ldr	r1, [sp, #64]	; 0x40
  402500:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402502:	f101 0e01 	add.w	lr, r1, #1
  402506:	46cc      	mov	ip, r9
  402508:	e548      	b.n	401f9c <_vfiprintf_r+0x3ac>
  40250a:	2a00      	cmp	r2, #0
  40250c:	f040 8140 	bne.w	402790 <_vfiprintf_r+0xba0>
  402510:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  402514:	2900      	cmp	r1, #0
  402516:	f000 811b 	beq.w	402750 <_vfiprintf_r+0xb60>
  40251a:	2201      	movs	r2, #1
  40251c:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  402520:	4610      	mov	r0, r2
  402522:	921d      	str	r2, [sp, #116]	; 0x74
  402524:	911c      	str	r1, [sp, #112]	; 0x70
  402526:	46ca      	mov	sl, r9
  402528:	4601      	mov	r1, r0
  40252a:	f10a 0a08 	add.w	sl, sl, #8
  40252e:	3001      	adds	r0, #1
  402530:	e507      	b.n	401f42 <_vfiprintf_r+0x352>
  402532:	9b02      	ldr	r3, [sp, #8]
  402534:	2a01      	cmp	r2, #1
  402536:	f000 8098 	beq.w	40266a <_vfiprintf_r+0xa7a>
  40253a:	2a02      	cmp	r2, #2
  40253c:	d10d      	bne.n	40255a <_vfiprintf_r+0x96a>
  40253e:	9302      	str	r3, [sp, #8]
  402540:	2600      	movs	r6, #0
  402542:	2700      	movs	r7, #0
  402544:	e5b0      	b.n	4020a8 <_vfiprintf_r+0x4b8>
  402546:	aa0f      	add	r2, sp, #60	; 0x3c
  402548:	9904      	ldr	r1, [sp, #16]
  40254a:	9806      	ldr	r0, [sp, #24]
  40254c:	f7ff fb10 	bl	401b70 <__sprint_r.part.0>
  402550:	2800      	cmp	r0, #0
  402552:	d0c9      	beq.n	4024e8 <_vfiprintf_r+0x8f8>
  402554:	f8dd b010 	ldr.w	fp, [sp, #16]
  402558:	e797      	b.n	40248a <_vfiprintf_r+0x89a>
  40255a:	9302      	str	r3, [sp, #8]
  40255c:	2600      	movs	r6, #0
  40255e:	2700      	movs	r7, #0
  402560:	4649      	mov	r1, r9
  402562:	e000      	b.n	402566 <_vfiprintf_r+0x976>
  402564:	4659      	mov	r1, fp
  402566:	08f2      	lsrs	r2, r6, #3
  402568:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  40256c:	08f8      	lsrs	r0, r7, #3
  40256e:	f006 0307 	and.w	r3, r6, #7
  402572:	4607      	mov	r7, r0
  402574:	4616      	mov	r6, r2
  402576:	3330      	adds	r3, #48	; 0x30
  402578:	ea56 0207 	orrs.w	r2, r6, r7
  40257c:	f801 3c01 	strb.w	r3, [r1, #-1]
  402580:	f101 3bff 	add.w	fp, r1, #4294967295
  402584:	d1ee      	bne.n	402564 <_vfiprintf_r+0x974>
  402586:	9a02      	ldr	r2, [sp, #8]
  402588:	07d6      	lsls	r6, r2, #31
  40258a:	f57f ad9d 	bpl.w	4020c8 <_vfiprintf_r+0x4d8>
  40258e:	2b30      	cmp	r3, #48	; 0x30
  402590:	f43f ad9a 	beq.w	4020c8 <_vfiprintf_r+0x4d8>
  402594:	3902      	subs	r1, #2
  402596:	2330      	movs	r3, #48	; 0x30
  402598:	f80b 3c01 	strb.w	r3, [fp, #-1]
  40259c:	eba9 0301 	sub.w	r3, r9, r1
  4025a0:	9305      	str	r3, [sp, #20]
  4025a2:	468b      	mov	fp, r1
  4025a4:	e476      	b.n	401e94 <_vfiprintf_r+0x2a4>
  4025a6:	9b03      	ldr	r3, [sp, #12]
  4025a8:	9a08      	ldr	r2, [sp, #32]
  4025aa:	428a      	cmp	r2, r1
  4025ac:	bfac      	ite	ge
  4025ae:	189b      	addge	r3, r3, r2
  4025b0:	185b      	addlt	r3, r3, r1
  4025b2:	9303      	str	r3, [sp, #12]
  4025b4:	e798      	b.n	4024e8 <_vfiprintf_r+0x8f8>
  4025b6:	2202      	movs	r2, #2
  4025b8:	e44d      	b.n	401e56 <_vfiprintf_r+0x266>
  4025ba:	2f00      	cmp	r7, #0
  4025bc:	bf08      	it	eq
  4025be:	2e0a      	cmpeq	r6, #10
  4025c0:	d352      	bcc.n	402668 <_vfiprintf_r+0xa78>
  4025c2:	46cb      	mov	fp, r9
  4025c4:	4630      	mov	r0, r6
  4025c6:	4639      	mov	r1, r7
  4025c8:	220a      	movs	r2, #10
  4025ca:	2300      	movs	r3, #0
  4025cc:	f001 fe9a 	bl	404304 <__aeabi_uldivmod>
  4025d0:	3230      	adds	r2, #48	; 0x30
  4025d2:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  4025d6:	4630      	mov	r0, r6
  4025d8:	4639      	mov	r1, r7
  4025da:	2300      	movs	r3, #0
  4025dc:	220a      	movs	r2, #10
  4025de:	f001 fe91 	bl	404304 <__aeabi_uldivmod>
  4025e2:	4606      	mov	r6, r0
  4025e4:	460f      	mov	r7, r1
  4025e6:	ea56 0307 	orrs.w	r3, r6, r7
  4025ea:	d1eb      	bne.n	4025c4 <_vfiprintf_r+0x9d4>
  4025ec:	e56c      	b.n	4020c8 <_vfiprintf_r+0x4d8>
  4025ee:	9405      	str	r4, [sp, #20]
  4025f0:	46cb      	mov	fp, r9
  4025f2:	e44f      	b.n	401e94 <_vfiprintf_r+0x2a4>
  4025f4:	aa0f      	add	r2, sp, #60	; 0x3c
  4025f6:	9904      	ldr	r1, [sp, #16]
  4025f8:	9806      	ldr	r0, [sp, #24]
  4025fa:	f7ff fab9 	bl	401b70 <__sprint_r.part.0>
  4025fe:	2800      	cmp	r0, #0
  402600:	d1a8      	bne.n	402554 <_vfiprintf_r+0x964>
  402602:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402604:	46ca      	mov	sl, r9
  402606:	e75e      	b.n	4024c6 <_vfiprintf_r+0x8d6>
  402608:	aa0f      	add	r2, sp, #60	; 0x3c
  40260a:	9904      	ldr	r1, [sp, #16]
  40260c:	9806      	ldr	r0, [sp, #24]
  40260e:	f7ff faaf 	bl	401b70 <__sprint_r.part.0>
  402612:	2800      	cmp	r0, #0
  402614:	d19e      	bne.n	402554 <_vfiprintf_r+0x964>
  402616:	46ca      	mov	sl, r9
  402618:	f7ff bbc0 	b.w	401d9c <_vfiprintf_r+0x1ac>
  40261c:	004046f0 	.word	0x004046f0
  402620:	004046e0 	.word	0x004046e0
  402624:	3104      	adds	r1, #4
  402626:	6816      	ldr	r6, [r2, #0]
  402628:	9107      	str	r1, [sp, #28]
  40262a:	2201      	movs	r2, #1
  40262c:	2700      	movs	r7, #0
  40262e:	e412      	b.n	401e56 <_vfiprintf_r+0x266>
  402630:	9807      	ldr	r0, [sp, #28]
  402632:	4601      	mov	r1, r0
  402634:	3104      	adds	r1, #4
  402636:	6806      	ldr	r6, [r0, #0]
  402638:	9107      	str	r1, [sp, #28]
  40263a:	2700      	movs	r7, #0
  40263c:	e40b      	b.n	401e56 <_vfiprintf_r+0x266>
  40263e:	680e      	ldr	r6, [r1, #0]
  402640:	3104      	adds	r1, #4
  402642:	9107      	str	r1, [sp, #28]
  402644:	2700      	movs	r7, #0
  402646:	e591      	b.n	40216c <_vfiprintf_r+0x57c>
  402648:	9907      	ldr	r1, [sp, #28]
  40264a:	680e      	ldr	r6, [r1, #0]
  40264c:	460a      	mov	r2, r1
  40264e:	17f7      	asrs	r7, r6, #31
  402650:	3204      	adds	r2, #4
  402652:	9207      	str	r2, [sp, #28]
  402654:	4630      	mov	r0, r6
  402656:	4639      	mov	r1, r7
  402658:	e50f      	b.n	40207a <_vfiprintf_r+0x48a>
  40265a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40265e:	f000 fe83 	bl	403368 <__retarget_lock_release_recursive>
  402662:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  402666:	e71a      	b.n	40249e <_vfiprintf_r+0x8ae>
  402668:	9b02      	ldr	r3, [sp, #8]
  40266a:	9302      	str	r3, [sp, #8]
  40266c:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  402670:	3630      	adds	r6, #48	; 0x30
  402672:	2301      	movs	r3, #1
  402674:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  402678:	9305      	str	r3, [sp, #20]
  40267a:	e40b      	b.n	401e94 <_vfiprintf_r+0x2a4>
  40267c:	aa0f      	add	r2, sp, #60	; 0x3c
  40267e:	9904      	ldr	r1, [sp, #16]
  402680:	9806      	ldr	r0, [sp, #24]
  402682:	f7ff fa75 	bl	401b70 <__sprint_r.part.0>
  402686:	2800      	cmp	r0, #0
  402688:	f47f af64 	bne.w	402554 <_vfiprintf_r+0x964>
  40268c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40268e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402690:	1c48      	adds	r0, r1, #1
  402692:	46ca      	mov	sl, r9
  402694:	e651      	b.n	40233a <_vfiprintf_r+0x74a>
  402696:	aa0f      	add	r2, sp, #60	; 0x3c
  402698:	9904      	ldr	r1, [sp, #16]
  40269a:	9806      	ldr	r0, [sp, #24]
  40269c:	f7ff fa68 	bl	401b70 <__sprint_r.part.0>
  4026a0:	2800      	cmp	r0, #0
  4026a2:	f47f af57 	bne.w	402554 <_vfiprintf_r+0x964>
  4026a6:	9910      	ldr	r1, [sp, #64]	; 0x40
  4026a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4026aa:	1c48      	adds	r0, r1, #1
  4026ac:	46ca      	mov	sl, r9
  4026ae:	e448      	b.n	401f42 <_vfiprintf_r+0x352>
  4026b0:	2a00      	cmp	r2, #0
  4026b2:	f040 8091 	bne.w	4027d8 <_vfiprintf_r+0xbe8>
  4026b6:	2001      	movs	r0, #1
  4026b8:	4611      	mov	r1, r2
  4026ba:	46ca      	mov	sl, r9
  4026bc:	e641      	b.n	402342 <_vfiprintf_r+0x752>
  4026be:	aa0f      	add	r2, sp, #60	; 0x3c
  4026c0:	9904      	ldr	r1, [sp, #16]
  4026c2:	9806      	ldr	r0, [sp, #24]
  4026c4:	f7ff fa54 	bl	401b70 <__sprint_r.part.0>
  4026c8:	2800      	cmp	r0, #0
  4026ca:	f47f af43 	bne.w	402554 <_vfiprintf_r+0x964>
  4026ce:	9810      	ldr	r0, [sp, #64]	; 0x40
  4026d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4026d2:	3001      	adds	r0, #1
  4026d4:	46ca      	mov	sl, r9
  4026d6:	e667      	b.n	4023a8 <_vfiprintf_r+0x7b8>
  4026d8:	46d3      	mov	fp, sl
  4026da:	e6d6      	b.n	40248a <_vfiprintf_r+0x89a>
  4026dc:	9e07      	ldr	r6, [sp, #28]
  4026de:	3607      	adds	r6, #7
  4026e0:	f026 0207 	bic.w	r2, r6, #7
  4026e4:	f102 0108 	add.w	r1, r2, #8
  4026e8:	e9d2 6700 	ldrd	r6, r7, [r2]
  4026ec:	9107      	str	r1, [sp, #28]
  4026ee:	2201      	movs	r2, #1
  4026f0:	f7ff bbb1 	b.w	401e56 <_vfiprintf_r+0x266>
  4026f4:	9e07      	ldr	r6, [sp, #28]
  4026f6:	3607      	adds	r6, #7
  4026f8:	f026 0607 	bic.w	r6, r6, #7
  4026fc:	e9d6 0100 	ldrd	r0, r1, [r6]
  402700:	f106 0208 	add.w	r2, r6, #8
  402704:	9207      	str	r2, [sp, #28]
  402706:	4606      	mov	r6, r0
  402708:	460f      	mov	r7, r1
  40270a:	e4b6      	b.n	40207a <_vfiprintf_r+0x48a>
  40270c:	9e07      	ldr	r6, [sp, #28]
  40270e:	3607      	adds	r6, #7
  402710:	f026 0207 	bic.w	r2, r6, #7
  402714:	f102 0108 	add.w	r1, r2, #8
  402718:	e9d2 6700 	ldrd	r6, r7, [r2]
  40271c:	9107      	str	r1, [sp, #28]
  40271e:	2200      	movs	r2, #0
  402720:	f7ff bb99 	b.w	401e56 <_vfiprintf_r+0x266>
  402724:	9e07      	ldr	r6, [sp, #28]
  402726:	3607      	adds	r6, #7
  402728:	f026 0107 	bic.w	r1, r6, #7
  40272c:	f101 0008 	add.w	r0, r1, #8
  402730:	9007      	str	r0, [sp, #28]
  402732:	e9d1 6700 	ldrd	r6, r7, [r1]
  402736:	e519      	b.n	40216c <_vfiprintf_r+0x57c>
  402738:	46cb      	mov	fp, r9
  40273a:	f7ff bbab 	b.w	401e94 <_vfiprintf_r+0x2a4>
  40273e:	252d      	movs	r5, #45	; 0x2d
  402740:	4276      	negs	r6, r6
  402742:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  402746:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40274a:	2201      	movs	r2, #1
  40274c:	f7ff bb88 	b.w	401e60 <_vfiprintf_r+0x270>
  402750:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402752:	b9b3      	cbnz	r3, 402782 <_vfiprintf_r+0xb92>
  402754:	4611      	mov	r1, r2
  402756:	2001      	movs	r0, #1
  402758:	46ca      	mov	sl, r9
  40275a:	e5f2      	b.n	402342 <_vfiprintf_r+0x752>
  40275c:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402760:	f000 fe02 	bl	403368 <__retarget_lock_release_recursive>
  402764:	f04f 33ff 	mov.w	r3, #4294967295
  402768:	9303      	str	r3, [sp, #12]
  40276a:	f7ff bb50 	b.w	401e0e <_vfiprintf_r+0x21e>
  40276e:	aa0f      	add	r2, sp, #60	; 0x3c
  402770:	9904      	ldr	r1, [sp, #16]
  402772:	9806      	ldr	r0, [sp, #24]
  402774:	f7ff f9fc 	bl	401b70 <__sprint_r.part.0>
  402778:	2800      	cmp	r0, #0
  40277a:	f47f aeeb 	bne.w	402554 <_vfiprintf_r+0x964>
  40277e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402780:	e6a9      	b.n	4024d6 <_vfiprintf_r+0x8e6>
  402782:	ab0e      	add	r3, sp, #56	; 0x38
  402784:	2202      	movs	r2, #2
  402786:	931c      	str	r3, [sp, #112]	; 0x70
  402788:	921d      	str	r2, [sp, #116]	; 0x74
  40278a:	2001      	movs	r0, #1
  40278c:	46ca      	mov	sl, r9
  40278e:	e5d0      	b.n	402332 <_vfiprintf_r+0x742>
  402790:	aa0f      	add	r2, sp, #60	; 0x3c
  402792:	9904      	ldr	r1, [sp, #16]
  402794:	9806      	ldr	r0, [sp, #24]
  402796:	f7ff f9eb 	bl	401b70 <__sprint_r.part.0>
  40279a:	2800      	cmp	r0, #0
  40279c:	f47f aeda 	bne.w	402554 <_vfiprintf_r+0x964>
  4027a0:	9910      	ldr	r1, [sp, #64]	; 0x40
  4027a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4027a4:	1c48      	adds	r0, r1, #1
  4027a6:	46ca      	mov	sl, r9
  4027a8:	e5a4      	b.n	4022f4 <_vfiprintf_r+0x704>
  4027aa:	9a07      	ldr	r2, [sp, #28]
  4027ac:	9903      	ldr	r1, [sp, #12]
  4027ae:	6813      	ldr	r3, [r2, #0]
  4027b0:	17cd      	asrs	r5, r1, #31
  4027b2:	4608      	mov	r0, r1
  4027b4:	3204      	adds	r2, #4
  4027b6:	4629      	mov	r1, r5
  4027b8:	9207      	str	r2, [sp, #28]
  4027ba:	e9c3 0100 	strd	r0, r1, [r3]
  4027be:	f7ff ba54 	b.w	401c6a <_vfiprintf_r+0x7a>
  4027c2:	4658      	mov	r0, fp
  4027c4:	9607      	str	r6, [sp, #28]
  4027c6:	9302      	str	r3, [sp, #8]
  4027c8:	f7ff f8ba 	bl	401940 <strlen>
  4027cc:	2400      	movs	r4, #0
  4027ce:	9005      	str	r0, [sp, #20]
  4027d0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4027d4:	f7ff bb5e 	b.w	401e94 <_vfiprintf_r+0x2a4>
  4027d8:	aa0f      	add	r2, sp, #60	; 0x3c
  4027da:	9904      	ldr	r1, [sp, #16]
  4027dc:	9806      	ldr	r0, [sp, #24]
  4027de:	f7ff f9c7 	bl	401b70 <__sprint_r.part.0>
  4027e2:	2800      	cmp	r0, #0
  4027e4:	f47f aeb6 	bne.w	402554 <_vfiprintf_r+0x964>
  4027e8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4027ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4027ec:	1c48      	adds	r0, r1, #1
  4027ee:	46ca      	mov	sl, r9
  4027f0:	e5a7      	b.n	402342 <_vfiprintf_r+0x752>
  4027f2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4027f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4027f6:	4e20      	ldr	r6, [pc, #128]	; (402878 <_vfiprintf_r+0xc88>)
  4027f8:	3101      	adds	r1, #1
  4027fa:	f7ff bb90 	b.w	401f1e <_vfiprintf_r+0x32e>
  4027fe:	2c06      	cmp	r4, #6
  402800:	bf28      	it	cs
  402802:	2406      	movcs	r4, #6
  402804:	9405      	str	r4, [sp, #20]
  402806:	9607      	str	r6, [sp, #28]
  402808:	9401      	str	r4, [sp, #4]
  40280a:	f8df b070 	ldr.w	fp, [pc, #112]	; 40287c <_vfiprintf_r+0xc8c>
  40280e:	e4d5      	b.n	4021bc <_vfiprintf_r+0x5cc>
  402810:	9810      	ldr	r0, [sp, #64]	; 0x40
  402812:	4e19      	ldr	r6, [pc, #100]	; (402878 <_vfiprintf_r+0xc88>)
  402814:	3001      	adds	r0, #1
  402816:	e603      	b.n	402420 <_vfiprintf_r+0x830>
  402818:	9405      	str	r4, [sp, #20]
  40281a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40281e:	9607      	str	r6, [sp, #28]
  402820:	9302      	str	r3, [sp, #8]
  402822:	4604      	mov	r4, r0
  402824:	f7ff bb36 	b.w	401e94 <_vfiprintf_r+0x2a4>
  402828:	4686      	mov	lr, r0
  40282a:	f7ff bbce 	b.w	401fca <_vfiprintf_r+0x3da>
  40282e:	9806      	ldr	r0, [sp, #24]
  402830:	aa0f      	add	r2, sp, #60	; 0x3c
  402832:	4659      	mov	r1, fp
  402834:	f7ff f99c 	bl	401b70 <__sprint_r.part.0>
  402838:	2800      	cmp	r0, #0
  40283a:	f43f ae24 	beq.w	402486 <_vfiprintf_r+0x896>
  40283e:	e624      	b.n	40248a <_vfiprintf_r+0x89a>
  402840:	9907      	ldr	r1, [sp, #28]
  402842:	f898 2001 	ldrb.w	r2, [r8, #1]
  402846:	680c      	ldr	r4, [r1, #0]
  402848:	3104      	adds	r1, #4
  40284a:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  40284e:	46b8      	mov	r8, r7
  402850:	9107      	str	r1, [sp, #28]
  402852:	f7ff ba3f 	b.w	401cd4 <_vfiprintf_r+0xe4>
  402856:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40285a:	e43c      	b.n	4020d6 <_vfiprintf_r+0x4e6>
  40285c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402860:	e521      	b.n	4022a6 <_vfiprintf_r+0x6b6>
  402862:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402866:	f7ff bbf4 	b.w	402052 <_vfiprintf_r+0x462>
  40286a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40286e:	e491      	b.n	402194 <_vfiprintf_r+0x5a4>
  402870:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402874:	e469      	b.n	40214a <_vfiprintf_r+0x55a>
  402876:	bf00      	nop
  402878:	004046e0 	.word	0x004046e0
  40287c:	004046d8 	.word	0x004046d8

00402880 <__sbprintf>:
  402880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402884:	460c      	mov	r4, r1
  402886:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  40288a:	8989      	ldrh	r1, [r1, #12]
  40288c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40288e:	89e5      	ldrh	r5, [r4, #14]
  402890:	9619      	str	r6, [sp, #100]	; 0x64
  402892:	f021 0102 	bic.w	r1, r1, #2
  402896:	4606      	mov	r6, r0
  402898:	69e0      	ldr	r0, [r4, #28]
  40289a:	f8ad 100c 	strh.w	r1, [sp, #12]
  40289e:	4617      	mov	r7, r2
  4028a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4028a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
  4028a6:	f8ad 500e 	strh.w	r5, [sp, #14]
  4028aa:	4698      	mov	r8, r3
  4028ac:	ad1a      	add	r5, sp, #104	; 0x68
  4028ae:	2300      	movs	r3, #0
  4028b0:	9007      	str	r0, [sp, #28]
  4028b2:	a816      	add	r0, sp, #88	; 0x58
  4028b4:	9209      	str	r2, [sp, #36]	; 0x24
  4028b6:	9306      	str	r3, [sp, #24]
  4028b8:	9500      	str	r5, [sp, #0]
  4028ba:	9504      	str	r5, [sp, #16]
  4028bc:	9102      	str	r1, [sp, #8]
  4028be:	9105      	str	r1, [sp, #20]
  4028c0:	f000 fd4c 	bl	40335c <__retarget_lock_init_recursive>
  4028c4:	4643      	mov	r3, r8
  4028c6:	463a      	mov	r2, r7
  4028c8:	4669      	mov	r1, sp
  4028ca:	4630      	mov	r0, r6
  4028cc:	f7ff f990 	bl	401bf0 <_vfiprintf_r>
  4028d0:	1e05      	subs	r5, r0, #0
  4028d2:	db07      	blt.n	4028e4 <__sbprintf+0x64>
  4028d4:	4630      	mov	r0, r6
  4028d6:	4669      	mov	r1, sp
  4028d8:	f000 f928 	bl	402b2c <_fflush_r>
  4028dc:	2800      	cmp	r0, #0
  4028de:	bf18      	it	ne
  4028e0:	f04f 35ff 	movne.w	r5, #4294967295
  4028e4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4028e8:	065b      	lsls	r3, r3, #25
  4028ea:	d503      	bpl.n	4028f4 <__sbprintf+0x74>
  4028ec:	89a3      	ldrh	r3, [r4, #12]
  4028ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4028f2:	81a3      	strh	r3, [r4, #12]
  4028f4:	9816      	ldr	r0, [sp, #88]	; 0x58
  4028f6:	f000 fd33 	bl	403360 <__retarget_lock_close_recursive>
  4028fa:	4628      	mov	r0, r5
  4028fc:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  402900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00402904 <__swsetup_r>:
  402904:	b538      	push	{r3, r4, r5, lr}
  402906:	4b30      	ldr	r3, [pc, #192]	; (4029c8 <__swsetup_r+0xc4>)
  402908:	681b      	ldr	r3, [r3, #0]
  40290a:	4605      	mov	r5, r0
  40290c:	460c      	mov	r4, r1
  40290e:	b113      	cbz	r3, 402916 <__swsetup_r+0x12>
  402910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  402912:	2a00      	cmp	r2, #0
  402914:	d038      	beq.n	402988 <__swsetup_r+0x84>
  402916:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40291a:	b293      	uxth	r3, r2
  40291c:	0718      	lsls	r0, r3, #28
  40291e:	d50c      	bpl.n	40293a <__swsetup_r+0x36>
  402920:	6920      	ldr	r0, [r4, #16]
  402922:	b1a8      	cbz	r0, 402950 <__swsetup_r+0x4c>
  402924:	f013 0201 	ands.w	r2, r3, #1
  402928:	d01e      	beq.n	402968 <__swsetup_r+0x64>
  40292a:	6963      	ldr	r3, [r4, #20]
  40292c:	2200      	movs	r2, #0
  40292e:	425b      	negs	r3, r3
  402930:	61a3      	str	r3, [r4, #24]
  402932:	60a2      	str	r2, [r4, #8]
  402934:	b1f0      	cbz	r0, 402974 <__swsetup_r+0x70>
  402936:	2000      	movs	r0, #0
  402938:	bd38      	pop	{r3, r4, r5, pc}
  40293a:	06d9      	lsls	r1, r3, #27
  40293c:	d53c      	bpl.n	4029b8 <__swsetup_r+0xb4>
  40293e:	0758      	lsls	r0, r3, #29
  402940:	d426      	bmi.n	402990 <__swsetup_r+0x8c>
  402942:	6920      	ldr	r0, [r4, #16]
  402944:	f042 0308 	orr.w	r3, r2, #8
  402948:	81a3      	strh	r3, [r4, #12]
  40294a:	b29b      	uxth	r3, r3
  40294c:	2800      	cmp	r0, #0
  40294e:	d1e9      	bne.n	402924 <__swsetup_r+0x20>
  402950:	f403 7220 	and.w	r2, r3, #640	; 0x280
  402954:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  402958:	d0e4      	beq.n	402924 <__swsetup_r+0x20>
  40295a:	4628      	mov	r0, r5
  40295c:	4621      	mov	r1, r4
  40295e:	f000 fd33 	bl	4033c8 <__smakebuf_r>
  402962:	89a3      	ldrh	r3, [r4, #12]
  402964:	6920      	ldr	r0, [r4, #16]
  402966:	e7dd      	b.n	402924 <__swsetup_r+0x20>
  402968:	0799      	lsls	r1, r3, #30
  40296a:	bf58      	it	pl
  40296c:	6962      	ldrpl	r2, [r4, #20]
  40296e:	60a2      	str	r2, [r4, #8]
  402970:	2800      	cmp	r0, #0
  402972:	d1e0      	bne.n	402936 <__swsetup_r+0x32>
  402974:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402978:	061a      	lsls	r2, r3, #24
  40297a:	d5dd      	bpl.n	402938 <__swsetup_r+0x34>
  40297c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402980:	81a3      	strh	r3, [r4, #12]
  402982:	f04f 30ff 	mov.w	r0, #4294967295
  402986:	bd38      	pop	{r3, r4, r5, pc}
  402988:	4618      	mov	r0, r3
  40298a:	f000 f927 	bl	402bdc <__sinit>
  40298e:	e7c2      	b.n	402916 <__swsetup_r+0x12>
  402990:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402992:	b151      	cbz	r1, 4029aa <__swsetup_r+0xa6>
  402994:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402998:	4299      	cmp	r1, r3
  40299a:	d004      	beq.n	4029a6 <__swsetup_r+0xa2>
  40299c:	4628      	mov	r0, r5
  40299e:	f000 fa43 	bl	402e28 <_free_r>
  4029a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4029a6:	2300      	movs	r3, #0
  4029a8:	6323      	str	r3, [r4, #48]	; 0x30
  4029aa:	2300      	movs	r3, #0
  4029ac:	6920      	ldr	r0, [r4, #16]
  4029ae:	6063      	str	r3, [r4, #4]
  4029b0:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4029b4:	6020      	str	r0, [r4, #0]
  4029b6:	e7c5      	b.n	402944 <__swsetup_r+0x40>
  4029b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4029bc:	2309      	movs	r3, #9
  4029be:	602b      	str	r3, [r5, #0]
  4029c0:	f04f 30ff 	mov.w	r0, #4294967295
  4029c4:	81a2      	strh	r2, [r4, #12]
  4029c6:	bd38      	pop	{r3, r4, r5, pc}
  4029c8:	2040002c 	.word	0x2040002c

004029cc <register_fini>:
  4029cc:	4b02      	ldr	r3, [pc, #8]	; (4029d8 <register_fini+0xc>)
  4029ce:	b113      	cbz	r3, 4029d6 <register_fini+0xa>
  4029d0:	4802      	ldr	r0, [pc, #8]	; (4029dc <register_fini+0x10>)
  4029d2:	f000 b805 	b.w	4029e0 <atexit>
  4029d6:	4770      	bx	lr
  4029d8:	00000000 	.word	0x00000000
  4029dc:	00402c4d 	.word	0x00402c4d

004029e0 <atexit>:
  4029e0:	2300      	movs	r3, #0
  4029e2:	4601      	mov	r1, r0
  4029e4:	461a      	mov	r2, r3
  4029e6:	4618      	mov	r0, r3
  4029e8:	f001 bb64 	b.w	4040b4 <__register_exitproc>

004029ec <__sflush_r>:
  4029ec:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4029f0:	b29a      	uxth	r2, r3
  4029f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4029f6:	460d      	mov	r5, r1
  4029f8:	0711      	lsls	r1, r2, #28
  4029fa:	4680      	mov	r8, r0
  4029fc:	d43a      	bmi.n	402a74 <__sflush_r+0x88>
  4029fe:	686a      	ldr	r2, [r5, #4]
  402a00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  402a04:	2a00      	cmp	r2, #0
  402a06:	81ab      	strh	r3, [r5, #12]
  402a08:	dd6f      	ble.n	402aea <__sflush_r+0xfe>
  402a0a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402a0c:	2c00      	cmp	r4, #0
  402a0e:	d049      	beq.n	402aa4 <__sflush_r+0xb8>
  402a10:	2200      	movs	r2, #0
  402a12:	b29b      	uxth	r3, r3
  402a14:	f8d8 6000 	ldr.w	r6, [r8]
  402a18:	f8c8 2000 	str.w	r2, [r8]
  402a1c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  402a20:	d067      	beq.n	402af2 <__sflush_r+0x106>
  402a22:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  402a24:	075f      	lsls	r7, r3, #29
  402a26:	d505      	bpl.n	402a34 <__sflush_r+0x48>
  402a28:	6869      	ldr	r1, [r5, #4]
  402a2a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402a2c:	1a52      	subs	r2, r2, r1
  402a2e:	b10b      	cbz	r3, 402a34 <__sflush_r+0x48>
  402a30:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  402a32:	1ad2      	subs	r2, r2, r3
  402a34:	2300      	movs	r3, #0
  402a36:	69e9      	ldr	r1, [r5, #28]
  402a38:	4640      	mov	r0, r8
  402a3a:	47a0      	blx	r4
  402a3c:	1c44      	adds	r4, r0, #1
  402a3e:	d03c      	beq.n	402aba <__sflush_r+0xce>
  402a40:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  402a44:	692a      	ldr	r2, [r5, #16]
  402a46:	602a      	str	r2, [r5, #0]
  402a48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402a4c:	2200      	movs	r2, #0
  402a4e:	81ab      	strh	r3, [r5, #12]
  402a50:	04db      	lsls	r3, r3, #19
  402a52:	606a      	str	r2, [r5, #4]
  402a54:	d447      	bmi.n	402ae6 <__sflush_r+0xfa>
  402a56:	6b29      	ldr	r1, [r5, #48]	; 0x30
  402a58:	f8c8 6000 	str.w	r6, [r8]
  402a5c:	b311      	cbz	r1, 402aa4 <__sflush_r+0xb8>
  402a5e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  402a62:	4299      	cmp	r1, r3
  402a64:	d002      	beq.n	402a6c <__sflush_r+0x80>
  402a66:	4640      	mov	r0, r8
  402a68:	f000 f9de 	bl	402e28 <_free_r>
  402a6c:	2000      	movs	r0, #0
  402a6e:	6328      	str	r0, [r5, #48]	; 0x30
  402a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402a74:	692e      	ldr	r6, [r5, #16]
  402a76:	b1ae      	cbz	r6, 402aa4 <__sflush_r+0xb8>
  402a78:	682c      	ldr	r4, [r5, #0]
  402a7a:	602e      	str	r6, [r5, #0]
  402a7c:	0791      	lsls	r1, r2, #30
  402a7e:	bf0c      	ite	eq
  402a80:	696b      	ldreq	r3, [r5, #20]
  402a82:	2300      	movne	r3, #0
  402a84:	1ba4      	subs	r4, r4, r6
  402a86:	60ab      	str	r3, [r5, #8]
  402a88:	e00a      	b.n	402aa0 <__sflush_r+0xb4>
  402a8a:	4623      	mov	r3, r4
  402a8c:	4632      	mov	r2, r6
  402a8e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  402a90:	69e9      	ldr	r1, [r5, #28]
  402a92:	4640      	mov	r0, r8
  402a94:	47b8      	blx	r7
  402a96:	2800      	cmp	r0, #0
  402a98:	eba4 0400 	sub.w	r4, r4, r0
  402a9c:	4406      	add	r6, r0
  402a9e:	dd04      	ble.n	402aaa <__sflush_r+0xbe>
  402aa0:	2c00      	cmp	r4, #0
  402aa2:	dcf2      	bgt.n	402a8a <__sflush_r+0x9e>
  402aa4:	2000      	movs	r0, #0
  402aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402aaa:	89ab      	ldrh	r3, [r5, #12]
  402aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402ab0:	81ab      	strh	r3, [r5, #12]
  402ab2:	f04f 30ff 	mov.w	r0, #4294967295
  402ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402aba:	f8d8 4000 	ldr.w	r4, [r8]
  402abe:	2c1d      	cmp	r4, #29
  402ac0:	d8f3      	bhi.n	402aaa <__sflush_r+0xbe>
  402ac2:	4b19      	ldr	r3, [pc, #100]	; (402b28 <__sflush_r+0x13c>)
  402ac4:	40e3      	lsrs	r3, r4
  402ac6:	43db      	mvns	r3, r3
  402ac8:	f013 0301 	ands.w	r3, r3, #1
  402acc:	d1ed      	bne.n	402aaa <__sflush_r+0xbe>
  402ace:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  402ad2:	606b      	str	r3, [r5, #4]
  402ad4:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  402ad8:	6929      	ldr	r1, [r5, #16]
  402ada:	81ab      	strh	r3, [r5, #12]
  402adc:	04da      	lsls	r2, r3, #19
  402ade:	6029      	str	r1, [r5, #0]
  402ae0:	d5b9      	bpl.n	402a56 <__sflush_r+0x6a>
  402ae2:	2c00      	cmp	r4, #0
  402ae4:	d1b7      	bne.n	402a56 <__sflush_r+0x6a>
  402ae6:	6528      	str	r0, [r5, #80]	; 0x50
  402ae8:	e7b5      	b.n	402a56 <__sflush_r+0x6a>
  402aea:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  402aec:	2a00      	cmp	r2, #0
  402aee:	dc8c      	bgt.n	402a0a <__sflush_r+0x1e>
  402af0:	e7d8      	b.n	402aa4 <__sflush_r+0xb8>
  402af2:	2301      	movs	r3, #1
  402af4:	69e9      	ldr	r1, [r5, #28]
  402af6:	4640      	mov	r0, r8
  402af8:	47a0      	blx	r4
  402afa:	1c43      	adds	r3, r0, #1
  402afc:	4602      	mov	r2, r0
  402afe:	d002      	beq.n	402b06 <__sflush_r+0x11a>
  402b00:	89ab      	ldrh	r3, [r5, #12]
  402b02:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402b04:	e78e      	b.n	402a24 <__sflush_r+0x38>
  402b06:	f8d8 3000 	ldr.w	r3, [r8]
  402b0a:	2b00      	cmp	r3, #0
  402b0c:	d0f8      	beq.n	402b00 <__sflush_r+0x114>
  402b0e:	2b1d      	cmp	r3, #29
  402b10:	d001      	beq.n	402b16 <__sflush_r+0x12a>
  402b12:	2b16      	cmp	r3, #22
  402b14:	d102      	bne.n	402b1c <__sflush_r+0x130>
  402b16:	f8c8 6000 	str.w	r6, [r8]
  402b1a:	e7c3      	b.n	402aa4 <__sflush_r+0xb8>
  402b1c:	89ab      	ldrh	r3, [r5, #12]
  402b1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402b22:	81ab      	strh	r3, [r5, #12]
  402b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402b28:	20400001 	.word	0x20400001

00402b2c <_fflush_r>:
  402b2c:	b538      	push	{r3, r4, r5, lr}
  402b2e:	460d      	mov	r5, r1
  402b30:	4604      	mov	r4, r0
  402b32:	b108      	cbz	r0, 402b38 <_fflush_r+0xc>
  402b34:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402b36:	b1bb      	cbz	r3, 402b68 <_fflush_r+0x3c>
  402b38:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  402b3c:	b188      	cbz	r0, 402b62 <_fflush_r+0x36>
  402b3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  402b40:	07db      	lsls	r3, r3, #31
  402b42:	d401      	bmi.n	402b48 <_fflush_r+0x1c>
  402b44:	0581      	lsls	r1, r0, #22
  402b46:	d517      	bpl.n	402b78 <_fflush_r+0x4c>
  402b48:	4620      	mov	r0, r4
  402b4a:	4629      	mov	r1, r5
  402b4c:	f7ff ff4e 	bl	4029ec <__sflush_r>
  402b50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  402b52:	07da      	lsls	r2, r3, #31
  402b54:	4604      	mov	r4, r0
  402b56:	d402      	bmi.n	402b5e <_fflush_r+0x32>
  402b58:	89ab      	ldrh	r3, [r5, #12]
  402b5a:	059b      	lsls	r3, r3, #22
  402b5c:	d507      	bpl.n	402b6e <_fflush_r+0x42>
  402b5e:	4620      	mov	r0, r4
  402b60:	bd38      	pop	{r3, r4, r5, pc}
  402b62:	4604      	mov	r4, r0
  402b64:	4620      	mov	r0, r4
  402b66:	bd38      	pop	{r3, r4, r5, pc}
  402b68:	f000 f838 	bl	402bdc <__sinit>
  402b6c:	e7e4      	b.n	402b38 <_fflush_r+0xc>
  402b6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
  402b70:	f000 fbfa 	bl	403368 <__retarget_lock_release_recursive>
  402b74:	4620      	mov	r0, r4
  402b76:	bd38      	pop	{r3, r4, r5, pc}
  402b78:	6da8      	ldr	r0, [r5, #88]	; 0x58
  402b7a:	f000 fbf3 	bl	403364 <__retarget_lock_acquire_recursive>
  402b7e:	e7e3      	b.n	402b48 <_fflush_r+0x1c>

00402b80 <_cleanup_r>:
  402b80:	4901      	ldr	r1, [pc, #4]	; (402b88 <_cleanup_r+0x8>)
  402b82:	f000 bbaf 	b.w	4032e4 <_fwalk_reent>
  402b86:	bf00      	nop
  402b88:	0040419d 	.word	0x0040419d

00402b8c <std.isra.0>:
  402b8c:	b510      	push	{r4, lr}
  402b8e:	2300      	movs	r3, #0
  402b90:	4604      	mov	r4, r0
  402b92:	8181      	strh	r1, [r0, #12]
  402b94:	81c2      	strh	r2, [r0, #14]
  402b96:	6003      	str	r3, [r0, #0]
  402b98:	6043      	str	r3, [r0, #4]
  402b9a:	6083      	str	r3, [r0, #8]
  402b9c:	6643      	str	r3, [r0, #100]	; 0x64
  402b9e:	6103      	str	r3, [r0, #16]
  402ba0:	6143      	str	r3, [r0, #20]
  402ba2:	6183      	str	r3, [r0, #24]
  402ba4:	4619      	mov	r1, r3
  402ba6:	2208      	movs	r2, #8
  402ba8:	305c      	adds	r0, #92	; 0x5c
  402baa:	f7fe fe6d 	bl	401888 <memset>
  402bae:	4807      	ldr	r0, [pc, #28]	; (402bcc <std.isra.0+0x40>)
  402bb0:	4907      	ldr	r1, [pc, #28]	; (402bd0 <std.isra.0+0x44>)
  402bb2:	4a08      	ldr	r2, [pc, #32]	; (402bd4 <std.isra.0+0x48>)
  402bb4:	4b08      	ldr	r3, [pc, #32]	; (402bd8 <std.isra.0+0x4c>)
  402bb6:	6220      	str	r0, [r4, #32]
  402bb8:	61e4      	str	r4, [r4, #28]
  402bba:	6261      	str	r1, [r4, #36]	; 0x24
  402bbc:	62a2      	str	r2, [r4, #40]	; 0x28
  402bbe:	62e3      	str	r3, [r4, #44]	; 0x2c
  402bc0:	f104 0058 	add.w	r0, r4, #88	; 0x58
  402bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402bc8:	f000 bbc8 	b.w	40335c <__retarget_lock_init_recursive>
  402bcc:	00403ee1 	.word	0x00403ee1
  402bd0:	00403f05 	.word	0x00403f05
  402bd4:	00403f41 	.word	0x00403f41
  402bd8:	00403f61 	.word	0x00403f61

00402bdc <__sinit>:
  402bdc:	b510      	push	{r4, lr}
  402bde:	4604      	mov	r4, r0
  402be0:	4812      	ldr	r0, [pc, #72]	; (402c2c <__sinit+0x50>)
  402be2:	f000 fbbf 	bl	403364 <__retarget_lock_acquire_recursive>
  402be6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402be8:	b9d2      	cbnz	r2, 402c20 <__sinit+0x44>
  402bea:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  402bee:	4810      	ldr	r0, [pc, #64]	; (402c30 <__sinit+0x54>)
  402bf0:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  402bf4:	2103      	movs	r1, #3
  402bf6:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  402bfa:	63e0      	str	r0, [r4, #60]	; 0x3c
  402bfc:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  402c00:	6860      	ldr	r0, [r4, #4]
  402c02:	2104      	movs	r1, #4
  402c04:	f7ff ffc2 	bl	402b8c <std.isra.0>
  402c08:	2201      	movs	r2, #1
  402c0a:	2109      	movs	r1, #9
  402c0c:	68a0      	ldr	r0, [r4, #8]
  402c0e:	f7ff ffbd 	bl	402b8c <std.isra.0>
  402c12:	2202      	movs	r2, #2
  402c14:	2112      	movs	r1, #18
  402c16:	68e0      	ldr	r0, [r4, #12]
  402c18:	f7ff ffb8 	bl	402b8c <std.isra.0>
  402c1c:	2301      	movs	r3, #1
  402c1e:	63a3      	str	r3, [r4, #56]	; 0x38
  402c20:	4802      	ldr	r0, [pc, #8]	; (402c2c <__sinit+0x50>)
  402c22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402c26:	f000 bb9f 	b.w	403368 <__retarget_lock_release_recursive>
  402c2a:	bf00      	nop
  402c2c:	2043b4d0 	.word	0x2043b4d0
  402c30:	00402b81 	.word	0x00402b81

00402c34 <__sfp_lock_acquire>:
  402c34:	4801      	ldr	r0, [pc, #4]	; (402c3c <__sfp_lock_acquire+0x8>)
  402c36:	f000 bb95 	b.w	403364 <__retarget_lock_acquire_recursive>
  402c3a:	bf00      	nop
  402c3c:	2043b4e4 	.word	0x2043b4e4

00402c40 <__sfp_lock_release>:
  402c40:	4801      	ldr	r0, [pc, #4]	; (402c48 <__sfp_lock_release+0x8>)
  402c42:	f000 bb91 	b.w	403368 <__retarget_lock_release_recursive>
  402c46:	bf00      	nop
  402c48:	2043b4e4 	.word	0x2043b4e4

00402c4c <__libc_fini_array>:
  402c4c:	b538      	push	{r3, r4, r5, lr}
  402c4e:	4c0a      	ldr	r4, [pc, #40]	; (402c78 <__libc_fini_array+0x2c>)
  402c50:	4d0a      	ldr	r5, [pc, #40]	; (402c7c <__libc_fini_array+0x30>)
  402c52:	1b64      	subs	r4, r4, r5
  402c54:	10a4      	asrs	r4, r4, #2
  402c56:	d00a      	beq.n	402c6e <__libc_fini_array+0x22>
  402c58:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402c5c:	3b01      	subs	r3, #1
  402c5e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  402c62:	3c01      	subs	r4, #1
  402c64:	f855 3904 	ldr.w	r3, [r5], #-4
  402c68:	4798      	blx	r3
  402c6a:	2c00      	cmp	r4, #0
  402c6c:	d1f9      	bne.n	402c62 <__libc_fini_array+0x16>
  402c6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402c72:	f001 bdd9 	b.w	404828 <_fini>
  402c76:	bf00      	nop
  402c78:	00404838 	.word	0x00404838
  402c7c:	00404834 	.word	0x00404834

00402c80 <__fputwc>:
  402c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402c84:	b082      	sub	sp, #8
  402c86:	4680      	mov	r8, r0
  402c88:	4689      	mov	r9, r1
  402c8a:	4614      	mov	r4, r2
  402c8c:	f000 fb54 	bl	403338 <__locale_mb_cur_max>
  402c90:	2801      	cmp	r0, #1
  402c92:	d036      	beq.n	402d02 <__fputwc+0x82>
  402c94:	464a      	mov	r2, r9
  402c96:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  402c9a:	a901      	add	r1, sp, #4
  402c9c:	4640      	mov	r0, r8
  402c9e:	f001 f9bb 	bl	404018 <_wcrtomb_r>
  402ca2:	1c42      	adds	r2, r0, #1
  402ca4:	4606      	mov	r6, r0
  402ca6:	d025      	beq.n	402cf4 <__fputwc+0x74>
  402ca8:	b3a8      	cbz	r0, 402d16 <__fputwc+0x96>
  402caa:	f89d e004 	ldrb.w	lr, [sp, #4]
  402cae:	2500      	movs	r5, #0
  402cb0:	f10d 0a04 	add.w	sl, sp, #4
  402cb4:	e009      	b.n	402cca <__fputwc+0x4a>
  402cb6:	6823      	ldr	r3, [r4, #0]
  402cb8:	1c5a      	adds	r2, r3, #1
  402cba:	6022      	str	r2, [r4, #0]
  402cbc:	f883 e000 	strb.w	lr, [r3]
  402cc0:	3501      	adds	r5, #1
  402cc2:	42b5      	cmp	r5, r6
  402cc4:	d227      	bcs.n	402d16 <__fputwc+0x96>
  402cc6:	f815 e00a 	ldrb.w	lr, [r5, sl]
  402cca:	68a3      	ldr	r3, [r4, #8]
  402ccc:	3b01      	subs	r3, #1
  402cce:	2b00      	cmp	r3, #0
  402cd0:	60a3      	str	r3, [r4, #8]
  402cd2:	daf0      	bge.n	402cb6 <__fputwc+0x36>
  402cd4:	69a7      	ldr	r7, [r4, #24]
  402cd6:	42bb      	cmp	r3, r7
  402cd8:	4671      	mov	r1, lr
  402cda:	4622      	mov	r2, r4
  402cdc:	4640      	mov	r0, r8
  402cde:	db02      	blt.n	402ce6 <__fputwc+0x66>
  402ce0:	f1be 0f0a 	cmp.w	lr, #10
  402ce4:	d1e7      	bne.n	402cb6 <__fputwc+0x36>
  402ce6:	f001 f93f 	bl	403f68 <__swbuf_r>
  402cea:	1c43      	adds	r3, r0, #1
  402cec:	d1e8      	bne.n	402cc0 <__fputwc+0x40>
  402cee:	b002      	add	sp, #8
  402cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402cf4:	89a3      	ldrh	r3, [r4, #12]
  402cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402cfa:	81a3      	strh	r3, [r4, #12]
  402cfc:	b002      	add	sp, #8
  402cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402d02:	f109 33ff 	add.w	r3, r9, #4294967295
  402d06:	2bfe      	cmp	r3, #254	; 0xfe
  402d08:	d8c4      	bhi.n	402c94 <__fputwc+0x14>
  402d0a:	fa5f fe89 	uxtb.w	lr, r9
  402d0e:	4606      	mov	r6, r0
  402d10:	f88d e004 	strb.w	lr, [sp, #4]
  402d14:	e7cb      	b.n	402cae <__fputwc+0x2e>
  402d16:	4648      	mov	r0, r9
  402d18:	b002      	add	sp, #8
  402d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402d1e:	bf00      	nop

00402d20 <_fputwc_r>:
  402d20:	b530      	push	{r4, r5, lr}
  402d22:	6e53      	ldr	r3, [r2, #100]	; 0x64
  402d24:	f013 0f01 	tst.w	r3, #1
  402d28:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  402d2c:	4614      	mov	r4, r2
  402d2e:	b083      	sub	sp, #12
  402d30:	4605      	mov	r5, r0
  402d32:	b29a      	uxth	r2, r3
  402d34:	d101      	bne.n	402d3a <_fputwc_r+0x1a>
  402d36:	0590      	lsls	r0, r2, #22
  402d38:	d51c      	bpl.n	402d74 <_fputwc_r+0x54>
  402d3a:	0490      	lsls	r0, r2, #18
  402d3c:	d406      	bmi.n	402d4c <_fputwc_r+0x2c>
  402d3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
  402d40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  402d44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  402d48:	81a3      	strh	r3, [r4, #12]
  402d4a:	6662      	str	r2, [r4, #100]	; 0x64
  402d4c:	4628      	mov	r0, r5
  402d4e:	4622      	mov	r2, r4
  402d50:	f7ff ff96 	bl	402c80 <__fputwc>
  402d54:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402d56:	07da      	lsls	r2, r3, #31
  402d58:	4605      	mov	r5, r0
  402d5a:	d402      	bmi.n	402d62 <_fputwc_r+0x42>
  402d5c:	89a3      	ldrh	r3, [r4, #12]
  402d5e:	059b      	lsls	r3, r3, #22
  402d60:	d502      	bpl.n	402d68 <_fputwc_r+0x48>
  402d62:	4628      	mov	r0, r5
  402d64:	b003      	add	sp, #12
  402d66:	bd30      	pop	{r4, r5, pc}
  402d68:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402d6a:	f000 fafd 	bl	403368 <__retarget_lock_release_recursive>
  402d6e:	4628      	mov	r0, r5
  402d70:	b003      	add	sp, #12
  402d72:	bd30      	pop	{r4, r5, pc}
  402d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402d76:	9101      	str	r1, [sp, #4]
  402d78:	f000 faf4 	bl	403364 <__retarget_lock_acquire_recursive>
  402d7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402d80:	9901      	ldr	r1, [sp, #4]
  402d82:	b29a      	uxth	r2, r3
  402d84:	e7d9      	b.n	402d3a <_fputwc_r+0x1a>
  402d86:	bf00      	nop

00402d88 <_malloc_trim_r>:
  402d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402d8a:	4f24      	ldr	r7, [pc, #144]	; (402e1c <_malloc_trim_r+0x94>)
  402d8c:	460c      	mov	r4, r1
  402d8e:	4606      	mov	r6, r0
  402d90:	f000 fee2 	bl	403b58 <__malloc_lock>
  402d94:	68bb      	ldr	r3, [r7, #8]
  402d96:	685d      	ldr	r5, [r3, #4]
  402d98:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  402d9c:	310f      	adds	r1, #15
  402d9e:	f025 0503 	bic.w	r5, r5, #3
  402da2:	4429      	add	r1, r5
  402da4:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  402da8:	f021 010f 	bic.w	r1, r1, #15
  402dac:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  402db0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  402db4:	db07      	blt.n	402dc6 <_malloc_trim_r+0x3e>
  402db6:	2100      	movs	r1, #0
  402db8:	4630      	mov	r0, r6
  402dba:	f001 f87f 	bl	403ebc <_sbrk_r>
  402dbe:	68bb      	ldr	r3, [r7, #8]
  402dc0:	442b      	add	r3, r5
  402dc2:	4298      	cmp	r0, r3
  402dc4:	d004      	beq.n	402dd0 <_malloc_trim_r+0x48>
  402dc6:	4630      	mov	r0, r6
  402dc8:	f000 fecc 	bl	403b64 <__malloc_unlock>
  402dcc:	2000      	movs	r0, #0
  402dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402dd0:	4261      	negs	r1, r4
  402dd2:	4630      	mov	r0, r6
  402dd4:	f001 f872 	bl	403ebc <_sbrk_r>
  402dd8:	3001      	adds	r0, #1
  402dda:	d00d      	beq.n	402df8 <_malloc_trim_r+0x70>
  402ddc:	4b10      	ldr	r3, [pc, #64]	; (402e20 <_malloc_trim_r+0x98>)
  402dde:	68ba      	ldr	r2, [r7, #8]
  402de0:	6819      	ldr	r1, [r3, #0]
  402de2:	1b2d      	subs	r5, r5, r4
  402de4:	f045 0501 	orr.w	r5, r5, #1
  402de8:	4630      	mov	r0, r6
  402dea:	1b09      	subs	r1, r1, r4
  402dec:	6055      	str	r5, [r2, #4]
  402dee:	6019      	str	r1, [r3, #0]
  402df0:	f000 feb8 	bl	403b64 <__malloc_unlock>
  402df4:	2001      	movs	r0, #1
  402df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402df8:	2100      	movs	r1, #0
  402dfa:	4630      	mov	r0, r6
  402dfc:	f001 f85e 	bl	403ebc <_sbrk_r>
  402e00:	68ba      	ldr	r2, [r7, #8]
  402e02:	1a83      	subs	r3, r0, r2
  402e04:	2b0f      	cmp	r3, #15
  402e06:	ddde      	ble.n	402dc6 <_malloc_trim_r+0x3e>
  402e08:	4c06      	ldr	r4, [pc, #24]	; (402e24 <_malloc_trim_r+0x9c>)
  402e0a:	4905      	ldr	r1, [pc, #20]	; (402e20 <_malloc_trim_r+0x98>)
  402e0c:	6824      	ldr	r4, [r4, #0]
  402e0e:	f043 0301 	orr.w	r3, r3, #1
  402e12:	1b00      	subs	r0, r0, r4
  402e14:	6053      	str	r3, [r2, #4]
  402e16:	6008      	str	r0, [r1, #0]
  402e18:	e7d5      	b.n	402dc6 <_malloc_trim_r+0x3e>
  402e1a:	bf00      	nop
  402e1c:	204005c8 	.word	0x204005c8
  402e20:	2043b3fc 	.word	0x2043b3fc
  402e24:	204009d0 	.word	0x204009d0

00402e28 <_free_r>:
  402e28:	2900      	cmp	r1, #0
  402e2a:	d044      	beq.n	402eb6 <_free_r+0x8e>
  402e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402e30:	460d      	mov	r5, r1
  402e32:	4680      	mov	r8, r0
  402e34:	f000 fe90 	bl	403b58 <__malloc_lock>
  402e38:	f855 7c04 	ldr.w	r7, [r5, #-4]
  402e3c:	4969      	ldr	r1, [pc, #420]	; (402fe4 <_free_r+0x1bc>)
  402e3e:	f027 0301 	bic.w	r3, r7, #1
  402e42:	f1a5 0408 	sub.w	r4, r5, #8
  402e46:	18e2      	adds	r2, r4, r3
  402e48:	688e      	ldr	r6, [r1, #8]
  402e4a:	6850      	ldr	r0, [r2, #4]
  402e4c:	42b2      	cmp	r2, r6
  402e4e:	f020 0003 	bic.w	r0, r0, #3
  402e52:	d05e      	beq.n	402f12 <_free_r+0xea>
  402e54:	07fe      	lsls	r6, r7, #31
  402e56:	6050      	str	r0, [r2, #4]
  402e58:	d40b      	bmi.n	402e72 <_free_r+0x4a>
  402e5a:	f855 7c08 	ldr.w	r7, [r5, #-8]
  402e5e:	1be4      	subs	r4, r4, r7
  402e60:	f101 0e08 	add.w	lr, r1, #8
  402e64:	68a5      	ldr	r5, [r4, #8]
  402e66:	4575      	cmp	r5, lr
  402e68:	443b      	add	r3, r7
  402e6a:	d06d      	beq.n	402f48 <_free_r+0x120>
  402e6c:	68e7      	ldr	r7, [r4, #12]
  402e6e:	60ef      	str	r7, [r5, #12]
  402e70:	60bd      	str	r5, [r7, #8]
  402e72:	1815      	adds	r5, r2, r0
  402e74:	686d      	ldr	r5, [r5, #4]
  402e76:	07ed      	lsls	r5, r5, #31
  402e78:	d53e      	bpl.n	402ef8 <_free_r+0xd0>
  402e7a:	f043 0201 	orr.w	r2, r3, #1
  402e7e:	6062      	str	r2, [r4, #4]
  402e80:	50e3      	str	r3, [r4, r3]
  402e82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402e86:	d217      	bcs.n	402eb8 <_free_r+0x90>
  402e88:	08db      	lsrs	r3, r3, #3
  402e8a:	1c58      	adds	r0, r3, #1
  402e8c:	109a      	asrs	r2, r3, #2
  402e8e:	684d      	ldr	r5, [r1, #4]
  402e90:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  402e94:	60a7      	str	r7, [r4, #8]
  402e96:	2301      	movs	r3, #1
  402e98:	4093      	lsls	r3, r2
  402e9a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  402e9e:	432b      	orrs	r3, r5
  402ea0:	3a08      	subs	r2, #8
  402ea2:	60e2      	str	r2, [r4, #12]
  402ea4:	604b      	str	r3, [r1, #4]
  402ea6:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  402eaa:	60fc      	str	r4, [r7, #12]
  402eac:	4640      	mov	r0, r8
  402eae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402eb2:	f000 be57 	b.w	403b64 <__malloc_unlock>
  402eb6:	4770      	bx	lr
  402eb8:	0a5a      	lsrs	r2, r3, #9
  402eba:	2a04      	cmp	r2, #4
  402ebc:	d852      	bhi.n	402f64 <_free_r+0x13c>
  402ebe:	099a      	lsrs	r2, r3, #6
  402ec0:	f102 0739 	add.w	r7, r2, #57	; 0x39
  402ec4:	00ff      	lsls	r7, r7, #3
  402ec6:	f102 0538 	add.w	r5, r2, #56	; 0x38
  402eca:	19c8      	adds	r0, r1, r7
  402ecc:	59ca      	ldr	r2, [r1, r7]
  402ece:	3808      	subs	r0, #8
  402ed0:	4290      	cmp	r0, r2
  402ed2:	d04f      	beq.n	402f74 <_free_r+0x14c>
  402ed4:	6851      	ldr	r1, [r2, #4]
  402ed6:	f021 0103 	bic.w	r1, r1, #3
  402eda:	428b      	cmp	r3, r1
  402edc:	d232      	bcs.n	402f44 <_free_r+0x11c>
  402ede:	6892      	ldr	r2, [r2, #8]
  402ee0:	4290      	cmp	r0, r2
  402ee2:	d1f7      	bne.n	402ed4 <_free_r+0xac>
  402ee4:	68c3      	ldr	r3, [r0, #12]
  402ee6:	60a0      	str	r0, [r4, #8]
  402ee8:	60e3      	str	r3, [r4, #12]
  402eea:	609c      	str	r4, [r3, #8]
  402eec:	60c4      	str	r4, [r0, #12]
  402eee:	4640      	mov	r0, r8
  402ef0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402ef4:	f000 be36 	b.w	403b64 <__malloc_unlock>
  402ef8:	6895      	ldr	r5, [r2, #8]
  402efa:	4f3b      	ldr	r7, [pc, #236]	; (402fe8 <_free_r+0x1c0>)
  402efc:	42bd      	cmp	r5, r7
  402efe:	4403      	add	r3, r0
  402f00:	d040      	beq.n	402f84 <_free_r+0x15c>
  402f02:	68d0      	ldr	r0, [r2, #12]
  402f04:	60e8      	str	r0, [r5, #12]
  402f06:	f043 0201 	orr.w	r2, r3, #1
  402f0a:	6085      	str	r5, [r0, #8]
  402f0c:	6062      	str	r2, [r4, #4]
  402f0e:	50e3      	str	r3, [r4, r3]
  402f10:	e7b7      	b.n	402e82 <_free_r+0x5a>
  402f12:	07ff      	lsls	r7, r7, #31
  402f14:	4403      	add	r3, r0
  402f16:	d407      	bmi.n	402f28 <_free_r+0x100>
  402f18:	f855 2c08 	ldr.w	r2, [r5, #-8]
  402f1c:	1aa4      	subs	r4, r4, r2
  402f1e:	4413      	add	r3, r2
  402f20:	68a0      	ldr	r0, [r4, #8]
  402f22:	68e2      	ldr	r2, [r4, #12]
  402f24:	60c2      	str	r2, [r0, #12]
  402f26:	6090      	str	r0, [r2, #8]
  402f28:	4a30      	ldr	r2, [pc, #192]	; (402fec <_free_r+0x1c4>)
  402f2a:	6812      	ldr	r2, [r2, #0]
  402f2c:	f043 0001 	orr.w	r0, r3, #1
  402f30:	4293      	cmp	r3, r2
  402f32:	6060      	str	r0, [r4, #4]
  402f34:	608c      	str	r4, [r1, #8]
  402f36:	d3b9      	bcc.n	402eac <_free_r+0x84>
  402f38:	4b2d      	ldr	r3, [pc, #180]	; (402ff0 <_free_r+0x1c8>)
  402f3a:	4640      	mov	r0, r8
  402f3c:	6819      	ldr	r1, [r3, #0]
  402f3e:	f7ff ff23 	bl	402d88 <_malloc_trim_r>
  402f42:	e7b3      	b.n	402eac <_free_r+0x84>
  402f44:	4610      	mov	r0, r2
  402f46:	e7cd      	b.n	402ee4 <_free_r+0xbc>
  402f48:	1811      	adds	r1, r2, r0
  402f4a:	6849      	ldr	r1, [r1, #4]
  402f4c:	07c9      	lsls	r1, r1, #31
  402f4e:	d444      	bmi.n	402fda <_free_r+0x1b2>
  402f50:	6891      	ldr	r1, [r2, #8]
  402f52:	68d2      	ldr	r2, [r2, #12]
  402f54:	60ca      	str	r2, [r1, #12]
  402f56:	4403      	add	r3, r0
  402f58:	f043 0001 	orr.w	r0, r3, #1
  402f5c:	6091      	str	r1, [r2, #8]
  402f5e:	6060      	str	r0, [r4, #4]
  402f60:	50e3      	str	r3, [r4, r3]
  402f62:	e7a3      	b.n	402eac <_free_r+0x84>
  402f64:	2a14      	cmp	r2, #20
  402f66:	d816      	bhi.n	402f96 <_free_r+0x16e>
  402f68:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  402f6c:	00ff      	lsls	r7, r7, #3
  402f6e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  402f72:	e7aa      	b.n	402eca <_free_r+0xa2>
  402f74:	10aa      	asrs	r2, r5, #2
  402f76:	2301      	movs	r3, #1
  402f78:	684d      	ldr	r5, [r1, #4]
  402f7a:	4093      	lsls	r3, r2
  402f7c:	432b      	orrs	r3, r5
  402f7e:	604b      	str	r3, [r1, #4]
  402f80:	4603      	mov	r3, r0
  402f82:	e7b0      	b.n	402ee6 <_free_r+0xbe>
  402f84:	f043 0201 	orr.w	r2, r3, #1
  402f88:	614c      	str	r4, [r1, #20]
  402f8a:	610c      	str	r4, [r1, #16]
  402f8c:	60e5      	str	r5, [r4, #12]
  402f8e:	60a5      	str	r5, [r4, #8]
  402f90:	6062      	str	r2, [r4, #4]
  402f92:	50e3      	str	r3, [r4, r3]
  402f94:	e78a      	b.n	402eac <_free_r+0x84>
  402f96:	2a54      	cmp	r2, #84	; 0x54
  402f98:	d806      	bhi.n	402fa8 <_free_r+0x180>
  402f9a:	0b1a      	lsrs	r2, r3, #12
  402f9c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  402fa0:	00ff      	lsls	r7, r7, #3
  402fa2:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  402fa6:	e790      	b.n	402eca <_free_r+0xa2>
  402fa8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402fac:	d806      	bhi.n	402fbc <_free_r+0x194>
  402fae:	0bda      	lsrs	r2, r3, #15
  402fb0:	f102 0778 	add.w	r7, r2, #120	; 0x78
  402fb4:	00ff      	lsls	r7, r7, #3
  402fb6:	f102 0577 	add.w	r5, r2, #119	; 0x77
  402fba:	e786      	b.n	402eca <_free_r+0xa2>
  402fbc:	f240 5054 	movw	r0, #1364	; 0x554
  402fc0:	4282      	cmp	r2, r0
  402fc2:	d806      	bhi.n	402fd2 <_free_r+0x1aa>
  402fc4:	0c9a      	lsrs	r2, r3, #18
  402fc6:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  402fca:	00ff      	lsls	r7, r7, #3
  402fcc:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  402fd0:	e77b      	b.n	402eca <_free_r+0xa2>
  402fd2:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  402fd6:	257e      	movs	r5, #126	; 0x7e
  402fd8:	e777      	b.n	402eca <_free_r+0xa2>
  402fda:	f043 0101 	orr.w	r1, r3, #1
  402fde:	6061      	str	r1, [r4, #4]
  402fe0:	6013      	str	r3, [r2, #0]
  402fe2:	e763      	b.n	402eac <_free_r+0x84>
  402fe4:	204005c8 	.word	0x204005c8
  402fe8:	204005d0 	.word	0x204005d0
  402fec:	204009d4 	.word	0x204009d4
  402ff0:	2043b42c 	.word	0x2043b42c

00402ff4 <__sfvwrite_r>:
  402ff4:	6893      	ldr	r3, [r2, #8]
  402ff6:	2b00      	cmp	r3, #0
  402ff8:	d073      	beq.n	4030e2 <__sfvwrite_r+0xee>
  402ffa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402ffe:	898b      	ldrh	r3, [r1, #12]
  403000:	b083      	sub	sp, #12
  403002:	460c      	mov	r4, r1
  403004:	0719      	lsls	r1, r3, #28
  403006:	9000      	str	r0, [sp, #0]
  403008:	4616      	mov	r6, r2
  40300a:	d526      	bpl.n	40305a <__sfvwrite_r+0x66>
  40300c:	6922      	ldr	r2, [r4, #16]
  40300e:	b322      	cbz	r2, 40305a <__sfvwrite_r+0x66>
  403010:	f013 0002 	ands.w	r0, r3, #2
  403014:	6835      	ldr	r5, [r6, #0]
  403016:	d02c      	beq.n	403072 <__sfvwrite_r+0x7e>
  403018:	f04f 0900 	mov.w	r9, #0
  40301c:	4fb0      	ldr	r7, [pc, #704]	; (4032e0 <__sfvwrite_r+0x2ec>)
  40301e:	46c8      	mov	r8, r9
  403020:	46b2      	mov	sl, r6
  403022:	45b8      	cmp	r8, r7
  403024:	4643      	mov	r3, r8
  403026:	464a      	mov	r2, r9
  403028:	bf28      	it	cs
  40302a:	463b      	movcs	r3, r7
  40302c:	9800      	ldr	r0, [sp, #0]
  40302e:	f1b8 0f00 	cmp.w	r8, #0
  403032:	d050      	beq.n	4030d6 <__sfvwrite_r+0xe2>
  403034:	69e1      	ldr	r1, [r4, #28]
  403036:	6a66      	ldr	r6, [r4, #36]	; 0x24
  403038:	47b0      	blx	r6
  40303a:	2800      	cmp	r0, #0
  40303c:	dd58      	ble.n	4030f0 <__sfvwrite_r+0xfc>
  40303e:	f8da 3008 	ldr.w	r3, [sl, #8]
  403042:	1a1b      	subs	r3, r3, r0
  403044:	4481      	add	r9, r0
  403046:	eba8 0800 	sub.w	r8, r8, r0
  40304a:	f8ca 3008 	str.w	r3, [sl, #8]
  40304e:	2b00      	cmp	r3, #0
  403050:	d1e7      	bne.n	403022 <__sfvwrite_r+0x2e>
  403052:	2000      	movs	r0, #0
  403054:	b003      	add	sp, #12
  403056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40305a:	4621      	mov	r1, r4
  40305c:	9800      	ldr	r0, [sp, #0]
  40305e:	f7ff fc51 	bl	402904 <__swsetup_r>
  403062:	2800      	cmp	r0, #0
  403064:	f040 8133 	bne.w	4032ce <__sfvwrite_r+0x2da>
  403068:	89a3      	ldrh	r3, [r4, #12]
  40306a:	6835      	ldr	r5, [r6, #0]
  40306c:	f013 0002 	ands.w	r0, r3, #2
  403070:	d1d2      	bne.n	403018 <__sfvwrite_r+0x24>
  403072:	f013 0901 	ands.w	r9, r3, #1
  403076:	d145      	bne.n	403104 <__sfvwrite_r+0x110>
  403078:	464f      	mov	r7, r9
  40307a:	9601      	str	r6, [sp, #4]
  40307c:	b337      	cbz	r7, 4030cc <__sfvwrite_r+0xd8>
  40307e:	059a      	lsls	r2, r3, #22
  403080:	f8d4 8008 	ldr.w	r8, [r4, #8]
  403084:	f140 8083 	bpl.w	40318e <__sfvwrite_r+0x19a>
  403088:	4547      	cmp	r7, r8
  40308a:	46c3      	mov	fp, r8
  40308c:	f0c0 80ab 	bcc.w	4031e6 <__sfvwrite_r+0x1f2>
  403090:	f413 6f90 	tst.w	r3, #1152	; 0x480
  403094:	f040 80ac 	bne.w	4031f0 <__sfvwrite_r+0x1fc>
  403098:	6820      	ldr	r0, [r4, #0]
  40309a:	46ba      	mov	sl, r7
  40309c:	465a      	mov	r2, fp
  40309e:	4649      	mov	r1, r9
  4030a0:	f000 fcf6 	bl	403a90 <memmove>
  4030a4:	68a2      	ldr	r2, [r4, #8]
  4030a6:	6823      	ldr	r3, [r4, #0]
  4030a8:	eba2 0208 	sub.w	r2, r2, r8
  4030ac:	445b      	add	r3, fp
  4030ae:	60a2      	str	r2, [r4, #8]
  4030b0:	6023      	str	r3, [r4, #0]
  4030b2:	9a01      	ldr	r2, [sp, #4]
  4030b4:	6893      	ldr	r3, [r2, #8]
  4030b6:	eba3 030a 	sub.w	r3, r3, sl
  4030ba:	44d1      	add	r9, sl
  4030bc:	eba7 070a 	sub.w	r7, r7, sl
  4030c0:	6093      	str	r3, [r2, #8]
  4030c2:	2b00      	cmp	r3, #0
  4030c4:	d0c5      	beq.n	403052 <__sfvwrite_r+0x5e>
  4030c6:	89a3      	ldrh	r3, [r4, #12]
  4030c8:	2f00      	cmp	r7, #0
  4030ca:	d1d8      	bne.n	40307e <__sfvwrite_r+0x8a>
  4030cc:	f8d5 9000 	ldr.w	r9, [r5]
  4030d0:	686f      	ldr	r7, [r5, #4]
  4030d2:	3508      	adds	r5, #8
  4030d4:	e7d2      	b.n	40307c <__sfvwrite_r+0x88>
  4030d6:	f8d5 9000 	ldr.w	r9, [r5]
  4030da:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4030de:	3508      	adds	r5, #8
  4030e0:	e79f      	b.n	403022 <__sfvwrite_r+0x2e>
  4030e2:	2000      	movs	r0, #0
  4030e4:	4770      	bx	lr
  4030e6:	4621      	mov	r1, r4
  4030e8:	9800      	ldr	r0, [sp, #0]
  4030ea:	f7ff fd1f 	bl	402b2c <_fflush_r>
  4030ee:	b370      	cbz	r0, 40314e <__sfvwrite_r+0x15a>
  4030f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4030f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4030f8:	f04f 30ff 	mov.w	r0, #4294967295
  4030fc:	81a3      	strh	r3, [r4, #12]
  4030fe:	b003      	add	sp, #12
  403100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403104:	4681      	mov	r9, r0
  403106:	4633      	mov	r3, r6
  403108:	464e      	mov	r6, r9
  40310a:	46a8      	mov	r8, r5
  40310c:	469a      	mov	sl, r3
  40310e:	464d      	mov	r5, r9
  403110:	b34e      	cbz	r6, 403166 <__sfvwrite_r+0x172>
  403112:	b380      	cbz	r0, 403176 <__sfvwrite_r+0x182>
  403114:	6820      	ldr	r0, [r4, #0]
  403116:	6923      	ldr	r3, [r4, #16]
  403118:	6962      	ldr	r2, [r4, #20]
  40311a:	45b1      	cmp	r9, r6
  40311c:	46cb      	mov	fp, r9
  40311e:	bf28      	it	cs
  403120:	46b3      	movcs	fp, r6
  403122:	4298      	cmp	r0, r3
  403124:	465f      	mov	r7, fp
  403126:	d904      	bls.n	403132 <__sfvwrite_r+0x13e>
  403128:	68a3      	ldr	r3, [r4, #8]
  40312a:	4413      	add	r3, r2
  40312c:	459b      	cmp	fp, r3
  40312e:	f300 80a6 	bgt.w	40327e <__sfvwrite_r+0x28a>
  403132:	4593      	cmp	fp, r2
  403134:	db4b      	blt.n	4031ce <__sfvwrite_r+0x1da>
  403136:	4613      	mov	r3, r2
  403138:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40313a:	69e1      	ldr	r1, [r4, #28]
  40313c:	9800      	ldr	r0, [sp, #0]
  40313e:	462a      	mov	r2, r5
  403140:	47b8      	blx	r7
  403142:	1e07      	subs	r7, r0, #0
  403144:	ddd4      	ble.n	4030f0 <__sfvwrite_r+0xfc>
  403146:	ebb9 0907 	subs.w	r9, r9, r7
  40314a:	d0cc      	beq.n	4030e6 <__sfvwrite_r+0xf2>
  40314c:	2001      	movs	r0, #1
  40314e:	f8da 3008 	ldr.w	r3, [sl, #8]
  403152:	1bdb      	subs	r3, r3, r7
  403154:	443d      	add	r5, r7
  403156:	1bf6      	subs	r6, r6, r7
  403158:	f8ca 3008 	str.w	r3, [sl, #8]
  40315c:	2b00      	cmp	r3, #0
  40315e:	f43f af78 	beq.w	403052 <__sfvwrite_r+0x5e>
  403162:	2e00      	cmp	r6, #0
  403164:	d1d5      	bne.n	403112 <__sfvwrite_r+0x11e>
  403166:	f108 0308 	add.w	r3, r8, #8
  40316a:	e913 0060 	ldmdb	r3, {r5, r6}
  40316e:	4698      	mov	r8, r3
  403170:	3308      	adds	r3, #8
  403172:	2e00      	cmp	r6, #0
  403174:	d0f9      	beq.n	40316a <__sfvwrite_r+0x176>
  403176:	4632      	mov	r2, r6
  403178:	210a      	movs	r1, #10
  40317a:	4628      	mov	r0, r5
  40317c:	f000 fc38 	bl	4039f0 <memchr>
  403180:	2800      	cmp	r0, #0
  403182:	f000 80a1 	beq.w	4032c8 <__sfvwrite_r+0x2d4>
  403186:	3001      	adds	r0, #1
  403188:	eba0 0905 	sub.w	r9, r0, r5
  40318c:	e7c2      	b.n	403114 <__sfvwrite_r+0x120>
  40318e:	6820      	ldr	r0, [r4, #0]
  403190:	6923      	ldr	r3, [r4, #16]
  403192:	4298      	cmp	r0, r3
  403194:	d802      	bhi.n	40319c <__sfvwrite_r+0x1a8>
  403196:	6963      	ldr	r3, [r4, #20]
  403198:	429f      	cmp	r7, r3
  40319a:	d25d      	bcs.n	403258 <__sfvwrite_r+0x264>
  40319c:	45b8      	cmp	r8, r7
  40319e:	bf28      	it	cs
  4031a0:	46b8      	movcs	r8, r7
  4031a2:	4642      	mov	r2, r8
  4031a4:	4649      	mov	r1, r9
  4031a6:	f000 fc73 	bl	403a90 <memmove>
  4031aa:	68a3      	ldr	r3, [r4, #8]
  4031ac:	6822      	ldr	r2, [r4, #0]
  4031ae:	eba3 0308 	sub.w	r3, r3, r8
  4031b2:	4442      	add	r2, r8
  4031b4:	60a3      	str	r3, [r4, #8]
  4031b6:	6022      	str	r2, [r4, #0]
  4031b8:	b10b      	cbz	r3, 4031be <__sfvwrite_r+0x1ca>
  4031ba:	46c2      	mov	sl, r8
  4031bc:	e779      	b.n	4030b2 <__sfvwrite_r+0xbe>
  4031be:	4621      	mov	r1, r4
  4031c0:	9800      	ldr	r0, [sp, #0]
  4031c2:	f7ff fcb3 	bl	402b2c <_fflush_r>
  4031c6:	2800      	cmp	r0, #0
  4031c8:	d192      	bne.n	4030f0 <__sfvwrite_r+0xfc>
  4031ca:	46c2      	mov	sl, r8
  4031cc:	e771      	b.n	4030b2 <__sfvwrite_r+0xbe>
  4031ce:	465a      	mov	r2, fp
  4031d0:	4629      	mov	r1, r5
  4031d2:	f000 fc5d 	bl	403a90 <memmove>
  4031d6:	68a2      	ldr	r2, [r4, #8]
  4031d8:	6823      	ldr	r3, [r4, #0]
  4031da:	eba2 020b 	sub.w	r2, r2, fp
  4031de:	445b      	add	r3, fp
  4031e0:	60a2      	str	r2, [r4, #8]
  4031e2:	6023      	str	r3, [r4, #0]
  4031e4:	e7af      	b.n	403146 <__sfvwrite_r+0x152>
  4031e6:	6820      	ldr	r0, [r4, #0]
  4031e8:	46b8      	mov	r8, r7
  4031ea:	46ba      	mov	sl, r7
  4031ec:	46bb      	mov	fp, r7
  4031ee:	e755      	b.n	40309c <__sfvwrite_r+0xa8>
  4031f0:	6962      	ldr	r2, [r4, #20]
  4031f2:	6820      	ldr	r0, [r4, #0]
  4031f4:	6921      	ldr	r1, [r4, #16]
  4031f6:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4031fa:	eba0 0a01 	sub.w	sl, r0, r1
  4031fe:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  403202:	f10a 0001 	add.w	r0, sl, #1
  403206:	ea4f 0868 	mov.w	r8, r8, asr #1
  40320a:	4438      	add	r0, r7
  40320c:	4540      	cmp	r0, r8
  40320e:	4642      	mov	r2, r8
  403210:	bf84      	itt	hi
  403212:	4680      	movhi	r8, r0
  403214:	4642      	movhi	r2, r8
  403216:	055b      	lsls	r3, r3, #21
  403218:	d544      	bpl.n	4032a4 <__sfvwrite_r+0x2b0>
  40321a:	4611      	mov	r1, r2
  40321c:	9800      	ldr	r0, [sp, #0]
  40321e:	f000 f91d 	bl	40345c <_malloc_r>
  403222:	4683      	mov	fp, r0
  403224:	2800      	cmp	r0, #0
  403226:	d055      	beq.n	4032d4 <__sfvwrite_r+0x2e0>
  403228:	4652      	mov	r2, sl
  40322a:	6921      	ldr	r1, [r4, #16]
  40322c:	f7fe fa92 	bl	401754 <memcpy>
  403230:	89a3      	ldrh	r3, [r4, #12]
  403232:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  403236:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40323a:	81a3      	strh	r3, [r4, #12]
  40323c:	eb0b 000a 	add.w	r0, fp, sl
  403240:	eba8 030a 	sub.w	r3, r8, sl
  403244:	f8c4 b010 	str.w	fp, [r4, #16]
  403248:	f8c4 8014 	str.w	r8, [r4, #20]
  40324c:	6020      	str	r0, [r4, #0]
  40324e:	60a3      	str	r3, [r4, #8]
  403250:	46b8      	mov	r8, r7
  403252:	46ba      	mov	sl, r7
  403254:	46bb      	mov	fp, r7
  403256:	e721      	b.n	40309c <__sfvwrite_r+0xa8>
  403258:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  40325c:	42b9      	cmp	r1, r7
  40325e:	bf28      	it	cs
  403260:	4639      	movcs	r1, r7
  403262:	464a      	mov	r2, r9
  403264:	fb91 f1f3 	sdiv	r1, r1, r3
  403268:	9800      	ldr	r0, [sp, #0]
  40326a:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40326c:	fb03 f301 	mul.w	r3, r3, r1
  403270:	69e1      	ldr	r1, [r4, #28]
  403272:	47b0      	blx	r6
  403274:	f1b0 0a00 	subs.w	sl, r0, #0
  403278:	f73f af1b 	bgt.w	4030b2 <__sfvwrite_r+0xbe>
  40327c:	e738      	b.n	4030f0 <__sfvwrite_r+0xfc>
  40327e:	461a      	mov	r2, r3
  403280:	4629      	mov	r1, r5
  403282:	9301      	str	r3, [sp, #4]
  403284:	f000 fc04 	bl	403a90 <memmove>
  403288:	6822      	ldr	r2, [r4, #0]
  40328a:	9b01      	ldr	r3, [sp, #4]
  40328c:	9800      	ldr	r0, [sp, #0]
  40328e:	441a      	add	r2, r3
  403290:	6022      	str	r2, [r4, #0]
  403292:	4621      	mov	r1, r4
  403294:	f7ff fc4a 	bl	402b2c <_fflush_r>
  403298:	9b01      	ldr	r3, [sp, #4]
  40329a:	2800      	cmp	r0, #0
  40329c:	f47f af28 	bne.w	4030f0 <__sfvwrite_r+0xfc>
  4032a0:	461f      	mov	r7, r3
  4032a2:	e750      	b.n	403146 <__sfvwrite_r+0x152>
  4032a4:	9800      	ldr	r0, [sp, #0]
  4032a6:	f000 fc63 	bl	403b70 <_realloc_r>
  4032aa:	4683      	mov	fp, r0
  4032ac:	2800      	cmp	r0, #0
  4032ae:	d1c5      	bne.n	40323c <__sfvwrite_r+0x248>
  4032b0:	9d00      	ldr	r5, [sp, #0]
  4032b2:	6921      	ldr	r1, [r4, #16]
  4032b4:	4628      	mov	r0, r5
  4032b6:	f7ff fdb7 	bl	402e28 <_free_r>
  4032ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4032be:	220c      	movs	r2, #12
  4032c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4032c4:	602a      	str	r2, [r5, #0]
  4032c6:	e715      	b.n	4030f4 <__sfvwrite_r+0x100>
  4032c8:	f106 0901 	add.w	r9, r6, #1
  4032cc:	e722      	b.n	403114 <__sfvwrite_r+0x120>
  4032ce:	f04f 30ff 	mov.w	r0, #4294967295
  4032d2:	e6bf      	b.n	403054 <__sfvwrite_r+0x60>
  4032d4:	9a00      	ldr	r2, [sp, #0]
  4032d6:	230c      	movs	r3, #12
  4032d8:	6013      	str	r3, [r2, #0]
  4032da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4032de:	e709      	b.n	4030f4 <__sfvwrite_r+0x100>
  4032e0:	7ffffc00 	.word	0x7ffffc00

004032e4 <_fwalk_reent>:
  4032e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4032e8:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4032ec:	d01f      	beq.n	40332e <_fwalk_reent+0x4a>
  4032ee:	4688      	mov	r8, r1
  4032f0:	4606      	mov	r6, r0
  4032f2:	f04f 0900 	mov.w	r9, #0
  4032f6:	687d      	ldr	r5, [r7, #4]
  4032f8:	68bc      	ldr	r4, [r7, #8]
  4032fa:	3d01      	subs	r5, #1
  4032fc:	d411      	bmi.n	403322 <_fwalk_reent+0x3e>
  4032fe:	89a3      	ldrh	r3, [r4, #12]
  403300:	2b01      	cmp	r3, #1
  403302:	f105 35ff 	add.w	r5, r5, #4294967295
  403306:	d908      	bls.n	40331a <_fwalk_reent+0x36>
  403308:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40330c:	3301      	adds	r3, #1
  40330e:	4621      	mov	r1, r4
  403310:	4630      	mov	r0, r6
  403312:	d002      	beq.n	40331a <_fwalk_reent+0x36>
  403314:	47c0      	blx	r8
  403316:	ea49 0900 	orr.w	r9, r9, r0
  40331a:	1c6b      	adds	r3, r5, #1
  40331c:	f104 0468 	add.w	r4, r4, #104	; 0x68
  403320:	d1ed      	bne.n	4032fe <_fwalk_reent+0x1a>
  403322:	683f      	ldr	r7, [r7, #0]
  403324:	2f00      	cmp	r7, #0
  403326:	d1e6      	bne.n	4032f6 <_fwalk_reent+0x12>
  403328:	4648      	mov	r0, r9
  40332a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40332e:	46b9      	mov	r9, r7
  403330:	4648      	mov	r0, r9
  403332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403336:	bf00      	nop

00403338 <__locale_mb_cur_max>:
  403338:	4b04      	ldr	r3, [pc, #16]	; (40334c <__locale_mb_cur_max+0x14>)
  40333a:	4a05      	ldr	r2, [pc, #20]	; (403350 <__locale_mb_cur_max+0x18>)
  40333c:	681b      	ldr	r3, [r3, #0]
  40333e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  403340:	2b00      	cmp	r3, #0
  403342:	bf08      	it	eq
  403344:	4613      	moveq	r3, r2
  403346:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  40334a:	4770      	bx	lr
  40334c:	2040002c 	.word	0x2040002c
  403350:	2040045c 	.word	0x2040045c

00403354 <__locale_ctype_ptr_l>:
  403354:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
  403358:	4770      	bx	lr
  40335a:	bf00      	nop

0040335c <__retarget_lock_init_recursive>:
  40335c:	4770      	bx	lr
  40335e:	bf00      	nop

00403360 <__retarget_lock_close_recursive>:
  403360:	4770      	bx	lr
  403362:	bf00      	nop

00403364 <__retarget_lock_acquire_recursive>:
  403364:	4770      	bx	lr
  403366:	bf00      	nop

00403368 <__retarget_lock_release_recursive>:
  403368:	4770      	bx	lr
  40336a:	bf00      	nop

0040336c <__swhatbuf_r>:
  40336c:	b570      	push	{r4, r5, r6, lr}
  40336e:	460c      	mov	r4, r1
  403370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403374:	2900      	cmp	r1, #0
  403376:	b090      	sub	sp, #64	; 0x40
  403378:	4615      	mov	r5, r2
  40337a:	461e      	mov	r6, r3
  40337c:	db14      	blt.n	4033a8 <__swhatbuf_r+0x3c>
  40337e:	aa01      	add	r2, sp, #4
  403380:	f000 ff6e 	bl	404260 <_fstat_r>
  403384:	2800      	cmp	r0, #0
  403386:	db0f      	blt.n	4033a8 <__swhatbuf_r+0x3c>
  403388:	9a02      	ldr	r2, [sp, #8]
  40338a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40338e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  403392:	fab2 f282 	clz	r2, r2
  403396:	0952      	lsrs	r2, r2, #5
  403398:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40339c:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4033a0:	6032      	str	r2, [r6, #0]
  4033a2:	602b      	str	r3, [r5, #0]
  4033a4:	b010      	add	sp, #64	; 0x40
  4033a6:	bd70      	pop	{r4, r5, r6, pc}
  4033a8:	89a2      	ldrh	r2, [r4, #12]
  4033aa:	2300      	movs	r3, #0
  4033ac:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  4033b0:	6033      	str	r3, [r6, #0]
  4033b2:	d004      	beq.n	4033be <__swhatbuf_r+0x52>
  4033b4:	2240      	movs	r2, #64	; 0x40
  4033b6:	4618      	mov	r0, r3
  4033b8:	602a      	str	r2, [r5, #0]
  4033ba:	b010      	add	sp, #64	; 0x40
  4033bc:	bd70      	pop	{r4, r5, r6, pc}
  4033be:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4033c2:	602b      	str	r3, [r5, #0]
  4033c4:	b010      	add	sp, #64	; 0x40
  4033c6:	bd70      	pop	{r4, r5, r6, pc}

004033c8 <__smakebuf_r>:
  4033c8:	898a      	ldrh	r2, [r1, #12]
  4033ca:	0792      	lsls	r2, r2, #30
  4033cc:	460b      	mov	r3, r1
  4033ce:	d506      	bpl.n	4033de <__smakebuf_r+0x16>
  4033d0:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4033d4:	2101      	movs	r1, #1
  4033d6:	601a      	str	r2, [r3, #0]
  4033d8:	611a      	str	r2, [r3, #16]
  4033da:	6159      	str	r1, [r3, #20]
  4033dc:	4770      	bx	lr
  4033de:	b5f0      	push	{r4, r5, r6, r7, lr}
  4033e0:	b083      	sub	sp, #12
  4033e2:	ab01      	add	r3, sp, #4
  4033e4:	466a      	mov	r2, sp
  4033e6:	460c      	mov	r4, r1
  4033e8:	4606      	mov	r6, r0
  4033ea:	f7ff ffbf 	bl	40336c <__swhatbuf_r>
  4033ee:	9900      	ldr	r1, [sp, #0]
  4033f0:	4605      	mov	r5, r0
  4033f2:	4630      	mov	r0, r6
  4033f4:	f000 f832 	bl	40345c <_malloc_r>
  4033f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4033fc:	b1d8      	cbz	r0, 403436 <__smakebuf_r+0x6e>
  4033fe:	9a01      	ldr	r2, [sp, #4]
  403400:	4f15      	ldr	r7, [pc, #84]	; (403458 <__smakebuf_r+0x90>)
  403402:	9900      	ldr	r1, [sp, #0]
  403404:	63f7      	str	r7, [r6, #60]	; 0x3c
  403406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40340a:	81a3      	strh	r3, [r4, #12]
  40340c:	6020      	str	r0, [r4, #0]
  40340e:	6120      	str	r0, [r4, #16]
  403410:	6161      	str	r1, [r4, #20]
  403412:	b91a      	cbnz	r2, 40341c <__smakebuf_r+0x54>
  403414:	432b      	orrs	r3, r5
  403416:	81a3      	strh	r3, [r4, #12]
  403418:	b003      	add	sp, #12
  40341a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40341c:	4630      	mov	r0, r6
  40341e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403422:	f000 ff31 	bl	404288 <_isatty_r>
  403426:	b1a0      	cbz	r0, 403452 <__smakebuf_r+0x8a>
  403428:	89a3      	ldrh	r3, [r4, #12]
  40342a:	f023 0303 	bic.w	r3, r3, #3
  40342e:	f043 0301 	orr.w	r3, r3, #1
  403432:	b21b      	sxth	r3, r3
  403434:	e7ee      	b.n	403414 <__smakebuf_r+0x4c>
  403436:	059a      	lsls	r2, r3, #22
  403438:	d4ee      	bmi.n	403418 <__smakebuf_r+0x50>
  40343a:	f023 0303 	bic.w	r3, r3, #3
  40343e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403442:	f043 0302 	orr.w	r3, r3, #2
  403446:	2101      	movs	r1, #1
  403448:	81a3      	strh	r3, [r4, #12]
  40344a:	6022      	str	r2, [r4, #0]
  40344c:	6122      	str	r2, [r4, #16]
  40344e:	6161      	str	r1, [r4, #20]
  403450:	e7e2      	b.n	403418 <__smakebuf_r+0x50>
  403452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403456:	e7dd      	b.n	403414 <__smakebuf_r+0x4c>
  403458:	00402b81 	.word	0x00402b81

0040345c <_malloc_r>:
  40345c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403460:	f101 060b 	add.w	r6, r1, #11
  403464:	2e16      	cmp	r6, #22
  403466:	b083      	sub	sp, #12
  403468:	4605      	mov	r5, r0
  40346a:	f240 809e 	bls.w	4035aa <_malloc_r+0x14e>
  40346e:	f036 0607 	bics.w	r6, r6, #7
  403472:	f100 80bd 	bmi.w	4035f0 <_malloc_r+0x194>
  403476:	42b1      	cmp	r1, r6
  403478:	f200 80ba 	bhi.w	4035f0 <_malloc_r+0x194>
  40347c:	f000 fb6c 	bl	403b58 <__malloc_lock>
  403480:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  403484:	f0c0 8293 	bcc.w	4039ae <_malloc_r+0x552>
  403488:	0a73      	lsrs	r3, r6, #9
  40348a:	f000 80b8 	beq.w	4035fe <_malloc_r+0x1a2>
  40348e:	2b04      	cmp	r3, #4
  403490:	f200 8179 	bhi.w	403786 <_malloc_r+0x32a>
  403494:	09b3      	lsrs	r3, r6, #6
  403496:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40349a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40349e:	00c3      	lsls	r3, r0, #3
  4034a0:	4fbf      	ldr	r7, [pc, #764]	; (4037a0 <_malloc_r+0x344>)
  4034a2:	443b      	add	r3, r7
  4034a4:	f1a3 0108 	sub.w	r1, r3, #8
  4034a8:	685c      	ldr	r4, [r3, #4]
  4034aa:	42a1      	cmp	r1, r4
  4034ac:	d106      	bne.n	4034bc <_malloc_r+0x60>
  4034ae:	e00c      	b.n	4034ca <_malloc_r+0x6e>
  4034b0:	2a00      	cmp	r2, #0
  4034b2:	f280 80aa 	bge.w	40360a <_malloc_r+0x1ae>
  4034b6:	68e4      	ldr	r4, [r4, #12]
  4034b8:	42a1      	cmp	r1, r4
  4034ba:	d006      	beq.n	4034ca <_malloc_r+0x6e>
  4034bc:	6863      	ldr	r3, [r4, #4]
  4034be:	f023 0303 	bic.w	r3, r3, #3
  4034c2:	1b9a      	subs	r2, r3, r6
  4034c4:	2a0f      	cmp	r2, #15
  4034c6:	ddf3      	ble.n	4034b0 <_malloc_r+0x54>
  4034c8:	4670      	mov	r0, lr
  4034ca:	693c      	ldr	r4, [r7, #16]
  4034cc:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4037b4 <_malloc_r+0x358>
  4034d0:	4574      	cmp	r4, lr
  4034d2:	f000 81ab 	beq.w	40382c <_malloc_r+0x3d0>
  4034d6:	6863      	ldr	r3, [r4, #4]
  4034d8:	f023 0303 	bic.w	r3, r3, #3
  4034dc:	1b9a      	subs	r2, r3, r6
  4034de:	2a0f      	cmp	r2, #15
  4034e0:	f300 8190 	bgt.w	403804 <_malloc_r+0x3a8>
  4034e4:	2a00      	cmp	r2, #0
  4034e6:	f8c7 e014 	str.w	lr, [r7, #20]
  4034ea:	f8c7 e010 	str.w	lr, [r7, #16]
  4034ee:	f280 809d 	bge.w	40362c <_malloc_r+0x1d0>
  4034f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4034f6:	f080 8161 	bcs.w	4037bc <_malloc_r+0x360>
  4034fa:	08db      	lsrs	r3, r3, #3
  4034fc:	f103 0c01 	add.w	ip, r3, #1
  403500:	1099      	asrs	r1, r3, #2
  403502:	687a      	ldr	r2, [r7, #4]
  403504:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  403508:	f8c4 8008 	str.w	r8, [r4, #8]
  40350c:	2301      	movs	r3, #1
  40350e:	408b      	lsls	r3, r1
  403510:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  403514:	4313      	orrs	r3, r2
  403516:	3908      	subs	r1, #8
  403518:	60e1      	str	r1, [r4, #12]
  40351a:	607b      	str	r3, [r7, #4]
  40351c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  403520:	f8c8 400c 	str.w	r4, [r8, #12]
  403524:	1082      	asrs	r2, r0, #2
  403526:	2401      	movs	r4, #1
  403528:	4094      	lsls	r4, r2
  40352a:	429c      	cmp	r4, r3
  40352c:	f200 808b 	bhi.w	403646 <_malloc_r+0x1ea>
  403530:	421c      	tst	r4, r3
  403532:	d106      	bne.n	403542 <_malloc_r+0xe6>
  403534:	f020 0003 	bic.w	r0, r0, #3
  403538:	0064      	lsls	r4, r4, #1
  40353a:	421c      	tst	r4, r3
  40353c:	f100 0004 	add.w	r0, r0, #4
  403540:	d0fa      	beq.n	403538 <_malloc_r+0xdc>
  403542:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  403546:	46cc      	mov	ip, r9
  403548:	4680      	mov	r8, r0
  40354a:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40354e:	459c      	cmp	ip, r3
  403550:	d107      	bne.n	403562 <_malloc_r+0x106>
  403552:	e16d      	b.n	403830 <_malloc_r+0x3d4>
  403554:	2a00      	cmp	r2, #0
  403556:	f280 817b 	bge.w	403850 <_malloc_r+0x3f4>
  40355a:	68db      	ldr	r3, [r3, #12]
  40355c:	459c      	cmp	ip, r3
  40355e:	f000 8167 	beq.w	403830 <_malloc_r+0x3d4>
  403562:	6859      	ldr	r1, [r3, #4]
  403564:	f021 0103 	bic.w	r1, r1, #3
  403568:	1b8a      	subs	r2, r1, r6
  40356a:	2a0f      	cmp	r2, #15
  40356c:	ddf2      	ble.n	403554 <_malloc_r+0xf8>
  40356e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  403572:	f8d3 8008 	ldr.w	r8, [r3, #8]
  403576:	9300      	str	r3, [sp, #0]
  403578:	199c      	adds	r4, r3, r6
  40357a:	4628      	mov	r0, r5
  40357c:	f046 0601 	orr.w	r6, r6, #1
  403580:	f042 0501 	orr.w	r5, r2, #1
  403584:	605e      	str	r6, [r3, #4]
  403586:	f8c8 c00c 	str.w	ip, [r8, #12]
  40358a:	f8cc 8008 	str.w	r8, [ip, #8]
  40358e:	617c      	str	r4, [r7, #20]
  403590:	613c      	str	r4, [r7, #16]
  403592:	f8c4 e00c 	str.w	lr, [r4, #12]
  403596:	f8c4 e008 	str.w	lr, [r4, #8]
  40359a:	6065      	str	r5, [r4, #4]
  40359c:	505a      	str	r2, [r3, r1]
  40359e:	f000 fae1 	bl	403b64 <__malloc_unlock>
  4035a2:	9b00      	ldr	r3, [sp, #0]
  4035a4:	f103 0408 	add.w	r4, r3, #8
  4035a8:	e01e      	b.n	4035e8 <_malloc_r+0x18c>
  4035aa:	2910      	cmp	r1, #16
  4035ac:	d820      	bhi.n	4035f0 <_malloc_r+0x194>
  4035ae:	f000 fad3 	bl	403b58 <__malloc_lock>
  4035b2:	2610      	movs	r6, #16
  4035b4:	2318      	movs	r3, #24
  4035b6:	2002      	movs	r0, #2
  4035b8:	4f79      	ldr	r7, [pc, #484]	; (4037a0 <_malloc_r+0x344>)
  4035ba:	443b      	add	r3, r7
  4035bc:	f1a3 0208 	sub.w	r2, r3, #8
  4035c0:	685c      	ldr	r4, [r3, #4]
  4035c2:	4294      	cmp	r4, r2
  4035c4:	f000 813d 	beq.w	403842 <_malloc_r+0x3e6>
  4035c8:	6863      	ldr	r3, [r4, #4]
  4035ca:	68e1      	ldr	r1, [r4, #12]
  4035cc:	68a6      	ldr	r6, [r4, #8]
  4035ce:	f023 0303 	bic.w	r3, r3, #3
  4035d2:	4423      	add	r3, r4
  4035d4:	4628      	mov	r0, r5
  4035d6:	685a      	ldr	r2, [r3, #4]
  4035d8:	60f1      	str	r1, [r6, #12]
  4035da:	f042 0201 	orr.w	r2, r2, #1
  4035de:	608e      	str	r6, [r1, #8]
  4035e0:	605a      	str	r2, [r3, #4]
  4035e2:	f000 fabf 	bl	403b64 <__malloc_unlock>
  4035e6:	3408      	adds	r4, #8
  4035e8:	4620      	mov	r0, r4
  4035ea:	b003      	add	sp, #12
  4035ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4035f0:	2400      	movs	r4, #0
  4035f2:	230c      	movs	r3, #12
  4035f4:	4620      	mov	r0, r4
  4035f6:	602b      	str	r3, [r5, #0]
  4035f8:	b003      	add	sp, #12
  4035fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4035fe:	2040      	movs	r0, #64	; 0x40
  403600:	f44f 7300 	mov.w	r3, #512	; 0x200
  403604:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  403608:	e74a      	b.n	4034a0 <_malloc_r+0x44>
  40360a:	4423      	add	r3, r4
  40360c:	68e1      	ldr	r1, [r4, #12]
  40360e:	685a      	ldr	r2, [r3, #4]
  403610:	68a6      	ldr	r6, [r4, #8]
  403612:	f042 0201 	orr.w	r2, r2, #1
  403616:	60f1      	str	r1, [r6, #12]
  403618:	4628      	mov	r0, r5
  40361a:	608e      	str	r6, [r1, #8]
  40361c:	605a      	str	r2, [r3, #4]
  40361e:	f000 faa1 	bl	403b64 <__malloc_unlock>
  403622:	3408      	adds	r4, #8
  403624:	4620      	mov	r0, r4
  403626:	b003      	add	sp, #12
  403628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40362c:	4423      	add	r3, r4
  40362e:	4628      	mov	r0, r5
  403630:	685a      	ldr	r2, [r3, #4]
  403632:	f042 0201 	orr.w	r2, r2, #1
  403636:	605a      	str	r2, [r3, #4]
  403638:	f000 fa94 	bl	403b64 <__malloc_unlock>
  40363c:	3408      	adds	r4, #8
  40363e:	4620      	mov	r0, r4
  403640:	b003      	add	sp, #12
  403642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403646:	68bc      	ldr	r4, [r7, #8]
  403648:	6863      	ldr	r3, [r4, #4]
  40364a:	f023 0803 	bic.w	r8, r3, #3
  40364e:	45b0      	cmp	r8, r6
  403650:	d304      	bcc.n	40365c <_malloc_r+0x200>
  403652:	eba8 0306 	sub.w	r3, r8, r6
  403656:	2b0f      	cmp	r3, #15
  403658:	f300 8085 	bgt.w	403766 <_malloc_r+0x30a>
  40365c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4037b8 <_malloc_r+0x35c>
  403660:	4b50      	ldr	r3, [pc, #320]	; (4037a4 <_malloc_r+0x348>)
  403662:	f8d9 2000 	ldr.w	r2, [r9]
  403666:	681b      	ldr	r3, [r3, #0]
  403668:	3201      	adds	r2, #1
  40366a:	4433      	add	r3, r6
  40366c:	eb04 0a08 	add.w	sl, r4, r8
  403670:	f000 8155 	beq.w	40391e <_malloc_r+0x4c2>
  403674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403678:	330f      	adds	r3, #15
  40367a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40367e:	f02b 0b0f 	bic.w	fp, fp, #15
  403682:	4659      	mov	r1, fp
  403684:	4628      	mov	r0, r5
  403686:	f000 fc19 	bl	403ebc <_sbrk_r>
  40368a:	1c41      	adds	r1, r0, #1
  40368c:	4602      	mov	r2, r0
  40368e:	f000 80fc 	beq.w	40388a <_malloc_r+0x42e>
  403692:	4582      	cmp	sl, r0
  403694:	f200 80f7 	bhi.w	403886 <_malloc_r+0x42a>
  403698:	4b43      	ldr	r3, [pc, #268]	; (4037a8 <_malloc_r+0x34c>)
  40369a:	6819      	ldr	r1, [r3, #0]
  40369c:	4459      	add	r1, fp
  40369e:	6019      	str	r1, [r3, #0]
  4036a0:	f000 814d 	beq.w	40393e <_malloc_r+0x4e2>
  4036a4:	f8d9 0000 	ldr.w	r0, [r9]
  4036a8:	3001      	adds	r0, #1
  4036aa:	bf1b      	ittet	ne
  4036ac:	eba2 0a0a 	subne.w	sl, r2, sl
  4036b0:	4451      	addne	r1, sl
  4036b2:	f8c9 2000 	streq.w	r2, [r9]
  4036b6:	6019      	strne	r1, [r3, #0]
  4036b8:	f012 0107 	ands.w	r1, r2, #7
  4036bc:	f000 8115 	beq.w	4038ea <_malloc_r+0x48e>
  4036c0:	f1c1 0008 	rsb	r0, r1, #8
  4036c4:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4036c8:	4402      	add	r2, r0
  4036ca:	3108      	adds	r1, #8
  4036cc:	eb02 090b 	add.w	r9, r2, fp
  4036d0:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4036d4:	eba1 0909 	sub.w	r9, r1, r9
  4036d8:	4649      	mov	r1, r9
  4036da:	4628      	mov	r0, r5
  4036dc:	9301      	str	r3, [sp, #4]
  4036de:	9200      	str	r2, [sp, #0]
  4036e0:	f000 fbec 	bl	403ebc <_sbrk_r>
  4036e4:	1c43      	adds	r3, r0, #1
  4036e6:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4036ea:	f000 8143 	beq.w	403974 <_malloc_r+0x518>
  4036ee:	1a80      	subs	r0, r0, r2
  4036f0:	4448      	add	r0, r9
  4036f2:	f040 0001 	orr.w	r0, r0, #1
  4036f6:	6819      	ldr	r1, [r3, #0]
  4036f8:	60ba      	str	r2, [r7, #8]
  4036fa:	4449      	add	r1, r9
  4036fc:	42bc      	cmp	r4, r7
  4036fe:	6050      	str	r0, [r2, #4]
  403700:	6019      	str	r1, [r3, #0]
  403702:	d017      	beq.n	403734 <_malloc_r+0x2d8>
  403704:	f1b8 0f0f 	cmp.w	r8, #15
  403708:	f240 80fb 	bls.w	403902 <_malloc_r+0x4a6>
  40370c:	6860      	ldr	r0, [r4, #4]
  40370e:	f1a8 020c 	sub.w	r2, r8, #12
  403712:	f022 0207 	bic.w	r2, r2, #7
  403716:	eb04 0e02 	add.w	lr, r4, r2
  40371a:	f000 0001 	and.w	r0, r0, #1
  40371e:	f04f 0c05 	mov.w	ip, #5
  403722:	4310      	orrs	r0, r2
  403724:	2a0f      	cmp	r2, #15
  403726:	6060      	str	r0, [r4, #4]
  403728:	f8ce c004 	str.w	ip, [lr, #4]
  40372c:	f8ce c008 	str.w	ip, [lr, #8]
  403730:	f200 8117 	bhi.w	403962 <_malloc_r+0x506>
  403734:	4b1d      	ldr	r3, [pc, #116]	; (4037ac <_malloc_r+0x350>)
  403736:	68bc      	ldr	r4, [r7, #8]
  403738:	681a      	ldr	r2, [r3, #0]
  40373a:	4291      	cmp	r1, r2
  40373c:	bf88      	it	hi
  40373e:	6019      	strhi	r1, [r3, #0]
  403740:	4b1b      	ldr	r3, [pc, #108]	; (4037b0 <_malloc_r+0x354>)
  403742:	681a      	ldr	r2, [r3, #0]
  403744:	4291      	cmp	r1, r2
  403746:	6862      	ldr	r2, [r4, #4]
  403748:	bf88      	it	hi
  40374a:	6019      	strhi	r1, [r3, #0]
  40374c:	f022 0203 	bic.w	r2, r2, #3
  403750:	4296      	cmp	r6, r2
  403752:	eba2 0306 	sub.w	r3, r2, r6
  403756:	d801      	bhi.n	40375c <_malloc_r+0x300>
  403758:	2b0f      	cmp	r3, #15
  40375a:	dc04      	bgt.n	403766 <_malloc_r+0x30a>
  40375c:	4628      	mov	r0, r5
  40375e:	f000 fa01 	bl	403b64 <__malloc_unlock>
  403762:	2400      	movs	r4, #0
  403764:	e740      	b.n	4035e8 <_malloc_r+0x18c>
  403766:	19a2      	adds	r2, r4, r6
  403768:	f043 0301 	orr.w	r3, r3, #1
  40376c:	f046 0601 	orr.w	r6, r6, #1
  403770:	6066      	str	r6, [r4, #4]
  403772:	4628      	mov	r0, r5
  403774:	60ba      	str	r2, [r7, #8]
  403776:	6053      	str	r3, [r2, #4]
  403778:	f000 f9f4 	bl	403b64 <__malloc_unlock>
  40377c:	3408      	adds	r4, #8
  40377e:	4620      	mov	r0, r4
  403780:	b003      	add	sp, #12
  403782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403786:	2b14      	cmp	r3, #20
  403788:	d971      	bls.n	40386e <_malloc_r+0x412>
  40378a:	2b54      	cmp	r3, #84	; 0x54
  40378c:	f200 80a3 	bhi.w	4038d6 <_malloc_r+0x47a>
  403790:	0b33      	lsrs	r3, r6, #12
  403792:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  403796:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40379a:	00c3      	lsls	r3, r0, #3
  40379c:	e680      	b.n	4034a0 <_malloc_r+0x44>
  40379e:	bf00      	nop
  4037a0:	204005c8 	.word	0x204005c8
  4037a4:	2043b42c 	.word	0x2043b42c
  4037a8:	2043b3fc 	.word	0x2043b3fc
  4037ac:	2043b424 	.word	0x2043b424
  4037b0:	2043b428 	.word	0x2043b428
  4037b4:	204005d0 	.word	0x204005d0
  4037b8:	204009d0 	.word	0x204009d0
  4037bc:	0a5a      	lsrs	r2, r3, #9
  4037be:	2a04      	cmp	r2, #4
  4037c0:	d95b      	bls.n	40387a <_malloc_r+0x41e>
  4037c2:	2a14      	cmp	r2, #20
  4037c4:	f200 80ae 	bhi.w	403924 <_malloc_r+0x4c8>
  4037c8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4037cc:	00c9      	lsls	r1, r1, #3
  4037ce:	325b      	adds	r2, #91	; 0x5b
  4037d0:	eb07 0c01 	add.w	ip, r7, r1
  4037d4:	5879      	ldr	r1, [r7, r1]
  4037d6:	f1ac 0c08 	sub.w	ip, ip, #8
  4037da:	458c      	cmp	ip, r1
  4037dc:	f000 8088 	beq.w	4038f0 <_malloc_r+0x494>
  4037e0:	684a      	ldr	r2, [r1, #4]
  4037e2:	f022 0203 	bic.w	r2, r2, #3
  4037e6:	4293      	cmp	r3, r2
  4037e8:	d273      	bcs.n	4038d2 <_malloc_r+0x476>
  4037ea:	6889      	ldr	r1, [r1, #8]
  4037ec:	458c      	cmp	ip, r1
  4037ee:	d1f7      	bne.n	4037e0 <_malloc_r+0x384>
  4037f0:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4037f4:	687b      	ldr	r3, [r7, #4]
  4037f6:	60e2      	str	r2, [r4, #12]
  4037f8:	f8c4 c008 	str.w	ip, [r4, #8]
  4037fc:	6094      	str	r4, [r2, #8]
  4037fe:	f8cc 400c 	str.w	r4, [ip, #12]
  403802:	e68f      	b.n	403524 <_malloc_r+0xc8>
  403804:	19a1      	adds	r1, r4, r6
  403806:	f046 0c01 	orr.w	ip, r6, #1
  40380a:	f042 0601 	orr.w	r6, r2, #1
  40380e:	f8c4 c004 	str.w	ip, [r4, #4]
  403812:	4628      	mov	r0, r5
  403814:	6179      	str	r1, [r7, #20]
  403816:	6139      	str	r1, [r7, #16]
  403818:	f8c1 e00c 	str.w	lr, [r1, #12]
  40381c:	f8c1 e008 	str.w	lr, [r1, #8]
  403820:	604e      	str	r6, [r1, #4]
  403822:	50e2      	str	r2, [r4, r3]
  403824:	f000 f99e 	bl	403b64 <__malloc_unlock>
  403828:	3408      	adds	r4, #8
  40382a:	e6dd      	b.n	4035e8 <_malloc_r+0x18c>
  40382c:	687b      	ldr	r3, [r7, #4]
  40382e:	e679      	b.n	403524 <_malloc_r+0xc8>
  403830:	f108 0801 	add.w	r8, r8, #1
  403834:	f018 0f03 	tst.w	r8, #3
  403838:	f10c 0c08 	add.w	ip, ip, #8
  40383c:	f47f ae85 	bne.w	40354a <_malloc_r+0xee>
  403840:	e02d      	b.n	40389e <_malloc_r+0x442>
  403842:	68dc      	ldr	r4, [r3, #12]
  403844:	42a3      	cmp	r3, r4
  403846:	bf08      	it	eq
  403848:	3002      	addeq	r0, #2
  40384a:	f43f ae3e 	beq.w	4034ca <_malloc_r+0x6e>
  40384e:	e6bb      	b.n	4035c8 <_malloc_r+0x16c>
  403850:	4419      	add	r1, r3
  403852:	461c      	mov	r4, r3
  403854:	684a      	ldr	r2, [r1, #4]
  403856:	68db      	ldr	r3, [r3, #12]
  403858:	f854 6f08 	ldr.w	r6, [r4, #8]!
  40385c:	f042 0201 	orr.w	r2, r2, #1
  403860:	604a      	str	r2, [r1, #4]
  403862:	4628      	mov	r0, r5
  403864:	60f3      	str	r3, [r6, #12]
  403866:	609e      	str	r6, [r3, #8]
  403868:	f000 f97c 	bl	403b64 <__malloc_unlock>
  40386c:	e6bc      	b.n	4035e8 <_malloc_r+0x18c>
  40386e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  403872:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  403876:	00c3      	lsls	r3, r0, #3
  403878:	e612      	b.n	4034a0 <_malloc_r+0x44>
  40387a:	099a      	lsrs	r2, r3, #6
  40387c:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403880:	00c9      	lsls	r1, r1, #3
  403882:	3238      	adds	r2, #56	; 0x38
  403884:	e7a4      	b.n	4037d0 <_malloc_r+0x374>
  403886:	42bc      	cmp	r4, r7
  403888:	d054      	beq.n	403934 <_malloc_r+0x4d8>
  40388a:	68bc      	ldr	r4, [r7, #8]
  40388c:	6862      	ldr	r2, [r4, #4]
  40388e:	f022 0203 	bic.w	r2, r2, #3
  403892:	e75d      	b.n	403750 <_malloc_r+0x2f4>
  403894:	f859 3908 	ldr.w	r3, [r9], #-8
  403898:	4599      	cmp	r9, r3
  40389a:	f040 8086 	bne.w	4039aa <_malloc_r+0x54e>
  40389e:	f010 0f03 	tst.w	r0, #3
  4038a2:	f100 30ff 	add.w	r0, r0, #4294967295
  4038a6:	d1f5      	bne.n	403894 <_malloc_r+0x438>
  4038a8:	687b      	ldr	r3, [r7, #4]
  4038aa:	ea23 0304 	bic.w	r3, r3, r4
  4038ae:	607b      	str	r3, [r7, #4]
  4038b0:	0064      	lsls	r4, r4, #1
  4038b2:	429c      	cmp	r4, r3
  4038b4:	f63f aec7 	bhi.w	403646 <_malloc_r+0x1ea>
  4038b8:	2c00      	cmp	r4, #0
  4038ba:	f43f aec4 	beq.w	403646 <_malloc_r+0x1ea>
  4038be:	421c      	tst	r4, r3
  4038c0:	4640      	mov	r0, r8
  4038c2:	f47f ae3e 	bne.w	403542 <_malloc_r+0xe6>
  4038c6:	0064      	lsls	r4, r4, #1
  4038c8:	421c      	tst	r4, r3
  4038ca:	f100 0004 	add.w	r0, r0, #4
  4038ce:	d0fa      	beq.n	4038c6 <_malloc_r+0x46a>
  4038d0:	e637      	b.n	403542 <_malloc_r+0xe6>
  4038d2:	468c      	mov	ip, r1
  4038d4:	e78c      	b.n	4037f0 <_malloc_r+0x394>
  4038d6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4038da:	d815      	bhi.n	403908 <_malloc_r+0x4ac>
  4038dc:	0bf3      	lsrs	r3, r6, #15
  4038de:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4038e2:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4038e6:	00c3      	lsls	r3, r0, #3
  4038e8:	e5da      	b.n	4034a0 <_malloc_r+0x44>
  4038ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4038ee:	e6ed      	b.n	4036cc <_malloc_r+0x270>
  4038f0:	687b      	ldr	r3, [r7, #4]
  4038f2:	1092      	asrs	r2, r2, #2
  4038f4:	2101      	movs	r1, #1
  4038f6:	fa01 f202 	lsl.w	r2, r1, r2
  4038fa:	4313      	orrs	r3, r2
  4038fc:	607b      	str	r3, [r7, #4]
  4038fe:	4662      	mov	r2, ip
  403900:	e779      	b.n	4037f6 <_malloc_r+0x39a>
  403902:	2301      	movs	r3, #1
  403904:	6053      	str	r3, [r2, #4]
  403906:	e729      	b.n	40375c <_malloc_r+0x300>
  403908:	f240 5254 	movw	r2, #1364	; 0x554
  40390c:	4293      	cmp	r3, r2
  40390e:	d822      	bhi.n	403956 <_malloc_r+0x4fa>
  403910:	0cb3      	lsrs	r3, r6, #18
  403912:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  403916:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40391a:	00c3      	lsls	r3, r0, #3
  40391c:	e5c0      	b.n	4034a0 <_malloc_r+0x44>
  40391e:	f103 0b10 	add.w	fp, r3, #16
  403922:	e6ae      	b.n	403682 <_malloc_r+0x226>
  403924:	2a54      	cmp	r2, #84	; 0x54
  403926:	d829      	bhi.n	40397c <_malloc_r+0x520>
  403928:	0b1a      	lsrs	r2, r3, #12
  40392a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40392e:	00c9      	lsls	r1, r1, #3
  403930:	326e      	adds	r2, #110	; 0x6e
  403932:	e74d      	b.n	4037d0 <_malloc_r+0x374>
  403934:	4b20      	ldr	r3, [pc, #128]	; (4039b8 <_malloc_r+0x55c>)
  403936:	6819      	ldr	r1, [r3, #0]
  403938:	4459      	add	r1, fp
  40393a:	6019      	str	r1, [r3, #0]
  40393c:	e6b2      	b.n	4036a4 <_malloc_r+0x248>
  40393e:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403942:	2800      	cmp	r0, #0
  403944:	f47f aeae 	bne.w	4036a4 <_malloc_r+0x248>
  403948:	eb08 030b 	add.w	r3, r8, fp
  40394c:	68ba      	ldr	r2, [r7, #8]
  40394e:	f043 0301 	orr.w	r3, r3, #1
  403952:	6053      	str	r3, [r2, #4]
  403954:	e6ee      	b.n	403734 <_malloc_r+0x2d8>
  403956:	207f      	movs	r0, #127	; 0x7f
  403958:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40395c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403960:	e59e      	b.n	4034a0 <_malloc_r+0x44>
  403962:	f104 0108 	add.w	r1, r4, #8
  403966:	4628      	mov	r0, r5
  403968:	9300      	str	r3, [sp, #0]
  40396a:	f7ff fa5d 	bl	402e28 <_free_r>
  40396e:	9b00      	ldr	r3, [sp, #0]
  403970:	6819      	ldr	r1, [r3, #0]
  403972:	e6df      	b.n	403734 <_malloc_r+0x2d8>
  403974:	2001      	movs	r0, #1
  403976:	f04f 0900 	mov.w	r9, #0
  40397a:	e6bc      	b.n	4036f6 <_malloc_r+0x29a>
  40397c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403980:	d805      	bhi.n	40398e <_malloc_r+0x532>
  403982:	0bda      	lsrs	r2, r3, #15
  403984:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403988:	00c9      	lsls	r1, r1, #3
  40398a:	3277      	adds	r2, #119	; 0x77
  40398c:	e720      	b.n	4037d0 <_malloc_r+0x374>
  40398e:	f240 5154 	movw	r1, #1364	; 0x554
  403992:	428a      	cmp	r2, r1
  403994:	d805      	bhi.n	4039a2 <_malloc_r+0x546>
  403996:	0c9a      	lsrs	r2, r3, #18
  403998:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40399c:	00c9      	lsls	r1, r1, #3
  40399e:	327c      	adds	r2, #124	; 0x7c
  4039a0:	e716      	b.n	4037d0 <_malloc_r+0x374>
  4039a2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4039a6:	227e      	movs	r2, #126	; 0x7e
  4039a8:	e712      	b.n	4037d0 <_malloc_r+0x374>
  4039aa:	687b      	ldr	r3, [r7, #4]
  4039ac:	e780      	b.n	4038b0 <_malloc_r+0x454>
  4039ae:	08f0      	lsrs	r0, r6, #3
  4039b0:	f106 0308 	add.w	r3, r6, #8
  4039b4:	e600      	b.n	4035b8 <_malloc_r+0x15c>
  4039b6:	bf00      	nop
  4039b8:	2043b3fc 	.word	0x2043b3fc

004039bc <__ascii_mbtowc>:
  4039bc:	b082      	sub	sp, #8
  4039be:	b149      	cbz	r1, 4039d4 <__ascii_mbtowc+0x18>
  4039c0:	b15a      	cbz	r2, 4039da <__ascii_mbtowc+0x1e>
  4039c2:	b16b      	cbz	r3, 4039e0 <__ascii_mbtowc+0x24>
  4039c4:	7813      	ldrb	r3, [r2, #0]
  4039c6:	600b      	str	r3, [r1, #0]
  4039c8:	7812      	ldrb	r2, [r2, #0]
  4039ca:	1c10      	adds	r0, r2, #0
  4039cc:	bf18      	it	ne
  4039ce:	2001      	movne	r0, #1
  4039d0:	b002      	add	sp, #8
  4039d2:	4770      	bx	lr
  4039d4:	a901      	add	r1, sp, #4
  4039d6:	2a00      	cmp	r2, #0
  4039d8:	d1f3      	bne.n	4039c2 <__ascii_mbtowc+0x6>
  4039da:	4610      	mov	r0, r2
  4039dc:	b002      	add	sp, #8
  4039de:	4770      	bx	lr
  4039e0:	f06f 0001 	mvn.w	r0, #1
  4039e4:	e7f4      	b.n	4039d0 <__ascii_mbtowc+0x14>
  4039e6:	bf00      	nop
	...

004039f0 <memchr>:
  4039f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4039f4:	2a10      	cmp	r2, #16
  4039f6:	db2b      	blt.n	403a50 <memchr+0x60>
  4039f8:	f010 0f07 	tst.w	r0, #7
  4039fc:	d008      	beq.n	403a10 <memchr+0x20>
  4039fe:	f810 3b01 	ldrb.w	r3, [r0], #1
  403a02:	3a01      	subs	r2, #1
  403a04:	428b      	cmp	r3, r1
  403a06:	d02d      	beq.n	403a64 <memchr+0x74>
  403a08:	f010 0f07 	tst.w	r0, #7
  403a0c:	b342      	cbz	r2, 403a60 <memchr+0x70>
  403a0e:	d1f6      	bne.n	4039fe <memchr+0xe>
  403a10:	b4f0      	push	{r4, r5, r6, r7}
  403a12:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  403a16:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  403a1a:	f022 0407 	bic.w	r4, r2, #7
  403a1e:	f07f 0700 	mvns.w	r7, #0
  403a22:	2300      	movs	r3, #0
  403a24:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  403a28:	3c08      	subs	r4, #8
  403a2a:	ea85 0501 	eor.w	r5, r5, r1
  403a2e:	ea86 0601 	eor.w	r6, r6, r1
  403a32:	fa85 f547 	uadd8	r5, r5, r7
  403a36:	faa3 f587 	sel	r5, r3, r7
  403a3a:	fa86 f647 	uadd8	r6, r6, r7
  403a3e:	faa5 f687 	sel	r6, r5, r7
  403a42:	b98e      	cbnz	r6, 403a68 <memchr+0x78>
  403a44:	d1ee      	bne.n	403a24 <memchr+0x34>
  403a46:	bcf0      	pop	{r4, r5, r6, r7}
  403a48:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403a4c:	f002 0207 	and.w	r2, r2, #7
  403a50:	b132      	cbz	r2, 403a60 <memchr+0x70>
  403a52:	f810 3b01 	ldrb.w	r3, [r0], #1
  403a56:	3a01      	subs	r2, #1
  403a58:	ea83 0301 	eor.w	r3, r3, r1
  403a5c:	b113      	cbz	r3, 403a64 <memchr+0x74>
  403a5e:	d1f8      	bne.n	403a52 <memchr+0x62>
  403a60:	2000      	movs	r0, #0
  403a62:	4770      	bx	lr
  403a64:	3801      	subs	r0, #1
  403a66:	4770      	bx	lr
  403a68:	2d00      	cmp	r5, #0
  403a6a:	bf06      	itte	eq
  403a6c:	4635      	moveq	r5, r6
  403a6e:	3803      	subeq	r0, #3
  403a70:	3807      	subne	r0, #7
  403a72:	f015 0f01 	tst.w	r5, #1
  403a76:	d107      	bne.n	403a88 <memchr+0x98>
  403a78:	3001      	adds	r0, #1
  403a7a:	f415 7f80 	tst.w	r5, #256	; 0x100
  403a7e:	bf02      	ittt	eq
  403a80:	3001      	addeq	r0, #1
  403a82:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  403a86:	3001      	addeq	r0, #1
  403a88:	bcf0      	pop	{r4, r5, r6, r7}
  403a8a:	3801      	subs	r0, #1
  403a8c:	4770      	bx	lr
  403a8e:	bf00      	nop

00403a90 <memmove>:
  403a90:	4288      	cmp	r0, r1
  403a92:	b5f0      	push	{r4, r5, r6, r7, lr}
  403a94:	d90d      	bls.n	403ab2 <memmove+0x22>
  403a96:	188b      	adds	r3, r1, r2
  403a98:	4298      	cmp	r0, r3
  403a9a:	d20a      	bcs.n	403ab2 <memmove+0x22>
  403a9c:	1884      	adds	r4, r0, r2
  403a9e:	2a00      	cmp	r2, #0
  403aa0:	d051      	beq.n	403b46 <memmove+0xb6>
  403aa2:	4622      	mov	r2, r4
  403aa4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  403aa8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  403aac:	4299      	cmp	r1, r3
  403aae:	d1f9      	bne.n	403aa4 <memmove+0x14>
  403ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403ab2:	2a0f      	cmp	r2, #15
  403ab4:	d948      	bls.n	403b48 <memmove+0xb8>
  403ab6:	ea41 0300 	orr.w	r3, r1, r0
  403aba:	079b      	lsls	r3, r3, #30
  403abc:	d146      	bne.n	403b4c <memmove+0xbc>
  403abe:	f100 0410 	add.w	r4, r0, #16
  403ac2:	f101 0310 	add.w	r3, r1, #16
  403ac6:	4615      	mov	r5, r2
  403ac8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  403acc:	f844 6c10 	str.w	r6, [r4, #-16]
  403ad0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  403ad4:	f844 6c0c 	str.w	r6, [r4, #-12]
  403ad8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  403adc:	f844 6c08 	str.w	r6, [r4, #-8]
  403ae0:	3d10      	subs	r5, #16
  403ae2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  403ae6:	f844 6c04 	str.w	r6, [r4, #-4]
  403aea:	2d0f      	cmp	r5, #15
  403aec:	f103 0310 	add.w	r3, r3, #16
  403af0:	f104 0410 	add.w	r4, r4, #16
  403af4:	d8e8      	bhi.n	403ac8 <memmove+0x38>
  403af6:	f1a2 0310 	sub.w	r3, r2, #16
  403afa:	f023 030f 	bic.w	r3, r3, #15
  403afe:	f002 0e0f 	and.w	lr, r2, #15
  403b02:	3310      	adds	r3, #16
  403b04:	f1be 0f03 	cmp.w	lr, #3
  403b08:	4419      	add	r1, r3
  403b0a:	4403      	add	r3, r0
  403b0c:	d921      	bls.n	403b52 <memmove+0xc2>
  403b0e:	1f1e      	subs	r6, r3, #4
  403b10:	460d      	mov	r5, r1
  403b12:	4674      	mov	r4, lr
  403b14:	3c04      	subs	r4, #4
  403b16:	f855 7b04 	ldr.w	r7, [r5], #4
  403b1a:	f846 7f04 	str.w	r7, [r6, #4]!
  403b1e:	2c03      	cmp	r4, #3
  403b20:	d8f8      	bhi.n	403b14 <memmove+0x84>
  403b22:	f1ae 0404 	sub.w	r4, lr, #4
  403b26:	f024 0403 	bic.w	r4, r4, #3
  403b2a:	3404      	adds	r4, #4
  403b2c:	4421      	add	r1, r4
  403b2e:	4423      	add	r3, r4
  403b30:	f002 0203 	and.w	r2, r2, #3
  403b34:	b162      	cbz	r2, 403b50 <memmove+0xc0>
  403b36:	3b01      	subs	r3, #1
  403b38:	440a      	add	r2, r1
  403b3a:	f811 4b01 	ldrb.w	r4, [r1], #1
  403b3e:	f803 4f01 	strb.w	r4, [r3, #1]!
  403b42:	428a      	cmp	r2, r1
  403b44:	d1f9      	bne.n	403b3a <memmove+0xaa>
  403b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403b48:	4603      	mov	r3, r0
  403b4a:	e7f3      	b.n	403b34 <memmove+0xa4>
  403b4c:	4603      	mov	r3, r0
  403b4e:	e7f2      	b.n	403b36 <memmove+0xa6>
  403b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403b52:	4672      	mov	r2, lr
  403b54:	e7ee      	b.n	403b34 <memmove+0xa4>
  403b56:	bf00      	nop

00403b58 <__malloc_lock>:
  403b58:	4801      	ldr	r0, [pc, #4]	; (403b60 <__malloc_lock+0x8>)
  403b5a:	f7ff bc03 	b.w	403364 <__retarget_lock_acquire_recursive>
  403b5e:	bf00      	nop
  403b60:	2043b4d4 	.word	0x2043b4d4

00403b64 <__malloc_unlock>:
  403b64:	4801      	ldr	r0, [pc, #4]	; (403b6c <__malloc_unlock+0x8>)
  403b66:	f7ff bbff 	b.w	403368 <__retarget_lock_release_recursive>
  403b6a:	bf00      	nop
  403b6c:	2043b4d4 	.word	0x2043b4d4

00403b70 <_realloc_r>:
  403b70:	2900      	cmp	r1, #0
  403b72:	f000 8095 	beq.w	403ca0 <_realloc_r+0x130>
  403b76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403b7a:	460d      	mov	r5, r1
  403b7c:	4616      	mov	r6, r2
  403b7e:	b083      	sub	sp, #12
  403b80:	4680      	mov	r8, r0
  403b82:	f106 070b 	add.w	r7, r6, #11
  403b86:	f7ff ffe7 	bl	403b58 <__malloc_lock>
  403b8a:	f855 ec04 	ldr.w	lr, [r5, #-4]
  403b8e:	2f16      	cmp	r7, #22
  403b90:	f02e 0403 	bic.w	r4, lr, #3
  403b94:	f1a5 0908 	sub.w	r9, r5, #8
  403b98:	d83c      	bhi.n	403c14 <_realloc_r+0xa4>
  403b9a:	2210      	movs	r2, #16
  403b9c:	4617      	mov	r7, r2
  403b9e:	42be      	cmp	r6, r7
  403ba0:	d83d      	bhi.n	403c1e <_realloc_r+0xae>
  403ba2:	4294      	cmp	r4, r2
  403ba4:	da43      	bge.n	403c2e <_realloc_r+0xbe>
  403ba6:	4bc4      	ldr	r3, [pc, #784]	; (403eb8 <_realloc_r+0x348>)
  403ba8:	6899      	ldr	r1, [r3, #8]
  403baa:	eb09 0004 	add.w	r0, r9, r4
  403bae:	4288      	cmp	r0, r1
  403bb0:	f000 80b4 	beq.w	403d1c <_realloc_r+0x1ac>
  403bb4:	6843      	ldr	r3, [r0, #4]
  403bb6:	f023 0101 	bic.w	r1, r3, #1
  403bba:	4401      	add	r1, r0
  403bbc:	6849      	ldr	r1, [r1, #4]
  403bbe:	07c9      	lsls	r1, r1, #31
  403bc0:	d54c      	bpl.n	403c5c <_realloc_r+0xec>
  403bc2:	f01e 0f01 	tst.w	lr, #1
  403bc6:	f000 809b 	beq.w	403d00 <_realloc_r+0x190>
  403bca:	4631      	mov	r1, r6
  403bcc:	4640      	mov	r0, r8
  403bce:	f7ff fc45 	bl	40345c <_malloc_r>
  403bd2:	4606      	mov	r6, r0
  403bd4:	2800      	cmp	r0, #0
  403bd6:	d03a      	beq.n	403c4e <_realloc_r+0xde>
  403bd8:	f855 3c04 	ldr.w	r3, [r5, #-4]
  403bdc:	f023 0301 	bic.w	r3, r3, #1
  403be0:	444b      	add	r3, r9
  403be2:	f1a0 0208 	sub.w	r2, r0, #8
  403be6:	429a      	cmp	r2, r3
  403be8:	f000 8121 	beq.w	403e2e <_realloc_r+0x2be>
  403bec:	1f22      	subs	r2, r4, #4
  403bee:	2a24      	cmp	r2, #36	; 0x24
  403bf0:	f200 8107 	bhi.w	403e02 <_realloc_r+0x292>
  403bf4:	2a13      	cmp	r2, #19
  403bf6:	f200 80db 	bhi.w	403db0 <_realloc_r+0x240>
  403bfa:	4603      	mov	r3, r0
  403bfc:	462a      	mov	r2, r5
  403bfe:	6811      	ldr	r1, [r2, #0]
  403c00:	6019      	str	r1, [r3, #0]
  403c02:	6851      	ldr	r1, [r2, #4]
  403c04:	6059      	str	r1, [r3, #4]
  403c06:	6892      	ldr	r2, [r2, #8]
  403c08:	609a      	str	r2, [r3, #8]
  403c0a:	4629      	mov	r1, r5
  403c0c:	4640      	mov	r0, r8
  403c0e:	f7ff f90b 	bl	402e28 <_free_r>
  403c12:	e01c      	b.n	403c4e <_realloc_r+0xde>
  403c14:	f027 0707 	bic.w	r7, r7, #7
  403c18:	2f00      	cmp	r7, #0
  403c1a:	463a      	mov	r2, r7
  403c1c:	dabf      	bge.n	403b9e <_realloc_r+0x2e>
  403c1e:	2600      	movs	r6, #0
  403c20:	230c      	movs	r3, #12
  403c22:	4630      	mov	r0, r6
  403c24:	f8c8 3000 	str.w	r3, [r8]
  403c28:	b003      	add	sp, #12
  403c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c2e:	462e      	mov	r6, r5
  403c30:	1be3      	subs	r3, r4, r7
  403c32:	2b0f      	cmp	r3, #15
  403c34:	d81e      	bhi.n	403c74 <_realloc_r+0x104>
  403c36:	f8d9 3004 	ldr.w	r3, [r9, #4]
  403c3a:	f003 0301 	and.w	r3, r3, #1
  403c3e:	4323      	orrs	r3, r4
  403c40:	444c      	add	r4, r9
  403c42:	f8c9 3004 	str.w	r3, [r9, #4]
  403c46:	6863      	ldr	r3, [r4, #4]
  403c48:	f043 0301 	orr.w	r3, r3, #1
  403c4c:	6063      	str	r3, [r4, #4]
  403c4e:	4640      	mov	r0, r8
  403c50:	f7ff ff88 	bl	403b64 <__malloc_unlock>
  403c54:	4630      	mov	r0, r6
  403c56:	b003      	add	sp, #12
  403c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c5c:	f023 0303 	bic.w	r3, r3, #3
  403c60:	18e1      	adds	r1, r4, r3
  403c62:	4291      	cmp	r1, r2
  403c64:	db1f      	blt.n	403ca6 <_realloc_r+0x136>
  403c66:	68c3      	ldr	r3, [r0, #12]
  403c68:	6882      	ldr	r2, [r0, #8]
  403c6a:	462e      	mov	r6, r5
  403c6c:	60d3      	str	r3, [r2, #12]
  403c6e:	460c      	mov	r4, r1
  403c70:	609a      	str	r2, [r3, #8]
  403c72:	e7dd      	b.n	403c30 <_realloc_r+0xc0>
  403c74:	f8d9 2004 	ldr.w	r2, [r9, #4]
  403c78:	eb09 0107 	add.w	r1, r9, r7
  403c7c:	f002 0201 	and.w	r2, r2, #1
  403c80:	444c      	add	r4, r9
  403c82:	f043 0301 	orr.w	r3, r3, #1
  403c86:	4317      	orrs	r7, r2
  403c88:	f8c9 7004 	str.w	r7, [r9, #4]
  403c8c:	604b      	str	r3, [r1, #4]
  403c8e:	6863      	ldr	r3, [r4, #4]
  403c90:	f043 0301 	orr.w	r3, r3, #1
  403c94:	3108      	adds	r1, #8
  403c96:	6063      	str	r3, [r4, #4]
  403c98:	4640      	mov	r0, r8
  403c9a:	f7ff f8c5 	bl	402e28 <_free_r>
  403c9e:	e7d6      	b.n	403c4e <_realloc_r+0xde>
  403ca0:	4611      	mov	r1, r2
  403ca2:	f7ff bbdb 	b.w	40345c <_malloc_r>
  403ca6:	f01e 0f01 	tst.w	lr, #1
  403caa:	d18e      	bne.n	403bca <_realloc_r+0x5a>
  403cac:	f855 1c08 	ldr.w	r1, [r5, #-8]
  403cb0:	eba9 0a01 	sub.w	sl, r9, r1
  403cb4:	f8da 1004 	ldr.w	r1, [sl, #4]
  403cb8:	f021 0103 	bic.w	r1, r1, #3
  403cbc:	440b      	add	r3, r1
  403cbe:	4423      	add	r3, r4
  403cc0:	4293      	cmp	r3, r2
  403cc2:	db25      	blt.n	403d10 <_realloc_r+0x1a0>
  403cc4:	68c2      	ldr	r2, [r0, #12]
  403cc6:	6881      	ldr	r1, [r0, #8]
  403cc8:	4656      	mov	r6, sl
  403cca:	60ca      	str	r2, [r1, #12]
  403ccc:	6091      	str	r1, [r2, #8]
  403cce:	f8da 100c 	ldr.w	r1, [sl, #12]
  403cd2:	f856 0f08 	ldr.w	r0, [r6, #8]!
  403cd6:	1f22      	subs	r2, r4, #4
  403cd8:	2a24      	cmp	r2, #36	; 0x24
  403cda:	60c1      	str	r1, [r0, #12]
  403cdc:	6088      	str	r0, [r1, #8]
  403cde:	f200 8094 	bhi.w	403e0a <_realloc_r+0x29a>
  403ce2:	2a13      	cmp	r2, #19
  403ce4:	d96f      	bls.n	403dc6 <_realloc_r+0x256>
  403ce6:	6829      	ldr	r1, [r5, #0]
  403ce8:	f8ca 1008 	str.w	r1, [sl, #8]
  403cec:	6869      	ldr	r1, [r5, #4]
  403cee:	f8ca 100c 	str.w	r1, [sl, #12]
  403cf2:	2a1b      	cmp	r2, #27
  403cf4:	f200 80a2 	bhi.w	403e3c <_realloc_r+0x2cc>
  403cf8:	3508      	adds	r5, #8
  403cfa:	f10a 0210 	add.w	r2, sl, #16
  403cfe:	e063      	b.n	403dc8 <_realloc_r+0x258>
  403d00:	f855 3c08 	ldr.w	r3, [r5, #-8]
  403d04:	eba9 0a03 	sub.w	sl, r9, r3
  403d08:	f8da 1004 	ldr.w	r1, [sl, #4]
  403d0c:	f021 0103 	bic.w	r1, r1, #3
  403d10:	1863      	adds	r3, r4, r1
  403d12:	4293      	cmp	r3, r2
  403d14:	f6ff af59 	blt.w	403bca <_realloc_r+0x5a>
  403d18:	4656      	mov	r6, sl
  403d1a:	e7d8      	b.n	403cce <_realloc_r+0x15e>
  403d1c:	6841      	ldr	r1, [r0, #4]
  403d1e:	f021 0b03 	bic.w	fp, r1, #3
  403d22:	44a3      	add	fp, r4
  403d24:	f107 0010 	add.w	r0, r7, #16
  403d28:	4583      	cmp	fp, r0
  403d2a:	da56      	bge.n	403dda <_realloc_r+0x26a>
  403d2c:	f01e 0f01 	tst.w	lr, #1
  403d30:	f47f af4b 	bne.w	403bca <_realloc_r+0x5a>
  403d34:	f855 1c08 	ldr.w	r1, [r5, #-8]
  403d38:	eba9 0a01 	sub.w	sl, r9, r1
  403d3c:	f8da 1004 	ldr.w	r1, [sl, #4]
  403d40:	f021 0103 	bic.w	r1, r1, #3
  403d44:	448b      	add	fp, r1
  403d46:	4558      	cmp	r0, fp
  403d48:	dce2      	bgt.n	403d10 <_realloc_r+0x1a0>
  403d4a:	4656      	mov	r6, sl
  403d4c:	f8da 100c 	ldr.w	r1, [sl, #12]
  403d50:	f856 0f08 	ldr.w	r0, [r6, #8]!
  403d54:	1f22      	subs	r2, r4, #4
  403d56:	2a24      	cmp	r2, #36	; 0x24
  403d58:	60c1      	str	r1, [r0, #12]
  403d5a:	6088      	str	r0, [r1, #8]
  403d5c:	f200 808f 	bhi.w	403e7e <_realloc_r+0x30e>
  403d60:	2a13      	cmp	r2, #19
  403d62:	f240 808a 	bls.w	403e7a <_realloc_r+0x30a>
  403d66:	6829      	ldr	r1, [r5, #0]
  403d68:	f8ca 1008 	str.w	r1, [sl, #8]
  403d6c:	6869      	ldr	r1, [r5, #4]
  403d6e:	f8ca 100c 	str.w	r1, [sl, #12]
  403d72:	2a1b      	cmp	r2, #27
  403d74:	f200 808a 	bhi.w	403e8c <_realloc_r+0x31c>
  403d78:	3508      	adds	r5, #8
  403d7a:	f10a 0210 	add.w	r2, sl, #16
  403d7e:	6829      	ldr	r1, [r5, #0]
  403d80:	6011      	str	r1, [r2, #0]
  403d82:	6869      	ldr	r1, [r5, #4]
  403d84:	6051      	str	r1, [r2, #4]
  403d86:	68a9      	ldr	r1, [r5, #8]
  403d88:	6091      	str	r1, [r2, #8]
  403d8a:	eb0a 0107 	add.w	r1, sl, r7
  403d8e:	ebab 0207 	sub.w	r2, fp, r7
  403d92:	f042 0201 	orr.w	r2, r2, #1
  403d96:	6099      	str	r1, [r3, #8]
  403d98:	604a      	str	r2, [r1, #4]
  403d9a:	f8da 3004 	ldr.w	r3, [sl, #4]
  403d9e:	f003 0301 	and.w	r3, r3, #1
  403da2:	431f      	orrs	r7, r3
  403da4:	4640      	mov	r0, r8
  403da6:	f8ca 7004 	str.w	r7, [sl, #4]
  403daa:	f7ff fedb 	bl	403b64 <__malloc_unlock>
  403dae:	e751      	b.n	403c54 <_realloc_r+0xe4>
  403db0:	682b      	ldr	r3, [r5, #0]
  403db2:	6003      	str	r3, [r0, #0]
  403db4:	686b      	ldr	r3, [r5, #4]
  403db6:	6043      	str	r3, [r0, #4]
  403db8:	2a1b      	cmp	r2, #27
  403dba:	d82d      	bhi.n	403e18 <_realloc_r+0x2a8>
  403dbc:	f100 0308 	add.w	r3, r0, #8
  403dc0:	f105 0208 	add.w	r2, r5, #8
  403dc4:	e71b      	b.n	403bfe <_realloc_r+0x8e>
  403dc6:	4632      	mov	r2, r6
  403dc8:	6829      	ldr	r1, [r5, #0]
  403dca:	6011      	str	r1, [r2, #0]
  403dcc:	6869      	ldr	r1, [r5, #4]
  403dce:	6051      	str	r1, [r2, #4]
  403dd0:	68a9      	ldr	r1, [r5, #8]
  403dd2:	6091      	str	r1, [r2, #8]
  403dd4:	461c      	mov	r4, r3
  403dd6:	46d1      	mov	r9, sl
  403dd8:	e72a      	b.n	403c30 <_realloc_r+0xc0>
  403dda:	eb09 0107 	add.w	r1, r9, r7
  403dde:	ebab 0b07 	sub.w	fp, fp, r7
  403de2:	f04b 0201 	orr.w	r2, fp, #1
  403de6:	6099      	str	r1, [r3, #8]
  403de8:	604a      	str	r2, [r1, #4]
  403dea:	f855 3c04 	ldr.w	r3, [r5, #-4]
  403dee:	f003 0301 	and.w	r3, r3, #1
  403df2:	431f      	orrs	r7, r3
  403df4:	4640      	mov	r0, r8
  403df6:	f845 7c04 	str.w	r7, [r5, #-4]
  403dfa:	f7ff feb3 	bl	403b64 <__malloc_unlock>
  403dfe:	462e      	mov	r6, r5
  403e00:	e728      	b.n	403c54 <_realloc_r+0xe4>
  403e02:	4629      	mov	r1, r5
  403e04:	f7ff fe44 	bl	403a90 <memmove>
  403e08:	e6ff      	b.n	403c0a <_realloc_r+0x9a>
  403e0a:	4629      	mov	r1, r5
  403e0c:	4630      	mov	r0, r6
  403e0e:	461c      	mov	r4, r3
  403e10:	46d1      	mov	r9, sl
  403e12:	f7ff fe3d 	bl	403a90 <memmove>
  403e16:	e70b      	b.n	403c30 <_realloc_r+0xc0>
  403e18:	68ab      	ldr	r3, [r5, #8]
  403e1a:	6083      	str	r3, [r0, #8]
  403e1c:	68eb      	ldr	r3, [r5, #12]
  403e1e:	60c3      	str	r3, [r0, #12]
  403e20:	2a24      	cmp	r2, #36	; 0x24
  403e22:	d017      	beq.n	403e54 <_realloc_r+0x2e4>
  403e24:	f100 0310 	add.w	r3, r0, #16
  403e28:	f105 0210 	add.w	r2, r5, #16
  403e2c:	e6e7      	b.n	403bfe <_realloc_r+0x8e>
  403e2e:	f850 3c04 	ldr.w	r3, [r0, #-4]
  403e32:	f023 0303 	bic.w	r3, r3, #3
  403e36:	441c      	add	r4, r3
  403e38:	462e      	mov	r6, r5
  403e3a:	e6f9      	b.n	403c30 <_realloc_r+0xc0>
  403e3c:	68a9      	ldr	r1, [r5, #8]
  403e3e:	f8ca 1010 	str.w	r1, [sl, #16]
  403e42:	68e9      	ldr	r1, [r5, #12]
  403e44:	f8ca 1014 	str.w	r1, [sl, #20]
  403e48:	2a24      	cmp	r2, #36	; 0x24
  403e4a:	d00c      	beq.n	403e66 <_realloc_r+0x2f6>
  403e4c:	3510      	adds	r5, #16
  403e4e:	f10a 0218 	add.w	r2, sl, #24
  403e52:	e7b9      	b.n	403dc8 <_realloc_r+0x258>
  403e54:	692b      	ldr	r3, [r5, #16]
  403e56:	6103      	str	r3, [r0, #16]
  403e58:	696b      	ldr	r3, [r5, #20]
  403e5a:	6143      	str	r3, [r0, #20]
  403e5c:	f105 0218 	add.w	r2, r5, #24
  403e60:	f100 0318 	add.w	r3, r0, #24
  403e64:	e6cb      	b.n	403bfe <_realloc_r+0x8e>
  403e66:	692a      	ldr	r2, [r5, #16]
  403e68:	f8ca 2018 	str.w	r2, [sl, #24]
  403e6c:	696a      	ldr	r2, [r5, #20]
  403e6e:	f8ca 201c 	str.w	r2, [sl, #28]
  403e72:	3518      	adds	r5, #24
  403e74:	f10a 0220 	add.w	r2, sl, #32
  403e78:	e7a6      	b.n	403dc8 <_realloc_r+0x258>
  403e7a:	4632      	mov	r2, r6
  403e7c:	e77f      	b.n	403d7e <_realloc_r+0x20e>
  403e7e:	4629      	mov	r1, r5
  403e80:	4630      	mov	r0, r6
  403e82:	9301      	str	r3, [sp, #4]
  403e84:	f7ff fe04 	bl	403a90 <memmove>
  403e88:	9b01      	ldr	r3, [sp, #4]
  403e8a:	e77e      	b.n	403d8a <_realloc_r+0x21a>
  403e8c:	68a9      	ldr	r1, [r5, #8]
  403e8e:	f8ca 1010 	str.w	r1, [sl, #16]
  403e92:	68e9      	ldr	r1, [r5, #12]
  403e94:	f8ca 1014 	str.w	r1, [sl, #20]
  403e98:	2a24      	cmp	r2, #36	; 0x24
  403e9a:	d003      	beq.n	403ea4 <_realloc_r+0x334>
  403e9c:	3510      	adds	r5, #16
  403e9e:	f10a 0218 	add.w	r2, sl, #24
  403ea2:	e76c      	b.n	403d7e <_realloc_r+0x20e>
  403ea4:	692a      	ldr	r2, [r5, #16]
  403ea6:	f8ca 2018 	str.w	r2, [sl, #24]
  403eaa:	696a      	ldr	r2, [r5, #20]
  403eac:	f8ca 201c 	str.w	r2, [sl, #28]
  403eb0:	3518      	adds	r5, #24
  403eb2:	f10a 0220 	add.w	r2, sl, #32
  403eb6:	e762      	b.n	403d7e <_realloc_r+0x20e>
  403eb8:	204005c8 	.word	0x204005c8

00403ebc <_sbrk_r>:
  403ebc:	b538      	push	{r3, r4, r5, lr}
  403ebe:	4c07      	ldr	r4, [pc, #28]	; (403edc <_sbrk_r+0x20>)
  403ec0:	2300      	movs	r3, #0
  403ec2:	4605      	mov	r5, r0
  403ec4:	4608      	mov	r0, r1
  403ec6:	6023      	str	r3, [r4, #0]
  403ec8:	f7fd f91a 	bl	401100 <_sbrk>
  403ecc:	1c43      	adds	r3, r0, #1
  403ece:	d000      	beq.n	403ed2 <_sbrk_r+0x16>
  403ed0:	bd38      	pop	{r3, r4, r5, pc}
  403ed2:	6823      	ldr	r3, [r4, #0]
  403ed4:	2b00      	cmp	r3, #0
  403ed6:	d0fb      	beq.n	403ed0 <_sbrk_r+0x14>
  403ed8:	602b      	str	r3, [r5, #0]
  403eda:	bd38      	pop	{r3, r4, r5, pc}
  403edc:	2043b4e8 	.word	0x2043b4e8

00403ee0 <__sread>:
  403ee0:	b510      	push	{r4, lr}
  403ee2:	460c      	mov	r4, r1
  403ee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403ee8:	f000 f9f6 	bl	4042d8 <_read_r>
  403eec:	2800      	cmp	r0, #0
  403eee:	db03      	blt.n	403ef8 <__sread+0x18>
  403ef0:	6d23      	ldr	r3, [r4, #80]	; 0x50
  403ef2:	4403      	add	r3, r0
  403ef4:	6523      	str	r3, [r4, #80]	; 0x50
  403ef6:	bd10      	pop	{r4, pc}
  403ef8:	89a3      	ldrh	r3, [r4, #12]
  403efa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  403efe:	81a3      	strh	r3, [r4, #12]
  403f00:	bd10      	pop	{r4, pc}
  403f02:	bf00      	nop

00403f04 <__swrite>:
  403f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403f08:	4616      	mov	r6, r2
  403f0a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  403f0e:	461f      	mov	r7, r3
  403f10:	05d3      	lsls	r3, r2, #23
  403f12:	460c      	mov	r4, r1
  403f14:	4605      	mov	r5, r0
  403f16:	d507      	bpl.n	403f28 <__swrite+0x24>
  403f18:	2200      	movs	r2, #0
  403f1a:	2302      	movs	r3, #2
  403f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403f20:	f000 f9c4 	bl	4042ac <_lseek_r>
  403f24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403f28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403f2c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  403f30:	81a2      	strh	r2, [r4, #12]
  403f32:	463b      	mov	r3, r7
  403f34:	4632      	mov	r2, r6
  403f36:	4628      	mov	r0, r5
  403f38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403f3c:	f000 b8a4 	b.w	404088 <_write_r>

00403f40 <__sseek>:
  403f40:	b510      	push	{r4, lr}
  403f42:	460c      	mov	r4, r1
  403f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403f48:	f000 f9b0 	bl	4042ac <_lseek_r>
  403f4c:	89a3      	ldrh	r3, [r4, #12]
  403f4e:	1c42      	adds	r2, r0, #1
  403f50:	bf0e      	itee	eq
  403f52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  403f56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  403f5a:	6520      	strne	r0, [r4, #80]	; 0x50
  403f5c:	81a3      	strh	r3, [r4, #12]
  403f5e:	bd10      	pop	{r4, pc}

00403f60 <__sclose>:
  403f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403f64:	f000 b908 	b.w	404178 <_close_r>

00403f68 <__swbuf_r>:
  403f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403f6a:	460d      	mov	r5, r1
  403f6c:	4614      	mov	r4, r2
  403f6e:	4606      	mov	r6, r0
  403f70:	b110      	cbz	r0, 403f78 <__swbuf_r+0x10>
  403f72:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403f74:	2b00      	cmp	r3, #0
  403f76:	d04b      	beq.n	404010 <__swbuf_r+0xa8>
  403f78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403f7c:	69a3      	ldr	r3, [r4, #24]
  403f7e:	60a3      	str	r3, [r4, #8]
  403f80:	b291      	uxth	r1, r2
  403f82:	0708      	lsls	r0, r1, #28
  403f84:	d539      	bpl.n	403ffa <__swbuf_r+0x92>
  403f86:	6923      	ldr	r3, [r4, #16]
  403f88:	2b00      	cmp	r3, #0
  403f8a:	d036      	beq.n	403ffa <__swbuf_r+0x92>
  403f8c:	b2ed      	uxtb	r5, r5
  403f8e:	0489      	lsls	r1, r1, #18
  403f90:	462f      	mov	r7, r5
  403f92:	d515      	bpl.n	403fc0 <__swbuf_r+0x58>
  403f94:	6822      	ldr	r2, [r4, #0]
  403f96:	6961      	ldr	r1, [r4, #20]
  403f98:	1ad3      	subs	r3, r2, r3
  403f9a:	428b      	cmp	r3, r1
  403f9c:	da1c      	bge.n	403fd8 <__swbuf_r+0x70>
  403f9e:	3301      	adds	r3, #1
  403fa0:	68a1      	ldr	r1, [r4, #8]
  403fa2:	1c50      	adds	r0, r2, #1
  403fa4:	3901      	subs	r1, #1
  403fa6:	60a1      	str	r1, [r4, #8]
  403fa8:	6020      	str	r0, [r4, #0]
  403faa:	7015      	strb	r5, [r2, #0]
  403fac:	6962      	ldr	r2, [r4, #20]
  403fae:	429a      	cmp	r2, r3
  403fb0:	d01a      	beq.n	403fe8 <__swbuf_r+0x80>
  403fb2:	89a3      	ldrh	r3, [r4, #12]
  403fb4:	07db      	lsls	r3, r3, #31
  403fb6:	d501      	bpl.n	403fbc <__swbuf_r+0x54>
  403fb8:	2d0a      	cmp	r5, #10
  403fba:	d015      	beq.n	403fe8 <__swbuf_r+0x80>
  403fbc:	4638      	mov	r0, r7
  403fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403fc0:	6e61      	ldr	r1, [r4, #100]	; 0x64
  403fc2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  403fc6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  403fca:	81a2      	strh	r2, [r4, #12]
  403fcc:	6822      	ldr	r2, [r4, #0]
  403fce:	6661      	str	r1, [r4, #100]	; 0x64
  403fd0:	6961      	ldr	r1, [r4, #20]
  403fd2:	1ad3      	subs	r3, r2, r3
  403fd4:	428b      	cmp	r3, r1
  403fd6:	dbe2      	blt.n	403f9e <__swbuf_r+0x36>
  403fd8:	4621      	mov	r1, r4
  403fda:	4630      	mov	r0, r6
  403fdc:	f7fe fda6 	bl	402b2c <_fflush_r>
  403fe0:	b940      	cbnz	r0, 403ff4 <__swbuf_r+0x8c>
  403fe2:	6822      	ldr	r2, [r4, #0]
  403fe4:	2301      	movs	r3, #1
  403fe6:	e7db      	b.n	403fa0 <__swbuf_r+0x38>
  403fe8:	4621      	mov	r1, r4
  403fea:	4630      	mov	r0, r6
  403fec:	f7fe fd9e 	bl	402b2c <_fflush_r>
  403ff0:	2800      	cmp	r0, #0
  403ff2:	d0e3      	beq.n	403fbc <__swbuf_r+0x54>
  403ff4:	f04f 37ff 	mov.w	r7, #4294967295
  403ff8:	e7e0      	b.n	403fbc <__swbuf_r+0x54>
  403ffa:	4621      	mov	r1, r4
  403ffc:	4630      	mov	r0, r6
  403ffe:	f7fe fc81 	bl	402904 <__swsetup_r>
  404002:	2800      	cmp	r0, #0
  404004:	d1f6      	bne.n	403ff4 <__swbuf_r+0x8c>
  404006:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40400a:	6923      	ldr	r3, [r4, #16]
  40400c:	b291      	uxth	r1, r2
  40400e:	e7bd      	b.n	403f8c <__swbuf_r+0x24>
  404010:	f7fe fde4 	bl	402bdc <__sinit>
  404014:	e7b0      	b.n	403f78 <__swbuf_r+0x10>
  404016:	bf00      	nop

00404018 <_wcrtomb_r>:
  404018:	b5f0      	push	{r4, r5, r6, r7, lr}
  40401a:	4606      	mov	r6, r0
  40401c:	b085      	sub	sp, #20
  40401e:	461f      	mov	r7, r3
  404020:	b189      	cbz	r1, 404046 <_wcrtomb_r+0x2e>
  404022:	4c10      	ldr	r4, [pc, #64]	; (404064 <_wcrtomb_r+0x4c>)
  404024:	4d10      	ldr	r5, [pc, #64]	; (404068 <_wcrtomb_r+0x50>)
  404026:	6824      	ldr	r4, [r4, #0]
  404028:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40402a:	2c00      	cmp	r4, #0
  40402c:	bf08      	it	eq
  40402e:	462c      	moveq	r4, r5
  404030:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  404034:	47a0      	blx	r4
  404036:	1c43      	adds	r3, r0, #1
  404038:	d103      	bne.n	404042 <_wcrtomb_r+0x2a>
  40403a:	2200      	movs	r2, #0
  40403c:	238a      	movs	r3, #138	; 0x8a
  40403e:	603a      	str	r2, [r7, #0]
  404040:	6033      	str	r3, [r6, #0]
  404042:	b005      	add	sp, #20
  404044:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404046:	460c      	mov	r4, r1
  404048:	4906      	ldr	r1, [pc, #24]	; (404064 <_wcrtomb_r+0x4c>)
  40404a:	4a07      	ldr	r2, [pc, #28]	; (404068 <_wcrtomb_r+0x50>)
  40404c:	6809      	ldr	r1, [r1, #0]
  40404e:	6b49      	ldr	r1, [r1, #52]	; 0x34
  404050:	2900      	cmp	r1, #0
  404052:	bf08      	it	eq
  404054:	4611      	moveq	r1, r2
  404056:	4622      	mov	r2, r4
  404058:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40405c:	a901      	add	r1, sp, #4
  40405e:	47a0      	blx	r4
  404060:	e7e9      	b.n	404036 <_wcrtomb_r+0x1e>
  404062:	bf00      	nop
  404064:	2040002c 	.word	0x2040002c
  404068:	2040045c 	.word	0x2040045c

0040406c <__ascii_wctomb>:
  40406c:	b121      	cbz	r1, 404078 <__ascii_wctomb+0xc>
  40406e:	2aff      	cmp	r2, #255	; 0xff
  404070:	d804      	bhi.n	40407c <__ascii_wctomb+0x10>
  404072:	700a      	strb	r2, [r1, #0]
  404074:	2001      	movs	r0, #1
  404076:	4770      	bx	lr
  404078:	4608      	mov	r0, r1
  40407a:	4770      	bx	lr
  40407c:	238a      	movs	r3, #138	; 0x8a
  40407e:	6003      	str	r3, [r0, #0]
  404080:	f04f 30ff 	mov.w	r0, #4294967295
  404084:	4770      	bx	lr
  404086:	bf00      	nop

00404088 <_write_r>:
  404088:	b570      	push	{r4, r5, r6, lr}
  40408a:	460d      	mov	r5, r1
  40408c:	4c08      	ldr	r4, [pc, #32]	; (4040b0 <_write_r+0x28>)
  40408e:	4611      	mov	r1, r2
  404090:	4606      	mov	r6, r0
  404092:	461a      	mov	r2, r3
  404094:	4628      	mov	r0, r5
  404096:	2300      	movs	r3, #0
  404098:	6023      	str	r3, [r4, #0]
  40409a:	f7fc f913 	bl	4002c4 <_write>
  40409e:	1c43      	adds	r3, r0, #1
  4040a0:	d000      	beq.n	4040a4 <_write_r+0x1c>
  4040a2:	bd70      	pop	{r4, r5, r6, pc}
  4040a4:	6823      	ldr	r3, [r4, #0]
  4040a6:	2b00      	cmp	r3, #0
  4040a8:	d0fb      	beq.n	4040a2 <_write_r+0x1a>
  4040aa:	6033      	str	r3, [r6, #0]
  4040ac:	bd70      	pop	{r4, r5, r6, pc}
  4040ae:	bf00      	nop
  4040b0:	2043b4e8 	.word	0x2043b4e8

004040b4 <__register_exitproc>:
  4040b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4040b8:	4d2c      	ldr	r5, [pc, #176]	; (40416c <__register_exitproc+0xb8>)
  4040ba:	4606      	mov	r6, r0
  4040bc:	6828      	ldr	r0, [r5, #0]
  4040be:	4698      	mov	r8, r3
  4040c0:	460f      	mov	r7, r1
  4040c2:	4691      	mov	r9, r2
  4040c4:	f7ff f94e 	bl	403364 <__retarget_lock_acquire_recursive>
  4040c8:	4b29      	ldr	r3, [pc, #164]	; (404170 <__register_exitproc+0xbc>)
  4040ca:	681c      	ldr	r4, [r3, #0]
  4040cc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4040d0:	2b00      	cmp	r3, #0
  4040d2:	d03e      	beq.n	404152 <__register_exitproc+0x9e>
  4040d4:	685a      	ldr	r2, [r3, #4]
  4040d6:	2a1f      	cmp	r2, #31
  4040d8:	dc1c      	bgt.n	404114 <__register_exitproc+0x60>
  4040da:	f102 0e01 	add.w	lr, r2, #1
  4040de:	b176      	cbz	r6, 4040fe <__register_exitproc+0x4a>
  4040e0:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4040e4:	2401      	movs	r4, #1
  4040e6:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4040ea:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4040ee:	4094      	lsls	r4, r2
  4040f0:	4320      	orrs	r0, r4
  4040f2:	2e02      	cmp	r6, #2
  4040f4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4040f8:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4040fc:	d023      	beq.n	404146 <__register_exitproc+0x92>
  4040fe:	3202      	adds	r2, #2
  404100:	f8c3 e004 	str.w	lr, [r3, #4]
  404104:	6828      	ldr	r0, [r5, #0]
  404106:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40410a:	f7ff f92d 	bl	403368 <__retarget_lock_release_recursive>
  40410e:	2000      	movs	r0, #0
  404110:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404114:	4b17      	ldr	r3, [pc, #92]	; (404174 <__register_exitproc+0xc0>)
  404116:	b30b      	cbz	r3, 40415c <__register_exitproc+0xa8>
  404118:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40411c:	f3af 8000 	nop.w
  404120:	4603      	mov	r3, r0
  404122:	b1d8      	cbz	r0, 40415c <__register_exitproc+0xa8>
  404124:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  404128:	6002      	str	r2, [r0, #0]
  40412a:	2100      	movs	r1, #0
  40412c:	6041      	str	r1, [r0, #4]
  40412e:	460a      	mov	r2, r1
  404130:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  404134:	f04f 0e01 	mov.w	lr, #1
  404138:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40413c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  404140:	2e00      	cmp	r6, #0
  404142:	d0dc      	beq.n	4040fe <__register_exitproc+0x4a>
  404144:	e7cc      	b.n	4040e0 <__register_exitproc+0x2c>
  404146:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40414a:	430c      	orrs	r4, r1
  40414c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  404150:	e7d5      	b.n	4040fe <__register_exitproc+0x4a>
  404152:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  404156:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40415a:	e7bb      	b.n	4040d4 <__register_exitproc+0x20>
  40415c:	6828      	ldr	r0, [r5, #0]
  40415e:	f7ff f903 	bl	403368 <__retarget_lock_release_recursive>
  404162:	f04f 30ff 	mov.w	r0, #4294967295
  404166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40416a:	bf00      	nop
  40416c:	20400458 	.word	0x20400458
  404170:	004046ac 	.word	0x004046ac
  404174:	00000000 	.word	0x00000000

00404178 <_close_r>:
  404178:	b538      	push	{r3, r4, r5, lr}
  40417a:	4c07      	ldr	r4, [pc, #28]	; (404198 <_close_r+0x20>)
  40417c:	2300      	movs	r3, #0
  40417e:	4605      	mov	r5, r0
  404180:	4608      	mov	r0, r1
  404182:	6023      	str	r3, [r4, #0]
  404184:	f7fc ffd8 	bl	401138 <_close>
  404188:	1c43      	adds	r3, r0, #1
  40418a:	d000      	beq.n	40418e <_close_r+0x16>
  40418c:	bd38      	pop	{r3, r4, r5, pc}
  40418e:	6823      	ldr	r3, [r4, #0]
  404190:	2b00      	cmp	r3, #0
  404192:	d0fb      	beq.n	40418c <_close_r+0x14>
  404194:	602b      	str	r3, [r5, #0]
  404196:	bd38      	pop	{r3, r4, r5, pc}
  404198:	2043b4e8 	.word	0x2043b4e8

0040419c <_fclose_r>:
  40419c:	b570      	push	{r4, r5, r6, lr}
  40419e:	b159      	cbz	r1, 4041b8 <_fclose_r+0x1c>
  4041a0:	4605      	mov	r5, r0
  4041a2:	460c      	mov	r4, r1
  4041a4:	b110      	cbz	r0, 4041ac <_fclose_r+0x10>
  4041a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4041a8:	2b00      	cmp	r3, #0
  4041aa:	d03c      	beq.n	404226 <_fclose_r+0x8a>
  4041ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4041ae:	07d8      	lsls	r0, r3, #31
  4041b0:	d505      	bpl.n	4041be <_fclose_r+0x22>
  4041b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4041b6:	b92b      	cbnz	r3, 4041c4 <_fclose_r+0x28>
  4041b8:	2600      	movs	r6, #0
  4041ba:	4630      	mov	r0, r6
  4041bc:	bd70      	pop	{r4, r5, r6, pc}
  4041be:	89a3      	ldrh	r3, [r4, #12]
  4041c0:	0599      	lsls	r1, r3, #22
  4041c2:	d53c      	bpl.n	40423e <_fclose_r+0xa2>
  4041c4:	4621      	mov	r1, r4
  4041c6:	4628      	mov	r0, r5
  4041c8:	f7fe fc10 	bl	4029ec <__sflush_r>
  4041cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4041ce:	4606      	mov	r6, r0
  4041d0:	b133      	cbz	r3, 4041e0 <_fclose_r+0x44>
  4041d2:	69e1      	ldr	r1, [r4, #28]
  4041d4:	4628      	mov	r0, r5
  4041d6:	4798      	blx	r3
  4041d8:	2800      	cmp	r0, #0
  4041da:	bfb8      	it	lt
  4041dc:	f04f 36ff 	movlt.w	r6, #4294967295
  4041e0:	89a3      	ldrh	r3, [r4, #12]
  4041e2:	061a      	lsls	r2, r3, #24
  4041e4:	d422      	bmi.n	40422c <_fclose_r+0x90>
  4041e6:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4041e8:	b141      	cbz	r1, 4041fc <_fclose_r+0x60>
  4041ea:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4041ee:	4299      	cmp	r1, r3
  4041f0:	d002      	beq.n	4041f8 <_fclose_r+0x5c>
  4041f2:	4628      	mov	r0, r5
  4041f4:	f7fe fe18 	bl	402e28 <_free_r>
  4041f8:	2300      	movs	r3, #0
  4041fa:	6323      	str	r3, [r4, #48]	; 0x30
  4041fc:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4041fe:	b121      	cbz	r1, 40420a <_fclose_r+0x6e>
  404200:	4628      	mov	r0, r5
  404202:	f7fe fe11 	bl	402e28 <_free_r>
  404206:	2300      	movs	r3, #0
  404208:	6463      	str	r3, [r4, #68]	; 0x44
  40420a:	f7fe fd13 	bl	402c34 <__sfp_lock_acquire>
  40420e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404210:	2200      	movs	r2, #0
  404212:	07db      	lsls	r3, r3, #31
  404214:	81a2      	strh	r2, [r4, #12]
  404216:	d50e      	bpl.n	404236 <_fclose_r+0x9a>
  404218:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40421a:	f7ff f8a1 	bl	403360 <__retarget_lock_close_recursive>
  40421e:	f7fe fd0f 	bl	402c40 <__sfp_lock_release>
  404222:	4630      	mov	r0, r6
  404224:	bd70      	pop	{r4, r5, r6, pc}
  404226:	f7fe fcd9 	bl	402bdc <__sinit>
  40422a:	e7bf      	b.n	4041ac <_fclose_r+0x10>
  40422c:	6921      	ldr	r1, [r4, #16]
  40422e:	4628      	mov	r0, r5
  404230:	f7fe fdfa 	bl	402e28 <_free_r>
  404234:	e7d7      	b.n	4041e6 <_fclose_r+0x4a>
  404236:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404238:	f7ff f896 	bl	403368 <__retarget_lock_release_recursive>
  40423c:	e7ec      	b.n	404218 <_fclose_r+0x7c>
  40423e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404240:	f7ff f890 	bl	403364 <__retarget_lock_acquire_recursive>
  404244:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404248:	2b00      	cmp	r3, #0
  40424a:	d1bb      	bne.n	4041c4 <_fclose_r+0x28>
  40424c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40424e:	f016 0601 	ands.w	r6, r6, #1
  404252:	d1b1      	bne.n	4041b8 <_fclose_r+0x1c>
  404254:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404256:	f7ff f887 	bl	403368 <__retarget_lock_release_recursive>
  40425a:	4630      	mov	r0, r6
  40425c:	bd70      	pop	{r4, r5, r6, pc}
  40425e:	bf00      	nop

00404260 <_fstat_r>:
  404260:	b538      	push	{r3, r4, r5, lr}
  404262:	460b      	mov	r3, r1
  404264:	4c07      	ldr	r4, [pc, #28]	; (404284 <_fstat_r+0x24>)
  404266:	4605      	mov	r5, r0
  404268:	4611      	mov	r1, r2
  40426a:	4618      	mov	r0, r3
  40426c:	2300      	movs	r3, #0
  40426e:	6023      	str	r3, [r4, #0]
  404270:	f7fc ff65 	bl	40113e <_fstat>
  404274:	1c43      	adds	r3, r0, #1
  404276:	d000      	beq.n	40427a <_fstat_r+0x1a>
  404278:	bd38      	pop	{r3, r4, r5, pc}
  40427a:	6823      	ldr	r3, [r4, #0]
  40427c:	2b00      	cmp	r3, #0
  40427e:	d0fb      	beq.n	404278 <_fstat_r+0x18>
  404280:	602b      	str	r3, [r5, #0]
  404282:	bd38      	pop	{r3, r4, r5, pc}
  404284:	2043b4e8 	.word	0x2043b4e8

00404288 <_isatty_r>:
  404288:	b538      	push	{r3, r4, r5, lr}
  40428a:	4c07      	ldr	r4, [pc, #28]	; (4042a8 <_isatty_r+0x20>)
  40428c:	2300      	movs	r3, #0
  40428e:	4605      	mov	r5, r0
  404290:	4608      	mov	r0, r1
  404292:	6023      	str	r3, [r4, #0]
  404294:	f7fc ff58 	bl	401148 <_isatty>
  404298:	1c43      	adds	r3, r0, #1
  40429a:	d000      	beq.n	40429e <_isatty_r+0x16>
  40429c:	bd38      	pop	{r3, r4, r5, pc}
  40429e:	6823      	ldr	r3, [r4, #0]
  4042a0:	2b00      	cmp	r3, #0
  4042a2:	d0fb      	beq.n	40429c <_isatty_r+0x14>
  4042a4:	602b      	str	r3, [r5, #0]
  4042a6:	bd38      	pop	{r3, r4, r5, pc}
  4042a8:	2043b4e8 	.word	0x2043b4e8

004042ac <_lseek_r>:
  4042ac:	b570      	push	{r4, r5, r6, lr}
  4042ae:	460d      	mov	r5, r1
  4042b0:	4c08      	ldr	r4, [pc, #32]	; (4042d4 <_lseek_r+0x28>)
  4042b2:	4611      	mov	r1, r2
  4042b4:	4606      	mov	r6, r0
  4042b6:	461a      	mov	r2, r3
  4042b8:	4628      	mov	r0, r5
  4042ba:	2300      	movs	r3, #0
  4042bc:	6023      	str	r3, [r4, #0]
  4042be:	f7fc ff45 	bl	40114c <_lseek>
  4042c2:	1c43      	adds	r3, r0, #1
  4042c4:	d000      	beq.n	4042c8 <_lseek_r+0x1c>
  4042c6:	bd70      	pop	{r4, r5, r6, pc}
  4042c8:	6823      	ldr	r3, [r4, #0]
  4042ca:	2b00      	cmp	r3, #0
  4042cc:	d0fb      	beq.n	4042c6 <_lseek_r+0x1a>
  4042ce:	6033      	str	r3, [r6, #0]
  4042d0:	bd70      	pop	{r4, r5, r6, pc}
  4042d2:	bf00      	nop
  4042d4:	2043b4e8 	.word	0x2043b4e8

004042d8 <_read_r>:
  4042d8:	b570      	push	{r4, r5, r6, lr}
  4042da:	460d      	mov	r5, r1
  4042dc:	4c08      	ldr	r4, [pc, #32]	; (404300 <_read_r+0x28>)
  4042de:	4611      	mov	r1, r2
  4042e0:	4606      	mov	r6, r0
  4042e2:	461a      	mov	r2, r3
  4042e4:	4628      	mov	r0, r5
  4042e6:	2300      	movs	r3, #0
  4042e8:	6023      	str	r3, [r4, #0]
  4042ea:	f7fb ffcd 	bl	400288 <_read>
  4042ee:	1c43      	adds	r3, r0, #1
  4042f0:	d000      	beq.n	4042f4 <_read_r+0x1c>
  4042f2:	bd70      	pop	{r4, r5, r6, pc}
  4042f4:	6823      	ldr	r3, [r4, #0]
  4042f6:	2b00      	cmp	r3, #0
  4042f8:	d0fb      	beq.n	4042f2 <_read_r+0x1a>
  4042fa:	6033      	str	r3, [r6, #0]
  4042fc:	bd70      	pop	{r4, r5, r6, pc}
  4042fe:	bf00      	nop
  404300:	2043b4e8 	.word	0x2043b4e8

00404304 <__aeabi_uldivmod>:
  404304:	b953      	cbnz	r3, 40431c <__aeabi_uldivmod+0x18>
  404306:	b94a      	cbnz	r2, 40431c <__aeabi_uldivmod+0x18>
  404308:	2900      	cmp	r1, #0
  40430a:	bf08      	it	eq
  40430c:	2800      	cmpeq	r0, #0
  40430e:	bf1c      	itt	ne
  404310:	f04f 31ff 	movne.w	r1, #4294967295
  404314:	f04f 30ff 	movne.w	r0, #4294967295
  404318:	f000 b97a 	b.w	404610 <__aeabi_idiv0>
  40431c:	f1ad 0c08 	sub.w	ip, sp, #8
  404320:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  404324:	f000 f806 	bl	404334 <__udivmoddi4>
  404328:	f8dd e004 	ldr.w	lr, [sp, #4]
  40432c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404330:	b004      	add	sp, #16
  404332:	4770      	bx	lr

00404334 <__udivmoddi4>:
  404334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404338:	468c      	mov	ip, r1
  40433a:	460d      	mov	r5, r1
  40433c:	4604      	mov	r4, r0
  40433e:	9e08      	ldr	r6, [sp, #32]
  404340:	2b00      	cmp	r3, #0
  404342:	d151      	bne.n	4043e8 <__udivmoddi4+0xb4>
  404344:	428a      	cmp	r2, r1
  404346:	4617      	mov	r7, r2
  404348:	d96d      	bls.n	404426 <__udivmoddi4+0xf2>
  40434a:	fab2 fe82 	clz	lr, r2
  40434e:	f1be 0f00 	cmp.w	lr, #0
  404352:	d00b      	beq.n	40436c <__udivmoddi4+0x38>
  404354:	f1ce 0c20 	rsb	ip, lr, #32
  404358:	fa01 f50e 	lsl.w	r5, r1, lr
  40435c:	fa20 fc0c 	lsr.w	ip, r0, ip
  404360:	fa02 f70e 	lsl.w	r7, r2, lr
  404364:	ea4c 0c05 	orr.w	ip, ip, r5
  404368:	fa00 f40e 	lsl.w	r4, r0, lr
  40436c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  404370:	0c25      	lsrs	r5, r4, #16
  404372:	fbbc f8fa 	udiv	r8, ip, sl
  404376:	fa1f f987 	uxth.w	r9, r7
  40437a:	fb0a cc18 	mls	ip, sl, r8, ip
  40437e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  404382:	fb08 f309 	mul.w	r3, r8, r9
  404386:	42ab      	cmp	r3, r5
  404388:	d90a      	bls.n	4043a0 <__udivmoddi4+0x6c>
  40438a:	19ed      	adds	r5, r5, r7
  40438c:	f108 32ff 	add.w	r2, r8, #4294967295
  404390:	f080 8123 	bcs.w	4045da <__udivmoddi4+0x2a6>
  404394:	42ab      	cmp	r3, r5
  404396:	f240 8120 	bls.w	4045da <__udivmoddi4+0x2a6>
  40439a:	f1a8 0802 	sub.w	r8, r8, #2
  40439e:	443d      	add	r5, r7
  4043a0:	1aed      	subs	r5, r5, r3
  4043a2:	b2a4      	uxth	r4, r4
  4043a4:	fbb5 f0fa 	udiv	r0, r5, sl
  4043a8:	fb0a 5510 	mls	r5, sl, r0, r5
  4043ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4043b0:	fb00 f909 	mul.w	r9, r0, r9
  4043b4:	45a1      	cmp	r9, r4
  4043b6:	d909      	bls.n	4043cc <__udivmoddi4+0x98>
  4043b8:	19e4      	adds	r4, r4, r7
  4043ba:	f100 33ff 	add.w	r3, r0, #4294967295
  4043be:	f080 810a 	bcs.w	4045d6 <__udivmoddi4+0x2a2>
  4043c2:	45a1      	cmp	r9, r4
  4043c4:	f240 8107 	bls.w	4045d6 <__udivmoddi4+0x2a2>
  4043c8:	3802      	subs	r0, #2
  4043ca:	443c      	add	r4, r7
  4043cc:	eba4 0409 	sub.w	r4, r4, r9
  4043d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4043d4:	2100      	movs	r1, #0
  4043d6:	2e00      	cmp	r6, #0
  4043d8:	d061      	beq.n	40449e <__udivmoddi4+0x16a>
  4043da:	fa24 f40e 	lsr.w	r4, r4, lr
  4043de:	2300      	movs	r3, #0
  4043e0:	6034      	str	r4, [r6, #0]
  4043e2:	6073      	str	r3, [r6, #4]
  4043e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4043e8:	428b      	cmp	r3, r1
  4043ea:	d907      	bls.n	4043fc <__udivmoddi4+0xc8>
  4043ec:	2e00      	cmp	r6, #0
  4043ee:	d054      	beq.n	40449a <__udivmoddi4+0x166>
  4043f0:	2100      	movs	r1, #0
  4043f2:	e886 0021 	stmia.w	r6, {r0, r5}
  4043f6:	4608      	mov	r0, r1
  4043f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4043fc:	fab3 f183 	clz	r1, r3
  404400:	2900      	cmp	r1, #0
  404402:	f040 808e 	bne.w	404522 <__udivmoddi4+0x1ee>
  404406:	42ab      	cmp	r3, r5
  404408:	d302      	bcc.n	404410 <__udivmoddi4+0xdc>
  40440a:	4282      	cmp	r2, r0
  40440c:	f200 80fa 	bhi.w	404604 <__udivmoddi4+0x2d0>
  404410:	1a84      	subs	r4, r0, r2
  404412:	eb65 0503 	sbc.w	r5, r5, r3
  404416:	2001      	movs	r0, #1
  404418:	46ac      	mov	ip, r5
  40441a:	2e00      	cmp	r6, #0
  40441c:	d03f      	beq.n	40449e <__udivmoddi4+0x16a>
  40441e:	e886 1010 	stmia.w	r6, {r4, ip}
  404422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404426:	b912      	cbnz	r2, 40442e <__udivmoddi4+0xfa>
  404428:	2701      	movs	r7, #1
  40442a:	fbb7 f7f2 	udiv	r7, r7, r2
  40442e:	fab7 fe87 	clz	lr, r7
  404432:	f1be 0f00 	cmp.w	lr, #0
  404436:	d134      	bne.n	4044a2 <__udivmoddi4+0x16e>
  404438:	1beb      	subs	r3, r5, r7
  40443a:	0c3a      	lsrs	r2, r7, #16
  40443c:	fa1f fc87 	uxth.w	ip, r7
  404440:	2101      	movs	r1, #1
  404442:	fbb3 f8f2 	udiv	r8, r3, r2
  404446:	0c25      	lsrs	r5, r4, #16
  404448:	fb02 3318 	mls	r3, r2, r8, r3
  40444c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  404450:	fb0c f308 	mul.w	r3, ip, r8
  404454:	42ab      	cmp	r3, r5
  404456:	d907      	bls.n	404468 <__udivmoddi4+0x134>
  404458:	19ed      	adds	r5, r5, r7
  40445a:	f108 30ff 	add.w	r0, r8, #4294967295
  40445e:	d202      	bcs.n	404466 <__udivmoddi4+0x132>
  404460:	42ab      	cmp	r3, r5
  404462:	f200 80d1 	bhi.w	404608 <__udivmoddi4+0x2d4>
  404466:	4680      	mov	r8, r0
  404468:	1aed      	subs	r5, r5, r3
  40446a:	b2a3      	uxth	r3, r4
  40446c:	fbb5 f0f2 	udiv	r0, r5, r2
  404470:	fb02 5510 	mls	r5, r2, r0, r5
  404474:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  404478:	fb0c fc00 	mul.w	ip, ip, r0
  40447c:	45a4      	cmp	ip, r4
  40447e:	d907      	bls.n	404490 <__udivmoddi4+0x15c>
  404480:	19e4      	adds	r4, r4, r7
  404482:	f100 33ff 	add.w	r3, r0, #4294967295
  404486:	d202      	bcs.n	40448e <__udivmoddi4+0x15a>
  404488:	45a4      	cmp	ip, r4
  40448a:	f200 80b8 	bhi.w	4045fe <__udivmoddi4+0x2ca>
  40448e:	4618      	mov	r0, r3
  404490:	eba4 040c 	sub.w	r4, r4, ip
  404494:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  404498:	e79d      	b.n	4043d6 <__udivmoddi4+0xa2>
  40449a:	4631      	mov	r1, r6
  40449c:	4630      	mov	r0, r6
  40449e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4044a2:	f1ce 0420 	rsb	r4, lr, #32
  4044a6:	fa05 f30e 	lsl.w	r3, r5, lr
  4044aa:	fa07 f70e 	lsl.w	r7, r7, lr
  4044ae:	fa20 f804 	lsr.w	r8, r0, r4
  4044b2:	0c3a      	lsrs	r2, r7, #16
  4044b4:	fa25 f404 	lsr.w	r4, r5, r4
  4044b8:	ea48 0803 	orr.w	r8, r8, r3
  4044bc:	fbb4 f1f2 	udiv	r1, r4, r2
  4044c0:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4044c4:	fb02 4411 	mls	r4, r2, r1, r4
  4044c8:	fa1f fc87 	uxth.w	ip, r7
  4044cc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4044d0:	fb01 f30c 	mul.w	r3, r1, ip
  4044d4:	42ab      	cmp	r3, r5
  4044d6:	fa00 f40e 	lsl.w	r4, r0, lr
  4044da:	d909      	bls.n	4044f0 <__udivmoddi4+0x1bc>
  4044dc:	19ed      	adds	r5, r5, r7
  4044de:	f101 30ff 	add.w	r0, r1, #4294967295
  4044e2:	f080 808a 	bcs.w	4045fa <__udivmoddi4+0x2c6>
  4044e6:	42ab      	cmp	r3, r5
  4044e8:	f240 8087 	bls.w	4045fa <__udivmoddi4+0x2c6>
  4044ec:	3902      	subs	r1, #2
  4044ee:	443d      	add	r5, r7
  4044f0:	1aeb      	subs	r3, r5, r3
  4044f2:	fa1f f588 	uxth.w	r5, r8
  4044f6:	fbb3 f0f2 	udiv	r0, r3, r2
  4044fa:	fb02 3310 	mls	r3, r2, r0, r3
  4044fe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  404502:	fb00 f30c 	mul.w	r3, r0, ip
  404506:	42ab      	cmp	r3, r5
  404508:	d907      	bls.n	40451a <__udivmoddi4+0x1e6>
  40450a:	19ed      	adds	r5, r5, r7
  40450c:	f100 38ff 	add.w	r8, r0, #4294967295
  404510:	d26f      	bcs.n	4045f2 <__udivmoddi4+0x2be>
  404512:	42ab      	cmp	r3, r5
  404514:	d96d      	bls.n	4045f2 <__udivmoddi4+0x2be>
  404516:	3802      	subs	r0, #2
  404518:	443d      	add	r5, r7
  40451a:	1aeb      	subs	r3, r5, r3
  40451c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  404520:	e78f      	b.n	404442 <__udivmoddi4+0x10e>
  404522:	f1c1 0720 	rsb	r7, r1, #32
  404526:	fa22 f807 	lsr.w	r8, r2, r7
  40452a:	408b      	lsls	r3, r1
  40452c:	fa05 f401 	lsl.w	r4, r5, r1
  404530:	ea48 0303 	orr.w	r3, r8, r3
  404534:	fa20 fe07 	lsr.w	lr, r0, r7
  404538:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40453c:	40fd      	lsrs	r5, r7
  40453e:	ea4e 0e04 	orr.w	lr, lr, r4
  404542:	fbb5 f9fc 	udiv	r9, r5, ip
  404546:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40454a:	fb0c 5519 	mls	r5, ip, r9, r5
  40454e:	fa1f f883 	uxth.w	r8, r3
  404552:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  404556:	fb09 f408 	mul.w	r4, r9, r8
  40455a:	42ac      	cmp	r4, r5
  40455c:	fa02 f201 	lsl.w	r2, r2, r1
  404560:	fa00 fa01 	lsl.w	sl, r0, r1
  404564:	d908      	bls.n	404578 <__udivmoddi4+0x244>
  404566:	18ed      	adds	r5, r5, r3
  404568:	f109 30ff 	add.w	r0, r9, #4294967295
  40456c:	d243      	bcs.n	4045f6 <__udivmoddi4+0x2c2>
  40456e:	42ac      	cmp	r4, r5
  404570:	d941      	bls.n	4045f6 <__udivmoddi4+0x2c2>
  404572:	f1a9 0902 	sub.w	r9, r9, #2
  404576:	441d      	add	r5, r3
  404578:	1b2d      	subs	r5, r5, r4
  40457a:	fa1f fe8e 	uxth.w	lr, lr
  40457e:	fbb5 f0fc 	udiv	r0, r5, ip
  404582:	fb0c 5510 	mls	r5, ip, r0, r5
  404586:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40458a:	fb00 f808 	mul.w	r8, r0, r8
  40458e:	45a0      	cmp	r8, r4
  404590:	d907      	bls.n	4045a2 <__udivmoddi4+0x26e>
  404592:	18e4      	adds	r4, r4, r3
  404594:	f100 35ff 	add.w	r5, r0, #4294967295
  404598:	d229      	bcs.n	4045ee <__udivmoddi4+0x2ba>
  40459a:	45a0      	cmp	r8, r4
  40459c:	d927      	bls.n	4045ee <__udivmoddi4+0x2ba>
  40459e:	3802      	subs	r0, #2
  4045a0:	441c      	add	r4, r3
  4045a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4045a6:	eba4 0408 	sub.w	r4, r4, r8
  4045aa:	fba0 8902 	umull	r8, r9, r0, r2
  4045ae:	454c      	cmp	r4, r9
  4045b0:	46c6      	mov	lr, r8
  4045b2:	464d      	mov	r5, r9
  4045b4:	d315      	bcc.n	4045e2 <__udivmoddi4+0x2ae>
  4045b6:	d012      	beq.n	4045de <__udivmoddi4+0x2aa>
  4045b8:	b156      	cbz	r6, 4045d0 <__udivmoddi4+0x29c>
  4045ba:	ebba 030e 	subs.w	r3, sl, lr
  4045be:	eb64 0405 	sbc.w	r4, r4, r5
  4045c2:	fa04 f707 	lsl.w	r7, r4, r7
  4045c6:	40cb      	lsrs	r3, r1
  4045c8:	431f      	orrs	r7, r3
  4045ca:	40cc      	lsrs	r4, r1
  4045cc:	6037      	str	r7, [r6, #0]
  4045ce:	6074      	str	r4, [r6, #4]
  4045d0:	2100      	movs	r1, #0
  4045d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4045d6:	4618      	mov	r0, r3
  4045d8:	e6f8      	b.n	4043cc <__udivmoddi4+0x98>
  4045da:	4690      	mov	r8, r2
  4045dc:	e6e0      	b.n	4043a0 <__udivmoddi4+0x6c>
  4045de:	45c2      	cmp	sl, r8
  4045e0:	d2ea      	bcs.n	4045b8 <__udivmoddi4+0x284>
  4045e2:	ebb8 0e02 	subs.w	lr, r8, r2
  4045e6:	eb69 0503 	sbc.w	r5, r9, r3
  4045ea:	3801      	subs	r0, #1
  4045ec:	e7e4      	b.n	4045b8 <__udivmoddi4+0x284>
  4045ee:	4628      	mov	r0, r5
  4045f0:	e7d7      	b.n	4045a2 <__udivmoddi4+0x26e>
  4045f2:	4640      	mov	r0, r8
  4045f4:	e791      	b.n	40451a <__udivmoddi4+0x1e6>
  4045f6:	4681      	mov	r9, r0
  4045f8:	e7be      	b.n	404578 <__udivmoddi4+0x244>
  4045fa:	4601      	mov	r1, r0
  4045fc:	e778      	b.n	4044f0 <__udivmoddi4+0x1bc>
  4045fe:	3802      	subs	r0, #2
  404600:	443c      	add	r4, r7
  404602:	e745      	b.n	404490 <__udivmoddi4+0x15c>
  404604:	4608      	mov	r0, r1
  404606:	e708      	b.n	40441a <__udivmoddi4+0xe6>
  404608:	f1a8 0802 	sub.w	r8, r8, #2
  40460c:	443d      	add	r5, r7
  40460e:	e72b      	b.n	404468 <__udivmoddi4+0x134>

00404610 <__aeabi_idiv0>:
  404610:	4770      	bx	lr
  404612:	bf00      	nop
  404614:	616b616b 	.word	0x616b616b
  404618:	0a20616b 	.word	0x0a20616b
  40461c:	00000000 	.word	0x00000000
  404620:	00005441 	.word	0x00005441
  404624:	522b5441 	.word	0x522b5441
  404628:	54455345 	.word	0x54455345
  40462c:	00000000 	.word	0x00000000
  404630:	4e2b5441 	.word	0x4e2b5441
  404634:	53454d41 	.word	0x53454d41
  404638:	65767265 	.word	0x65767265
  40463c:	00000072 	.word	0x00000072
  404640:	522b5441 	.word	0x522b5441
  404644:	30454c4f 	.word	0x30454c4f
  404648:	00000000 	.word	0x00000000
  40464c:	30316d68 	.word	0x30316d68
  404650:	7265735f 	.word	0x7265735f
  404654:	5f726576 	.word	0x5f726576
  404658:	74696e69 	.word	0x74696e69
  40465c:	00000000 	.word	0x00000000
  404660:	63696e49 	.word	0x63696e49
  404664:	696c6169 	.word	0x696c6169
  404668:	646e617a 	.word	0x646e617a
  40466c:	2e2e2e6f 	.word	0x2e2e2e6f
  404670:	00000a0d 	.word	0x00000a0d
  404674:	666e6f43 	.word	0x666e6f43
  404678:	48206769 	.word	0x48206769
  40467c:	20353043 	.word	0x20353043
  404680:	76726553 	.word	0x76726553
  404684:	2e2e7265 	.word	0x2e2e7265
  404688:	000a0d2e 	.word	0x000a0d2e
  40468c:	65746e61 	.word	0x65746e61
  404690:	00000073 	.word	0x00000073
  404694:	756c6f56 	.word	0x756c6f56
  404698:	0000656d 	.word	0x0000656d
  40469c:	69727453 	.word	0x69727453
  4046a0:	0000676e 	.word	0x0000676e
  4046a4:	0000005b 	.word	0x0000005b
  4046a8:	0000205d 	.word	0x0000205d

004046ac <_global_impure_ptr>:
  4046ac:	20400030 33323130 37363534 42413938     0.@ 0123456789AB
  4046bc:	46454443 00000000 33323130 37363534     CDEF....01234567
  4046cc:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  4046dc:	0000296c                                l)..

004046e0 <blanks.7217>:
  4046e0:	20202020 20202020 20202020 20202020                     

004046f0 <zeroes.7218>:
  4046f0:	30303030 30303030 30303030 30303030     0000000000000000
  404700:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00404710 <_ctype_>:
  404710:	20202000 20202020 28282020 20282828     .         ((((( 
  404720:	20202020 20202020 20202020 20202020                     
  404730:	10108820 10101010 10101010 10101010      ...............
  404740:	04040410 04040404 10040404 10101010     ................
  404750:	41411010 41414141 01010101 01010101     ..AAAAAA........
  404760:	01010101 01010101 01010101 10101010     ................
  404770:	42421010 42424242 02020202 02020202     ..BBBBBB........
  404780:	02020202 02020202 02020202 10101010     ................
  404790:	00000020 00000000 00000000 00000000      ...............
	...

00404814 <_init>:
  404814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404816:	bf00      	nop
  404818:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40481a:	bc08      	pop	{r3}
  40481c:	469e      	mov	lr, r3
  40481e:	4770      	bx	lr

00404820 <__init_array_start>:
  404820:	004029cd 	.word	0x004029cd

00404824 <__frame_dummy_init_array_entry>:
  404824:	00400165                                e.@.

00404828 <_fini>:
  404828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40482a:	bf00      	nop
  40482c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40482e:	bc08      	pop	{r3}
  404830:	469e      	mov	lr, r3
  404832:	4770      	bx	lr

00404834 <__fini_array_start>:
  404834:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <buffer>:
20400010:	0a7c 2040 0001 0000 d4c0 0001 0000 0000     |.@ ............
	...

20400028 <volume>:
20400028:	0032 0000                                   2...

2040002c <_impure_ptr>:
2040002c:	0030 2040                                   0.@ 

20400030 <impure_data>:
20400030:	0000 0000 031c 2040 0384 2040 03ec 2040     ......@ ..@ ..@ 
	...
204000d8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400458 <__atexit_recursive_mutex>:
20400458:	b4c4 2043                                   ..C 

2040045c <__global_locale>:
2040045c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040047c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040049c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004bc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004dc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004fc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040051c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040053c:	406d 0040 39bd 0040 0000 0000 4710 0040     m@@..9@......G@.
2040054c:	470c 0040 461c 0040 461c 0040 461c 0040     .G@..F@..F@..F@.
2040055c:	461c 0040 461c 0040 461c 0040 461c 0040     .F@..F@..F@..F@.
2040056c:	461c 0040 461c 0040 ffff ffff ffff ffff     .F@..F@.........
2040057c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204005a4:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

204005c8 <__malloc_av_>:
	...
204005d0:	05c8 2040 05c8 2040 05d0 2040 05d0 2040     ..@ ..@ ..@ ..@ 
204005e0:	05d8 2040 05d8 2040 05e0 2040 05e0 2040     ..@ ..@ ..@ ..@ 
204005f0:	05e8 2040 05e8 2040 05f0 2040 05f0 2040     ..@ ..@ ..@ ..@ 
20400600:	05f8 2040 05f8 2040 0600 2040 0600 2040     ..@ ..@ ..@ ..@ 
20400610:	0608 2040 0608 2040 0610 2040 0610 2040     ..@ ..@ ..@ ..@ 
20400620:	0618 2040 0618 2040 0620 2040 0620 2040     ..@ ..@  .@  .@ 
20400630:	0628 2040 0628 2040 0630 2040 0630 2040     (.@ (.@ 0.@ 0.@ 
20400640:	0638 2040 0638 2040 0640 2040 0640 2040     8.@ 8.@ @.@ @.@ 
20400650:	0648 2040 0648 2040 0650 2040 0650 2040     H.@ H.@ P.@ P.@ 
20400660:	0658 2040 0658 2040 0660 2040 0660 2040     X.@ X.@ `.@ `.@ 
20400670:	0668 2040 0668 2040 0670 2040 0670 2040     h.@ h.@ p.@ p.@ 
20400680:	0678 2040 0678 2040 0680 2040 0680 2040     x.@ x.@ ..@ ..@ 
20400690:	0688 2040 0688 2040 0690 2040 0690 2040     ..@ ..@ ..@ ..@ 
204006a0:	0698 2040 0698 2040 06a0 2040 06a0 2040     ..@ ..@ ..@ ..@ 
204006b0:	06a8 2040 06a8 2040 06b0 2040 06b0 2040     ..@ ..@ ..@ ..@ 
204006c0:	06b8 2040 06b8 2040 06c0 2040 06c0 2040     ..@ ..@ ..@ ..@ 
204006d0:	06c8 2040 06c8 2040 06d0 2040 06d0 2040     ..@ ..@ ..@ ..@ 
204006e0:	06d8 2040 06d8 2040 06e0 2040 06e0 2040     ..@ ..@ ..@ ..@ 
204006f0:	06e8 2040 06e8 2040 06f0 2040 06f0 2040     ..@ ..@ ..@ ..@ 
20400700:	06f8 2040 06f8 2040 0700 2040 0700 2040     ..@ ..@ ..@ ..@ 
20400710:	0708 2040 0708 2040 0710 2040 0710 2040     ..@ ..@ ..@ ..@ 
20400720:	0718 2040 0718 2040 0720 2040 0720 2040     ..@ ..@  .@  .@ 
20400730:	0728 2040 0728 2040 0730 2040 0730 2040     (.@ (.@ 0.@ 0.@ 
20400740:	0738 2040 0738 2040 0740 2040 0740 2040     8.@ 8.@ @.@ @.@ 
20400750:	0748 2040 0748 2040 0750 2040 0750 2040     H.@ H.@ P.@ P.@ 
20400760:	0758 2040 0758 2040 0760 2040 0760 2040     X.@ X.@ `.@ `.@ 
20400770:	0768 2040 0768 2040 0770 2040 0770 2040     h.@ h.@ p.@ p.@ 
20400780:	0778 2040 0778 2040 0780 2040 0780 2040     x.@ x.@ ..@ ..@ 
20400790:	0788 2040 0788 2040 0790 2040 0790 2040     ..@ ..@ ..@ ..@ 
204007a0:	0798 2040 0798 2040 07a0 2040 07a0 2040     ..@ ..@ ..@ ..@ 
204007b0:	07a8 2040 07a8 2040 07b0 2040 07b0 2040     ..@ ..@ ..@ ..@ 
204007c0:	07b8 2040 07b8 2040 07c0 2040 07c0 2040     ..@ ..@ ..@ ..@ 
204007d0:	07c8 2040 07c8 2040 07d0 2040 07d0 2040     ..@ ..@ ..@ ..@ 
204007e0:	07d8 2040 07d8 2040 07e0 2040 07e0 2040     ..@ ..@ ..@ ..@ 
204007f0:	07e8 2040 07e8 2040 07f0 2040 07f0 2040     ..@ ..@ ..@ ..@ 
20400800:	07f8 2040 07f8 2040 0800 2040 0800 2040     ..@ ..@ ..@ ..@ 
20400810:	0808 2040 0808 2040 0810 2040 0810 2040     ..@ ..@ ..@ ..@ 
20400820:	0818 2040 0818 2040 0820 2040 0820 2040     ..@ ..@  .@  .@ 
20400830:	0828 2040 0828 2040 0830 2040 0830 2040     (.@ (.@ 0.@ 0.@ 
20400840:	0838 2040 0838 2040 0840 2040 0840 2040     8.@ 8.@ @.@ @.@ 
20400850:	0848 2040 0848 2040 0850 2040 0850 2040     H.@ H.@ P.@ P.@ 
20400860:	0858 2040 0858 2040 0860 2040 0860 2040     X.@ X.@ `.@ `.@ 
20400870:	0868 2040 0868 2040 0870 2040 0870 2040     h.@ h.@ p.@ p.@ 
20400880:	0878 2040 0878 2040 0880 2040 0880 2040     x.@ x.@ ..@ ..@ 
20400890:	0888 2040 0888 2040 0890 2040 0890 2040     ..@ ..@ ..@ ..@ 
204008a0:	0898 2040 0898 2040 08a0 2040 08a0 2040     ..@ ..@ ..@ ..@ 
204008b0:	08a8 2040 08a8 2040 08b0 2040 08b0 2040     ..@ ..@ ..@ ..@ 
204008c0:	08b8 2040 08b8 2040 08c0 2040 08c0 2040     ..@ ..@ ..@ ..@ 
204008d0:	08c8 2040 08c8 2040 08d0 2040 08d0 2040     ..@ ..@ ..@ ..@ 
204008e0:	08d8 2040 08d8 2040 08e0 2040 08e0 2040     ..@ ..@ ..@ ..@ 
204008f0:	08e8 2040 08e8 2040 08f0 2040 08f0 2040     ..@ ..@ ..@ ..@ 
20400900:	08f8 2040 08f8 2040 0900 2040 0900 2040     ..@ ..@ ..@ ..@ 
20400910:	0908 2040 0908 2040 0910 2040 0910 2040     ..@ ..@ ..@ ..@ 
20400920:	0918 2040 0918 2040 0920 2040 0920 2040     ..@ ..@  .@  .@ 
20400930:	0928 2040 0928 2040 0930 2040 0930 2040     (.@ (.@ 0.@ 0.@ 
20400940:	0938 2040 0938 2040 0940 2040 0940 2040     8.@ 8.@ @.@ @.@ 
20400950:	0948 2040 0948 2040 0950 2040 0950 2040     H.@ H.@ P.@ P.@ 
20400960:	0958 2040 0958 2040 0960 2040 0960 2040     X.@ X.@ `.@ `.@ 
20400970:	0968 2040 0968 2040 0970 2040 0970 2040     h.@ h.@ p.@ p.@ 
20400980:	0978 2040 0978 2040 0980 2040 0980 2040     x.@ x.@ ..@ ..@ 
20400990:	0988 2040 0988 2040 0990 2040 0990 2040     ..@ ..@ ..@ ..@ 
204009a0:	0998 2040 0998 2040 09a0 2040 09a0 2040     ..@ ..@ ..@ ..@ 
204009b0:	09a8 2040 09a8 2040 09b0 2040 09b0 2040     ..@ ..@ ..@ ..@ 
204009c0:	09b8 2040 09b8 2040 09c0 2040 09c0 2040     ..@ ..@ ..@ ..@ 

204009d0 <__malloc_sbrk_base>:
204009d0:	ffff ffff                                   ....

204009d4 <__malloc_trim_threshold>:
204009d4:	0000 0002                                   ....
