
BLUETOOTH_P2P_SERVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004678  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00404678  00404678  00014678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d8  20400000  00404680  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0003ab10  204009d8  00405058  000209d8  2**2
                  ALLOC
  4 .stack        00002000  2043b4e8  0043fb68  000209d8  2**0
                  ALLOC
  5 .heap         00000200  2043d4e8  00441b68  000209d8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209d8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020a06  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001b75f  00000000  00000000  00020a5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003a96  00000000  00000000  0003c1be  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ca8  00000000  00000000  0003fc54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000212f8  00000000  00000000  000408fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ebeb  00000000  00000000  00061bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008d040  00000000  00000000  000707df  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00005d03  00000000  00000000  000fd81f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cb8  00000000  00000000  00103522  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000027ec  00000000  00000000  001041dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	e8 d4 43 20 e5 0d 40 00 e1 0d 40 00 e1 0d 40 00     ..C ..@...@...@.
  400010:	e1 0d 40 00 e1 0d 40 00 e1 0d 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	e1 0d 40 00 e1 0d 40 00 00 00 00 00 e1 0d 40 00     ..@...@.......@.
  40003c:	1d 11 40 00 e1 0d 40 00 e1 0d 40 00 e1 0d 40 00     ..@...@...@...@.
  40004c:	e1 0d 40 00 e1 0d 40 00 e1 0d 40 00 e1 0d 40 00     ..@...@...@...@.
  40005c:	e1 0d 40 00 e1 0d 40 00 00 00 00 00 09 0c 40 00     ..@...@.......@.
  40006c:	1d 0c 40 00 31 0c 40 00 e1 0d 40 00 e1 0d 40 00     ..@.1.@...@...@.
  40007c:	e1 0d 40 00 45 0c 40 00 59 0c 40 00 e1 0d 40 00     ..@.E.@.Y.@...@.
  40008c:	e1 0d 40 00 e1 0d 40 00 e1 0d 40 00 e1 0d 40 00     ..@...@...@...@.
  40009c:	2d 11 40 00 e1 0d 40 00 e1 0d 40 00 e1 0d 40 00     -.@...@...@...@.
  4000ac:	e1 0d 40 00 e1 0d 40 00 89 05 40 00 e1 0d 40 00     ..@...@...@...@.
  4000bc:	e1 0d 40 00 e1 0d 40 00 e1 0d 40 00 e1 0d 40 00     ..@...@...@...@.
  4000cc:	e1 0d 40 00 00 00 00 00 e1 0d 40 00 00 00 00 00     ..@.......@.....
  4000dc:	e1 0d 40 00 9d 05 40 00 e1 0d 40 00 e1 0d 40 00     ..@...@...@...@.
  4000ec:	e1 0d 40 00 e1 0d 40 00 e1 0d 40 00 e1 0d 40 00     ..@...@...@...@.
  4000fc:	e1 0d 40 00 e1 0d 40 00 e1 0d 40 00 e1 0d 40 00     ..@...@...@...@.
  40010c:	e1 0d 40 00 e1 0d 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 e1 0d 40 00 e1 0d 40 00 e1 0d 40 00     ......@...@...@.
  40012c:	e1 0d 40 00 e1 0d 40 00 00 00 00 00 e1 0d 40 00     ..@...@.......@.
  40013c:	e1 0d 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009d8 	.word	0x204009d8
  40015c:	00000000 	.word	0x00000000
  400160:	00404680 	.word	0x00404680

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00404680 	.word	0x00404680
  4001a0:	204009dc 	.word	0x204009dc
  4001a4:	00404680 	.word	0x00404680
  4001a8:	00000000 	.word	0x00000000

004001ac <ppbuf_insert_active>:

int ppbuf_insert_active(ppbuf_t *p, void *data, int size){
	int ret = 0;
	unsigned char *ptr;

	if(p == NULL || data == NULL || size == 0) {
  4001ac:	2a00      	cmp	r2, #0
  4001ae:	bf18      	it	ne
  4001b0:	2900      	cmpne	r1, #0
  4001b2:	d023      	beq.n	4001fc <ppbuf_insert_active+0x50>
int ppbuf_insert_active(ppbuf_t *p, void *data, int size){
  4001b4:	b570      	push	{r4, r5, r6, lr}
  4001b6:	460b      	mov	r3, r1
  4001b8:	4615      	mov	r5, r2
	if(p == NULL || data == NULL || size == 0) {
  4001ba:	b1c8      	cbz	r0, 4001f0 <ppbuf_insert_active+0x44>
		/* check your parameters */
		ret = -1;
	} else {
		if(size > (p->buffer_size - p->put_index)) {
  4001bc:	6886      	ldr	r6, [r0, #8]
  4001be:	68c2      	ldr	r2, [r0, #12]
  4001c0:	1ab1      	subs	r1, r6, r2
  4001c2:	428d      	cmp	r5, r1
  4001c4:	dc17      	bgt.n	4001f6 <ppbuf_insert_active+0x4a>
  4001c6:	4619      	mov	r1, r3
  4001c8:	4604      	mov	r4, r0
			/* not enough room for new samples */
			ret = -1;
		} else {
			/* take the current position */
			int mem_position = ((p->ping) * p->buffer_size) + p->put_index;
  4001ca:	7903      	ldrb	r3, [r0, #4]
  4001cc:	fb06 2303 	mla	r3, r6, r3, r2
			ptr = (unsigned char *)p->buffer_data; //uint8_t

			/* copy the contents */
			memcpy(&ptr[mem_position], data, size);
  4001d0:	6800      	ldr	r0, [r0, #0]
  4001d2:	462a      	mov	r2, r5
  4001d4:	4418      	add	r0, r3
  4001d6:	4b0b      	ldr	r3, [pc, #44]	; (400204 <ppbuf_insert_active+0x58>)
  4001d8:	4798      	blx	r3

			/* update put index */
			p->put_index += size;
  4001da:	68e2      	ldr	r2, [r4, #12]
  4001dc:	442a      	add	r2, r5
  4001de:	60e2      	str	r2, [r4, #12]
			p->full_signal = (p->put_index >= p->buffer_size?true:false);
  4001e0:	68a3      	ldr	r3, [r4, #8]
  4001e2:	429a      	cmp	r2, r3
  4001e4:	bfb4      	ite	lt
  4001e6:	2200      	movlt	r2, #0
  4001e8:	2201      	movge	r2, #1
  4001ea:	7522      	strb	r2, [r4, #20]

			/* swap will only generated when ppbuf_get_full_signal is called */
			ret = 0;
  4001ec:	2000      	movs	r0, #0
  4001ee:	bd70      	pop	{r4, r5, r6, pc}
		ret = -1;
  4001f0:	f04f 30ff 	mov.w	r0, #4294967295
  4001f4:	bd70      	pop	{r4, r5, r6, pc}
			ret = -1;
  4001f6:	f04f 30ff 	mov.w	r0, #4294967295
		}
	}
	return(ret);
}
  4001fa:	bd70      	pop	{r4, r5, r6, pc}
		ret = -1;
  4001fc:	f04f 30ff 	mov.w	r0, #4294967295
}
  400200:	4770      	bx	lr
  400202:	bf00      	nop
  400204:	004015a1 	.word	0x004015a1

00400208 <ppbuf_remove_inactive>:

int ppbuf_remove_inactive(ppbuf_t *p, void *data, int size){
	int ret = 0;
	unsigned char *ptr;

	if(p == NULL || data == NULL || size == 0) {
  400208:	2a00      	cmp	r2, #0
  40020a:	bf18      	it	ne
  40020c:	2900      	cmpne	r1, #0
  40020e:	d01d      	beq.n	40024c <ppbuf_remove_inactive+0x44>
int ppbuf_remove_inactive(ppbuf_t *p, void *data, int size){
  400210:	b570      	push	{r4, r5, r6, lr}
  400212:	460b      	mov	r3, r1
  400214:	4615      	mov	r5, r2
	if(p == NULL || data == NULL || size == 0) {
  400216:	b198      	cbz	r0, 400240 <ppbuf_remove_inactive+0x38>
		/* check your parameters */
		ret = -1;
	} else {
		if(size > (p->buffer_size - p->get_index)) {
  400218:	6886      	ldr	r6, [r0, #8]
  40021a:	6902      	ldr	r2, [r0, #16]
  40021c:	1ab1      	subs	r1, r6, r2
  40021e:	428d      	cmp	r5, r1
  400220:	dc11      	bgt.n	400246 <ppbuf_remove_inactive+0x3e>
  400222:	4604      	mov	r4, r0
			/* not enough data in sample buffer */
			ret = -1;
		} else {
			/* take the current position */
			int mem_position = ((p->pong) * p->buffer_size) + p->get_index;
  400224:	7941      	ldrb	r1, [r0, #5]
  400226:	fb06 2101 	mla	r1, r6, r1, r2
			ptr = (unsigned char *)p->buffer_data;

			/* copy the contents */
			memcpy(data,&ptr[mem_position], size);
  40022a:	6800      	ldr	r0, [r0, #0]
  40022c:	462a      	mov	r2, r5
  40022e:	4401      	add	r1, r0
  400230:	4618      	mov	r0, r3
  400232:	4b08      	ldr	r3, [pc, #32]	; (400254 <ppbuf_remove_inactive+0x4c>)
  400234:	4798      	blx	r3

			/* update put index */
			p->get_index += size;
  400236:	6923      	ldr	r3, [r4, #16]
  400238:	442b      	add	r3, r5
  40023a:	6123      	str	r3, [r4, #16]

			/* when buffer is empty we are not able to extract anymore data */
			ret = 0;
  40023c:	2000      	movs	r0, #0
  40023e:	bd70      	pop	{r4, r5, r6, pc}
		ret = -1;
  400240:	f04f 30ff 	mov.w	r0, #4294967295
  400244:	bd70      	pop	{r4, r5, r6, pc}
			ret = -1;
  400246:	f04f 30ff 	mov.w	r0, #4294967295
		}
	}
	return(ret);


}
  40024a:	bd70      	pop	{r4, r5, r6, pc}
		ret = -1;
  40024c:	f04f 30ff 	mov.w	r0, #4294967295
}
  400250:	4770      	bx	lr
  400252:	bf00      	nop
  400254:	004015a1 	.word	0x004015a1

00400258 <ppbuf_get_full_signal>:
	return(ret);
}

bool ppbuf_get_full_signal(ppbuf_t *p, bool consume) {
	/* take the last signaled full occurrence */
	bool ret = (p != NULL ? p->full_signal : false);
  400258:	b198      	cbz	r0, 400282 <ppbuf_get_full_signal+0x2a>
  40025a:	4603      	mov	r3, r0
  40025c:	7d00      	ldrb	r0, [r0, #20]
  40025e:	b178      	cbz	r0, 400280 <ppbuf_get_full_signal+0x28>

	if((consume != false) && (p != NULL) && (ret != false)) {
  400260:	b171      	cbz	r1, 400280 <ppbuf_get_full_signal+0x28>
bool ppbuf_get_full_signal(ppbuf_t *p, bool consume) {
  400262:	b410      	push	{r4}
		p->full_signal = false;
  400264:	2400      	movs	r4, #0
  400266:	751c      	strb	r4, [r3, #20]

		/* swap the buffer switches */
		p->ping = p->ping ^ p->pong;
  400268:	7958      	ldrb	r0, [r3, #5]
  40026a:	791a      	ldrb	r2, [r3, #4]
  40026c:	4042      	eors	r2, r0
		p->pong = p->pong ^ p->ping;
  40026e:	4050      	eors	r0, r2
  400270:	7158      	strb	r0, [r3, #5]
		p->ping = p->ping ^ p->pong;
  400272:	4042      	eors	r2, r0
  400274:	711a      	strb	r2, [r3, #4]

		/* resets the buffer position */
		p->get_index = 0;
  400276:	611c      	str	r4, [r3, #16]
		p->put_index = 0;
  400278:	60dc      	str	r4, [r3, #12]
	bool ret = (p != NULL ? p->full_signal : false);
  40027a:	4608      	mov	r0, r1
	}

	return(ret);
}
  40027c:	f85d 4b04 	ldr.w	r4, [sp], #4
  400280:	4770      	bx	lr
  400282:	2000      	movs	r0, #0
  400284:	4770      	bx	lr
	...

00400288 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  40028c:	b980      	cbnz	r0, 4002b0 <_read+0x28>
  40028e:	460c      	mov	r4, r1
  400290:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400292:	2a00      	cmp	r2, #0
  400294:	dd0f      	ble.n	4002b6 <_read+0x2e>
  400296:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400298:	4e08      	ldr	r6, [pc, #32]	; (4002bc <_read+0x34>)
  40029a:	4d09      	ldr	r5, [pc, #36]	; (4002c0 <_read+0x38>)
  40029c:	6830      	ldr	r0, [r6, #0]
  40029e:	4621      	mov	r1, r4
  4002a0:	682b      	ldr	r3, [r5, #0]
  4002a2:	4798      	blx	r3
		ptr++;
  4002a4:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  4002a6:	42bc      	cmp	r4, r7
  4002a8:	d1f8      	bne.n	40029c <_read+0x14>
		nChars++;
	}
	return nChars;
}
  4002aa:	4640      	mov	r0, r8
  4002ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4002b0:	f04f 38ff 	mov.w	r8, #4294967295
  4002b4:	e7f9      	b.n	4002aa <_read+0x22>
	for (; len > 0; --len) {
  4002b6:	4680      	mov	r8, r0
  4002b8:	e7f7      	b.n	4002aa <_read+0x22>
  4002ba:	bf00      	nop
  4002bc:	2043b438 	.word	0x2043b438
  4002c0:	2043b430 	.word	0x2043b430

004002c4 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4002c4:	3801      	subs	r0, #1
  4002c6:	2802      	cmp	r0, #2
  4002c8:	d815      	bhi.n	4002f6 <_write+0x32>
{
  4002ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4002ce:	460e      	mov	r6, r1
  4002d0:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  4002d2:	b19a      	cbz	r2, 4002fc <_write+0x38>
  4002d4:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4002d6:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400310 <_write+0x4c>
  4002da:	4f0c      	ldr	r7, [pc, #48]	; (40030c <_write+0x48>)
  4002dc:	f8d8 0000 	ldr.w	r0, [r8]
  4002e0:	f815 1b01 	ldrb.w	r1, [r5], #1
  4002e4:	683b      	ldr	r3, [r7, #0]
  4002e6:	4798      	blx	r3
  4002e8:	2800      	cmp	r0, #0
  4002ea:	db0a      	blt.n	400302 <_write+0x3e>
  4002ec:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4002ee:	3c01      	subs	r4, #1
  4002f0:	d1f4      	bne.n	4002dc <_write+0x18>
  4002f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4002f6:	f04f 30ff 	mov.w	r0, #4294967295
  4002fa:	4770      	bx	lr
	for (; len != 0; --len) {
  4002fc:	4610      	mov	r0, r2
  4002fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400302:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40030a:	bf00      	nop
  40030c:	2043b434 	.word	0x2043b434
  400310:	2043b438 	.word	0x2043b438

00400314 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  400314:	b570      	push	{r4, r5, r6, lr}
  400316:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  400318:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  40031a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  40031c:	4013      	ands	r3, r2
  40031e:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400320:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  400322:	4e1c      	ldr	r6, [pc, #112]	; (400394 <afec_process_callback+0x80>)
  400324:	4d1c      	ldr	r5, [pc, #112]	; (400398 <afec_process_callback+0x84>)
  400326:	42a8      	cmp	r0, r5
  400328:	bf14      	ite	ne
  40032a:	2000      	movne	r0, #0
  40032c:	2001      	moveq	r0, #1
  40032e:	0105      	lsls	r5, r0, #4
  400330:	e00b      	b.n	40034a <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  400332:	2c0e      	cmp	r4, #14
  400334:	d81e      	bhi.n	400374 <afec_process_callback+0x60>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  400336:	9a01      	ldr	r2, [sp, #4]
  400338:	f104 010c 	add.w	r1, r4, #12
  40033c:	2301      	movs	r3, #1
  40033e:	408b      	lsls	r3, r1
  400340:	4213      	tst	r3, r2
  400342:	d110      	bne.n	400366 <afec_process_callback+0x52>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400344:	3401      	adds	r4, #1
  400346:	2c10      	cmp	r4, #16
  400348:	d022      	beq.n	400390 <afec_process_callback+0x7c>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  40034a:	2c0b      	cmp	r4, #11
  40034c:	d8f1      	bhi.n	400332 <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  40034e:	9a01      	ldr	r2, [sp, #4]
  400350:	2301      	movs	r3, #1
  400352:	40a3      	lsls	r3, r4
  400354:	4213      	tst	r3, r2
  400356:	d0f5      	beq.n	400344 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400358:	192b      	adds	r3, r5, r4
  40035a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  40035e:	2b00      	cmp	r3, #0
  400360:	d0f0      	beq.n	400344 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400362:	4798      	blx	r3
  400364:	e7ee      	b.n	400344 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400366:	192b      	adds	r3, r5, r4
  400368:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  40036c:	2b00      	cmp	r3, #0
  40036e:	d0e9      	beq.n	400344 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400370:	4798      	blx	r3
  400372:	e7e7      	b.n	400344 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  400374:	9a01      	ldr	r2, [sp, #4]
  400376:	f104 010f 	add.w	r1, r4, #15
  40037a:	2301      	movs	r3, #1
  40037c:	408b      	lsls	r3, r1
  40037e:	4213      	tst	r3, r2
  400380:	d0e0      	beq.n	400344 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400382:	192b      	adds	r3, r5, r4
  400384:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400388:	2b00      	cmp	r3, #0
  40038a:	d0db      	beq.n	400344 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  40038c:	4798      	blx	r3
  40038e:	e7d9      	b.n	400344 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400390:	b002      	add	sp, #8
  400392:	bd70      	pop	{r4, r5, r6, pc}
  400394:	2043b43c 	.word	0x2043b43c
  400398:	40064000 	.word	0x40064000

0040039c <afec_ch_set_config>:
{
  40039c:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  40039e:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  4003a0:	2301      	movs	r3, #1
  4003a2:	408b      	lsls	r3, r1
  4003a4:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  4003a8:	7815      	ldrb	r5, [r2, #0]
  4003aa:	2d00      	cmp	r5, #0
  4003ac:	bf08      	it	eq
  4003ae:	2300      	moveq	r3, #0
  4003b0:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  4003b2:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  4003b4:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  4003b6:	004b      	lsls	r3, r1, #1
  4003b8:	2103      	movs	r1, #3
  4003ba:	4099      	lsls	r1, r3
  4003bc:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  4003c0:	7851      	ldrb	r1, [r2, #1]
  4003c2:	4099      	lsls	r1, r3
  4003c4:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  4003c6:	6541      	str	r1, [r0, #84]	; 0x54
}
  4003c8:	bc30      	pop	{r4, r5}
  4003ca:	4770      	bx	lr

004003cc <afec_temp_sensor_set_config>:
	reg = ((config->rctc) ? AFEC_TEMPMR_RTCT : 0) | (config->mode);
  4003cc:	784b      	ldrb	r3, [r1, #1]
  4003ce:	780a      	ldrb	r2, [r1, #0]
  4003d0:	4313      	orrs	r3, r2
	afec->AFEC_TEMPMR = reg;
  4003d2:	6703      	str	r3, [r0, #112]	; 0x70
			AFEC_TEMPCWR_THIGHTHRES(config->high_threshold);
  4003d4:	888a      	ldrh	r2, [r1, #4]
	afec->AFEC_TEMPCWR = AFEC_TEMPCWR_TLOWTHRES(config->low_threshold) |
  4003d6:	884b      	ldrh	r3, [r1, #2]
  4003d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4003dc:	6743      	str	r3, [r0, #116]	; 0x74
  4003de:	4770      	bx	lr

004003e0 <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  4003e0:	2200      	movs	r2, #0
  4003e2:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  4003e4:	4b08      	ldr	r3, [pc, #32]	; (400408 <afec_get_config_defaults+0x28>)
  4003e6:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  4003e8:	4b08      	ldr	r3, [pc, #32]	; (40040c <afec_get_config_defaults+0x2c>)
  4003ea:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  4003ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  4003f0:	60c3      	str	r3, [r0, #12]
		cfg->tracktim = 2;
  4003f2:	2302      	movs	r3, #2
  4003f4:	7403      	strb	r3, [r0, #16]
		cfg->transfer = 1;
  4003f6:	2301      	movs	r3, #1
  4003f8:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  4003fa:	7483      	strb	r3, [r0, #18]
		cfg->useq = false;
  4003fc:	74c2      	strb	r2, [r0, #19]
		cfg->tag = true;
  4003fe:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  400400:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  400402:	7583      	strb	r3, [r0, #22]
  400404:	4770      	bx	lr
  400406:	bf00      	nop
  400408:	11e1a300 	.word	0x11e1a300
  40040c:	005b8d80 	.word	0x005b8d80

00400410 <afec_ch_get_config_defaults>:
	cfg->diff = false;
  400410:	2300      	movs	r3, #0
  400412:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  400414:	2301      	movs	r3, #1
  400416:	7043      	strb	r3, [r0, #1]
  400418:	4770      	bx	lr

0040041a <afec_temp_sensor_get_config_defaults>:
	cfg->rctc = false;
  40041a:	2300      	movs	r3, #0
  40041c:	7003      	strb	r3, [r0, #0]
	cfg->mode= AFEC_TEMP_CMP_MODE_2;
  40041e:	2320      	movs	r3, #32
  400420:	7043      	strb	r3, [r0, #1]
	cfg->low_threshold= 0xFF;
  400422:	23ff      	movs	r3, #255	; 0xff
  400424:	8043      	strh	r3, [r0, #2]
	cfg->high_threshold= 0xFFF;
  400426:	f640 73ff 	movw	r3, #4095	; 0xfff
  40042a:	8083      	strh	r3, [r0, #4]
  40042c:	4770      	bx	lr
	...

00400430 <afec_init>:
	return afec->AFEC_ISR;
  400430:	6b02      	ldr	r2, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  400432:	f012 7280 	ands.w	r2, r2, #16777216	; 0x1000000
  400436:	d001      	beq.n	40043c <afec_init+0xc>
		return STATUS_ERR_BUSY;
  400438:	2019      	movs	r0, #25
  40043a:	4770      	bx	lr
{
  40043c:	b410      	push	{r4}
	afec->AFEC_CR = AFEC_CR_SWRST;
  40043e:	2301      	movs	r3, #1
  400440:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400442:	7ccb      	ldrb	r3, [r1, #19]
  400444:	2b00      	cmp	r3, #0
  400446:	bf18      	it	ne
  400448:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  40044c:	684b      	ldr	r3, [r1, #4]
  40044e:	688c      	ldr	r4, [r1, #8]
  400450:	fbb3 f3f4 	udiv	r3, r3, r4
  400454:	3b01      	subs	r3, #1
  400456:	021b      	lsls	r3, r3, #8
  400458:	b29b      	uxth	r3, r3
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40045a:	68cc      	ldr	r4, [r1, #12]
  40045c:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  400460:	4323      	orrs	r3, r4
			AFEC_MR_TRACKTIM(config->tracktim) |
  400462:	7c0c      	ldrb	r4, [r1, #16]
  400464:	0624      	lsls	r4, r4, #24
  400466:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40046a:	4323      	orrs	r3, r4
			AFEC_MR_TRANSFER(config->transfer) |
  40046c:	7c4c      	ldrb	r4, [r1, #17]
  40046e:	0724      	lsls	r4, r4, #28
  400470:	f004 5440 	and.w	r4, r4, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400474:	4323      	orrs	r3, r4
  400476:	4313      	orrs	r3, r2
	afec->AFEC_MR = reg;
  400478:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  40047a:	7d0b      	ldrb	r3, [r1, #20]
  40047c:	2b00      	cmp	r3, #0
  40047e:	bf14      	ite	ne
  400480:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  400484:	2300      	moveq	r3, #0
  400486:	680a      	ldr	r2, [r1, #0]
  400488:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  40048a:	7d4a      	ldrb	r2, [r1, #21]
  40048c:	2a00      	cmp	r2, #0
  40048e:	bf14      	ite	ne
  400490:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  400494:	2200      	moveq	r2, #0
			(config->resolution) |
  400496:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400498:	6083      	str	r3, [r0, #8]
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  40049a:	7d8b      	ldrb	r3, [r1, #22]
  40049c:	021b      	lsls	r3, r3, #8
  40049e:	f403 7340 	and.w	r3, r3, #768	; 0x300
  4004a2:	f043 030c 	orr.w	r3, r3, #12
  4004a6:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  4004aa:	4b0f      	ldr	r3, [pc, #60]	; (4004e8 <afec_init+0xb8>)
  4004ac:	4298      	cmp	r0, r3
  4004ae:	d006      	beq.n	4004be <afec_init+0x8e>
	if(afec == AFEC1) {
  4004b0:	4b0e      	ldr	r3, [pc, #56]	; (4004ec <afec_init+0xbc>)
  4004b2:	4298      	cmp	r0, r3
  4004b4:	d00d      	beq.n	4004d2 <afec_init+0xa2>
	return STATUS_OK;
  4004b6:	2000      	movs	r0, #0
}
  4004b8:	f85d 4b04 	ldr.w	r4, [sp], #4
  4004bc:	4770      	bx	lr
  4004be:	4b0c      	ldr	r3, [pc, #48]	; (4004f0 <afec_init+0xc0>)
  4004c0:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[0][i] = 0;
  4004c4:	2200      	movs	r2, #0
  4004c6:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  4004ca:	428b      	cmp	r3, r1
  4004cc:	d1fb      	bne.n	4004c6 <afec_init+0x96>
	return STATUS_OK;
  4004ce:	2000      	movs	r0, #0
  4004d0:	e7f2      	b.n	4004b8 <afec_init+0x88>
  4004d2:	4b08      	ldr	r3, [pc, #32]	; (4004f4 <afec_init+0xc4>)
  4004d4:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[1][i] = 0;
  4004d8:	2200      	movs	r2, #0
  4004da:	f843 2b04 	str.w	r2, [r3], #4
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  4004de:	428b      	cmp	r3, r1
  4004e0:	d1fb      	bne.n	4004da <afec_init+0xaa>
	return STATUS_OK;
  4004e2:	2000      	movs	r0, #0
  4004e4:	e7e8      	b.n	4004b8 <afec_init+0x88>
  4004e6:	bf00      	nop
  4004e8:	4003c000 	.word	0x4003c000
  4004ec:	40064000 	.word	0x40064000
  4004f0:	2043b438 	.word	0x2043b438
  4004f4:	2043b47c 	.word	0x2043b47c

004004f8 <afec_enable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  4004f8:	4b0c      	ldr	r3, [pc, #48]	; (40052c <afec_enable_interrupt+0x34>)
  4004fa:	4299      	cmp	r1, r3
  4004fc:	d007      	beq.n	40050e <afec_enable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  4004fe:	290b      	cmp	r1, #11
  400500:	d80b      	bhi.n	40051a <afec_enable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  400502:	d006      	beq.n	400512 <afec_enable_interrupt+0x1a>
			afec->AFEC_IER = 1 << interrupt_source;
  400504:	2301      	movs	r3, #1
  400506:	fa03 f101 	lsl.w	r1, r3, r1
  40050a:	6241      	str	r1, [r0, #36]	; 0x24
  40050c:	4770      	bx	lr
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  40050e:	6243      	str	r3, [r0, #36]	; 0x24
		return;
  400510:	4770      	bx	lr
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  400512:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400516:	6243      	str	r3, [r0, #36]	; 0x24
  400518:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  40051a:	290e      	cmp	r1, #14
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  40051c:	bf94      	ite	ls
  40051e:	310c      	addls	r1, #12
				+ AFEC_INTERRUPT_GAP2);
  400520:	310f      	addhi	r1, #15
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  400522:	2301      	movs	r3, #1
  400524:	fa03 f101 	lsl.w	r1, r3, r1
  400528:	6241      	str	r1, [r0, #36]	; 0x24
  40052a:	4770      	bx	lr
  40052c:	47000fff 	.word	0x47000fff

00400530 <afec_set_callback>:
{
  400530:	b538      	push	{r3, r4, r5, lr}
	if (afec == AFEC1) {
  400532:	4c11      	ldr	r4, [pc, #68]	; (400578 <afec_set_callback+0x48>)
  400534:	42a0      	cmp	r0, r4
	afec_callback_pointer[i][source] = callback;
  400536:	bf0c      	ite	eq
  400538:	2410      	moveq	r4, #16
  40053a:	2400      	movne	r4, #0
  40053c:	440c      	add	r4, r1
  40053e:	4d0f      	ldr	r5, [pc, #60]	; (40057c <afec_set_callback+0x4c>)
  400540:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
	if (!i) {
  400544:	d10a      	bne.n	40055c <afec_set_callback+0x2c>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400546:	4a0e      	ldr	r2, [pc, #56]	; (400580 <afec_set_callback+0x50>)
  400548:	f44f 7480 	mov.w	r4, #256	; 0x100
  40054c:	f8c2 4184 	str.w	r4, [r2, #388]	; 0x184
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400550:	015b      	lsls	r3, r3, #5
  400552:	b2db      	uxtb	r3, r3
  400554:	f882 3328 	strb.w	r3, [r2, #808]	; 0x328
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400558:	6054      	str	r4, [r2, #4]
  40055a:	e009      	b.n	400570 <afec_set_callback+0x40>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40055c:	4a08      	ldr	r2, [pc, #32]	; (400580 <afec_set_callback+0x50>)
  40055e:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
  400562:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400566:	015b      	lsls	r3, r3, #5
  400568:	b2db      	uxtb	r3, r3
  40056a:	f882 331d 	strb.w	r3, [r2, #797]	; 0x31d
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40056e:	6014      	str	r4, [r2, #0]
	afec_enable_interrupt(afec, source);
  400570:	4b04      	ldr	r3, [pc, #16]	; (400584 <afec_set_callback+0x54>)
  400572:	4798      	blx	r3
  400574:	bd38      	pop	{r3, r4, r5, pc}
  400576:	bf00      	nop
  400578:	40064000 	.word	0x40064000
  40057c:	2043b43c 	.word	0x2043b43c
  400580:	e000e100 	.word	0xe000e100
  400584:	004004f9 	.word	0x004004f9

00400588 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  400588:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  40058a:	4802      	ldr	r0, [pc, #8]	; (400594 <AFEC0_Handler+0xc>)
  40058c:	4b02      	ldr	r3, [pc, #8]	; (400598 <AFEC0_Handler+0x10>)
  40058e:	4798      	blx	r3
  400590:	bd08      	pop	{r3, pc}
  400592:	bf00      	nop
  400594:	4003c000 	.word	0x4003c000
  400598:	00400315 	.word	0x00400315

0040059c <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  40059c:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  40059e:	4802      	ldr	r0, [pc, #8]	; (4005a8 <AFEC1_Handler+0xc>)
  4005a0:	4b02      	ldr	r3, [pc, #8]	; (4005ac <AFEC1_Handler+0x10>)
  4005a2:	4798      	blx	r3
  4005a4:	bd08      	pop	{r3, pc}
  4005a6:	bf00      	nop
  4005a8:	40064000 	.word	0x40064000
  4005ac:	00400315 	.word	0x00400315

004005b0 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  4005b0:	b500      	push	{lr}
  4005b2:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  4005b4:	4b13      	ldr	r3, [pc, #76]	; (400604 <afec_enable+0x54>)
  4005b6:	4298      	cmp	r0, r3
  4005b8:	bf0c      	ite	eq
  4005ba:	2028      	moveq	r0, #40	; 0x28
  4005bc:	201d      	movne	r0, #29
  4005be:	4b12      	ldr	r3, [pc, #72]	; (400608 <afec_enable+0x58>)
  4005c0:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  4005c2:	4b12      	ldr	r3, [pc, #72]	; (40060c <afec_enable+0x5c>)
  4005c4:	789b      	ldrb	r3, [r3, #2]
  4005c6:	2bff      	cmp	r3, #255	; 0xff
  4005c8:	d01a      	beq.n	400600 <afec_enable+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4005ca:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4005ce:	fab3 f383 	clz	r3, r3
  4005d2:	095b      	lsrs	r3, r3, #5
  4005d4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4005d6:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4005d8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4005dc:	2200      	movs	r2, #0
  4005de:	4b0c      	ldr	r3, [pc, #48]	; (400610 <afec_enable+0x60>)
  4005e0:	701a      	strb	r2, [r3, #0]
	return flags;
  4005e2:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  4005e4:	4a09      	ldr	r2, [pc, #36]	; (40060c <afec_enable+0x5c>)
  4005e6:	7893      	ldrb	r3, [r2, #2]
  4005e8:	3301      	adds	r3, #1
  4005ea:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4005ec:	b129      	cbz	r1, 4005fa <afec_enable+0x4a>
		cpu_irq_enable();
  4005ee:	2201      	movs	r2, #1
  4005f0:	4b07      	ldr	r3, [pc, #28]	; (400610 <afec_enable+0x60>)
  4005f2:	701a      	strb	r2, [r3, #0]
  4005f4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4005f8:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  4005fa:	b003      	add	sp, #12
  4005fc:	f85d fb04 	ldr.w	pc, [sp], #4
  400600:	e7fe      	b.n	400600 <afec_enable+0x50>
  400602:	bf00      	nop
  400604:	40064000 	.word	0x40064000
  400608:	00400d8d 	.word	0x00400d8d
  40060c:	2043b428 	.word	0x2043b428
  400610:	2040000a 	.word	0x2040000a

00400614 <dacc_get_interrupt_status>:
 *
 * \return The interrupt status.
 */
uint32_t dacc_get_interrupt_status(Dacc *p_dacc)
{
	return p_dacc->DACC_ISR;
  400614:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
  400616:	4770      	bx	lr

00400618 <dacc_write_conversion_data>:
 * \param ul_data The data to be transferred to analog value. 
 * \param channel The channel to convert the data ul_data
 */
void dacc_write_conversion_data(Dacc *p_dacc, uint32_t ul_data, uint32_t channel)
{
	p_dacc->DACC_CDR[channel] = ul_data;
  400618:	3206      	adds	r2, #6
  40061a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  40061e:	6051      	str	r1, [r2, #4]
  400620:	4770      	bx	lr

00400622 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400622:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  400626:	6a08      	ldr	r0, [r1, #32]
}
  400628:	4770      	bx	lr

0040062a <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  40062a:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  40062c:	010b      	lsls	r3, r1, #4
  40062e:	4293      	cmp	r3, r2
  400630:	d914      	bls.n	40065c <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400632:	00c9      	lsls	r1, r1, #3
  400634:	084b      	lsrs	r3, r1, #1
  400636:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  40063a:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  40063e:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400640:	1e5c      	subs	r4, r3, #1
  400642:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400646:	428c      	cmp	r4, r1
  400648:	d901      	bls.n	40064e <usart_set_async_baudrate+0x24>
		return 1;
  40064a:	2001      	movs	r0, #1
  40064c:	e017      	b.n	40067e <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  40064e:	6841      	ldr	r1, [r0, #4]
  400650:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400654:	6041      	str	r1, [r0, #4]
  400656:	e00c      	b.n	400672 <usart_set_async_baudrate+0x48>
		return 1;
  400658:	2001      	movs	r0, #1
  40065a:	e010      	b.n	40067e <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40065c:	0859      	lsrs	r1, r3, #1
  40065e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  400662:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  400666:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400668:	1e5c      	subs	r4, r3, #1
  40066a:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  40066e:	428c      	cmp	r4, r1
  400670:	d8f2      	bhi.n	400658 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400672:	0412      	lsls	r2, r2, #16
  400674:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400678:	431a      	orrs	r2, r3
  40067a:	6202      	str	r2, [r0, #32]

	return 0;
  40067c:	2000      	movs	r0, #0
}
  40067e:	f85d 4b04 	ldr.w	r4, [sp], #4
  400682:	4770      	bx	lr

00400684 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400684:	4b08      	ldr	r3, [pc, #32]	; (4006a8 <usart_reset+0x24>)
  400686:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  40068a:	2300      	movs	r3, #0
  40068c:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  40068e:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400690:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400692:	2388      	movs	r3, #136	; 0x88
  400694:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400696:	2324      	movs	r3, #36	; 0x24
  400698:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  40069a:	f44f 7380 	mov.w	r3, #256	; 0x100
  40069e:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  4006a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  4006a4:	6003      	str	r3, [r0, #0]
  4006a6:	4770      	bx	lr
  4006a8:	55534100 	.word	0x55534100

004006ac <usart_init_rs232>:
{
  4006ac:	b570      	push	{r4, r5, r6, lr}
  4006ae:	4605      	mov	r5, r0
  4006b0:	460c      	mov	r4, r1
  4006b2:	4616      	mov	r6, r2
	usart_reset(p_usart);
  4006b4:	4b0f      	ldr	r3, [pc, #60]	; (4006f4 <usart_init_rs232+0x48>)
  4006b6:	4798      	blx	r3
	ul_reg_val = 0;
  4006b8:	2200      	movs	r2, #0
  4006ba:	4b0f      	ldr	r3, [pc, #60]	; (4006f8 <usart_init_rs232+0x4c>)
  4006bc:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4006be:	b1a4      	cbz	r4, 4006ea <usart_init_rs232+0x3e>
  4006c0:	4632      	mov	r2, r6
  4006c2:	6821      	ldr	r1, [r4, #0]
  4006c4:	4628      	mov	r0, r5
  4006c6:	4b0d      	ldr	r3, [pc, #52]	; (4006fc <usart_init_rs232+0x50>)
  4006c8:	4798      	blx	r3
  4006ca:	4602      	mov	r2, r0
  4006cc:	b978      	cbnz	r0, 4006ee <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4006ce:	6863      	ldr	r3, [r4, #4]
  4006d0:	68a1      	ldr	r1, [r4, #8]
  4006d2:	430b      	orrs	r3, r1
  4006d4:	6921      	ldr	r1, [r4, #16]
  4006d6:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4006d8:	68e1      	ldr	r1, [r4, #12]
  4006da:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4006dc:	4906      	ldr	r1, [pc, #24]	; (4006f8 <usart_init_rs232+0x4c>)
  4006de:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  4006e0:	6869      	ldr	r1, [r5, #4]
  4006e2:	430b      	orrs	r3, r1
  4006e4:	606b      	str	r3, [r5, #4]
}
  4006e6:	4610      	mov	r0, r2
  4006e8:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  4006ea:	2201      	movs	r2, #1
  4006ec:	e7fb      	b.n	4006e6 <usart_init_rs232+0x3a>
  4006ee:	2201      	movs	r2, #1
  4006f0:	e7f9      	b.n	4006e6 <usart_init_rs232+0x3a>
  4006f2:	bf00      	nop
  4006f4:	00400685 	.word	0x00400685
  4006f8:	204009f4 	.word	0x204009f4
  4006fc:	0040062b 	.word	0x0040062b

00400700 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  400700:	2340      	movs	r3, #64	; 0x40
  400702:	6003      	str	r3, [r0, #0]
  400704:	4770      	bx	lr

00400706 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  400706:	2310      	movs	r3, #16
  400708:	6003      	str	r3, [r0, #0]
  40070a:	4770      	bx	lr

0040070c <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  40070c:	6943      	ldr	r3, [r0, #20]
  40070e:	f013 0f02 	tst.w	r3, #2
  400712:	d004      	beq.n	40071e <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  400714:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400718:	61c1      	str	r1, [r0, #28]
	return 0;
  40071a:	2000      	movs	r0, #0
  40071c:	4770      	bx	lr
		return 1;
  40071e:	2001      	movs	r0, #1
}
  400720:	4770      	bx	lr

00400722 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400722:	6943      	ldr	r3, [r0, #20]
  400724:	f013 0f01 	tst.w	r3, #1
  400728:	d005      	beq.n	400736 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40072a:	6983      	ldr	r3, [r0, #24]
  40072c:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400730:	600b      	str	r3, [r1, #0]
	return 0;
  400732:	2000      	movs	r0, #0
  400734:	4770      	bx	lr
		return 1;
  400736:	2001      	movs	r0, #1
}
  400738:	4770      	bx	lr
	...

0040073c <usart_serial_write_packet>:
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
  40073c:	2a00      	cmp	r2, #0
  40073e:	d054      	beq.n	4007ea <usart_serial_write_packet+0xae>
{
  400740:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400744:	4692      	mov	sl, r2
  400746:	4606      	mov	r6, r0
  400748:	460f      	mov	r7, r1
  40074a:	448a      	add	sl, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40074c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 400808 <usart_serial_write_packet+0xcc>
		while (uart_write((Uart*)p_usart, c)!=0);
  400750:	4d27      	ldr	r5, [pc, #156]	; (4007f0 <usart_serial_write_packet+0xb4>)
		return 1;
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400752:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 40080c <usart_serial_write_packet+0xd0>
  400756:	e006      	b.n	400766 <usart_serial_write_packet+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  400758:	4621      	mov	r1, r4
  40075a:	4640      	mov	r0, r8
  40075c:	47a8      	blx	r5
  40075e:	2800      	cmp	r0, #0
  400760:	d1fa      	bne.n	400758 <usart_serial_write_packet+0x1c>
	while (len) {
  400762:	45ba      	cmp	sl, r7
  400764:	d03e      	beq.n	4007e4 <usart_serial_write_packet+0xa8>
		usart_serial_putchar(usart, *data);
  400766:	f817 4b01 	ldrb.w	r4, [r7], #1
	if (UART0 == (Uart*)p_usart) {
  40076a:	4546      	cmp	r6, r8
  40076c:	d0f4      	beq.n	400758 <usart_serial_write_packet+0x1c>
	if (UART1 == (Uart*)p_usart) {
  40076e:	454e      	cmp	r6, r9
  400770:	d016      	beq.n	4007a0 <usart_serial_write_packet+0x64>
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  400772:	4b20      	ldr	r3, [pc, #128]	; (4007f4 <usart_serial_write_packet+0xb8>)
  400774:	429e      	cmp	r6, r3
  400776:	d019      	beq.n	4007ac <usart_serial_write_packet+0x70>
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  400778:	4b1f      	ldr	r3, [pc, #124]	; (4007f8 <usart_serial_write_packet+0xbc>)
  40077a:	429e      	cmp	r6, r3
  40077c:	d01c      	beq.n	4007b8 <usart_serial_write_packet+0x7c>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40077e:	4b1f      	ldr	r3, [pc, #124]	; (4007fc <usart_serial_write_packet+0xc0>)
  400780:	429e      	cmp	r6, r3
  400782:	d01f      	beq.n	4007c4 <usart_serial_write_packet+0x88>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400784:	4b1e      	ldr	r3, [pc, #120]	; (400800 <usart_serial_write_packet+0xc4>)
  400786:	429e      	cmp	r6, r3
  400788:	d024      	beq.n	4007d4 <usart_serial_write_packet+0x98>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  40078a:	4b1e      	ldr	r3, [pc, #120]	; (400804 <usart_serial_write_packet+0xc8>)
  40078c:	429e      	cmp	r6, r3
  40078e:	d1e8      	bne.n	400762 <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  400790:	f8df b07c 	ldr.w	fp, [pc, #124]	; 400810 <usart_serial_write_packet+0xd4>
  400794:	4621      	mov	r1, r4
  400796:	481b      	ldr	r0, [pc, #108]	; (400804 <usart_serial_write_packet+0xc8>)
  400798:	47d8      	blx	fp
  40079a:	2800      	cmp	r0, #0
  40079c:	d1fa      	bne.n	400794 <usart_serial_write_packet+0x58>
  40079e:	e7e0      	b.n	400762 <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  4007a0:	4621      	mov	r1, r4
  4007a2:	4648      	mov	r0, r9
  4007a4:	47a8      	blx	r5
  4007a6:	2800      	cmp	r0, #0
  4007a8:	d1fa      	bne.n	4007a0 <usart_serial_write_packet+0x64>
  4007aa:	e7da      	b.n	400762 <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  4007ac:	4621      	mov	r1, r4
  4007ae:	4811      	ldr	r0, [pc, #68]	; (4007f4 <usart_serial_write_packet+0xb8>)
  4007b0:	47a8      	blx	r5
  4007b2:	2800      	cmp	r0, #0
  4007b4:	d1fa      	bne.n	4007ac <usart_serial_write_packet+0x70>
  4007b6:	e7d4      	b.n	400762 <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  4007b8:	4621      	mov	r1, r4
  4007ba:	480f      	ldr	r0, [pc, #60]	; (4007f8 <usart_serial_write_packet+0xbc>)
  4007bc:	47a8      	blx	r5
  4007be:	2800      	cmp	r0, #0
  4007c0:	d1fa      	bne.n	4007b8 <usart_serial_write_packet+0x7c>
  4007c2:	e7ce      	b.n	400762 <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  4007c4:	f8df b048 	ldr.w	fp, [pc, #72]	; 400810 <usart_serial_write_packet+0xd4>
  4007c8:	4621      	mov	r1, r4
  4007ca:	480c      	ldr	r0, [pc, #48]	; (4007fc <usart_serial_write_packet+0xc0>)
  4007cc:	47d8      	blx	fp
  4007ce:	2800      	cmp	r0, #0
  4007d0:	d1fa      	bne.n	4007c8 <usart_serial_write_packet+0x8c>
  4007d2:	e7c6      	b.n	400762 <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  4007d4:	f8df b038 	ldr.w	fp, [pc, #56]	; 400810 <usart_serial_write_packet+0xd4>
  4007d8:	4621      	mov	r1, r4
  4007da:	4809      	ldr	r0, [pc, #36]	; (400800 <usart_serial_write_packet+0xc4>)
  4007dc:	47d8      	blx	fp
  4007de:	2800      	cmp	r0, #0
  4007e0:	d1fa      	bne.n	4007d8 <usart_serial_write_packet+0x9c>
  4007e2:	e7be      	b.n	400762 <usart_serial_write_packet+0x26>
		len--;
		data++;
	}
	return STATUS_OK;
}
  4007e4:	2000      	movs	r0, #0
  4007e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4007ea:	2000      	movs	r0, #0
  4007ec:	4770      	bx	lr
  4007ee:	bf00      	nop
  4007f0:	00400815 	.word	0x00400815
  4007f4:	400e1a00 	.word	0x400e1a00
  4007f8:	400e1c00 	.word	0x400e1c00
  4007fc:	40024000 	.word	0x40024000
  400800:	40028000 	.word	0x40028000
  400804:	4002c000 	.word	0x4002c000
  400808:	400e0800 	.word	0x400e0800
  40080c:	400e0a00 	.word	0x400e0a00
  400810:	0040070d 	.word	0x0040070d

00400814 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400814:	6943      	ldr	r3, [r0, #20]
  400816:	f013 0f02 	tst.w	r3, #2
  40081a:	d002      	beq.n	400822 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  40081c:	61c1      	str	r1, [r0, #28]
	return 0;
  40081e:	2000      	movs	r0, #0
  400820:	4770      	bx	lr
		return 1;
  400822:	2001      	movs	r0, #1
}
  400824:	4770      	bx	lr
	...

00400828 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400828:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40082a:	4810      	ldr	r0, [pc, #64]	; (40086c <sysclk_init+0x44>)
  40082c:	4b10      	ldr	r3, [pc, #64]	; (400870 <sysclk_init+0x48>)
  40082e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400830:	213e      	movs	r1, #62	; 0x3e
  400832:	2000      	movs	r0, #0
  400834:	4b0f      	ldr	r3, [pc, #60]	; (400874 <sysclk_init+0x4c>)
  400836:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400838:	4c0f      	ldr	r4, [pc, #60]	; (400878 <sysclk_init+0x50>)
  40083a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40083c:	2800      	cmp	r0, #0
  40083e:	d0fc      	beq.n	40083a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400840:	4b0e      	ldr	r3, [pc, #56]	; (40087c <sysclk_init+0x54>)
  400842:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400844:	4a0e      	ldr	r2, [pc, #56]	; (400880 <sysclk_init+0x58>)
  400846:	4b0f      	ldr	r3, [pc, #60]	; (400884 <sysclk_init+0x5c>)
  400848:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  40084a:	4c0f      	ldr	r4, [pc, #60]	; (400888 <sysclk_init+0x60>)
  40084c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40084e:	2800      	cmp	r0, #0
  400850:	d0fc      	beq.n	40084c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400852:	2002      	movs	r0, #2
  400854:	4b0d      	ldr	r3, [pc, #52]	; (40088c <sysclk_init+0x64>)
  400856:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400858:	2000      	movs	r0, #0
  40085a:	4b0d      	ldr	r3, [pc, #52]	; (400890 <sysclk_init+0x68>)
  40085c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40085e:	4b0d      	ldr	r3, [pc, #52]	; (400894 <sysclk_init+0x6c>)
  400860:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400862:	4802      	ldr	r0, [pc, #8]	; (40086c <sysclk_init+0x44>)
  400864:	4b02      	ldr	r3, [pc, #8]	; (400870 <sysclk_init+0x48>)
  400866:	4798      	blx	r3
  400868:	bd10      	pop	{r4, pc}
  40086a:	bf00      	nop
  40086c:	11e1a300 	.word	0x11e1a300
  400870:	00400fb9 	.word	0x00400fb9
  400874:	00400d09 	.word	0x00400d09
  400878:	00400d5d 	.word	0x00400d5d
  40087c:	00400d6d 	.word	0x00400d6d
  400880:	20183f01 	.word	0x20183f01
  400884:	400e0600 	.word	0x400e0600
  400888:	00400d7d 	.word	0x00400d7d
  40088c:	00400c6d 	.word	0x00400c6d
  400890:	00400ca5 	.word	0x00400ca5
  400894:	00400ead 	.word	0x00400ead

00400898 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40089a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40089e:	4b5c      	ldr	r3, [pc, #368]	; (400a10 <board_init+0x178>)
  4008a0:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  4008a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4008a6:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4008aa:	4b5a      	ldr	r3, [pc, #360]	; (400a14 <board_init+0x17c>)
  4008ac:	2200      	movs	r2, #0
  4008ae:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4008b2:	695a      	ldr	r2, [r3, #20]
  4008b4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4008b8:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  4008ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4008be:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4008c2:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4008c6:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4008ca:	f007 0007 	and.w	r0, r7, #7
  4008ce:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4008d0:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4008d4:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  4008d8:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  4008dc:	f3bf 8f4f 	dsb	sy
  4008e0:	f04f 34ff 	mov.w	r4, #4294967295
  4008e4:	fa04 fc00 	lsl.w	ip, r4, r0
  4008e8:	fa06 f000 	lsl.w	r0, r6, r0
  4008ec:	fa04 f40e 	lsl.w	r4, r4, lr
  4008f0:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  4008f4:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  4008f6:	463a      	mov	r2, r7
  4008f8:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  4008fa:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  4008fe:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400902:	3a01      	subs	r2, #1
  400904:	4423      	add	r3, r4
  400906:	f1b2 3fff 	cmp.w	r2, #4294967295
  40090a:	d1f6      	bne.n	4008fa <board_init+0x62>
        } while(sets--);
  40090c:	3e01      	subs	r6, #1
  40090e:	4460      	add	r0, ip
  400910:	f1b6 3fff 	cmp.w	r6, #4294967295
  400914:	d1ef      	bne.n	4008f6 <board_init+0x5e>
  400916:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  40091a:	4b3e      	ldr	r3, [pc, #248]	; (400a14 <board_init+0x17c>)
  40091c:	695a      	ldr	r2, [r3, #20]
  40091e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400922:	615a      	str	r2, [r3, #20]
  400924:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400928:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40092c:	4a3a      	ldr	r2, [pc, #232]	; (400a18 <board_init+0x180>)
  40092e:	493b      	ldr	r1, [pc, #236]	; (400a1c <board_init+0x184>)
  400930:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400932:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400936:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400938:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40093c:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400940:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400944:	f022 0201 	bic.w	r2, r2, #1
  400948:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  40094c:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400950:	f022 0201 	bic.w	r2, r2, #1
  400954:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400958:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40095c:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400960:	200a      	movs	r0, #10
  400962:	4c2f      	ldr	r4, [pc, #188]	; (400a20 <board_init+0x188>)
  400964:	47a0      	blx	r4
  400966:	200b      	movs	r0, #11
  400968:	47a0      	blx	r4
  40096a:	200c      	movs	r0, #12
  40096c:	47a0      	blx	r4
  40096e:	2010      	movs	r0, #16
  400970:	47a0      	blx	r4
  400972:	2011      	movs	r0, #17
  400974:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400976:	4b2b      	ldr	r3, [pc, #172]	; (400a24 <board_init+0x18c>)
  400978:	f44f 7280 	mov.w	r2, #256	; 0x100
  40097c:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40097e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400982:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400984:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400988:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40098c:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40098e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400992:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400994:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400998:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  40099a:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  40099c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4009a0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4009a2:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4009a6:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4009a8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4009aa:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4009ae:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4009b0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4009b4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4009b8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4009bc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4009c0:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4009c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4009c6:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4009c8:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4009ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4009ce:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4009d0:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4009d4:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4009d6:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4009d8:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4009dc:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4009de:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  4009e0:	4a11      	ldr	r2, [pc, #68]	; (400a28 <board_init+0x190>)
  4009e2:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  4009e6:	f043 0310 	orr.w	r3, r3, #16
  4009ea:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  4009ee:	4b0f      	ldr	r3, [pc, #60]	; (400a2c <board_init+0x194>)
  4009f0:	2210      	movs	r2, #16
  4009f2:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4009f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4009f8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4009fa:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4009fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400a00:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400a02:	4311      	orrs	r1, r2
  400a04:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400a06:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400a08:	4311      	orrs	r1, r2
  400a0a:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400a0c:	605a      	str	r2, [r3, #4]
  400a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400a10:	400e1850 	.word	0x400e1850
  400a14:	e000ed00 	.word	0xe000ed00
  400a18:	400e0c00 	.word	0x400e0c00
  400a1c:	5a00080c 	.word	0x5a00080c
  400a20:	00400d8d 	.word	0x00400d8d
  400a24:	400e1200 	.word	0x400e1200
  400a28:	40088000 	.word	0x40088000
  400a2c:	400e1000 	.word	0x400e1000

00400a30 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400a30:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400a32:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400a36:	d03a      	beq.n	400aae <pio_set_peripheral+0x7e>
  400a38:	d813      	bhi.n	400a62 <pio_set_peripheral+0x32>
  400a3a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400a3e:	d025      	beq.n	400a8c <pio_set_peripheral+0x5c>
  400a40:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400a44:	d10a      	bne.n	400a5c <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400a46:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400a48:	4313      	orrs	r3, r2
  400a4a:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400a4c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400a4e:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400a50:	400b      	ands	r3, r1
  400a52:	ea23 0302 	bic.w	r3, r3, r2
  400a56:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400a58:	6042      	str	r2, [r0, #4]
  400a5a:	4770      	bx	lr
	switch (ul_type) {
  400a5c:	2900      	cmp	r1, #0
  400a5e:	d1fb      	bne.n	400a58 <pio_set_peripheral+0x28>
  400a60:	4770      	bx	lr
  400a62:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400a66:	d021      	beq.n	400aac <pio_set_peripheral+0x7c>
  400a68:	d809      	bhi.n	400a7e <pio_set_peripheral+0x4e>
  400a6a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400a6e:	d1f3      	bne.n	400a58 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400a70:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400a72:	4313      	orrs	r3, r2
  400a74:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400a76:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400a78:	4313      	orrs	r3, r2
  400a7a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400a7c:	e7ec      	b.n	400a58 <pio_set_peripheral+0x28>
	switch (ul_type) {
  400a7e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400a82:	d013      	beq.n	400aac <pio_set_peripheral+0x7c>
  400a84:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400a88:	d010      	beq.n	400aac <pio_set_peripheral+0x7c>
  400a8a:	e7e5      	b.n	400a58 <pio_set_peripheral+0x28>
{
  400a8c:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400a8e:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400a90:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400a92:	43d3      	mvns	r3, r2
  400a94:	4021      	ands	r1, r4
  400a96:	461c      	mov	r4, r3
  400a98:	4019      	ands	r1, r3
  400a9a:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400a9c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400a9e:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400aa0:	400b      	ands	r3, r1
  400aa2:	4023      	ands	r3, r4
  400aa4:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400aa6:	6042      	str	r2, [r0, #4]
}
  400aa8:	f85d 4b04 	ldr.w	r4, [sp], #4
  400aac:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400aae:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400ab0:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400ab2:	400b      	ands	r3, r1
  400ab4:	ea23 0302 	bic.w	r3, r3, r2
  400ab8:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400aba:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400abc:	4313      	orrs	r3, r2
  400abe:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400ac0:	e7ca      	b.n	400a58 <pio_set_peripheral+0x28>

00400ac2 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400ac2:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400ac4:	f012 0f01 	tst.w	r2, #1
  400ac8:	d10d      	bne.n	400ae6 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400aca:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400acc:	f012 0f0a 	tst.w	r2, #10
  400ad0:	d00b      	beq.n	400aea <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  400ad2:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400ad4:	f012 0f02 	tst.w	r2, #2
  400ad8:	d109      	bne.n	400aee <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400ada:	f012 0f08 	tst.w	r2, #8
  400ade:	d008      	beq.n	400af2 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400ae0:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400ae4:	e005      	b.n	400af2 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  400ae6:	6641      	str	r1, [r0, #100]	; 0x64
  400ae8:	e7f0      	b.n	400acc <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400aea:	6241      	str	r1, [r0, #36]	; 0x24
  400aec:	e7f2      	b.n	400ad4 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400aee:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400af2:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400af4:	6001      	str	r1, [r0, #0]
  400af6:	4770      	bx	lr

00400af8 <pio_set_output>:
{
  400af8:	b410      	push	{r4}
  400afa:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400afc:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400afe:	b94c      	cbnz	r4, 400b14 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400b00:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400b02:	b14b      	cbz	r3, 400b18 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400b04:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400b06:	b94a      	cbnz	r2, 400b1c <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400b08:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400b0a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400b0c:	6001      	str	r1, [r0, #0]
}
  400b0e:	f85d 4b04 	ldr.w	r4, [sp], #4
  400b12:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400b14:	6641      	str	r1, [r0, #100]	; 0x64
  400b16:	e7f4      	b.n	400b02 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400b18:	6541      	str	r1, [r0, #84]	; 0x54
  400b1a:	e7f4      	b.n	400b06 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400b1c:	6301      	str	r1, [r0, #48]	; 0x30
  400b1e:	e7f4      	b.n	400b0a <pio_set_output+0x12>

00400b20 <pio_configure>:
{
  400b20:	b570      	push	{r4, r5, r6, lr}
  400b22:	b082      	sub	sp, #8
  400b24:	4605      	mov	r5, r0
  400b26:	4616      	mov	r6, r2
  400b28:	461c      	mov	r4, r3
	switch (ul_type) {
  400b2a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400b2e:	d014      	beq.n	400b5a <pio_configure+0x3a>
  400b30:	d90a      	bls.n	400b48 <pio_configure+0x28>
  400b32:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400b36:	d024      	beq.n	400b82 <pio_configure+0x62>
  400b38:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400b3c:	d021      	beq.n	400b82 <pio_configure+0x62>
  400b3e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400b42:	d017      	beq.n	400b74 <pio_configure+0x54>
		return 0;
  400b44:	2000      	movs	r0, #0
  400b46:	e01a      	b.n	400b7e <pio_configure+0x5e>
	switch (ul_type) {
  400b48:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400b4c:	d005      	beq.n	400b5a <pio_configure+0x3a>
  400b4e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400b52:	d002      	beq.n	400b5a <pio_configure+0x3a>
  400b54:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400b58:	d1f4      	bne.n	400b44 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  400b5a:	4632      	mov	r2, r6
  400b5c:	4628      	mov	r0, r5
  400b5e:	4b11      	ldr	r3, [pc, #68]	; (400ba4 <pio_configure+0x84>)
  400b60:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400b62:	f014 0f01 	tst.w	r4, #1
  400b66:	d102      	bne.n	400b6e <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  400b68:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  400b6a:	2001      	movs	r0, #1
  400b6c:	e007      	b.n	400b7e <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  400b6e:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  400b70:	2001      	movs	r0, #1
  400b72:	e004      	b.n	400b7e <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  400b74:	461a      	mov	r2, r3
  400b76:	4631      	mov	r1, r6
  400b78:	4b0b      	ldr	r3, [pc, #44]	; (400ba8 <pio_configure+0x88>)
  400b7a:	4798      	blx	r3
	return 1;
  400b7c:	2001      	movs	r0, #1
}
  400b7e:	b002      	add	sp, #8
  400b80:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400b82:	f004 0301 	and.w	r3, r4, #1
  400b86:	9300      	str	r3, [sp, #0]
  400b88:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400b8c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400b90:	bf14      	ite	ne
  400b92:	2200      	movne	r2, #0
  400b94:	2201      	moveq	r2, #1
  400b96:	4631      	mov	r1, r6
  400b98:	4628      	mov	r0, r5
  400b9a:	4c04      	ldr	r4, [pc, #16]	; (400bac <pio_configure+0x8c>)
  400b9c:	47a0      	blx	r4
	return 1;
  400b9e:	2001      	movs	r0, #1
		break;
  400ba0:	e7ed      	b.n	400b7e <pio_configure+0x5e>
  400ba2:	bf00      	nop
  400ba4:	00400a31 	.word	0x00400a31
  400ba8:	00400ac3 	.word	0x00400ac3
  400bac:	00400af9 	.word	0x00400af9

00400bb0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400bb0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400bb2:	4770      	bx	lr

00400bb4 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400bb4:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400bb6:	4770      	bx	lr

00400bb8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400bbc:	4604      	mov	r4, r0
  400bbe:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400bc0:	4b0e      	ldr	r3, [pc, #56]	; (400bfc <pio_handler_process+0x44>)
  400bc2:	4798      	blx	r3
  400bc4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400bc6:	4620      	mov	r0, r4
  400bc8:	4b0d      	ldr	r3, [pc, #52]	; (400c00 <pio_handler_process+0x48>)
  400bca:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400bcc:	4005      	ands	r5, r0
  400bce:	d013      	beq.n	400bf8 <pio_handler_process+0x40>
  400bd0:	4c0c      	ldr	r4, [pc, #48]	; (400c04 <pio_handler_process+0x4c>)
  400bd2:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400bd6:	e003      	b.n	400be0 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400bd8:	42b4      	cmp	r4, r6
  400bda:	d00d      	beq.n	400bf8 <pio_handler_process+0x40>
  400bdc:	3410      	adds	r4, #16
		while (status != 0) {
  400bde:	b15d      	cbz	r5, 400bf8 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400be0:	6820      	ldr	r0, [r4, #0]
  400be2:	4540      	cmp	r0, r8
  400be4:	d1f8      	bne.n	400bd8 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400be6:	6861      	ldr	r1, [r4, #4]
  400be8:	4229      	tst	r1, r5
  400bea:	d0f5      	beq.n	400bd8 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400bec:	68e3      	ldr	r3, [r4, #12]
  400bee:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400bf0:	6863      	ldr	r3, [r4, #4]
  400bf2:	ea25 0503 	bic.w	r5, r5, r3
  400bf6:	e7ef      	b.n	400bd8 <pio_handler_process+0x20>
  400bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400bfc:	00400bb1 	.word	0x00400bb1
  400c00:	00400bb5 	.word	0x00400bb5
  400c04:	204009f8 	.word	0x204009f8

00400c08 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400c08:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400c0a:	210a      	movs	r1, #10
  400c0c:	4801      	ldr	r0, [pc, #4]	; (400c14 <PIOA_Handler+0xc>)
  400c0e:	4b02      	ldr	r3, [pc, #8]	; (400c18 <PIOA_Handler+0x10>)
  400c10:	4798      	blx	r3
  400c12:	bd08      	pop	{r3, pc}
  400c14:	400e0e00 	.word	0x400e0e00
  400c18:	00400bb9 	.word	0x00400bb9

00400c1c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400c1c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400c1e:	210b      	movs	r1, #11
  400c20:	4801      	ldr	r0, [pc, #4]	; (400c28 <PIOB_Handler+0xc>)
  400c22:	4b02      	ldr	r3, [pc, #8]	; (400c2c <PIOB_Handler+0x10>)
  400c24:	4798      	blx	r3
  400c26:	bd08      	pop	{r3, pc}
  400c28:	400e1000 	.word	0x400e1000
  400c2c:	00400bb9 	.word	0x00400bb9

00400c30 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400c30:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400c32:	210c      	movs	r1, #12
  400c34:	4801      	ldr	r0, [pc, #4]	; (400c3c <PIOC_Handler+0xc>)
  400c36:	4b02      	ldr	r3, [pc, #8]	; (400c40 <PIOC_Handler+0x10>)
  400c38:	4798      	blx	r3
  400c3a:	bd08      	pop	{r3, pc}
  400c3c:	400e1200 	.word	0x400e1200
  400c40:	00400bb9 	.word	0x00400bb9

00400c44 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400c44:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400c46:	2110      	movs	r1, #16
  400c48:	4801      	ldr	r0, [pc, #4]	; (400c50 <PIOD_Handler+0xc>)
  400c4a:	4b02      	ldr	r3, [pc, #8]	; (400c54 <PIOD_Handler+0x10>)
  400c4c:	4798      	blx	r3
  400c4e:	bd08      	pop	{r3, pc}
  400c50:	400e1400 	.word	0x400e1400
  400c54:	00400bb9 	.word	0x00400bb9

00400c58 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400c58:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400c5a:	2111      	movs	r1, #17
  400c5c:	4801      	ldr	r0, [pc, #4]	; (400c64 <PIOE_Handler+0xc>)
  400c5e:	4b02      	ldr	r3, [pc, #8]	; (400c68 <PIOE_Handler+0x10>)
  400c60:	4798      	blx	r3
  400c62:	bd08      	pop	{r3, pc}
  400c64:	400e1600 	.word	0x400e1600
  400c68:	00400bb9 	.word	0x00400bb9

00400c6c <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400c6c:	2803      	cmp	r0, #3
  400c6e:	d011      	beq.n	400c94 <pmc_mck_set_division+0x28>
  400c70:	2804      	cmp	r0, #4
  400c72:	d012      	beq.n	400c9a <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400c74:	2802      	cmp	r0, #2
  400c76:	bf0c      	ite	eq
  400c78:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400c7c:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400c7e:	4a08      	ldr	r2, [pc, #32]	; (400ca0 <pmc_mck_set_division+0x34>)
  400c80:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400c82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400c86:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400c88:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400c8a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400c8c:	f013 0f08 	tst.w	r3, #8
  400c90:	d0fb      	beq.n	400c8a <pmc_mck_set_division+0x1e>
}
  400c92:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400c94:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400c98:	e7f1      	b.n	400c7e <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400c9a:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400c9e:	e7ee      	b.n	400c7e <pmc_mck_set_division+0x12>
  400ca0:	400e0600 	.word	0x400e0600

00400ca4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400ca4:	4a17      	ldr	r2, [pc, #92]	; (400d04 <pmc_switch_mck_to_pllack+0x60>)
  400ca6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400ca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400cac:	4318      	orrs	r0, r3
  400cae:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400cb0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400cb2:	f013 0f08 	tst.w	r3, #8
  400cb6:	d10a      	bne.n	400cce <pmc_switch_mck_to_pllack+0x2a>
  400cb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400cbc:	4911      	ldr	r1, [pc, #68]	; (400d04 <pmc_switch_mck_to_pllack+0x60>)
  400cbe:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400cc0:	f012 0f08 	tst.w	r2, #8
  400cc4:	d103      	bne.n	400cce <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400cc6:	3b01      	subs	r3, #1
  400cc8:	d1f9      	bne.n	400cbe <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400cca:	2001      	movs	r0, #1
  400ccc:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400cce:	4a0d      	ldr	r2, [pc, #52]	; (400d04 <pmc_switch_mck_to_pllack+0x60>)
  400cd0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400cd2:	f023 0303 	bic.w	r3, r3, #3
  400cd6:	f043 0302 	orr.w	r3, r3, #2
  400cda:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400cdc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400cde:	f013 0f08 	tst.w	r3, #8
  400ce2:	d10a      	bne.n	400cfa <pmc_switch_mck_to_pllack+0x56>
  400ce4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400ce8:	4906      	ldr	r1, [pc, #24]	; (400d04 <pmc_switch_mck_to_pllack+0x60>)
  400cea:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400cec:	f012 0f08 	tst.w	r2, #8
  400cf0:	d105      	bne.n	400cfe <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400cf2:	3b01      	subs	r3, #1
  400cf4:	d1f9      	bne.n	400cea <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400cf6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400cf8:	4770      	bx	lr
	return 0;
  400cfa:	2000      	movs	r0, #0
  400cfc:	4770      	bx	lr
  400cfe:	2000      	movs	r0, #0
  400d00:	4770      	bx	lr
  400d02:	bf00      	nop
  400d04:	400e0600 	.word	0x400e0600

00400d08 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400d08:	b9a0      	cbnz	r0, 400d34 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400d0a:	480e      	ldr	r0, [pc, #56]	; (400d44 <pmc_switch_mainck_to_xtal+0x3c>)
  400d0c:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400d0e:	0209      	lsls	r1, r1, #8
  400d10:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400d12:	4a0d      	ldr	r2, [pc, #52]	; (400d48 <pmc_switch_mainck_to_xtal+0x40>)
  400d14:	401a      	ands	r2, r3
  400d16:	4b0d      	ldr	r3, [pc, #52]	; (400d4c <pmc_switch_mainck_to_xtal+0x44>)
  400d18:	4313      	orrs	r3, r2
  400d1a:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400d1c:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400d1e:	4602      	mov	r2, r0
  400d20:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400d22:	f013 0f01 	tst.w	r3, #1
  400d26:	d0fb      	beq.n	400d20 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400d28:	4a06      	ldr	r2, [pc, #24]	; (400d44 <pmc_switch_mainck_to_xtal+0x3c>)
  400d2a:	6a11      	ldr	r1, [r2, #32]
  400d2c:	4b08      	ldr	r3, [pc, #32]	; (400d50 <pmc_switch_mainck_to_xtal+0x48>)
  400d2e:	430b      	orrs	r3, r1
  400d30:	6213      	str	r3, [r2, #32]
  400d32:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400d34:	4903      	ldr	r1, [pc, #12]	; (400d44 <pmc_switch_mainck_to_xtal+0x3c>)
  400d36:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400d38:	4a06      	ldr	r2, [pc, #24]	; (400d54 <pmc_switch_mainck_to_xtal+0x4c>)
  400d3a:	401a      	ands	r2, r3
  400d3c:	4b06      	ldr	r3, [pc, #24]	; (400d58 <pmc_switch_mainck_to_xtal+0x50>)
  400d3e:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400d40:	620b      	str	r3, [r1, #32]
  400d42:	4770      	bx	lr
  400d44:	400e0600 	.word	0x400e0600
  400d48:	ffc8fffc 	.word	0xffc8fffc
  400d4c:	00370001 	.word	0x00370001
  400d50:	01370000 	.word	0x01370000
  400d54:	fec8fffc 	.word	0xfec8fffc
  400d58:	01370002 	.word	0x01370002

00400d5c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400d5c:	4b02      	ldr	r3, [pc, #8]	; (400d68 <pmc_osc_is_ready_mainck+0xc>)
  400d5e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400d60:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400d64:	4770      	bx	lr
  400d66:	bf00      	nop
  400d68:	400e0600 	.word	0x400e0600

00400d6c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400d6c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400d70:	4b01      	ldr	r3, [pc, #4]	; (400d78 <pmc_disable_pllack+0xc>)
  400d72:	629a      	str	r2, [r3, #40]	; 0x28
  400d74:	4770      	bx	lr
  400d76:	bf00      	nop
  400d78:	400e0600 	.word	0x400e0600

00400d7c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400d7c:	4b02      	ldr	r3, [pc, #8]	; (400d88 <pmc_is_locked_pllack+0xc>)
  400d7e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400d80:	f000 0002 	and.w	r0, r0, #2
  400d84:	4770      	bx	lr
  400d86:	bf00      	nop
  400d88:	400e0600 	.word	0x400e0600

00400d8c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400d8c:	283f      	cmp	r0, #63	; 0x3f
  400d8e:	d81e      	bhi.n	400dce <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400d90:	281f      	cmp	r0, #31
  400d92:	d80c      	bhi.n	400dae <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400d94:	4b11      	ldr	r3, [pc, #68]	; (400ddc <pmc_enable_periph_clk+0x50>)
  400d96:	699a      	ldr	r2, [r3, #24]
  400d98:	2301      	movs	r3, #1
  400d9a:	4083      	lsls	r3, r0
  400d9c:	4393      	bics	r3, r2
  400d9e:	d018      	beq.n	400dd2 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400da0:	2301      	movs	r3, #1
  400da2:	fa03 f000 	lsl.w	r0, r3, r0
  400da6:	4b0d      	ldr	r3, [pc, #52]	; (400ddc <pmc_enable_periph_clk+0x50>)
  400da8:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400daa:	2000      	movs	r0, #0
  400dac:	4770      	bx	lr
		ul_id -= 32;
  400dae:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400db0:	4b0a      	ldr	r3, [pc, #40]	; (400ddc <pmc_enable_periph_clk+0x50>)
  400db2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400db6:	2301      	movs	r3, #1
  400db8:	4083      	lsls	r3, r0
  400dba:	4393      	bics	r3, r2
  400dbc:	d00b      	beq.n	400dd6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400dbe:	2301      	movs	r3, #1
  400dc0:	fa03 f000 	lsl.w	r0, r3, r0
  400dc4:	4b05      	ldr	r3, [pc, #20]	; (400ddc <pmc_enable_periph_clk+0x50>)
  400dc6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400dca:	2000      	movs	r0, #0
  400dcc:	4770      	bx	lr
		return 1;
  400dce:	2001      	movs	r0, #1
  400dd0:	4770      	bx	lr
	return 0;
  400dd2:	2000      	movs	r0, #0
  400dd4:	4770      	bx	lr
  400dd6:	2000      	movs	r0, #0
}
  400dd8:	4770      	bx	lr
  400dda:	bf00      	nop
  400ddc:	400e0600 	.word	0x400e0600

00400de0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400de0:	e7fe      	b.n	400de0 <Dummy_Handler>
	...

00400de4 <Reset_Handler>:
{
  400de4:	b500      	push	{lr}
  400de6:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400de8:	4b25      	ldr	r3, [pc, #148]	; (400e80 <Reset_Handler+0x9c>)
  400dea:	4a26      	ldr	r2, [pc, #152]	; (400e84 <Reset_Handler+0xa0>)
  400dec:	429a      	cmp	r2, r3
  400dee:	d010      	beq.n	400e12 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  400df0:	4b25      	ldr	r3, [pc, #148]	; (400e88 <Reset_Handler+0xa4>)
  400df2:	4a23      	ldr	r2, [pc, #140]	; (400e80 <Reset_Handler+0x9c>)
  400df4:	429a      	cmp	r2, r3
  400df6:	d20c      	bcs.n	400e12 <Reset_Handler+0x2e>
  400df8:	3b01      	subs	r3, #1
  400dfa:	1a9b      	subs	r3, r3, r2
  400dfc:	f023 0303 	bic.w	r3, r3, #3
  400e00:	3304      	adds	r3, #4
  400e02:	4413      	add	r3, r2
  400e04:	491f      	ldr	r1, [pc, #124]	; (400e84 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  400e06:	f851 0b04 	ldr.w	r0, [r1], #4
  400e0a:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400e0e:	429a      	cmp	r2, r3
  400e10:	d1f9      	bne.n	400e06 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  400e12:	4b1e      	ldr	r3, [pc, #120]	; (400e8c <Reset_Handler+0xa8>)
  400e14:	4a1e      	ldr	r2, [pc, #120]	; (400e90 <Reset_Handler+0xac>)
  400e16:	429a      	cmp	r2, r3
  400e18:	d20a      	bcs.n	400e30 <Reset_Handler+0x4c>
  400e1a:	3b01      	subs	r3, #1
  400e1c:	1a9b      	subs	r3, r3, r2
  400e1e:	f023 0303 	bic.w	r3, r3, #3
  400e22:	3304      	adds	r3, #4
  400e24:	4413      	add	r3, r2
                *pDest++ = 0;
  400e26:	2100      	movs	r1, #0
  400e28:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400e2c:	4293      	cmp	r3, r2
  400e2e:	d1fb      	bne.n	400e28 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400e30:	4a18      	ldr	r2, [pc, #96]	; (400e94 <Reset_Handler+0xb0>)
  400e32:	4b19      	ldr	r3, [pc, #100]	; (400e98 <Reset_Handler+0xb4>)
  400e34:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400e38:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400e3a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400e3e:	fab3 f383 	clz	r3, r3
  400e42:	095b      	lsrs	r3, r3, #5
  400e44:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400e46:	b672      	cpsid	i
  __ASM volatile ("dmb");
  400e48:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400e4c:	2200      	movs	r2, #0
  400e4e:	4b13      	ldr	r3, [pc, #76]	; (400e9c <Reset_Handler+0xb8>)
  400e50:	701a      	strb	r2, [r3, #0]
	return flags;
  400e52:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400e54:	4a12      	ldr	r2, [pc, #72]	; (400ea0 <Reset_Handler+0xbc>)
  400e56:	6813      	ldr	r3, [r2, #0]
  400e58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400e5c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  400e5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400e62:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  400e66:	b129      	cbz	r1, 400e74 <Reset_Handler+0x90>
		cpu_irq_enable();
  400e68:	2201      	movs	r2, #1
  400e6a:	4b0c      	ldr	r3, [pc, #48]	; (400e9c <Reset_Handler+0xb8>)
  400e6c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  400e6e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400e72:	b662      	cpsie	i
        __libc_init_array();
  400e74:	4b0b      	ldr	r3, [pc, #44]	; (400ea4 <Reset_Handler+0xc0>)
  400e76:	4798      	blx	r3
        main();
  400e78:	4b0b      	ldr	r3, [pc, #44]	; (400ea8 <Reset_Handler+0xc4>)
  400e7a:	4798      	blx	r3
  400e7c:	e7fe      	b.n	400e7c <Reset_Handler+0x98>
  400e7e:	bf00      	nop
  400e80:	20400000 	.word	0x20400000
  400e84:	00404680 	.word	0x00404680
  400e88:	204009d8 	.word	0x204009d8
  400e8c:	2043b4e8 	.word	0x2043b4e8
  400e90:	204009d8 	.word	0x204009d8
  400e94:	e000ed00 	.word	0xe000ed00
  400e98:	00400000 	.word	0x00400000
  400e9c:	2040000a 	.word	0x2040000a
  400ea0:	e000ed88 	.word	0xe000ed88
  400ea4:	00401529 	.word	0x00401529
  400ea8:	004013ad 	.word	0x004013ad

00400eac <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400eac:	4b3b      	ldr	r3, [pc, #236]	; (400f9c <SystemCoreClockUpdate+0xf0>)
  400eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400eb0:	f003 0303 	and.w	r3, r3, #3
  400eb4:	2b01      	cmp	r3, #1
  400eb6:	d01d      	beq.n	400ef4 <SystemCoreClockUpdate+0x48>
  400eb8:	b183      	cbz	r3, 400edc <SystemCoreClockUpdate+0x30>
  400eba:	2b02      	cmp	r3, #2
  400ebc:	d036      	beq.n	400f2c <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400ebe:	4b37      	ldr	r3, [pc, #220]	; (400f9c <SystemCoreClockUpdate+0xf0>)
  400ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400ec2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400ec6:	2b70      	cmp	r3, #112	; 0x70
  400ec8:	d05f      	beq.n	400f8a <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400eca:	4b34      	ldr	r3, [pc, #208]	; (400f9c <SystemCoreClockUpdate+0xf0>)
  400ecc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400ece:	4934      	ldr	r1, [pc, #208]	; (400fa0 <SystemCoreClockUpdate+0xf4>)
  400ed0:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400ed4:	680b      	ldr	r3, [r1, #0]
  400ed6:	40d3      	lsrs	r3, r2
  400ed8:	600b      	str	r3, [r1, #0]
  400eda:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400edc:	4b31      	ldr	r3, [pc, #196]	; (400fa4 <SystemCoreClockUpdate+0xf8>)
  400ede:	695b      	ldr	r3, [r3, #20]
  400ee0:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400ee4:	bf14      	ite	ne
  400ee6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400eea:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400eee:	4b2c      	ldr	r3, [pc, #176]	; (400fa0 <SystemCoreClockUpdate+0xf4>)
  400ef0:	601a      	str	r2, [r3, #0]
  400ef2:	e7e4      	b.n	400ebe <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400ef4:	4b29      	ldr	r3, [pc, #164]	; (400f9c <SystemCoreClockUpdate+0xf0>)
  400ef6:	6a1b      	ldr	r3, [r3, #32]
  400ef8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400efc:	d003      	beq.n	400f06 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400efe:	4a2a      	ldr	r2, [pc, #168]	; (400fa8 <SystemCoreClockUpdate+0xfc>)
  400f00:	4b27      	ldr	r3, [pc, #156]	; (400fa0 <SystemCoreClockUpdate+0xf4>)
  400f02:	601a      	str	r2, [r3, #0]
  400f04:	e7db      	b.n	400ebe <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400f06:	4a29      	ldr	r2, [pc, #164]	; (400fac <SystemCoreClockUpdate+0x100>)
  400f08:	4b25      	ldr	r3, [pc, #148]	; (400fa0 <SystemCoreClockUpdate+0xf4>)
  400f0a:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400f0c:	4b23      	ldr	r3, [pc, #140]	; (400f9c <SystemCoreClockUpdate+0xf0>)
  400f0e:	6a1b      	ldr	r3, [r3, #32]
  400f10:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400f14:	2b10      	cmp	r3, #16
  400f16:	d005      	beq.n	400f24 <SystemCoreClockUpdate+0x78>
  400f18:	2b20      	cmp	r3, #32
  400f1a:	d1d0      	bne.n	400ebe <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  400f1c:	4a22      	ldr	r2, [pc, #136]	; (400fa8 <SystemCoreClockUpdate+0xfc>)
  400f1e:	4b20      	ldr	r3, [pc, #128]	; (400fa0 <SystemCoreClockUpdate+0xf4>)
  400f20:	601a      	str	r2, [r3, #0]
          break;
  400f22:	e7cc      	b.n	400ebe <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  400f24:	4a22      	ldr	r2, [pc, #136]	; (400fb0 <SystemCoreClockUpdate+0x104>)
  400f26:	4b1e      	ldr	r3, [pc, #120]	; (400fa0 <SystemCoreClockUpdate+0xf4>)
  400f28:	601a      	str	r2, [r3, #0]
          break;
  400f2a:	e7c8      	b.n	400ebe <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400f2c:	4b1b      	ldr	r3, [pc, #108]	; (400f9c <SystemCoreClockUpdate+0xf0>)
  400f2e:	6a1b      	ldr	r3, [r3, #32]
  400f30:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400f34:	d016      	beq.n	400f64 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400f36:	4a1c      	ldr	r2, [pc, #112]	; (400fa8 <SystemCoreClockUpdate+0xfc>)
  400f38:	4b19      	ldr	r3, [pc, #100]	; (400fa0 <SystemCoreClockUpdate+0xf4>)
  400f3a:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400f3c:	4b17      	ldr	r3, [pc, #92]	; (400f9c <SystemCoreClockUpdate+0xf0>)
  400f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400f40:	f003 0303 	and.w	r3, r3, #3
  400f44:	2b02      	cmp	r3, #2
  400f46:	d1ba      	bne.n	400ebe <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400f48:	4a14      	ldr	r2, [pc, #80]	; (400f9c <SystemCoreClockUpdate+0xf0>)
  400f4a:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400f4c:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400f4e:	4814      	ldr	r0, [pc, #80]	; (400fa0 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400f50:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400f54:	6803      	ldr	r3, [r0, #0]
  400f56:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400f5a:	b2d2      	uxtb	r2, r2
  400f5c:	fbb3 f3f2 	udiv	r3, r3, r2
  400f60:	6003      	str	r3, [r0, #0]
  400f62:	e7ac      	b.n	400ebe <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400f64:	4a11      	ldr	r2, [pc, #68]	; (400fac <SystemCoreClockUpdate+0x100>)
  400f66:	4b0e      	ldr	r3, [pc, #56]	; (400fa0 <SystemCoreClockUpdate+0xf4>)
  400f68:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400f6a:	4b0c      	ldr	r3, [pc, #48]	; (400f9c <SystemCoreClockUpdate+0xf0>)
  400f6c:	6a1b      	ldr	r3, [r3, #32]
  400f6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400f72:	2b10      	cmp	r3, #16
  400f74:	d005      	beq.n	400f82 <SystemCoreClockUpdate+0xd6>
  400f76:	2b20      	cmp	r3, #32
  400f78:	d1e0      	bne.n	400f3c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  400f7a:	4a0b      	ldr	r2, [pc, #44]	; (400fa8 <SystemCoreClockUpdate+0xfc>)
  400f7c:	4b08      	ldr	r3, [pc, #32]	; (400fa0 <SystemCoreClockUpdate+0xf4>)
  400f7e:	601a      	str	r2, [r3, #0]
          break;
  400f80:	e7dc      	b.n	400f3c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  400f82:	4a0b      	ldr	r2, [pc, #44]	; (400fb0 <SystemCoreClockUpdate+0x104>)
  400f84:	4b06      	ldr	r3, [pc, #24]	; (400fa0 <SystemCoreClockUpdate+0xf4>)
  400f86:	601a      	str	r2, [r3, #0]
          break;
  400f88:	e7d8      	b.n	400f3c <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  400f8a:	4a05      	ldr	r2, [pc, #20]	; (400fa0 <SystemCoreClockUpdate+0xf4>)
  400f8c:	6813      	ldr	r3, [r2, #0]
  400f8e:	4909      	ldr	r1, [pc, #36]	; (400fb4 <SystemCoreClockUpdate+0x108>)
  400f90:	fba1 1303 	umull	r1, r3, r1, r3
  400f94:	085b      	lsrs	r3, r3, #1
  400f96:	6013      	str	r3, [r2, #0]
  400f98:	4770      	bx	lr
  400f9a:	bf00      	nop
  400f9c:	400e0600 	.word	0x400e0600
  400fa0:	2040000c 	.word	0x2040000c
  400fa4:	400e1810 	.word	0x400e1810
  400fa8:	00b71b00 	.word	0x00b71b00
  400fac:	003d0900 	.word	0x003d0900
  400fb0:	007a1200 	.word	0x007a1200
  400fb4:	aaaaaaab 	.word	0xaaaaaaab

00400fb8 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400fb8:	4b16      	ldr	r3, [pc, #88]	; (401014 <system_init_flash+0x5c>)
  400fba:	4298      	cmp	r0, r3
  400fbc:	d913      	bls.n	400fe6 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400fbe:	4b16      	ldr	r3, [pc, #88]	; (401018 <system_init_flash+0x60>)
  400fc0:	4298      	cmp	r0, r3
  400fc2:	d915      	bls.n	400ff0 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400fc4:	4b15      	ldr	r3, [pc, #84]	; (40101c <system_init_flash+0x64>)
  400fc6:	4298      	cmp	r0, r3
  400fc8:	d916      	bls.n	400ff8 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400fca:	4b15      	ldr	r3, [pc, #84]	; (401020 <system_init_flash+0x68>)
  400fcc:	4298      	cmp	r0, r3
  400fce:	d917      	bls.n	401000 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400fd0:	4b14      	ldr	r3, [pc, #80]	; (401024 <system_init_flash+0x6c>)
  400fd2:	4298      	cmp	r0, r3
  400fd4:	d918      	bls.n	401008 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  400fd6:	4b14      	ldr	r3, [pc, #80]	; (401028 <system_init_flash+0x70>)
  400fd8:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400fda:	bf94      	ite	ls
  400fdc:	4a13      	ldrls	r2, [pc, #76]	; (40102c <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  400fde:	4a14      	ldrhi	r2, [pc, #80]	; (401030 <system_init_flash+0x78>)
  400fe0:	4b14      	ldr	r3, [pc, #80]	; (401034 <system_init_flash+0x7c>)
  400fe2:	601a      	str	r2, [r3, #0]
  400fe4:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400fe6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400fea:	4b12      	ldr	r3, [pc, #72]	; (401034 <system_init_flash+0x7c>)
  400fec:	601a      	str	r2, [r3, #0]
  400fee:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400ff0:	4a11      	ldr	r2, [pc, #68]	; (401038 <system_init_flash+0x80>)
  400ff2:	4b10      	ldr	r3, [pc, #64]	; (401034 <system_init_flash+0x7c>)
  400ff4:	601a      	str	r2, [r3, #0]
  400ff6:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400ff8:	4a10      	ldr	r2, [pc, #64]	; (40103c <system_init_flash+0x84>)
  400ffa:	4b0e      	ldr	r3, [pc, #56]	; (401034 <system_init_flash+0x7c>)
  400ffc:	601a      	str	r2, [r3, #0]
  400ffe:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401000:	4a0f      	ldr	r2, [pc, #60]	; (401040 <system_init_flash+0x88>)
  401002:	4b0c      	ldr	r3, [pc, #48]	; (401034 <system_init_flash+0x7c>)
  401004:	601a      	str	r2, [r3, #0]
  401006:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401008:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  40100c:	4b09      	ldr	r3, [pc, #36]	; (401034 <system_init_flash+0x7c>)
  40100e:	601a      	str	r2, [r3, #0]
  401010:	4770      	bx	lr
  401012:	bf00      	nop
  401014:	015ef3bf 	.word	0x015ef3bf
  401018:	02bde77f 	.word	0x02bde77f
  40101c:	041cdb3f 	.word	0x041cdb3f
  401020:	057bceff 	.word	0x057bceff
  401024:	06dac2bf 	.word	0x06dac2bf
  401028:	0839b67f 	.word	0x0839b67f
  40102c:	04000500 	.word	0x04000500
  401030:	04000600 	.word	0x04000600
  401034:	400e0c00 	.word	0x400e0c00
  401038:	04000100 	.word	0x04000100
  40103c:	04000200 	.word	0x04000200
  401040:	04000300 	.word	0x04000300

00401044 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401044:	4b0a      	ldr	r3, [pc, #40]	; (401070 <_sbrk+0x2c>)
  401046:	681b      	ldr	r3, [r3, #0]
  401048:	b153      	cbz	r3, 401060 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  40104a:	4b09      	ldr	r3, [pc, #36]	; (401070 <_sbrk+0x2c>)
  40104c:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  40104e:	181a      	adds	r2, r3, r0
  401050:	4908      	ldr	r1, [pc, #32]	; (401074 <_sbrk+0x30>)
  401052:	4291      	cmp	r1, r2
  401054:	db08      	blt.n	401068 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401056:	4610      	mov	r0, r2
  401058:	4a05      	ldr	r2, [pc, #20]	; (401070 <_sbrk+0x2c>)
  40105a:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  40105c:	4618      	mov	r0, r3
  40105e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401060:	4a05      	ldr	r2, [pc, #20]	; (401078 <_sbrk+0x34>)
  401062:	4b03      	ldr	r3, [pc, #12]	; (401070 <_sbrk+0x2c>)
  401064:	601a      	str	r2, [r3, #0]
  401066:	e7f0      	b.n	40104a <_sbrk+0x6>
		return (caddr_t) -1;	
  401068:	f04f 30ff 	mov.w	r0, #4294967295
}
  40106c:	4770      	bx	lr
  40106e:	bf00      	nop
  401070:	20400a68 	.word	0x20400a68
  401074:	2045fffc 	.word	0x2045fffc
  401078:	2043d6e8 	.word	0x2043d6e8

0040107c <_close>:
}

extern int _close(int file)
{
	return -1;
}
  40107c:	f04f 30ff 	mov.w	r0, #4294967295
  401080:	4770      	bx	lr

00401082 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401082:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401086:	604b      	str	r3, [r1, #4]

	return 0;
}
  401088:	2000      	movs	r0, #0
  40108a:	4770      	bx	lr

0040108c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  40108c:	2001      	movs	r0, #1
  40108e:	4770      	bx	lr

00401090 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401090:	2000      	movs	r0, #0
  401092:	4770      	bx	lr

00401094 <AFEC_Temp_callback>:
 */

PPBUF_DECLARE(buffer,120000);
volatile uint32_t buf = 0;

static void AFEC_Temp_callback(void){	
  401094:	b510      	push	{r4, lr}
  401096:	b082      	sub	sp, #8
	afec->AFEC_CSELR = afec_ch;
  401098:	4b17      	ldr	r3, [pc, #92]	; (4010f8 <AFEC_Temp_callback+0x64>)
  40109a:	2201      	movs	r2, #1
  40109c:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  40109e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	/** The conversion data value */
	uint32_t g_ul_value = 0;

	g_ul_value = afec_channel_get_value(AFEC0, canal_generico_pino);
  4010a0:	9301      	str	r3, [sp, #4]
	

	// check swap
	if(ppbuf_get_full_signal(&buffer,false) == true) {
  4010a2:	2100      	movs	r1, #0
  4010a4:	4815      	ldr	r0, [pc, #84]	; (4010fc <AFEC_Temp_callback+0x68>)
  4010a6:	4b16      	ldr	r3, [pc, #88]	; (401100 <AFEC_Temp_callback+0x6c>)
  4010a8:	4798      	blx	r3
  4010aa:	b9c0      	cbnz	r0, 4010de <AFEC_Temp_callback+0x4a>
		ppbuf_get_full_signal(&buffer,true); // swap
	}
	
	ppbuf_insert_active(&buffer, &g_ul_value, sizeof(g_ul_value));
  4010ac:	4c13      	ldr	r4, [pc, #76]	; (4010fc <AFEC_Temp_callback+0x68>)
  4010ae:	2204      	movs	r2, #4
  4010b0:	eb0d 0102 	add.w	r1, sp, r2
  4010b4:	4620      	mov	r0, r4
  4010b6:	4b13      	ldr	r3, [pc, #76]	; (401104 <AFEC_Temp_callback+0x70>)
  4010b8:	4798      	blx	r3
		
	/* gets the data on the pong buffer */
	ppbuf_remove_inactive(&buffer, &buf, sizeof(buf));	
  4010ba:	2204      	movs	r2, #4
  4010bc:	4912      	ldr	r1, [pc, #72]	; (401108 <AFEC_Temp_callback+0x74>)
  4010be:	4620      	mov	r0, r4
  4010c0:	4b12      	ldr	r3, [pc, #72]	; (40110c <AFEC_Temp_callback+0x78>)
  4010c2:	4798      	blx	r3
	
    dacc_get_interrupt_status(DACC_BASE);
  4010c4:	4812      	ldr	r0, [pc, #72]	; (401110 <AFEC_Temp_callback+0x7c>)
  4010c6:	4b13      	ldr	r3, [pc, #76]	; (401114 <AFEC_Temp_callback+0x80>)
  4010c8:	4798      	blx	r3
	if ((buffer.ping == 0)){
  4010ca:	7923      	ldrb	r3, [r4, #4]
  4010cc:	b163      	cbz	r3, 4010e8 <AFEC_Temp_callback+0x54>
		dacc_write_conversion_data(DACC_BASE, buf/2, DACC_CHANNEL);
	}else{
		dacc_write_conversion_data(DACC_BASE, buf, DACC_CHANNEL);
  4010ce:	4b0e      	ldr	r3, [pc, #56]	; (401108 <AFEC_Temp_callback+0x74>)
  4010d0:	6819      	ldr	r1, [r3, #0]
  4010d2:	2200      	movs	r2, #0
  4010d4:	480e      	ldr	r0, [pc, #56]	; (401110 <AFEC_Temp_callback+0x7c>)
  4010d6:	4b10      	ldr	r3, [pc, #64]	; (401118 <AFEC_Temp_callback+0x84>)
  4010d8:	4798      	blx	r3
	}
}
  4010da:	b002      	add	sp, #8
  4010dc:	bd10      	pop	{r4, pc}
		ppbuf_get_full_signal(&buffer,true); // swap
  4010de:	2101      	movs	r1, #1
  4010e0:	4806      	ldr	r0, [pc, #24]	; (4010fc <AFEC_Temp_callback+0x68>)
  4010e2:	4b07      	ldr	r3, [pc, #28]	; (401100 <AFEC_Temp_callback+0x6c>)
  4010e4:	4798      	blx	r3
  4010e6:	e7e1      	b.n	4010ac <AFEC_Temp_callback+0x18>
		dacc_write_conversion_data(DACC_BASE, buf/2, DACC_CHANNEL);
  4010e8:	4b07      	ldr	r3, [pc, #28]	; (401108 <AFEC_Temp_callback+0x74>)
  4010ea:	6819      	ldr	r1, [r3, #0]
  4010ec:	2200      	movs	r2, #0
  4010ee:	0849      	lsrs	r1, r1, #1
  4010f0:	4807      	ldr	r0, [pc, #28]	; (401110 <AFEC_Temp_callback+0x7c>)
  4010f2:	4b09      	ldr	r3, [pc, #36]	; (401118 <AFEC_Temp_callback+0x84>)
  4010f4:	4798      	blx	r3
  4010f6:	e7f0      	b.n	4010da <AFEC_Temp_callback+0x46>
  4010f8:	4003c000 	.word	0x4003c000
  4010fc:	20400010 	.word	0x20400010
  401100:	00400259 	.word	0x00400259
  401104:	004001ad 	.word	0x004001ad
  401108:	20400a6c 	.word	0x20400a6c
  40110c:	00400209 	.word	0x00400209
  401110:	40040000 	.word	0x40040000
  401114:	00400615 	.word	0x00400615
  401118:	00400619 	.word	0x00400619

0040111c <SysTick_Handler>:
	g_systimer++;	
  40111c:	4a02      	ldr	r2, [pc, #8]	; (401128 <SysTick_Handler+0xc>)
  40111e:	6813      	ldr	r3, [r2, #0]
  401120:	3301      	adds	r3, #1
  401122:	6013      	str	r3, [r2, #0]
  401124:	4770      	bx	lr
  401126:	bf00      	nop
  401128:	20400a70 	.word	0x20400a70

0040112c <TC0_Handler>:
void TC0_Handler(void){
  40112c:	b500      	push	{lr}
  40112e:	b083      	sub	sp, #12
	ul_dummy = tc_get_status(TC0, 0);
  401130:	2100      	movs	r1, #0
  401132:	4805      	ldr	r0, [pc, #20]	; (401148 <TC0_Handler+0x1c>)
  401134:	4b05      	ldr	r3, [pc, #20]	; (40114c <TC0_Handler+0x20>)
  401136:	4798      	blx	r3
  401138:	9001      	str	r0, [sp, #4]
	printf("kakaka \n");
  40113a:	4805      	ldr	r0, [pc, #20]	; (401150 <TC0_Handler+0x24>)
  40113c:	4b05      	ldr	r3, [pc, #20]	; (401154 <TC0_Handler+0x28>)
  40113e:	4798      	blx	r3
	UNUSED(ul_dummy);
  401140:	9b01      	ldr	r3, [sp, #4]
}
  401142:	b003      	add	sp, #12
  401144:	f85d fb04 	ldr.w	pc, [sp], #4
  401148:	4000c000 	.word	0x4000c000
  40114c:	00400623 	.word	0x00400623
  401150:	00404454 	.word	0x00404454
  401154:	00401579 	.word	0x00401579

00401158 <usart_put_string>:

void usart_put_string(Usart *usart, char str[]) {
  401158:	b538      	push	{r3, r4, r5, lr}
  40115a:	4605      	mov	r5, r0
  40115c:	460c      	mov	r4, r1
	usart_serial_write_packet(usart, str, strlen(str));
  40115e:	4608      	mov	r0, r1
  401160:	4b03      	ldr	r3, [pc, #12]	; (401170 <usart_put_string+0x18>)
  401162:	4798      	blx	r3
  401164:	4602      	mov	r2, r0
  401166:	4621      	mov	r1, r4
  401168:	4628      	mov	r0, r5
  40116a:	4b02      	ldr	r3, [pc, #8]	; (401174 <usart_put_string+0x1c>)
  40116c:	4798      	blx	r3
  40116e:	bd38      	pop	{r3, r4, r5, pc}
  401170:	00401781 	.word	0x00401781
  401174:	0040073d 	.word	0x0040073d

00401178 <usart_get_string>:
}

int usart_get_string(Usart *usart, char buffer_get[], int bufferlen, int timeout_ms) {
  401178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40117c:	b085      	sub	sp, #20
  40117e:	9001      	str	r0, [sp, #4]
  401180:	468b      	mov	fp, r1
  401182:	461f      	mov	r7, r3
	long timestart = g_systimer;
  401184:	4b10      	ldr	r3, [pc, #64]	; (4011c8 <usart_get_string+0x50>)
  401186:	681e      	ldr	r6, [r3, #0]
  401188:	f101 3aff 	add.w	sl, r1, #4294967295
  40118c:	f102 38ff 	add.w	r8, r2, #4294967295
	uint32_t rx;
	uint32_t counter = 0;
  401190:	2400      	movs	r4, #0
	
	while(g_systimer - timestart < timeout_ms && counter < bufferlen - 1) {
  401192:	461d      	mov	r5, r3
		if(usart_read(usart, &rx) == 0) {
  401194:	f8df 9034 	ldr.w	r9, [pc, #52]	; 4011cc <usart_get_string+0x54>
	while(g_systimer - timestart < timeout_ms && counter < bufferlen - 1) {
  401198:	682b      	ldr	r3, [r5, #0]
  40119a:	1b9b      	subs	r3, r3, r6
  40119c:	42bb      	cmp	r3, r7
  40119e:	da0c      	bge.n	4011ba <usart_get_string+0x42>
  4011a0:	4544      	cmp	r4, r8
  4011a2:	d00a      	beq.n	4011ba <usart_get_string+0x42>
		if(usart_read(usart, &rx) == 0) {
  4011a4:	a903      	add	r1, sp, #12
  4011a6:	9801      	ldr	r0, [sp, #4]
  4011a8:	47c8      	blx	r9
  4011aa:	2800      	cmp	r0, #0
  4011ac:	d1f4      	bne.n	401198 <usart_get_string+0x20>
			timestart = g_systimer; // reset timeout
  4011ae:	682e      	ldr	r6, [r5, #0]
			buffer_get[counter++] = rx;
  4011b0:	3401      	adds	r4, #1
  4011b2:	9b03      	ldr	r3, [sp, #12]
  4011b4:	f80a 3f01 	strb.w	r3, [sl, #1]!
  4011b8:	e7ee      	b.n	401198 <usart_get_string+0x20>
		}
	}
	buffer_get[counter] = 0x00;
  4011ba:	2300      	movs	r3, #0
  4011bc:	f80b 3004 	strb.w	r3, [fp, r4]
	return counter;
}
  4011c0:	4620      	mov	r0, r4
  4011c2:	b005      	add	sp, #20
  4011c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4011c8:	20400a70 	.word	0x20400a70
  4011cc:	00400723 	.word	0x00400723

004011d0 <usart_send_command>:

void usart_send_command(Usart *usart, char buffer_rx[], int bufferlen, char buffer_tx[], int timeout) {
  4011d0:	b570      	push	{r4, r5, r6, lr}
  4011d2:	4604      	mov	r4, r0
  4011d4:	460d      	mov	r5, r1
  4011d6:	4616      	mov	r6, r2
	usart_put_string(usart, buffer_tx);
  4011d8:	4619      	mov	r1, r3
  4011da:	4b04      	ldr	r3, [pc, #16]	; (4011ec <usart_send_command+0x1c>)
  4011dc:	4798      	blx	r3
	usart_get_string(usart, buffer_rx, bufferlen, timeout);
  4011de:	9b04      	ldr	r3, [sp, #16]
  4011e0:	4632      	mov	r2, r6
  4011e2:	4629      	mov	r1, r5
  4011e4:	4620      	mov	r0, r4
  4011e6:	4c02      	ldr	r4, [pc, #8]	; (4011f0 <usart_send_command+0x20>)
  4011e8:	47a0      	blx	r4
  4011ea:	bd70      	pop	{r4, r5, r6, pc}
  4011ec:	00401159 	.word	0x00401159
  4011f0:	00401179 	.word	0x00401179

004011f4 <usart_log>:
}

void usart_log(char* name, char* log) {
  4011f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4011f6:	4607      	mov	r7, r0
  4011f8:	460e      	mov	r6, r1
	usart_put_string(USART1, "[");
  4011fa:	4d09      	ldr	r5, [pc, #36]	; (401220 <usart_log+0x2c>)
  4011fc:	4909      	ldr	r1, [pc, #36]	; (401224 <usart_log+0x30>)
  4011fe:	4628      	mov	r0, r5
  401200:	4c09      	ldr	r4, [pc, #36]	; (401228 <usart_log+0x34>)
  401202:	47a0      	blx	r4
	usart_put_string(USART1, name);
  401204:	4639      	mov	r1, r7
  401206:	4628      	mov	r0, r5
  401208:	47a0      	blx	r4
	usart_put_string(USART1, "] ");
  40120a:	4908      	ldr	r1, [pc, #32]	; (40122c <usart_log+0x38>)
  40120c:	4628      	mov	r0, r5
  40120e:	47a0      	blx	r4
	usart_put_string(USART1, log);
  401210:	4631      	mov	r1, r6
  401212:	4628      	mov	r0, r5
  401214:	47a0      	blx	r4
	usart_put_string(USART1, "\r\n");
  401216:	4906      	ldr	r1, [pc, #24]	; (401230 <usart_log+0x3c>)
  401218:	4628      	mov	r0, r5
  40121a:	47a0      	blx	r4
  40121c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40121e:	bf00      	nop
  401220:	40028000 	.word	0x40028000
  401224:	004044e4 	.word	0x004044e4
  401228:	00401159 	.word	0x00401159
  40122c:	004044e8 	.word	0x004044e8
  401230:	004044b0 	.word	0x004044b0

00401234 <config_console>:
}

void config_console(void) {
  401234:	b570      	push	{r4, r5, r6, lr}
  401236:	b086      	sub	sp, #24
	usart_settings.baudrate = opt->baudrate;
  401238:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  40123c:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  40123e:	23c0      	movs	r3, #192	; 0xc0
  401240:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  401242:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401246:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  401248:	2300      	movs	r3, #0
  40124a:	9303      	str	r3, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  40124c:	9304      	str	r3, [sp, #16]
  40124e:	200e      	movs	r0, #14
  401250:	4b09      	ldr	r3, [pc, #36]	; (401278 <config_console+0x44>)
  401252:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  401254:	4c09      	ldr	r4, [pc, #36]	; (40127c <config_console+0x48>)
  401256:	4a0a      	ldr	r2, [pc, #40]	; (401280 <config_console+0x4c>)
  401258:	4669      	mov	r1, sp
  40125a:	4620      	mov	r0, r4
  40125c:	4b09      	ldr	r3, [pc, #36]	; (401284 <config_console+0x50>)
  40125e:	4798      	blx	r3
		usart_enable_tx(p_usart);
  401260:	4620      	mov	r0, r4
  401262:	4e09      	ldr	r6, [pc, #36]	; (401288 <config_console+0x54>)
  401264:	47b0      	blx	r6
		usart_enable_rx(p_usart);
  401266:	4620      	mov	r0, r4
  401268:	4d08      	ldr	r5, [pc, #32]	; (40128c <config_console+0x58>)
  40126a:	47a8      	blx	r5
	config.baudrate = 115200;
	config.charlength = US_MR_CHRL_8_BIT;
	config.paritytype = US_MR_PAR_NO;
	config.stopbits = false;
	usart_serial_init(USART1, &config);
	usart_enable_tx(USART1);
  40126c:	4620      	mov	r0, r4
  40126e:	47b0      	blx	r6
	usart_enable_rx(USART1);
  401270:	4620      	mov	r0, r4
  401272:	47a8      	blx	r5
}
  401274:	b006      	add	sp, #24
  401276:	bd70      	pop	{r4, r5, r6, pc}
  401278:	00400d8d 	.word	0x00400d8d
  40127c:	40028000 	.word	0x40028000
  401280:	08f0d180 	.word	0x08f0d180
  401284:	004006ad 	.word	0x004006ad
  401288:	00400701 	.word	0x00400701
  40128c:	00400707 	.word	0x00400707

00401290 <hm10_config_server>:

void hm10_config_server(void) {
  401290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401294:	b086      	sub	sp, #24
	usart_settings.baudrate = opt->baudrate;
  401296:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  40129a:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  40129c:	23c0      	movs	r3, #192	; 0xc0
  40129e:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  4012a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4012a4:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  4012a6:	2500      	movs	r5, #0
  4012a8:	9503      	str	r5, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4012aa:	9504      	str	r5, [sp, #16]
  4012ac:	200d      	movs	r0, #13
  4012ae:	4e13      	ldr	r6, [pc, #76]	; (4012fc <hm10_config_server+0x6c>)
  4012b0:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  4012b2:	4c13      	ldr	r4, [pc, #76]	; (401300 <hm10_config_server+0x70>)
  4012b4:	4a13      	ldr	r2, [pc, #76]	; (401304 <hm10_config_server+0x74>)
  4012b6:	4669      	mov	r1, sp
  4012b8:	4620      	mov	r0, r4
  4012ba:	4b13      	ldr	r3, [pc, #76]	; (401308 <hm10_config_server+0x78>)
  4012bc:	4798      	blx	r3
		usart_enable_tx(p_usart);
  4012be:	4620      	mov	r0, r4
  4012c0:	f8df 8054 	ldr.w	r8, [pc, #84]	; 401318 <hm10_config_server+0x88>
  4012c4:	47c0      	blx	r8
		usart_enable_rx(p_usart);
  4012c6:	4620      	mov	r0, r4
  4012c8:	4f10      	ldr	r7, [pc, #64]	; (40130c <hm10_config_server+0x7c>)
  4012ca:	47b8      	blx	r7
	config.baudrate = 9600;
	config.charlength = US_MR_CHRL_8_BIT;
	config.paritytype = US_MR_PAR_NO;
	config.stopbits = false;
	usart_serial_init(USART0, &config);
	usart_enable_tx(USART0);
  4012cc:	4620      	mov	r0, r4
  4012ce:	47c0      	blx	r8
	usart_enable_rx(USART0);
  4012d0:	4620      	mov	r0, r4
  4012d2:	47b8      	blx	r7
  4012d4:	200b      	movs	r0, #11
  4012d6:	47b0      	blx	r6
	sysclk_enable_peripheral_clock(ID_PIOB);
	//usart_init_rs232(USART0, &config, sysclk_get_peripheral_hz());


	// RX - PB0  TX - PB1
	pio_configure(PIOB, PIO_PERIPH_C, (1 << 0), PIO_DEFAULT);
  4012d8:	4e0d      	ldr	r6, [pc, #52]	; (401310 <hm10_config_server+0x80>)
  4012da:	462b      	mov	r3, r5
  4012dc:	2201      	movs	r2, #1
  4012de:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4012e2:	4630      	mov	r0, r6
  4012e4:	4c0b      	ldr	r4, [pc, #44]	; (401314 <hm10_config_server+0x84>)
  4012e6:	47a0      	blx	r4
	pio_configure(PIOB, PIO_PERIPH_C, (1 << 1), PIO_DEFAULT);
  4012e8:	462b      	mov	r3, r5
  4012ea:	2202      	movs	r2, #2
  4012ec:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4012f0:	4630      	mov	r0, r6
  4012f2:	47a0      	blx	r4
	//usart_enable_interrupt(USART0, US_IER_RXRDY);
	//NVIC_SetPriority(ID_USART0, 1);
	//NVIC_EnableIRQ(ID_USART0);


}
  4012f4:	b006      	add	sp, #24
  4012f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4012fa:	bf00      	nop
  4012fc:	00400d8d 	.word	0x00400d8d
  401300:	40024000 	.word	0x40024000
  401304:	08f0d180 	.word	0x08f0d180
  401308:	004006ad 	.word	0x004006ad
  40130c:	00400707 	.word	0x00400707
  401310:	400e1000 	.word	0x400e1000
  401314:	00400b21 	.word	0x00400b21
  401318:	00400701 	.word	0x00400701

0040131c <hm10_server_init>:
		}
	}
}*/


int hm10_server_init(void) {
  40131c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40131e:	b0a3      	sub	sp, #140	; 0x8c
	char buffer_rx[128];
	usart_send_command(USART0, buffer_rx, 1000, "AT", 200);
  401320:	4e1a      	ldr	r6, [pc, #104]	; (40138c <hm10_server_init+0x70>)
  401322:	4d1b      	ldr	r5, [pc, #108]	; (401390 <hm10_server_init+0x74>)
  401324:	27c8      	movs	r7, #200	; 0xc8
  401326:	9700      	str	r7, [sp, #0]
  401328:	4633      	mov	r3, r6
  40132a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40132e:	a902      	add	r1, sp, #8
  401330:	4628      	mov	r0, r5
  401332:	4c18      	ldr	r4, [pc, #96]	; (401394 <hm10_server_init+0x78>)
  401334:	47a0      	blx	r4
	usart_send_command(USART0, buffer_rx, 1000, "AT", 200);
  401336:	9700      	str	r7, [sp, #0]
  401338:	4633      	mov	r3, r6
  40133a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40133e:	a902      	add	r1, sp, #8
  401340:	4628      	mov	r0, r5
  401342:	47a0      	blx	r4
	usart_send_command(USART0, buffer_rx, 1000, "AT", 200);
  401344:	9700      	str	r7, [sp, #0]
  401346:	4633      	mov	r3, r6
  401348:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40134c:	a902      	add	r1, sp, #8
  40134e:	4628      	mov	r0, r5
  401350:	47a0      	blx	r4
	usart_send_command(USART0, buffer_rx, 1000, "AT+RESET", 400);	
  401352:	f44f 76c8 	mov.w	r6, #400	; 0x190
  401356:	9600      	str	r6, [sp, #0]
  401358:	4b0f      	ldr	r3, [pc, #60]	; (401398 <hm10_server_init+0x7c>)
  40135a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40135e:	a902      	add	r1, sp, #8
  401360:	4628      	mov	r0, r5
  401362:	47a0      	blx	r4
	usart_send_command(USART0, buffer_rx, 1000, "AT+NAMEServer", 400);
  401364:	9600      	str	r6, [sp, #0]
  401366:	4b0d      	ldr	r3, [pc, #52]	; (40139c <hm10_server_init+0x80>)
  401368:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40136c:	a902      	add	r1, sp, #8
  40136e:	4628      	mov	r0, r5
  401370:	47a0      	blx	r4
	usart_send_command(USART0, buffer_rx, 1000, "AT+ROLE0", 400);
  401372:	9600      	str	r6, [sp, #0]
  401374:	4b0a      	ldr	r3, [pc, #40]	; (4013a0 <hm10_server_init+0x84>)
  401376:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40137a:	a902      	add	r1, sp, #8
  40137c:	4628      	mov	r0, r5
  40137e:	47a0      	blx	r4
	usart_log("hm10_server_init", buffer_rx);
  401380:	a902      	add	r1, sp, #8
  401382:	4808      	ldr	r0, [pc, #32]	; (4013a4 <hm10_server_init+0x88>)
  401384:	4b08      	ldr	r3, [pc, #32]	; (4013a8 <hm10_server_init+0x8c>)
  401386:	4798      	blx	r3
}
  401388:	b023      	add	sp, #140	; 0x8c
  40138a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40138c:	00404460 	.word	0x00404460
  401390:	40024000 	.word	0x40024000
  401394:	004011d1 	.word	0x004011d1
  401398:	00404464 	.word	0x00404464
  40139c:	00404470 	.word	0x00404470
  4013a0:	00404480 	.word	0x00404480
  4013a4:	0040448c 	.word	0x0040448c
  4013a8:	004011f5 	.word	0x004011f5

004013ac <main>:
	/* Inicializa o canal 0 do TC */
	tc_start(TC, TC_CHANNEL);
}

int main (void)
{
  4013ac:	b580      	push	{r7, lr}
  4013ae:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
	board_init();
  4013b2:	4b3d      	ldr	r3, [pc, #244]	; (4014a8 <main+0xfc>)
  4013b4:	4798      	blx	r3
	sysclk_init();
  4013b6:	4b3d      	ldr	r3, [pc, #244]	; (4014ac <main+0x100>)
  4013b8:	4798      	blx	r3
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  4013ba:	4b3d      	ldr	r3, [pc, #244]	; (4014b0 <main+0x104>)
  4013bc:	4a3d      	ldr	r2, [pc, #244]	; (4014b4 <main+0x108>)
  4013be:	605a      	str	r2, [r3, #4]
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4013c0:	21e0      	movs	r1, #224	; 0xe0
  4013c2:	4a3d      	ldr	r2, [pc, #244]	; (4014b8 <main+0x10c>)
  4013c4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  4013c8:	2500      	movs	r5, #0
  4013ca:	609d      	str	r5, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  4013cc:	2207      	movs	r2, #7
  4013ce:	601a      	str	r2, [r3, #0]
	delay_init();
	SysTick_Config(sysclk_get_cpu_hz() / 1000); // 1 ms
	config_console();
  4013d0:	4b3a      	ldr	r3, [pc, #232]	; (4014bc <main+0x110>)
  4013d2:	4798      	blx	r3
	
	
	
	usart_put_string(USART1, "Inicializando...\r\n");
  4013d4:	4e3a      	ldr	r6, [pc, #232]	; (4014c0 <main+0x114>)
  4013d6:	493b      	ldr	r1, [pc, #236]	; (4014c4 <main+0x118>)
  4013d8:	4630      	mov	r0, r6
  4013da:	4c3b      	ldr	r4, [pc, #236]	; (4014c8 <main+0x11c>)
  4013dc:	47a0      	blx	r4
	usart_put_string(USART1, "Config HC05 Server...\r\n");
  4013de:	493b      	ldr	r1, [pc, #236]	; (4014cc <main+0x120>)
  4013e0:	4630      	mov	r0, r6
  4013e2:	47a0      	blx	r4
	hm10_config_server();
  4013e4:	4b3a      	ldr	r3, [pc, #232]	; (4014d0 <main+0x124>)
  4013e6:	4798      	blx	r3
	hm10_server_init();
  4013e8:	4b3a      	ldr	r3, [pc, #232]	; (4014d4 <main+0x128>)
  4013ea:	4798      	blx	r3
  4013ec:	200a      	movs	r0, #10
  4013ee:	4c3a      	ldr	r4, [pc, #232]	; (4014d8 <main+0x12c>)
  4013f0:	47a0      	blx	r4
  4013f2:	200b      	movs	r0, #11
  4013f4:	47a0      	blx	r4
  4013f6:	200c      	movs	r0, #12
  4013f8:	47a0      	blx	r4
  4013fa:	2010      	movs	r0, #16
  4013fc:	47a0      	blx	r4
  4013fe:	2011      	movs	r0, #17
  401400:	47a0      	blx	r4
	afec_enable(AFEC0);
  401402:	4c36      	ldr	r4, [pc, #216]	; (4014dc <main+0x130>)
  401404:	4620      	mov	r0, r4
  401406:	4b36      	ldr	r3, [pc, #216]	; (4014e0 <main+0x134>)
  401408:	4798      	blx	r3
	afec_get_config_defaults(&afec_cfg);
  40140a:	a803      	add	r0, sp, #12
  40140c:	4b35      	ldr	r3, [pc, #212]	; (4014e4 <main+0x138>)
  40140e:	4798      	blx	r3
	afec_init(AFEC0, &afec_cfg);
  401410:	a903      	add	r1, sp, #12
  401412:	4620      	mov	r0, r4
  401414:	4b34      	ldr	r3, [pc, #208]	; (4014e8 <main+0x13c>)
  401416:	4798      	blx	r3
	reg = afec->AFEC_MR;
  401418:	6863      	ldr	r3, [r4, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  40141a:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
		reg |= trigger;
  40141e:	f043 0303 	orr.w	r3, r3, #3
	afec->AFEC_MR = reg;
  401422:	6063      	str	r3, [r4, #4]
	AFEC0->AFEC_MR |= 3;
  401424:	6863      	ldr	r3, [r4, #4]
  401426:	f043 0303 	orr.w	r3, r3, #3
  40142a:	6063      	str	r3, [r4, #4]
	afec_set_callback(AFEC0, AFEC_INTERRUPT_EOC_1,	AFEC_Temp_callback, 1); 
  40142c:	2301      	movs	r3, #1
  40142e:	4a2f      	ldr	r2, [pc, #188]	; (4014ec <main+0x140>)
  401430:	4619      	mov	r1, r3
  401432:	4620      	mov	r0, r4
  401434:	4e2e      	ldr	r6, [pc, #184]	; (4014f0 <main+0x144>)
  401436:	47b0      	blx	r6
	afec_ch_get_config_defaults(&afec_ch_cfg);
  401438:	4668      	mov	r0, sp
  40143a:	4b2e      	ldr	r3, [pc, #184]	; (4014f4 <main+0x148>)
  40143c:	4798      	blx	r3
	afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  40143e:	f88d 5001 	strb.w	r5, [sp, #1]
	afec_ch_set_config(AFEC0, canal_generico_pino, &afec_ch_cfg);
  401442:	466a      	mov	r2, sp
  401444:	2101      	movs	r1, #1
  401446:	4620      	mov	r0, r4
  401448:	4b2b      	ldr	r3, [pc, #172]	; (4014f8 <main+0x14c>)
  40144a:	4798      	blx	r3
	afec->AFEC_CSELR = afec_ch;
  40144c:	2301      	movs	r3, #1
  40144e:	6663      	str	r3, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  401450:	f44f 7300 	mov.w	r3, #512	; 0x200
  401454:	66e3      	str	r3, [r4, #108]	; 0x6c
	afec_temp_sensor_get_config_defaults(&afec_temp_sensor_cfg);
  401456:	a801      	add	r0, sp, #4
  401458:	4b28      	ldr	r3, [pc, #160]	; (4014fc <main+0x150>)
  40145a:	4798      	blx	r3
	afec_temp_sensor_set_config(AFEC0, &afec_temp_sensor_cfg);
  40145c:	a901      	add	r1, sp, #4
  40145e:	4620      	mov	r0, r4
  401460:	4b27      	ldr	r3, [pc, #156]	; (401500 <main+0x154>)
  401462:	4798      	blx	r3
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  401464:	2302      	movs	r3, #2
  401466:	6163      	str	r3, [r4, #20]
	char *str;
	
	while(1) {
		
		
		usart_get_string(USART0, temp_volume, 1024, 100);
  401468:	4f26      	ldr	r7, [pc, #152]	; (401504 <main+0x158>)
  40146a:	4e27      	ldr	r6, [pc, #156]	; (401508 <main+0x15c>)
			volume  = strtol(temp_volume, &str, 10);
			usart_log("Volume", volume);
			usart_log("String", str);
		}*/
		
		usart_log("before", temp_volume);
  40146c:	4d27      	ldr	r5, [pc, #156]	; (40150c <main+0x160>)
		usart_get_string(USART0, temp_volume, 1024, 100);
  40146e:	2364      	movs	r3, #100	; 0x64
  401470:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401474:	a90a      	add	r1, sp, #40	; 0x28
  401476:	4638      	mov	r0, r7
  401478:	47b0      	blx	r6
		usart_log("before", temp_volume);
  40147a:	a90a      	add	r1, sp, #40	; 0x28
  40147c:	4628      	mov	r0, r5
  40147e:	4c24      	ldr	r4, [pc, #144]	; (401510 <main+0x164>)
  401480:	47a0      	blx	r4
		volume  = strtol(temp_volume, &str, 0);
  401482:	2200      	movs	r2, #0
  401484:	a909      	add	r1, sp, #36	; 0x24
  401486:	a80a      	add	r0, sp, #40	; 0x28
  401488:	4b22      	ldr	r3, [pc, #136]	; (401514 <main+0x168>)
  40148a:	4798      	blx	r3
  40148c:	4601      	mov	r1, r0
  40148e:	4b22      	ldr	r3, [pc, #136]	; (401518 <main+0x16c>)
  401490:	6018      	str	r0, [r3, #0]
		usart_log("Volume", volume);
  401492:	4822      	ldr	r0, [pc, #136]	; (40151c <main+0x170>)
  401494:	47a0      	blx	r4
		usart_log("String", str);
  401496:	9909      	ldr	r1, [sp, #36]	; 0x24
  401498:	4821      	ldr	r0, [pc, #132]	; (401520 <main+0x174>)
  40149a:	47a0      	blx	r4
		
		delay_ms(1);
  40149c:	f24c 508e 	movw	r0, #50574	; 0xc58e
  4014a0:	4b20      	ldr	r3, [pc, #128]	; (401524 <main+0x178>)
  4014a2:	4798      	blx	r3
  4014a4:	e7e3      	b.n	40146e <main+0xc2>
  4014a6:	bf00      	nop
  4014a8:	00400899 	.word	0x00400899
  4014ac:	00400829 	.word	0x00400829
  4014b0:	e000e010 	.word	0xe000e010
  4014b4:	000493df 	.word	0x000493df
  4014b8:	e000ed00 	.word	0xe000ed00
  4014bc:	00401235 	.word	0x00401235
  4014c0:	40028000 	.word	0x40028000
  4014c4:	004044a0 	.word	0x004044a0
  4014c8:	00401159 	.word	0x00401159
  4014cc:	004044b4 	.word	0x004044b4
  4014d0:	00401291 	.word	0x00401291
  4014d4:	0040131d 	.word	0x0040131d
  4014d8:	00400d8d 	.word	0x00400d8d
  4014dc:	4003c000 	.word	0x4003c000
  4014e0:	004005b1 	.word	0x004005b1
  4014e4:	004003e1 	.word	0x004003e1
  4014e8:	00400431 	.word	0x00400431
  4014ec:	00401095 	.word	0x00401095
  4014f0:	00400531 	.word	0x00400531
  4014f4:	00400411 	.word	0x00400411
  4014f8:	0040039d 	.word	0x0040039d
  4014fc:	0040041b 	.word	0x0040041b
  401500:	004003cd 	.word	0x004003cd
  401504:	40024000 	.word	0x40024000
  401508:	00401179 	.word	0x00401179
  40150c:	004044cc 	.word	0x004044cc
  401510:	004011f5 	.word	0x004011f5
  401514:	00401985 	.word	0x00401985
  401518:	2043b4bc 	.word	0x2043b4bc
  40151c:	004044d4 	.word	0x004044d4
  401520:	004044dc 	.word	0x004044dc
  401524:	20400001 	.word	0x20400001

00401528 <__libc_init_array>:
  401528:	b570      	push	{r4, r5, r6, lr}
  40152a:	4e0f      	ldr	r6, [pc, #60]	; (401568 <__libc_init_array+0x40>)
  40152c:	4d0f      	ldr	r5, [pc, #60]	; (40156c <__libc_init_array+0x44>)
  40152e:	1b76      	subs	r6, r6, r5
  401530:	10b6      	asrs	r6, r6, #2
  401532:	bf18      	it	ne
  401534:	2400      	movne	r4, #0
  401536:	d005      	beq.n	401544 <__libc_init_array+0x1c>
  401538:	3401      	adds	r4, #1
  40153a:	f855 3b04 	ldr.w	r3, [r5], #4
  40153e:	4798      	blx	r3
  401540:	42a6      	cmp	r6, r4
  401542:	d1f9      	bne.n	401538 <__libc_init_array+0x10>
  401544:	4e0a      	ldr	r6, [pc, #40]	; (401570 <__libc_init_array+0x48>)
  401546:	4d0b      	ldr	r5, [pc, #44]	; (401574 <__libc_init_array+0x4c>)
  401548:	1b76      	subs	r6, r6, r5
  40154a:	f003 f883 	bl	404654 <_init>
  40154e:	10b6      	asrs	r6, r6, #2
  401550:	bf18      	it	ne
  401552:	2400      	movne	r4, #0
  401554:	d006      	beq.n	401564 <__libc_init_array+0x3c>
  401556:	3401      	adds	r4, #1
  401558:	f855 3b04 	ldr.w	r3, [r5], #4
  40155c:	4798      	blx	r3
  40155e:	42a6      	cmp	r6, r4
  401560:	d1f9      	bne.n	401556 <__libc_init_array+0x2e>
  401562:	bd70      	pop	{r4, r5, r6, pc}
  401564:	bd70      	pop	{r4, r5, r6, pc}
  401566:	bf00      	nop
  401568:	00404660 	.word	0x00404660
  40156c:	00404660 	.word	0x00404660
  401570:	00404668 	.word	0x00404668
  401574:	00404660 	.word	0x00404660

00401578 <iprintf>:
  401578:	b40f      	push	{r0, r1, r2, r3}
  40157a:	b500      	push	{lr}
  40157c:	4907      	ldr	r1, [pc, #28]	; (40159c <iprintf+0x24>)
  40157e:	b083      	sub	sp, #12
  401580:	ab04      	add	r3, sp, #16
  401582:	6808      	ldr	r0, [r1, #0]
  401584:	f853 2b04 	ldr.w	r2, [r3], #4
  401588:	6881      	ldr	r1, [r0, #8]
  40158a:	9301      	str	r3, [sp, #4]
  40158c:	f000 fa50 	bl	401a30 <_vfiprintf_r>
  401590:	b003      	add	sp, #12
  401592:	f85d eb04 	ldr.w	lr, [sp], #4
  401596:	b004      	add	sp, #16
  401598:	4770      	bx	lr
  40159a:	bf00      	nop
  40159c:	20400028 	.word	0x20400028

004015a0 <memcpy>:
  4015a0:	4684      	mov	ip, r0
  4015a2:	ea41 0300 	orr.w	r3, r1, r0
  4015a6:	f013 0303 	ands.w	r3, r3, #3
  4015aa:	d16d      	bne.n	401688 <memcpy+0xe8>
  4015ac:	3a40      	subs	r2, #64	; 0x40
  4015ae:	d341      	bcc.n	401634 <memcpy+0x94>
  4015b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4015b4:	f840 3b04 	str.w	r3, [r0], #4
  4015b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4015bc:	f840 3b04 	str.w	r3, [r0], #4
  4015c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4015c4:	f840 3b04 	str.w	r3, [r0], #4
  4015c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4015cc:	f840 3b04 	str.w	r3, [r0], #4
  4015d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4015d4:	f840 3b04 	str.w	r3, [r0], #4
  4015d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4015dc:	f840 3b04 	str.w	r3, [r0], #4
  4015e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4015e4:	f840 3b04 	str.w	r3, [r0], #4
  4015e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4015ec:	f840 3b04 	str.w	r3, [r0], #4
  4015f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4015f4:	f840 3b04 	str.w	r3, [r0], #4
  4015f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4015fc:	f840 3b04 	str.w	r3, [r0], #4
  401600:	f851 3b04 	ldr.w	r3, [r1], #4
  401604:	f840 3b04 	str.w	r3, [r0], #4
  401608:	f851 3b04 	ldr.w	r3, [r1], #4
  40160c:	f840 3b04 	str.w	r3, [r0], #4
  401610:	f851 3b04 	ldr.w	r3, [r1], #4
  401614:	f840 3b04 	str.w	r3, [r0], #4
  401618:	f851 3b04 	ldr.w	r3, [r1], #4
  40161c:	f840 3b04 	str.w	r3, [r0], #4
  401620:	f851 3b04 	ldr.w	r3, [r1], #4
  401624:	f840 3b04 	str.w	r3, [r0], #4
  401628:	f851 3b04 	ldr.w	r3, [r1], #4
  40162c:	f840 3b04 	str.w	r3, [r0], #4
  401630:	3a40      	subs	r2, #64	; 0x40
  401632:	d2bd      	bcs.n	4015b0 <memcpy+0x10>
  401634:	3230      	adds	r2, #48	; 0x30
  401636:	d311      	bcc.n	40165c <memcpy+0xbc>
  401638:	f851 3b04 	ldr.w	r3, [r1], #4
  40163c:	f840 3b04 	str.w	r3, [r0], #4
  401640:	f851 3b04 	ldr.w	r3, [r1], #4
  401644:	f840 3b04 	str.w	r3, [r0], #4
  401648:	f851 3b04 	ldr.w	r3, [r1], #4
  40164c:	f840 3b04 	str.w	r3, [r0], #4
  401650:	f851 3b04 	ldr.w	r3, [r1], #4
  401654:	f840 3b04 	str.w	r3, [r0], #4
  401658:	3a10      	subs	r2, #16
  40165a:	d2ed      	bcs.n	401638 <memcpy+0x98>
  40165c:	320c      	adds	r2, #12
  40165e:	d305      	bcc.n	40166c <memcpy+0xcc>
  401660:	f851 3b04 	ldr.w	r3, [r1], #4
  401664:	f840 3b04 	str.w	r3, [r0], #4
  401668:	3a04      	subs	r2, #4
  40166a:	d2f9      	bcs.n	401660 <memcpy+0xc0>
  40166c:	3204      	adds	r2, #4
  40166e:	d008      	beq.n	401682 <memcpy+0xe2>
  401670:	07d2      	lsls	r2, r2, #31
  401672:	bf1c      	itt	ne
  401674:	f811 3b01 	ldrbne.w	r3, [r1], #1
  401678:	f800 3b01 	strbne.w	r3, [r0], #1
  40167c:	d301      	bcc.n	401682 <memcpy+0xe2>
  40167e:	880b      	ldrh	r3, [r1, #0]
  401680:	8003      	strh	r3, [r0, #0]
  401682:	4660      	mov	r0, ip
  401684:	4770      	bx	lr
  401686:	bf00      	nop
  401688:	2a08      	cmp	r2, #8
  40168a:	d313      	bcc.n	4016b4 <memcpy+0x114>
  40168c:	078b      	lsls	r3, r1, #30
  40168e:	d08d      	beq.n	4015ac <memcpy+0xc>
  401690:	f010 0303 	ands.w	r3, r0, #3
  401694:	d08a      	beq.n	4015ac <memcpy+0xc>
  401696:	f1c3 0304 	rsb	r3, r3, #4
  40169a:	1ad2      	subs	r2, r2, r3
  40169c:	07db      	lsls	r3, r3, #31
  40169e:	bf1c      	itt	ne
  4016a0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4016a4:	f800 3b01 	strbne.w	r3, [r0], #1
  4016a8:	d380      	bcc.n	4015ac <memcpy+0xc>
  4016aa:	f831 3b02 	ldrh.w	r3, [r1], #2
  4016ae:	f820 3b02 	strh.w	r3, [r0], #2
  4016b2:	e77b      	b.n	4015ac <memcpy+0xc>
  4016b4:	3a04      	subs	r2, #4
  4016b6:	d3d9      	bcc.n	40166c <memcpy+0xcc>
  4016b8:	3a01      	subs	r2, #1
  4016ba:	f811 3b01 	ldrb.w	r3, [r1], #1
  4016be:	f800 3b01 	strb.w	r3, [r0], #1
  4016c2:	d2f9      	bcs.n	4016b8 <memcpy+0x118>
  4016c4:	780b      	ldrb	r3, [r1, #0]
  4016c6:	7003      	strb	r3, [r0, #0]
  4016c8:	784b      	ldrb	r3, [r1, #1]
  4016ca:	7043      	strb	r3, [r0, #1]
  4016cc:	788b      	ldrb	r3, [r1, #2]
  4016ce:	7083      	strb	r3, [r0, #2]
  4016d0:	4660      	mov	r0, ip
  4016d2:	4770      	bx	lr

004016d4 <memset>:
  4016d4:	b470      	push	{r4, r5, r6}
  4016d6:	0786      	lsls	r6, r0, #30
  4016d8:	d046      	beq.n	401768 <memset+0x94>
  4016da:	1e54      	subs	r4, r2, #1
  4016dc:	2a00      	cmp	r2, #0
  4016de:	d041      	beq.n	401764 <memset+0x90>
  4016e0:	b2ca      	uxtb	r2, r1
  4016e2:	4603      	mov	r3, r0
  4016e4:	e002      	b.n	4016ec <memset+0x18>
  4016e6:	f114 34ff 	adds.w	r4, r4, #4294967295
  4016ea:	d33b      	bcc.n	401764 <memset+0x90>
  4016ec:	f803 2b01 	strb.w	r2, [r3], #1
  4016f0:	079d      	lsls	r5, r3, #30
  4016f2:	d1f8      	bne.n	4016e6 <memset+0x12>
  4016f4:	2c03      	cmp	r4, #3
  4016f6:	d92e      	bls.n	401756 <memset+0x82>
  4016f8:	b2cd      	uxtb	r5, r1
  4016fa:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4016fe:	2c0f      	cmp	r4, #15
  401700:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  401704:	d919      	bls.n	40173a <memset+0x66>
  401706:	f103 0210 	add.w	r2, r3, #16
  40170a:	4626      	mov	r6, r4
  40170c:	3e10      	subs	r6, #16
  40170e:	2e0f      	cmp	r6, #15
  401710:	f842 5c10 	str.w	r5, [r2, #-16]
  401714:	f842 5c0c 	str.w	r5, [r2, #-12]
  401718:	f842 5c08 	str.w	r5, [r2, #-8]
  40171c:	f842 5c04 	str.w	r5, [r2, #-4]
  401720:	f102 0210 	add.w	r2, r2, #16
  401724:	d8f2      	bhi.n	40170c <memset+0x38>
  401726:	f1a4 0210 	sub.w	r2, r4, #16
  40172a:	f022 020f 	bic.w	r2, r2, #15
  40172e:	f004 040f 	and.w	r4, r4, #15
  401732:	3210      	adds	r2, #16
  401734:	2c03      	cmp	r4, #3
  401736:	4413      	add	r3, r2
  401738:	d90d      	bls.n	401756 <memset+0x82>
  40173a:	461e      	mov	r6, r3
  40173c:	4622      	mov	r2, r4
  40173e:	3a04      	subs	r2, #4
  401740:	2a03      	cmp	r2, #3
  401742:	f846 5b04 	str.w	r5, [r6], #4
  401746:	d8fa      	bhi.n	40173e <memset+0x6a>
  401748:	1f22      	subs	r2, r4, #4
  40174a:	f022 0203 	bic.w	r2, r2, #3
  40174e:	3204      	adds	r2, #4
  401750:	4413      	add	r3, r2
  401752:	f004 0403 	and.w	r4, r4, #3
  401756:	b12c      	cbz	r4, 401764 <memset+0x90>
  401758:	b2c9      	uxtb	r1, r1
  40175a:	441c      	add	r4, r3
  40175c:	f803 1b01 	strb.w	r1, [r3], #1
  401760:	429c      	cmp	r4, r3
  401762:	d1fb      	bne.n	40175c <memset+0x88>
  401764:	bc70      	pop	{r4, r5, r6}
  401766:	4770      	bx	lr
  401768:	4614      	mov	r4, r2
  40176a:	4603      	mov	r3, r0
  40176c:	e7c2      	b.n	4016f4 <memset+0x20>
  40176e:	bf00      	nop
	...

00401780 <strlen>:
  401780:	f890 f000 	pld	[r0]
  401784:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  401788:	f020 0107 	bic.w	r1, r0, #7
  40178c:	f06f 0c00 	mvn.w	ip, #0
  401790:	f010 0407 	ands.w	r4, r0, #7
  401794:	f891 f020 	pld	[r1, #32]
  401798:	f040 8049 	bne.w	40182e <strlen+0xae>
  40179c:	f04f 0400 	mov.w	r4, #0
  4017a0:	f06f 0007 	mvn.w	r0, #7
  4017a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4017a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4017ac:	f100 0008 	add.w	r0, r0, #8
  4017b0:	fa82 f24c 	uadd8	r2, r2, ip
  4017b4:	faa4 f28c 	sel	r2, r4, ip
  4017b8:	fa83 f34c 	uadd8	r3, r3, ip
  4017bc:	faa2 f38c 	sel	r3, r2, ip
  4017c0:	bb4b      	cbnz	r3, 401816 <strlen+0x96>
  4017c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4017c6:	fa82 f24c 	uadd8	r2, r2, ip
  4017ca:	f100 0008 	add.w	r0, r0, #8
  4017ce:	faa4 f28c 	sel	r2, r4, ip
  4017d2:	fa83 f34c 	uadd8	r3, r3, ip
  4017d6:	faa2 f38c 	sel	r3, r2, ip
  4017da:	b9e3      	cbnz	r3, 401816 <strlen+0x96>
  4017dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4017e0:	fa82 f24c 	uadd8	r2, r2, ip
  4017e4:	f100 0008 	add.w	r0, r0, #8
  4017e8:	faa4 f28c 	sel	r2, r4, ip
  4017ec:	fa83 f34c 	uadd8	r3, r3, ip
  4017f0:	faa2 f38c 	sel	r3, r2, ip
  4017f4:	b97b      	cbnz	r3, 401816 <strlen+0x96>
  4017f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4017fa:	f101 0120 	add.w	r1, r1, #32
  4017fe:	fa82 f24c 	uadd8	r2, r2, ip
  401802:	f100 0008 	add.w	r0, r0, #8
  401806:	faa4 f28c 	sel	r2, r4, ip
  40180a:	fa83 f34c 	uadd8	r3, r3, ip
  40180e:	faa2 f38c 	sel	r3, r2, ip
  401812:	2b00      	cmp	r3, #0
  401814:	d0c6      	beq.n	4017a4 <strlen+0x24>
  401816:	2a00      	cmp	r2, #0
  401818:	bf04      	itt	eq
  40181a:	3004      	addeq	r0, #4
  40181c:	461a      	moveq	r2, r3
  40181e:	ba12      	rev	r2, r2
  401820:	fab2 f282 	clz	r2, r2
  401824:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  401828:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40182c:	4770      	bx	lr
  40182e:	e9d1 2300 	ldrd	r2, r3, [r1]
  401832:	f004 0503 	and.w	r5, r4, #3
  401836:	f1c4 0000 	rsb	r0, r4, #0
  40183a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40183e:	f014 0f04 	tst.w	r4, #4
  401842:	f891 f040 	pld	[r1, #64]	; 0x40
  401846:	fa0c f505 	lsl.w	r5, ip, r5
  40184a:	ea62 0205 	orn	r2, r2, r5
  40184e:	bf1c      	itt	ne
  401850:	ea63 0305 	ornne	r3, r3, r5
  401854:	4662      	movne	r2, ip
  401856:	f04f 0400 	mov.w	r4, #0
  40185a:	e7a9      	b.n	4017b0 <strlen+0x30>

0040185c <_strtol_l.isra.0>:
  40185c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401860:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  401864:	460f      	mov	r7, r1
  401866:	4680      	mov	r8, r0
  401868:	4616      	mov	r6, r2
  40186a:	461d      	mov	r5, r3
  40186c:	468a      	mov	sl, r1
  40186e:	e000      	b.n	401872 <_strtol_l.isra.0+0x16>
  401870:	46a2      	mov	sl, r4
  401872:	4654      	mov	r4, sl
  401874:	4648      	mov	r0, r9
  401876:	f814 bb01 	ldrb.w	fp, [r4], #1
  40187a:	f001 fc8b 	bl	403194 <__locale_ctype_ptr_l>
  40187e:	4458      	add	r0, fp
  401880:	7842      	ldrb	r2, [r0, #1]
  401882:	f012 0208 	ands.w	r2, r2, #8
  401886:	d1f3      	bne.n	401870 <_strtol_l.isra.0+0x14>
  401888:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
  40188c:	d04f      	beq.n	40192e <_strtol_l.isra.0+0xd2>
  40188e:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
  401892:	bf04      	itt	eq
  401894:	f894 b000 	ldrbeq.w	fp, [r4]
  401898:	f10a 0402 	addeq.w	r4, sl, #2
  40189c:	b11d      	cbz	r5, 4018a6 <_strtol_l.isra.0+0x4a>
  40189e:	2d10      	cmp	r5, #16
  4018a0:	d056      	beq.n	401950 <_strtol_l.isra.0+0xf4>
  4018a2:	46ac      	mov	ip, r5
  4018a4:	e004      	b.n	4018b0 <_strtol_l.isra.0+0x54>
  4018a6:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
  4018aa:	d060      	beq.n	40196e <_strtol_l.isra.0+0x112>
  4018ac:	250a      	movs	r5, #10
  4018ae:	46ac      	mov	ip, r5
  4018b0:	2a00      	cmp	r2, #0
  4018b2:	bf0c      	ite	eq
  4018b4:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
  4018b8:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
  4018bc:	2100      	movs	r1, #0
  4018be:	fbb9 fefc 	udiv	lr, r9, ip
  4018c2:	4608      	mov	r0, r1
  4018c4:	fb0c 9a1e 	mls	sl, ip, lr, r9
  4018c8:	e005      	b.n	4018d6 <_strtol_l.isra.0+0x7a>
  4018ca:	d029      	beq.n	401920 <_strtol_l.isra.0+0xc4>
  4018cc:	fb0c 3000 	mla	r0, ip, r0, r3
  4018d0:	2101      	movs	r1, #1
  4018d2:	f814 bb01 	ldrb.w	fp, [r4], #1
  4018d6:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
  4018da:	2b09      	cmp	r3, #9
  4018dc:	d905      	bls.n	4018ea <_strtol_l.isra.0+0x8e>
  4018de:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
  4018e2:	2b19      	cmp	r3, #25
  4018e4:	d80b      	bhi.n	4018fe <_strtol_l.isra.0+0xa2>
  4018e6:	f1ab 0337 	sub.w	r3, fp, #55	; 0x37
  4018ea:	429d      	cmp	r5, r3
  4018ec:	dd0f      	ble.n	40190e <_strtol_l.isra.0+0xb2>
  4018ee:	f1b1 3fff 	cmp.w	r1, #4294967295
  4018f2:	d0ee      	beq.n	4018d2 <_strtol_l.isra.0+0x76>
  4018f4:	4586      	cmp	lr, r0
  4018f6:	d2e8      	bcs.n	4018ca <_strtol_l.isra.0+0x6e>
  4018f8:	f04f 31ff 	mov.w	r1, #4294967295
  4018fc:	e7e9      	b.n	4018d2 <_strtol_l.isra.0+0x76>
  4018fe:	f1ab 0361 	sub.w	r3, fp, #97	; 0x61
  401902:	2b19      	cmp	r3, #25
  401904:	d803      	bhi.n	40190e <_strtol_l.isra.0+0xb2>
  401906:	f1ab 0357 	sub.w	r3, fp, #87	; 0x57
  40190a:	429d      	cmp	r5, r3
  40190c:	dcef      	bgt.n	4018ee <_strtol_l.isra.0+0x92>
  40190e:	1c4b      	adds	r3, r1, #1
  401910:	d013      	beq.n	40193a <_strtol_l.isra.0+0xde>
  401912:	b102      	cbz	r2, 401916 <_strtol_l.isra.0+0xba>
  401914:	4240      	negs	r0, r0
  401916:	b146      	cbz	r6, 40192a <_strtol_l.isra.0+0xce>
  401918:	b9c1      	cbnz	r1, 40194c <_strtol_l.isra.0+0xf0>
  40191a:	6037      	str	r7, [r6, #0]
  40191c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401920:	459a      	cmp	sl, r3
  401922:	dad3      	bge.n	4018cc <_strtol_l.isra.0+0x70>
  401924:	f04f 31ff 	mov.w	r1, #4294967295
  401928:	e7d3      	b.n	4018d2 <_strtol_l.isra.0+0x76>
  40192a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40192e:	f894 b000 	ldrb.w	fp, [r4]
  401932:	2201      	movs	r2, #1
  401934:	f10a 0402 	add.w	r4, sl, #2
  401938:	e7b0      	b.n	40189c <_strtol_l.isra.0+0x40>
  40193a:	2322      	movs	r3, #34	; 0x22
  40193c:	f8c8 3000 	str.w	r3, [r8]
  401940:	b1ee      	cbz	r6, 40197e <_strtol_l.isra.0+0x122>
  401942:	1e67      	subs	r7, r4, #1
  401944:	4648      	mov	r0, r9
  401946:	6037      	str	r7, [r6, #0]
  401948:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40194c:	4681      	mov	r9, r0
  40194e:	e7f8      	b.n	401942 <_strtol_l.isra.0+0xe6>
  401950:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
  401954:	d1a5      	bne.n	4018a2 <_strtol_l.isra.0+0x46>
  401956:	7823      	ldrb	r3, [r4, #0]
  401958:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  40195c:	2b58      	cmp	r3, #88	; 0x58
  40195e:	d1a0      	bne.n	4018a2 <_strtol_l.isra.0+0x46>
  401960:	f04f 0c10 	mov.w	ip, #16
  401964:	f894 b001 	ldrb.w	fp, [r4, #1]
  401968:	4665      	mov	r5, ip
  40196a:	3402      	adds	r4, #2
  40196c:	e7a0      	b.n	4018b0 <_strtol_l.isra.0+0x54>
  40196e:	7823      	ldrb	r3, [r4, #0]
  401970:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  401974:	2b58      	cmp	r3, #88	; 0x58
  401976:	d0f3      	beq.n	401960 <_strtol_l.isra.0+0x104>
  401978:	2508      	movs	r5, #8
  40197a:	46ac      	mov	ip, r5
  40197c:	e798      	b.n	4018b0 <_strtol_l.isra.0+0x54>
  40197e:	4648      	mov	r0, r9
  401980:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00401984 <strtol>:
  401984:	b530      	push	{r4, r5, lr}
  401986:	4c08      	ldr	r4, [pc, #32]	; (4019a8 <strtol+0x24>)
  401988:	4b08      	ldr	r3, [pc, #32]	; (4019ac <strtol+0x28>)
  40198a:	6825      	ldr	r5, [r4, #0]
  40198c:	6b6c      	ldr	r4, [r5, #52]	; 0x34
  40198e:	b083      	sub	sp, #12
  401990:	2c00      	cmp	r4, #0
  401992:	bf08      	it	eq
  401994:	461c      	moveq	r4, r3
  401996:	9400      	str	r4, [sp, #0]
  401998:	4613      	mov	r3, r2
  40199a:	460a      	mov	r2, r1
  40199c:	4601      	mov	r1, r0
  40199e:	4628      	mov	r0, r5
  4019a0:	f7ff ff5c 	bl	40185c <_strtol_l.isra.0>
  4019a4:	b003      	add	sp, #12
  4019a6:	bd30      	pop	{r4, r5, pc}
  4019a8:	20400028 	.word	0x20400028
  4019ac:	2040045c 	.word	0x2040045c

004019b0 <__sprint_r.part.0>:
  4019b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4019b4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4019b6:	049c      	lsls	r4, r3, #18
  4019b8:	4693      	mov	fp, r2
  4019ba:	d52f      	bpl.n	401a1c <__sprint_r.part.0+0x6c>
  4019bc:	6893      	ldr	r3, [r2, #8]
  4019be:	6812      	ldr	r2, [r2, #0]
  4019c0:	b353      	cbz	r3, 401a18 <__sprint_r.part.0+0x68>
  4019c2:	460e      	mov	r6, r1
  4019c4:	4607      	mov	r7, r0
  4019c6:	f102 0908 	add.w	r9, r2, #8
  4019ca:	e919 0420 	ldmdb	r9, {r5, sl}
  4019ce:	ea5f 089a 	movs.w	r8, sl, lsr #2
  4019d2:	d017      	beq.n	401a04 <__sprint_r.part.0+0x54>
  4019d4:	3d04      	subs	r5, #4
  4019d6:	2400      	movs	r4, #0
  4019d8:	e001      	b.n	4019de <__sprint_r.part.0+0x2e>
  4019da:	45a0      	cmp	r8, r4
  4019dc:	d010      	beq.n	401a00 <__sprint_r.part.0+0x50>
  4019de:	4632      	mov	r2, r6
  4019e0:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4019e4:	4638      	mov	r0, r7
  4019e6:	f001 f8bb 	bl	402b60 <_fputwc_r>
  4019ea:	1c43      	adds	r3, r0, #1
  4019ec:	f104 0401 	add.w	r4, r4, #1
  4019f0:	d1f3      	bne.n	4019da <__sprint_r.part.0+0x2a>
  4019f2:	2300      	movs	r3, #0
  4019f4:	f8cb 3008 	str.w	r3, [fp, #8]
  4019f8:	f8cb 3004 	str.w	r3, [fp, #4]
  4019fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401a00:	f8db 3008 	ldr.w	r3, [fp, #8]
  401a04:	f02a 0a03 	bic.w	sl, sl, #3
  401a08:	eba3 030a 	sub.w	r3, r3, sl
  401a0c:	f8cb 3008 	str.w	r3, [fp, #8]
  401a10:	f109 0908 	add.w	r9, r9, #8
  401a14:	2b00      	cmp	r3, #0
  401a16:	d1d8      	bne.n	4019ca <__sprint_r.part.0+0x1a>
  401a18:	2000      	movs	r0, #0
  401a1a:	e7ea      	b.n	4019f2 <__sprint_r.part.0+0x42>
  401a1c:	f001 fa0a 	bl	402e34 <__sfvwrite_r>
  401a20:	2300      	movs	r3, #0
  401a22:	f8cb 3008 	str.w	r3, [fp, #8]
  401a26:	f8cb 3004 	str.w	r3, [fp, #4]
  401a2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401a2e:	bf00      	nop

00401a30 <_vfiprintf_r>:
  401a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401a34:	b0ad      	sub	sp, #180	; 0xb4
  401a36:	461d      	mov	r5, r3
  401a38:	468b      	mov	fp, r1
  401a3a:	4690      	mov	r8, r2
  401a3c:	9307      	str	r3, [sp, #28]
  401a3e:	9006      	str	r0, [sp, #24]
  401a40:	b118      	cbz	r0, 401a4a <_vfiprintf_r+0x1a>
  401a42:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401a44:	2b00      	cmp	r3, #0
  401a46:	f000 80f3 	beq.w	401c30 <_vfiprintf_r+0x200>
  401a4a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401a4e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  401a52:	07df      	lsls	r7, r3, #31
  401a54:	b281      	uxth	r1, r0
  401a56:	d402      	bmi.n	401a5e <_vfiprintf_r+0x2e>
  401a58:	058e      	lsls	r6, r1, #22
  401a5a:	f140 80fc 	bpl.w	401c56 <_vfiprintf_r+0x226>
  401a5e:	048c      	lsls	r4, r1, #18
  401a60:	d40a      	bmi.n	401a78 <_vfiprintf_r+0x48>
  401a62:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401a66:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  401a6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  401a6e:	f8ab 100c 	strh.w	r1, [fp, #12]
  401a72:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  401a76:	b289      	uxth	r1, r1
  401a78:	0708      	lsls	r0, r1, #28
  401a7a:	f140 80b3 	bpl.w	401be4 <_vfiprintf_r+0x1b4>
  401a7e:	f8db 3010 	ldr.w	r3, [fp, #16]
  401a82:	2b00      	cmp	r3, #0
  401a84:	f000 80ae 	beq.w	401be4 <_vfiprintf_r+0x1b4>
  401a88:	f001 031a 	and.w	r3, r1, #26
  401a8c:	2b0a      	cmp	r3, #10
  401a8e:	f000 80b5 	beq.w	401bfc <_vfiprintf_r+0x1cc>
  401a92:	2300      	movs	r3, #0
  401a94:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  401a98:	930b      	str	r3, [sp, #44]	; 0x2c
  401a9a:	9311      	str	r3, [sp, #68]	; 0x44
  401a9c:	9310      	str	r3, [sp, #64]	; 0x40
  401a9e:	9303      	str	r3, [sp, #12]
  401aa0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  401aa4:	46ca      	mov	sl, r9
  401aa6:	f8cd b010 	str.w	fp, [sp, #16]
  401aaa:	f898 3000 	ldrb.w	r3, [r8]
  401aae:	4644      	mov	r4, r8
  401ab0:	b1fb      	cbz	r3, 401af2 <_vfiprintf_r+0xc2>
  401ab2:	2b25      	cmp	r3, #37	; 0x25
  401ab4:	d102      	bne.n	401abc <_vfiprintf_r+0x8c>
  401ab6:	e01c      	b.n	401af2 <_vfiprintf_r+0xc2>
  401ab8:	2b25      	cmp	r3, #37	; 0x25
  401aba:	d003      	beq.n	401ac4 <_vfiprintf_r+0x94>
  401abc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  401ac0:	2b00      	cmp	r3, #0
  401ac2:	d1f9      	bne.n	401ab8 <_vfiprintf_r+0x88>
  401ac4:	eba4 0508 	sub.w	r5, r4, r8
  401ac8:	b19d      	cbz	r5, 401af2 <_vfiprintf_r+0xc2>
  401aca:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401acc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401ace:	f8ca 8000 	str.w	r8, [sl]
  401ad2:	3301      	adds	r3, #1
  401ad4:	442a      	add	r2, r5
  401ad6:	2b07      	cmp	r3, #7
  401ad8:	f8ca 5004 	str.w	r5, [sl, #4]
  401adc:	9211      	str	r2, [sp, #68]	; 0x44
  401ade:	9310      	str	r3, [sp, #64]	; 0x40
  401ae0:	dd7a      	ble.n	401bd8 <_vfiprintf_r+0x1a8>
  401ae2:	2a00      	cmp	r2, #0
  401ae4:	f040 84b0 	bne.w	402448 <_vfiprintf_r+0xa18>
  401ae8:	9b03      	ldr	r3, [sp, #12]
  401aea:	9210      	str	r2, [sp, #64]	; 0x40
  401aec:	442b      	add	r3, r5
  401aee:	46ca      	mov	sl, r9
  401af0:	9303      	str	r3, [sp, #12]
  401af2:	7823      	ldrb	r3, [r4, #0]
  401af4:	2b00      	cmp	r3, #0
  401af6:	f000 83e0 	beq.w	4022ba <_vfiprintf_r+0x88a>
  401afa:	2000      	movs	r0, #0
  401afc:	f04f 0300 	mov.w	r3, #0
  401b00:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  401b04:	f104 0801 	add.w	r8, r4, #1
  401b08:	7862      	ldrb	r2, [r4, #1]
  401b0a:	4605      	mov	r5, r0
  401b0c:	4606      	mov	r6, r0
  401b0e:	4603      	mov	r3, r0
  401b10:	f04f 34ff 	mov.w	r4, #4294967295
  401b14:	f108 0801 	add.w	r8, r8, #1
  401b18:	f1a2 0120 	sub.w	r1, r2, #32
  401b1c:	2958      	cmp	r1, #88	; 0x58
  401b1e:	f200 82de 	bhi.w	4020de <_vfiprintf_r+0x6ae>
  401b22:	e8df f011 	tbh	[pc, r1, lsl #1]
  401b26:	0221      	.short	0x0221
  401b28:	02dc02dc 	.word	0x02dc02dc
  401b2c:	02dc0229 	.word	0x02dc0229
  401b30:	02dc02dc 	.word	0x02dc02dc
  401b34:	02dc02dc 	.word	0x02dc02dc
  401b38:	028902dc 	.word	0x028902dc
  401b3c:	02dc0295 	.word	0x02dc0295
  401b40:	02bd00a2 	.word	0x02bd00a2
  401b44:	019f02dc 	.word	0x019f02dc
  401b48:	01a401a4 	.word	0x01a401a4
  401b4c:	01a401a4 	.word	0x01a401a4
  401b50:	01a401a4 	.word	0x01a401a4
  401b54:	01a401a4 	.word	0x01a401a4
  401b58:	02dc01a4 	.word	0x02dc01a4
  401b5c:	02dc02dc 	.word	0x02dc02dc
  401b60:	02dc02dc 	.word	0x02dc02dc
  401b64:	02dc02dc 	.word	0x02dc02dc
  401b68:	02dc02dc 	.word	0x02dc02dc
  401b6c:	01b202dc 	.word	0x01b202dc
  401b70:	02dc02dc 	.word	0x02dc02dc
  401b74:	02dc02dc 	.word	0x02dc02dc
  401b78:	02dc02dc 	.word	0x02dc02dc
  401b7c:	02dc02dc 	.word	0x02dc02dc
  401b80:	02dc02dc 	.word	0x02dc02dc
  401b84:	02dc0197 	.word	0x02dc0197
  401b88:	02dc02dc 	.word	0x02dc02dc
  401b8c:	02dc02dc 	.word	0x02dc02dc
  401b90:	02dc019b 	.word	0x02dc019b
  401b94:	025302dc 	.word	0x025302dc
  401b98:	02dc02dc 	.word	0x02dc02dc
  401b9c:	02dc02dc 	.word	0x02dc02dc
  401ba0:	02dc02dc 	.word	0x02dc02dc
  401ba4:	02dc02dc 	.word	0x02dc02dc
  401ba8:	02dc02dc 	.word	0x02dc02dc
  401bac:	021b025a 	.word	0x021b025a
  401bb0:	02dc02dc 	.word	0x02dc02dc
  401bb4:	026e02dc 	.word	0x026e02dc
  401bb8:	02dc021b 	.word	0x02dc021b
  401bbc:	027302dc 	.word	0x027302dc
  401bc0:	01f502dc 	.word	0x01f502dc
  401bc4:	02090182 	.word	0x02090182
  401bc8:	02dc02d7 	.word	0x02dc02d7
  401bcc:	02dc029a 	.word	0x02dc029a
  401bd0:	02dc00a7 	.word	0x02dc00a7
  401bd4:	022e02dc 	.word	0x022e02dc
  401bd8:	f10a 0a08 	add.w	sl, sl, #8
  401bdc:	9b03      	ldr	r3, [sp, #12]
  401bde:	442b      	add	r3, r5
  401be0:	9303      	str	r3, [sp, #12]
  401be2:	e786      	b.n	401af2 <_vfiprintf_r+0xc2>
  401be4:	4659      	mov	r1, fp
  401be6:	9806      	ldr	r0, [sp, #24]
  401be8:	f000 fdac 	bl	402744 <__swsetup_r>
  401bec:	bb18      	cbnz	r0, 401c36 <_vfiprintf_r+0x206>
  401bee:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  401bf2:	f001 031a 	and.w	r3, r1, #26
  401bf6:	2b0a      	cmp	r3, #10
  401bf8:	f47f af4b 	bne.w	401a92 <_vfiprintf_r+0x62>
  401bfc:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  401c00:	2b00      	cmp	r3, #0
  401c02:	f6ff af46 	blt.w	401a92 <_vfiprintf_r+0x62>
  401c06:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401c0a:	07db      	lsls	r3, r3, #31
  401c0c:	d405      	bmi.n	401c1a <_vfiprintf_r+0x1ea>
  401c0e:	058f      	lsls	r7, r1, #22
  401c10:	d403      	bmi.n	401c1a <_vfiprintf_r+0x1ea>
  401c12:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401c16:	f001 fac7 	bl	4031a8 <__retarget_lock_release_recursive>
  401c1a:	462b      	mov	r3, r5
  401c1c:	4642      	mov	r2, r8
  401c1e:	4659      	mov	r1, fp
  401c20:	9806      	ldr	r0, [sp, #24]
  401c22:	f000 fd4d 	bl	4026c0 <__sbprintf>
  401c26:	9003      	str	r0, [sp, #12]
  401c28:	9803      	ldr	r0, [sp, #12]
  401c2a:	b02d      	add	sp, #180	; 0xb4
  401c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401c30:	f000 fef4 	bl	402a1c <__sinit>
  401c34:	e709      	b.n	401a4a <_vfiprintf_r+0x1a>
  401c36:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401c3a:	07d9      	lsls	r1, r3, #31
  401c3c:	d404      	bmi.n	401c48 <_vfiprintf_r+0x218>
  401c3e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  401c42:	059a      	lsls	r2, r3, #22
  401c44:	f140 84aa 	bpl.w	40259c <_vfiprintf_r+0xb6c>
  401c48:	f04f 33ff 	mov.w	r3, #4294967295
  401c4c:	9303      	str	r3, [sp, #12]
  401c4e:	9803      	ldr	r0, [sp, #12]
  401c50:	b02d      	add	sp, #180	; 0xb4
  401c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401c56:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401c5a:	f001 faa3 	bl	4031a4 <__retarget_lock_acquire_recursive>
  401c5e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  401c62:	b281      	uxth	r1, r0
  401c64:	e6fb      	b.n	401a5e <_vfiprintf_r+0x2e>
  401c66:	4276      	negs	r6, r6
  401c68:	9207      	str	r2, [sp, #28]
  401c6a:	f043 0304 	orr.w	r3, r3, #4
  401c6e:	f898 2000 	ldrb.w	r2, [r8]
  401c72:	e74f      	b.n	401b14 <_vfiprintf_r+0xe4>
  401c74:	9608      	str	r6, [sp, #32]
  401c76:	069e      	lsls	r6, r3, #26
  401c78:	f100 8450 	bmi.w	40251c <_vfiprintf_r+0xaec>
  401c7c:	9907      	ldr	r1, [sp, #28]
  401c7e:	06dd      	lsls	r5, r3, #27
  401c80:	460a      	mov	r2, r1
  401c82:	f100 83ef 	bmi.w	402464 <_vfiprintf_r+0xa34>
  401c86:	0658      	lsls	r0, r3, #25
  401c88:	f140 83ec 	bpl.w	402464 <_vfiprintf_r+0xa34>
  401c8c:	880e      	ldrh	r6, [r1, #0]
  401c8e:	3104      	adds	r1, #4
  401c90:	2700      	movs	r7, #0
  401c92:	2201      	movs	r2, #1
  401c94:	9107      	str	r1, [sp, #28]
  401c96:	f04f 0100 	mov.w	r1, #0
  401c9a:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  401c9e:	2500      	movs	r5, #0
  401ca0:	1c61      	adds	r1, r4, #1
  401ca2:	f000 8116 	beq.w	401ed2 <_vfiprintf_r+0x4a2>
  401ca6:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  401caa:	9102      	str	r1, [sp, #8]
  401cac:	ea56 0107 	orrs.w	r1, r6, r7
  401cb0:	f040 8114 	bne.w	401edc <_vfiprintf_r+0x4ac>
  401cb4:	2c00      	cmp	r4, #0
  401cb6:	f040 835c 	bne.w	402372 <_vfiprintf_r+0x942>
  401cba:	2a00      	cmp	r2, #0
  401cbc:	f040 83b7 	bne.w	40242e <_vfiprintf_r+0x9fe>
  401cc0:	f013 0301 	ands.w	r3, r3, #1
  401cc4:	9305      	str	r3, [sp, #20]
  401cc6:	f000 8457 	beq.w	402578 <_vfiprintf_r+0xb48>
  401cca:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  401cce:	2330      	movs	r3, #48	; 0x30
  401cd0:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  401cd4:	9b05      	ldr	r3, [sp, #20]
  401cd6:	42a3      	cmp	r3, r4
  401cd8:	bfb8      	it	lt
  401cda:	4623      	movlt	r3, r4
  401cdc:	9301      	str	r3, [sp, #4]
  401cde:	b10d      	cbz	r5, 401ce4 <_vfiprintf_r+0x2b4>
  401ce0:	3301      	adds	r3, #1
  401ce2:	9301      	str	r3, [sp, #4]
  401ce4:	9b02      	ldr	r3, [sp, #8]
  401ce6:	f013 0302 	ands.w	r3, r3, #2
  401cea:	9309      	str	r3, [sp, #36]	; 0x24
  401cec:	d002      	beq.n	401cf4 <_vfiprintf_r+0x2c4>
  401cee:	9b01      	ldr	r3, [sp, #4]
  401cf0:	3302      	adds	r3, #2
  401cf2:	9301      	str	r3, [sp, #4]
  401cf4:	9b02      	ldr	r3, [sp, #8]
  401cf6:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  401cfa:	930a      	str	r3, [sp, #40]	; 0x28
  401cfc:	f040 8217 	bne.w	40212e <_vfiprintf_r+0x6fe>
  401d00:	9b08      	ldr	r3, [sp, #32]
  401d02:	9a01      	ldr	r2, [sp, #4]
  401d04:	1a9d      	subs	r5, r3, r2
  401d06:	2d00      	cmp	r5, #0
  401d08:	f340 8211 	ble.w	40212e <_vfiprintf_r+0x6fe>
  401d0c:	2d10      	cmp	r5, #16
  401d0e:	f340 8490 	ble.w	402632 <_vfiprintf_r+0xc02>
  401d12:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401d14:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401d16:	4ec4      	ldr	r6, [pc, #784]	; (402028 <_vfiprintf_r+0x5f8>)
  401d18:	46d6      	mov	lr, sl
  401d1a:	2710      	movs	r7, #16
  401d1c:	46a2      	mov	sl, r4
  401d1e:	4619      	mov	r1, r3
  401d20:	9c06      	ldr	r4, [sp, #24]
  401d22:	e007      	b.n	401d34 <_vfiprintf_r+0x304>
  401d24:	f101 0c02 	add.w	ip, r1, #2
  401d28:	f10e 0e08 	add.w	lr, lr, #8
  401d2c:	4601      	mov	r1, r0
  401d2e:	3d10      	subs	r5, #16
  401d30:	2d10      	cmp	r5, #16
  401d32:	dd11      	ble.n	401d58 <_vfiprintf_r+0x328>
  401d34:	1c48      	adds	r0, r1, #1
  401d36:	3210      	adds	r2, #16
  401d38:	2807      	cmp	r0, #7
  401d3a:	9211      	str	r2, [sp, #68]	; 0x44
  401d3c:	e88e 00c0 	stmia.w	lr, {r6, r7}
  401d40:	9010      	str	r0, [sp, #64]	; 0x40
  401d42:	ddef      	ble.n	401d24 <_vfiprintf_r+0x2f4>
  401d44:	2a00      	cmp	r2, #0
  401d46:	f040 81e4 	bne.w	402112 <_vfiprintf_r+0x6e2>
  401d4a:	3d10      	subs	r5, #16
  401d4c:	2d10      	cmp	r5, #16
  401d4e:	4611      	mov	r1, r2
  401d50:	f04f 0c01 	mov.w	ip, #1
  401d54:	46ce      	mov	lr, r9
  401d56:	dced      	bgt.n	401d34 <_vfiprintf_r+0x304>
  401d58:	4654      	mov	r4, sl
  401d5a:	4661      	mov	r1, ip
  401d5c:	46f2      	mov	sl, lr
  401d5e:	442a      	add	r2, r5
  401d60:	2907      	cmp	r1, #7
  401d62:	9211      	str	r2, [sp, #68]	; 0x44
  401d64:	f8ca 6000 	str.w	r6, [sl]
  401d68:	f8ca 5004 	str.w	r5, [sl, #4]
  401d6c:	9110      	str	r1, [sp, #64]	; 0x40
  401d6e:	f300 82ec 	bgt.w	40234a <_vfiprintf_r+0x91a>
  401d72:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401d76:	f10a 0a08 	add.w	sl, sl, #8
  401d7a:	1c48      	adds	r0, r1, #1
  401d7c:	2d00      	cmp	r5, #0
  401d7e:	f040 81de 	bne.w	40213e <_vfiprintf_r+0x70e>
  401d82:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401d84:	2b00      	cmp	r3, #0
  401d86:	f000 81f8 	beq.w	40217a <_vfiprintf_r+0x74a>
  401d8a:	3202      	adds	r2, #2
  401d8c:	a90e      	add	r1, sp, #56	; 0x38
  401d8e:	2302      	movs	r3, #2
  401d90:	2807      	cmp	r0, #7
  401d92:	9211      	str	r2, [sp, #68]	; 0x44
  401d94:	9010      	str	r0, [sp, #64]	; 0x40
  401d96:	e88a 000a 	stmia.w	sl, {r1, r3}
  401d9a:	f340 81ea 	ble.w	402172 <_vfiprintf_r+0x742>
  401d9e:	2a00      	cmp	r2, #0
  401da0:	f040 838c 	bne.w	4024bc <_vfiprintf_r+0xa8c>
  401da4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401da6:	2b80      	cmp	r3, #128	; 0x80
  401da8:	f04f 0001 	mov.w	r0, #1
  401dac:	4611      	mov	r1, r2
  401dae:	46ca      	mov	sl, r9
  401db0:	f040 81e7 	bne.w	402182 <_vfiprintf_r+0x752>
  401db4:	9b08      	ldr	r3, [sp, #32]
  401db6:	9d01      	ldr	r5, [sp, #4]
  401db8:	1b5e      	subs	r6, r3, r5
  401dba:	2e00      	cmp	r6, #0
  401dbc:	f340 81e1 	ble.w	402182 <_vfiprintf_r+0x752>
  401dc0:	2e10      	cmp	r6, #16
  401dc2:	4d9a      	ldr	r5, [pc, #616]	; (40202c <_vfiprintf_r+0x5fc>)
  401dc4:	f340 8450 	ble.w	402668 <_vfiprintf_r+0xc38>
  401dc8:	46d4      	mov	ip, sl
  401dca:	2710      	movs	r7, #16
  401dcc:	46a2      	mov	sl, r4
  401dce:	9c06      	ldr	r4, [sp, #24]
  401dd0:	e007      	b.n	401de2 <_vfiprintf_r+0x3b2>
  401dd2:	f101 0e02 	add.w	lr, r1, #2
  401dd6:	f10c 0c08 	add.w	ip, ip, #8
  401dda:	4601      	mov	r1, r0
  401ddc:	3e10      	subs	r6, #16
  401dde:	2e10      	cmp	r6, #16
  401de0:	dd11      	ble.n	401e06 <_vfiprintf_r+0x3d6>
  401de2:	1c48      	adds	r0, r1, #1
  401de4:	3210      	adds	r2, #16
  401de6:	2807      	cmp	r0, #7
  401de8:	9211      	str	r2, [sp, #68]	; 0x44
  401dea:	e88c 00a0 	stmia.w	ip, {r5, r7}
  401dee:	9010      	str	r0, [sp, #64]	; 0x40
  401df0:	ddef      	ble.n	401dd2 <_vfiprintf_r+0x3a2>
  401df2:	2a00      	cmp	r2, #0
  401df4:	f040 829d 	bne.w	402332 <_vfiprintf_r+0x902>
  401df8:	3e10      	subs	r6, #16
  401dfa:	2e10      	cmp	r6, #16
  401dfc:	f04f 0e01 	mov.w	lr, #1
  401e00:	4611      	mov	r1, r2
  401e02:	46cc      	mov	ip, r9
  401e04:	dced      	bgt.n	401de2 <_vfiprintf_r+0x3b2>
  401e06:	4654      	mov	r4, sl
  401e08:	46e2      	mov	sl, ip
  401e0a:	4432      	add	r2, r6
  401e0c:	f1be 0f07 	cmp.w	lr, #7
  401e10:	9211      	str	r2, [sp, #68]	; 0x44
  401e12:	e88a 0060 	stmia.w	sl, {r5, r6}
  401e16:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  401e1a:	f300 8369 	bgt.w	4024f0 <_vfiprintf_r+0xac0>
  401e1e:	f10a 0a08 	add.w	sl, sl, #8
  401e22:	f10e 0001 	add.w	r0, lr, #1
  401e26:	4671      	mov	r1, lr
  401e28:	e1ab      	b.n	402182 <_vfiprintf_r+0x752>
  401e2a:	9608      	str	r6, [sp, #32]
  401e2c:	f013 0220 	ands.w	r2, r3, #32
  401e30:	f040 838c 	bne.w	40254c <_vfiprintf_r+0xb1c>
  401e34:	f013 0110 	ands.w	r1, r3, #16
  401e38:	f040 831a 	bne.w	402470 <_vfiprintf_r+0xa40>
  401e3c:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  401e40:	f000 8316 	beq.w	402470 <_vfiprintf_r+0xa40>
  401e44:	9807      	ldr	r0, [sp, #28]
  401e46:	460a      	mov	r2, r1
  401e48:	4601      	mov	r1, r0
  401e4a:	3104      	adds	r1, #4
  401e4c:	8806      	ldrh	r6, [r0, #0]
  401e4e:	9107      	str	r1, [sp, #28]
  401e50:	2700      	movs	r7, #0
  401e52:	e720      	b.n	401c96 <_vfiprintf_r+0x266>
  401e54:	9608      	str	r6, [sp, #32]
  401e56:	f043 0310 	orr.w	r3, r3, #16
  401e5a:	e7e7      	b.n	401e2c <_vfiprintf_r+0x3fc>
  401e5c:	9608      	str	r6, [sp, #32]
  401e5e:	f043 0310 	orr.w	r3, r3, #16
  401e62:	e708      	b.n	401c76 <_vfiprintf_r+0x246>
  401e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401e68:	f898 2000 	ldrb.w	r2, [r8]
  401e6c:	e652      	b.n	401b14 <_vfiprintf_r+0xe4>
  401e6e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401e72:	2600      	movs	r6, #0
  401e74:	f818 2b01 	ldrb.w	r2, [r8], #1
  401e78:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  401e7c:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  401e80:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401e84:	2909      	cmp	r1, #9
  401e86:	d9f5      	bls.n	401e74 <_vfiprintf_r+0x444>
  401e88:	e646      	b.n	401b18 <_vfiprintf_r+0xe8>
  401e8a:	9608      	str	r6, [sp, #32]
  401e8c:	2800      	cmp	r0, #0
  401e8e:	f040 8408 	bne.w	4026a2 <_vfiprintf_r+0xc72>
  401e92:	f043 0310 	orr.w	r3, r3, #16
  401e96:	069e      	lsls	r6, r3, #26
  401e98:	f100 834c 	bmi.w	402534 <_vfiprintf_r+0xb04>
  401e9c:	06dd      	lsls	r5, r3, #27
  401e9e:	f100 82f3 	bmi.w	402488 <_vfiprintf_r+0xa58>
  401ea2:	0658      	lsls	r0, r3, #25
  401ea4:	f140 82f0 	bpl.w	402488 <_vfiprintf_r+0xa58>
  401ea8:	9d07      	ldr	r5, [sp, #28]
  401eaa:	f9b5 6000 	ldrsh.w	r6, [r5]
  401eae:	462a      	mov	r2, r5
  401eb0:	17f7      	asrs	r7, r6, #31
  401eb2:	3204      	adds	r2, #4
  401eb4:	4630      	mov	r0, r6
  401eb6:	4639      	mov	r1, r7
  401eb8:	9207      	str	r2, [sp, #28]
  401eba:	2800      	cmp	r0, #0
  401ebc:	f171 0200 	sbcs.w	r2, r1, #0
  401ec0:	f2c0 835d 	blt.w	40257e <_vfiprintf_r+0xb4e>
  401ec4:	1c61      	adds	r1, r4, #1
  401ec6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401eca:	f04f 0201 	mov.w	r2, #1
  401ece:	f47f aeea 	bne.w	401ca6 <_vfiprintf_r+0x276>
  401ed2:	ea56 0107 	orrs.w	r1, r6, r7
  401ed6:	f000 824d 	beq.w	402374 <_vfiprintf_r+0x944>
  401eda:	9302      	str	r3, [sp, #8]
  401edc:	2a01      	cmp	r2, #1
  401ede:	f000 828c 	beq.w	4023fa <_vfiprintf_r+0x9ca>
  401ee2:	2a02      	cmp	r2, #2
  401ee4:	f040 825c 	bne.w	4023a0 <_vfiprintf_r+0x970>
  401ee8:	980b      	ldr	r0, [sp, #44]	; 0x2c
  401eea:	46cb      	mov	fp, r9
  401eec:	0933      	lsrs	r3, r6, #4
  401eee:	f006 010f 	and.w	r1, r6, #15
  401ef2:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  401ef6:	093a      	lsrs	r2, r7, #4
  401ef8:	461e      	mov	r6, r3
  401efa:	4617      	mov	r7, r2
  401efc:	5c43      	ldrb	r3, [r0, r1]
  401efe:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  401f02:	ea56 0307 	orrs.w	r3, r6, r7
  401f06:	d1f1      	bne.n	401eec <_vfiprintf_r+0x4bc>
  401f08:	eba9 030b 	sub.w	r3, r9, fp
  401f0c:	9305      	str	r3, [sp, #20]
  401f0e:	e6e1      	b.n	401cd4 <_vfiprintf_r+0x2a4>
  401f10:	2800      	cmp	r0, #0
  401f12:	f040 83c0 	bne.w	402696 <_vfiprintf_r+0xc66>
  401f16:	0699      	lsls	r1, r3, #26
  401f18:	f100 8367 	bmi.w	4025ea <_vfiprintf_r+0xbba>
  401f1c:	06da      	lsls	r2, r3, #27
  401f1e:	f100 80f1 	bmi.w	402104 <_vfiprintf_r+0x6d4>
  401f22:	065b      	lsls	r3, r3, #25
  401f24:	f140 80ee 	bpl.w	402104 <_vfiprintf_r+0x6d4>
  401f28:	9a07      	ldr	r2, [sp, #28]
  401f2a:	6813      	ldr	r3, [r2, #0]
  401f2c:	3204      	adds	r2, #4
  401f2e:	9207      	str	r2, [sp, #28]
  401f30:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  401f34:	801a      	strh	r2, [r3, #0]
  401f36:	e5b8      	b.n	401aaa <_vfiprintf_r+0x7a>
  401f38:	9807      	ldr	r0, [sp, #28]
  401f3a:	4a3d      	ldr	r2, [pc, #244]	; (402030 <_vfiprintf_r+0x600>)
  401f3c:	9608      	str	r6, [sp, #32]
  401f3e:	920b      	str	r2, [sp, #44]	; 0x2c
  401f40:	6806      	ldr	r6, [r0, #0]
  401f42:	2278      	movs	r2, #120	; 0x78
  401f44:	2130      	movs	r1, #48	; 0x30
  401f46:	3004      	adds	r0, #4
  401f48:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  401f4c:	f043 0302 	orr.w	r3, r3, #2
  401f50:	9007      	str	r0, [sp, #28]
  401f52:	2700      	movs	r7, #0
  401f54:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  401f58:	2202      	movs	r2, #2
  401f5a:	e69c      	b.n	401c96 <_vfiprintf_r+0x266>
  401f5c:	9608      	str	r6, [sp, #32]
  401f5e:	2800      	cmp	r0, #0
  401f60:	d099      	beq.n	401e96 <_vfiprintf_r+0x466>
  401f62:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401f66:	e796      	b.n	401e96 <_vfiprintf_r+0x466>
  401f68:	f898 2000 	ldrb.w	r2, [r8]
  401f6c:	2d00      	cmp	r5, #0
  401f6e:	f47f add1 	bne.w	401b14 <_vfiprintf_r+0xe4>
  401f72:	2001      	movs	r0, #1
  401f74:	2520      	movs	r5, #32
  401f76:	e5cd      	b.n	401b14 <_vfiprintf_r+0xe4>
  401f78:	f043 0301 	orr.w	r3, r3, #1
  401f7c:	f898 2000 	ldrb.w	r2, [r8]
  401f80:	e5c8      	b.n	401b14 <_vfiprintf_r+0xe4>
  401f82:	9608      	str	r6, [sp, #32]
  401f84:	2800      	cmp	r0, #0
  401f86:	f040 8393 	bne.w	4026b0 <_vfiprintf_r+0xc80>
  401f8a:	4929      	ldr	r1, [pc, #164]	; (402030 <_vfiprintf_r+0x600>)
  401f8c:	910b      	str	r1, [sp, #44]	; 0x2c
  401f8e:	069f      	lsls	r7, r3, #26
  401f90:	f100 82e8 	bmi.w	402564 <_vfiprintf_r+0xb34>
  401f94:	9807      	ldr	r0, [sp, #28]
  401f96:	06de      	lsls	r6, r3, #27
  401f98:	4601      	mov	r1, r0
  401f9a:	f100 8270 	bmi.w	40247e <_vfiprintf_r+0xa4e>
  401f9e:	065d      	lsls	r5, r3, #25
  401fa0:	f140 826d 	bpl.w	40247e <_vfiprintf_r+0xa4e>
  401fa4:	3104      	adds	r1, #4
  401fa6:	8806      	ldrh	r6, [r0, #0]
  401fa8:	9107      	str	r1, [sp, #28]
  401faa:	2700      	movs	r7, #0
  401fac:	07d8      	lsls	r0, r3, #31
  401fae:	f140 8222 	bpl.w	4023f6 <_vfiprintf_r+0x9c6>
  401fb2:	ea56 0107 	orrs.w	r1, r6, r7
  401fb6:	f000 821e 	beq.w	4023f6 <_vfiprintf_r+0x9c6>
  401fba:	2130      	movs	r1, #48	; 0x30
  401fbc:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  401fc0:	f043 0302 	orr.w	r3, r3, #2
  401fc4:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  401fc8:	2202      	movs	r2, #2
  401fca:	e664      	b.n	401c96 <_vfiprintf_r+0x266>
  401fcc:	9608      	str	r6, [sp, #32]
  401fce:	2800      	cmp	r0, #0
  401fd0:	f040 836b 	bne.w	4026aa <_vfiprintf_r+0xc7a>
  401fd4:	4917      	ldr	r1, [pc, #92]	; (402034 <_vfiprintf_r+0x604>)
  401fd6:	910b      	str	r1, [sp, #44]	; 0x2c
  401fd8:	e7d9      	b.n	401f8e <_vfiprintf_r+0x55e>
  401fda:	9907      	ldr	r1, [sp, #28]
  401fdc:	9608      	str	r6, [sp, #32]
  401fde:	680a      	ldr	r2, [r1, #0]
  401fe0:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  401fe4:	f04f 0000 	mov.w	r0, #0
  401fe8:	460a      	mov	r2, r1
  401fea:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  401fee:	3204      	adds	r2, #4
  401ff0:	2001      	movs	r0, #1
  401ff2:	9001      	str	r0, [sp, #4]
  401ff4:	9207      	str	r2, [sp, #28]
  401ff6:	9005      	str	r0, [sp, #20]
  401ff8:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  401ffc:	9302      	str	r3, [sp, #8]
  401ffe:	2400      	movs	r4, #0
  402000:	e670      	b.n	401ce4 <_vfiprintf_r+0x2b4>
  402002:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402006:	f898 2000 	ldrb.w	r2, [r8]
  40200a:	e583      	b.n	401b14 <_vfiprintf_r+0xe4>
  40200c:	f898 2000 	ldrb.w	r2, [r8]
  402010:	2a6c      	cmp	r2, #108	; 0x6c
  402012:	bf03      	ittte	eq
  402014:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  402018:	f043 0320 	orreq.w	r3, r3, #32
  40201c:	f108 0801 	addeq.w	r8, r8, #1
  402020:	f043 0310 	orrne.w	r3, r3, #16
  402024:	e576      	b.n	401b14 <_vfiprintf_r+0xe4>
  402026:	bf00      	nop
  402028:	00404520 	.word	0x00404520
  40202c:	00404530 	.word	0x00404530
  402030:	00404504 	.word	0x00404504
  402034:	004044f0 	.word	0x004044f0
  402038:	9907      	ldr	r1, [sp, #28]
  40203a:	680e      	ldr	r6, [r1, #0]
  40203c:	460a      	mov	r2, r1
  40203e:	2e00      	cmp	r6, #0
  402040:	f102 0204 	add.w	r2, r2, #4
  402044:	f6ff ae0f 	blt.w	401c66 <_vfiprintf_r+0x236>
  402048:	9207      	str	r2, [sp, #28]
  40204a:	f898 2000 	ldrb.w	r2, [r8]
  40204e:	e561      	b.n	401b14 <_vfiprintf_r+0xe4>
  402050:	f898 2000 	ldrb.w	r2, [r8]
  402054:	2001      	movs	r0, #1
  402056:	252b      	movs	r5, #43	; 0x2b
  402058:	e55c      	b.n	401b14 <_vfiprintf_r+0xe4>
  40205a:	9907      	ldr	r1, [sp, #28]
  40205c:	9608      	str	r6, [sp, #32]
  40205e:	f8d1 b000 	ldr.w	fp, [r1]
  402062:	f04f 0200 	mov.w	r2, #0
  402066:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40206a:	1d0e      	adds	r6, r1, #4
  40206c:	f1bb 0f00 	cmp.w	fp, #0
  402070:	f000 82e5 	beq.w	40263e <_vfiprintf_r+0xc0e>
  402074:	1c67      	adds	r7, r4, #1
  402076:	f000 82c4 	beq.w	402602 <_vfiprintf_r+0xbd2>
  40207a:	4622      	mov	r2, r4
  40207c:	2100      	movs	r1, #0
  40207e:	4658      	mov	r0, fp
  402080:	9301      	str	r3, [sp, #4]
  402082:	f001 fbd5 	bl	403830 <memchr>
  402086:	9b01      	ldr	r3, [sp, #4]
  402088:	2800      	cmp	r0, #0
  40208a:	f000 82e5 	beq.w	402658 <_vfiprintf_r+0xc28>
  40208e:	eba0 020b 	sub.w	r2, r0, fp
  402092:	9205      	str	r2, [sp, #20]
  402094:	9607      	str	r6, [sp, #28]
  402096:	9302      	str	r3, [sp, #8]
  402098:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40209c:	2400      	movs	r4, #0
  40209e:	e619      	b.n	401cd4 <_vfiprintf_r+0x2a4>
  4020a0:	f898 2000 	ldrb.w	r2, [r8]
  4020a4:	2a2a      	cmp	r2, #42	; 0x2a
  4020a6:	f108 0701 	add.w	r7, r8, #1
  4020aa:	f000 82e9 	beq.w	402680 <_vfiprintf_r+0xc50>
  4020ae:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4020b2:	2909      	cmp	r1, #9
  4020b4:	46b8      	mov	r8, r7
  4020b6:	f04f 0400 	mov.w	r4, #0
  4020ba:	f63f ad2d 	bhi.w	401b18 <_vfiprintf_r+0xe8>
  4020be:	f818 2b01 	ldrb.w	r2, [r8], #1
  4020c2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4020c6:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  4020ca:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4020ce:	2909      	cmp	r1, #9
  4020d0:	d9f5      	bls.n	4020be <_vfiprintf_r+0x68e>
  4020d2:	e521      	b.n	401b18 <_vfiprintf_r+0xe8>
  4020d4:	f043 0320 	orr.w	r3, r3, #32
  4020d8:	f898 2000 	ldrb.w	r2, [r8]
  4020dc:	e51a      	b.n	401b14 <_vfiprintf_r+0xe4>
  4020de:	9608      	str	r6, [sp, #32]
  4020e0:	2800      	cmp	r0, #0
  4020e2:	f040 82db 	bne.w	40269c <_vfiprintf_r+0xc6c>
  4020e6:	2a00      	cmp	r2, #0
  4020e8:	f000 80e7 	beq.w	4022ba <_vfiprintf_r+0x88a>
  4020ec:	2101      	movs	r1, #1
  4020ee:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4020f2:	f04f 0200 	mov.w	r2, #0
  4020f6:	9101      	str	r1, [sp, #4]
  4020f8:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4020fc:	9105      	str	r1, [sp, #20]
  4020fe:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  402102:	e77b      	b.n	401ffc <_vfiprintf_r+0x5cc>
  402104:	9a07      	ldr	r2, [sp, #28]
  402106:	6813      	ldr	r3, [r2, #0]
  402108:	3204      	adds	r2, #4
  40210a:	9207      	str	r2, [sp, #28]
  40210c:	9a03      	ldr	r2, [sp, #12]
  40210e:	601a      	str	r2, [r3, #0]
  402110:	e4cb      	b.n	401aaa <_vfiprintf_r+0x7a>
  402112:	aa0f      	add	r2, sp, #60	; 0x3c
  402114:	9904      	ldr	r1, [sp, #16]
  402116:	4620      	mov	r0, r4
  402118:	f7ff fc4a 	bl	4019b0 <__sprint_r.part.0>
  40211c:	2800      	cmp	r0, #0
  40211e:	f040 8139 	bne.w	402394 <_vfiprintf_r+0x964>
  402122:	9910      	ldr	r1, [sp, #64]	; 0x40
  402124:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402126:	f101 0c01 	add.w	ip, r1, #1
  40212a:	46ce      	mov	lr, r9
  40212c:	e5ff      	b.n	401d2e <_vfiprintf_r+0x2fe>
  40212e:	9910      	ldr	r1, [sp, #64]	; 0x40
  402130:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402132:	1c48      	adds	r0, r1, #1
  402134:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402138:	2d00      	cmp	r5, #0
  40213a:	f43f ae22 	beq.w	401d82 <_vfiprintf_r+0x352>
  40213e:	3201      	adds	r2, #1
  402140:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  402144:	2101      	movs	r1, #1
  402146:	2807      	cmp	r0, #7
  402148:	9211      	str	r2, [sp, #68]	; 0x44
  40214a:	9010      	str	r0, [sp, #64]	; 0x40
  40214c:	f8ca 5000 	str.w	r5, [sl]
  402150:	f8ca 1004 	str.w	r1, [sl, #4]
  402154:	f340 8108 	ble.w	402368 <_vfiprintf_r+0x938>
  402158:	2a00      	cmp	r2, #0
  40215a:	f040 81bc 	bne.w	4024d6 <_vfiprintf_r+0xaa6>
  40215e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402160:	2b00      	cmp	r3, #0
  402162:	f43f ae1f 	beq.w	401da4 <_vfiprintf_r+0x374>
  402166:	ab0e      	add	r3, sp, #56	; 0x38
  402168:	2202      	movs	r2, #2
  40216a:	4608      	mov	r0, r1
  40216c:	931c      	str	r3, [sp, #112]	; 0x70
  40216e:	921d      	str	r2, [sp, #116]	; 0x74
  402170:	46ca      	mov	sl, r9
  402172:	4601      	mov	r1, r0
  402174:	f10a 0a08 	add.w	sl, sl, #8
  402178:	3001      	adds	r0, #1
  40217a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40217c:	2b80      	cmp	r3, #128	; 0x80
  40217e:	f43f ae19 	beq.w	401db4 <_vfiprintf_r+0x384>
  402182:	9b05      	ldr	r3, [sp, #20]
  402184:	1ae4      	subs	r4, r4, r3
  402186:	2c00      	cmp	r4, #0
  402188:	dd2e      	ble.n	4021e8 <_vfiprintf_r+0x7b8>
  40218a:	2c10      	cmp	r4, #16
  40218c:	4db3      	ldr	r5, [pc, #716]	; (40245c <_vfiprintf_r+0xa2c>)
  40218e:	dd1e      	ble.n	4021ce <_vfiprintf_r+0x79e>
  402190:	46d6      	mov	lr, sl
  402192:	2610      	movs	r6, #16
  402194:	9f06      	ldr	r7, [sp, #24]
  402196:	f8dd a010 	ldr.w	sl, [sp, #16]
  40219a:	e006      	b.n	4021aa <_vfiprintf_r+0x77a>
  40219c:	1c88      	adds	r0, r1, #2
  40219e:	f10e 0e08 	add.w	lr, lr, #8
  4021a2:	4619      	mov	r1, r3
  4021a4:	3c10      	subs	r4, #16
  4021a6:	2c10      	cmp	r4, #16
  4021a8:	dd10      	ble.n	4021cc <_vfiprintf_r+0x79c>
  4021aa:	1c4b      	adds	r3, r1, #1
  4021ac:	3210      	adds	r2, #16
  4021ae:	2b07      	cmp	r3, #7
  4021b0:	9211      	str	r2, [sp, #68]	; 0x44
  4021b2:	e88e 0060 	stmia.w	lr, {r5, r6}
  4021b6:	9310      	str	r3, [sp, #64]	; 0x40
  4021b8:	ddf0      	ble.n	40219c <_vfiprintf_r+0x76c>
  4021ba:	2a00      	cmp	r2, #0
  4021bc:	d165      	bne.n	40228a <_vfiprintf_r+0x85a>
  4021be:	3c10      	subs	r4, #16
  4021c0:	2c10      	cmp	r4, #16
  4021c2:	f04f 0001 	mov.w	r0, #1
  4021c6:	4611      	mov	r1, r2
  4021c8:	46ce      	mov	lr, r9
  4021ca:	dcee      	bgt.n	4021aa <_vfiprintf_r+0x77a>
  4021cc:	46f2      	mov	sl, lr
  4021ce:	4422      	add	r2, r4
  4021d0:	2807      	cmp	r0, #7
  4021d2:	9211      	str	r2, [sp, #68]	; 0x44
  4021d4:	f8ca 5000 	str.w	r5, [sl]
  4021d8:	f8ca 4004 	str.w	r4, [sl, #4]
  4021dc:	9010      	str	r0, [sp, #64]	; 0x40
  4021de:	f300 8085 	bgt.w	4022ec <_vfiprintf_r+0x8bc>
  4021e2:	f10a 0a08 	add.w	sl, sl, #8
  4021e6:	3001      	adds	r0, #1
  4021e8:	9905      	ldr	r1, [sp, #20]
  4021ea:	f8ca b000 	str.w	fp, [sl]
  4021ee:	440a      	add	r2, r1
  4021f0:	2807      	cmp	r0, #7
  4021f2:	9211      	str	r2, [sp, #68]	; 0x44
  4021f4:	f8ca 1004 	str.w	r1, [sl, #4]
  4021f8:	9010      	str	r0, [sp, #64]	; 0x40
  4021fa:	f340 8082 	ble.w	402302 <_vfiprintf_r+0x8d2>
  4021fe:	2a00      	cmp	r2, #0
  402200:	f040 8118 	bne.w	402434 <_vfiprintf_r+0xa04>
  402204:	9b02      	ldr	r3, [sp, #8]
  402206:	9210      	str	r2, [sp, #64]	; 0x40
  402208:	0758      	lsls	r0, r3, #29
  40220a:	d535      	bpl.n	402278 <_vfiprintf_r+0x848>
  40220c:	9b08      	ldr	r3, [sp, #32]
  40220e:	9901      	ldr	r1, [sp, #4]
  402210:	1a5c      	subs	r4, r3, r1
  402212:	2c00      	cmp	r4, #0
  402214:	f340 80e7 	ble.w	4023e6 <_vfiprintf_r+0x9b6>
  402218:	46ca      	mov	sl, r9
  40221a:	2c10      	cmp	r4, #16
  40221c:	f340 8218 	ble.w	402650 <_vfiprintf_r+0xc20>
  402220:	9910      	ldr	r1, [sp, #64]	; 0x40
  402222:	4e8f      	ldr	r6, [pc, #572]	; (402460 <_vfiprintf_r+0xa30>)
  402224:	9f06      	ldr	r7, [sp, #24]
  402226:	f8dd b010 	ldr.w	fp, [sp, #16]
  40222a:	2510      	movs	r5, #16
  40222c:	e006      	b.n	40223c <_vfiprintf_r+0x80c>
  40222e:	1c88      	adds	r0, r1, #2
  402230:	f10a 0a08 	add.w	sl, sl, #8
  402234:	4619      	mov	r1, r3
  402236:	3c10      	subs	r4, #16
  402238:	2c10      	cmp	r4, #16
  40223a:	dd11      	ble.n	402260 <_vfiprintf_r+0x830>
  40223c:	1c4b      	adds	r3, r1, #1
  40223e:	3210      	adds	r2, #16
  402240:	2b07      	cmp	r3, #7
  402242:	9211      	str	r2, [sp, #68]	; 0x44
  402244:	f8ca 6000 	str.w	r6, [sl]
  402248:	f8ca 5004 	str.w	r5, [sl, #4]
  40224c:	9310      	str	r3, [sp, #64]	; 0x40
  40224e:	ddee      	ble.n	40222e <_vfiprintf_r+0x7fe>
  402250:	bb42      	cbnz	r2, 4022a4 <_vfiprintf_r+0x874>
  402252:	3c10      	subs	r4, #16
  402254:	2c10      	cmp	r4, #16
  402256:	f04f 0001 	mov.w	r0, #1
  40225a:	4611      	mov	r1, r2
  40225c:	46ca      	mov	sl, r9
  40225e:	dced      	bgt.n	40223c <_vfiprintf_r+0x80c>
  402260:	4422      	add	r2, r4
  402262:	2807      	cmp	r0, #7
  402264:	9211      	str	r2, [sp, #68]	; 0x44
  402266:	f8ca 6000 	str.w	r6, [sl]
  40226a:	f8ca 4004 	str.w	r4, [sl, #4]
  40226e:	9010      	str	r0, [sp, #64]	; 0x40
  402270:	dd51      	ble.n	402316 <_vfiprintf_r+0x8e6>
  402272:	2a00      	cmp	r2, #0
  402274:	f040 819b 	bne.w	4025ae <_vfiprintf_r+0xb7e>
  402278:	9b03      	ldr	r3, [sp, #12]
  40227a:	9a08      	ldr	r2, [sp, #32]
  40227c:	9901      	ldr	r1, [sp, #4]
  40227e:	428a      	cmp	r2, r1
  402280:	bfac      	ite	ge
  402282:	189b      	addge	r3, r3, r2
  402284:	185b      	addlt	r3, r3, r1
  402286:	9303      	str	r3, [sp, #12]
  402288:	e04e      	b.n	402328 <_vfiprintf_r+0x8f8>
  40228a:	aa0f      	add	r2, sp, #60	; 0x3c
  40228c:	4651      	mov	r1, sl
  40228e:	4638      	mov	r0, r7
  402290:	f7ff fb8e 	bl	4019b0 <__sprint_r.part.0>
  402294:	2800      	cmp	r0, #0
  402296:	f040 813f 	bne.w	402518 <_vfiprintf_r+0xae8>
  40229a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40229c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40229e:	1c48      	adds	r0, r1, #1
  4022a0:	46ce      	mov	lr, r9
  4022a2:	e77f      	b.n	4021a4 <_vfiprintf_r+0x774>
  4022a4:	aa0f      	add	r2, sp, #60	; 0x3c
  4022a6:	4659      	mov	r1, fp
  4022a8:	4638      	mov	r0, r7
  4022aa:	f7ff fb81 	bl	4019b0 <__sprint_r.part.0>
  4022ae:	b960      	cbnz	r0, 4022ca <_vfiprintf_r+0x89a>
  4022b0:	9910      	ldr	r1, [sp, #64]	; 0x40
  4022b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4022b4:	1c48      	adds	r0, r1, #1
  4022b6:	46ca      	mov	sl, r9
  4022b8:	e7bd      	b.n	402236 <_vfiprintf_r+0x806>
  4022ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4022bc:	f8dd b010 	ldr.w	fp, [sp, #16]
  4022c0:	2b00      	cmp	r3, #0
  4022c2:	f040 81d4 	bne.w	40266e <_vfiprintf_r+0xc3e>
  4022c6:	2300      	movs	r3, #0
  4022c8:	9310      	str	r3, [sp, #64]	; 0x40
  4022ca:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4022ce:	f013 0f01 	tst.w	r3, #1
  4022d2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4022d6:	d102      	bne.n	4022de <_vfiprintf_r+0x8ae>
  4022d8:	059a      	lsls	r2, r3, #22
  4022da:	f140 80de 	bpl.w	40249a <_vfiprintf_r+0xa6a>
  4022de:	065b      	lsls	r3, r3, #25
  4022e0:	f53f acb2 	bmi.w	401c48 <_vfiprintf_r+0x218>
  4022e4:	9803      	ldr	r0, [sp, #12]
  4022e6:	b02d      	add	sp, #180	; 0xb4
  4022e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4022ec:	2a00      	cmp	r2, #0
  4022ee:	f040 8106 	bne.w	4024fe <_vfiprintf_r+0xace>
  4022f2:	9a05      	ldr	r2, [sp, #20]
  4022f4:	921d      	str	r2, [sp, #116]	; 0x74
  4022f6:	2301      	movs	r3, #1
  4022f8:	9211      	str	r2, [sp, #68]	; 0x44
  4022fa:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  4022fe:	9310      	str	r3, [sp, #64]	; 0x40
  402300:	46ca      	mov	sl, r9
  402302:	f10a 0a08 	add.w	sl, sl, #8
  402306:	9b02      	ldr	r3, [sp, #8]
  402308:	0759      	lsls	r1, r3, #29
  40230a:	d504      	bpl.n	402316 <_vfiprintf_r+0x8e6>
  40230c:	9b08      	ldr	r3, [sp, #32]
  40230e:	9901      	ldr	r1, [sp, #4]
  402310:	1a5c      	subs	r4, r3, r1
  402312:	2c00      	cmp	r4, #0
  402314:	dc81      	bgt.n	40221a <_vfiprintf_r+0x7ea>
  402316:	9b03      	ldr	r3, [sp, #12]
  402318:	9908      	ldr	r1, [sp, #32]
  40231a:	9801      	ldr	r0, [sp, #4]
  40231c:	4281      	cmp	r1, r0
  40231e:	bfac      	ite	ge
  402320:	185b      	addge	r3, r3, r1
  402322:	181b      	addlt	r3, r3, r0
  402324:	9303      	str	r3, [sp, #12]
  402326:	bb72      	cbnz	r2, 402386 <_vfiprintf_r+0x956>
  402328:	2300      	movs	r3, #0
  40232a:	9310      	str	r3, [sp, #64]	; 0x40
  40232c:	46ca      	mov	sl, r9
  40232e:	f7ff bbbc 	b.w	401aaa <_vfiprintf_r+0x7a>
  402332:	aa0f      	add	r2, sp, #60	; 0x3c
  402334:	9904      	ldr	r1, [sp, #16]
  402336:	4620      	mov	r0, r4
  402338:	f7ff fb3a 	bl	4019b0 <__sprint_r.part.0>
  40233c:	bb50      	cbnz	r0, 402394 <_vfiprintf_r+0x964>
  40233e:	9910      	ldr	r1, [sp, #64]	; 0x40
  402340:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402342:	f101 0e01 	add.w	lr, r1, #1
  402346:	46cc      	mov	ip, r9
  402348:	e548      	b.n	401ddc <_vfiprintf_r+0x3ac>
  40234a:	2a00      	cmp	r2, #0
  40234c:	f040 8140 	bne.w	4025d0 <_vfiprintf_r+0xba0>
  402350:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  402354:	2900      	cmp	r1, #0
  402356:	f000 811b 	beq.w	402590 <_vfiprintf_r+0xb60>
  40235a:	2201      	movs	r2, #1
  40235c:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  402360:	4610      	mov	r0, r2
  402362:	921d      	str	r2, [sp, #116]	; 0x74
  402364:	911c      	str	r1, [sp, #112]	; 0x70
  402366:	46ca      	mov	sl, r9
  402368:	4601      	mov	r1, r0
  40236a:	f10a 0a08 	add.w	sl, sl, #8
  40236e:	3001      	adds	r0, #1
  402370:	e507      	b.n	401d82 <_vfiprintf_r+0x352>
  402372:	9b02      	ldr	r3, [sp, #8]
  402374:	2a01      	cmp	r2, #1
  402376:	f000 8098 	beq.w	4024aa <_vfiprintf_r+0xa7a>
  40237a:	2a02      	cmp	r2, #2
  40237c:	d10d      	bne.n	40239a <_vfiprintf_r+0x96a>
  40237e:	9302      	str	r3, [sp, #8]
  402380:	2600      	movs	r6, #0
  402382:	2700      	movs	r7, #0
  402384:	e5b0      	b.n	401ee8 <_vfiprintf_r+0x4b8>
  402386:	aa0f      	add	r2, sp, #60	; 0x3c
  402388:	9904      	ldr	r1, [sp, #16]
  40238a:	9806      	ldr	r0, [sp, #24]
  40238c:	f7ff fb10 	bl	4019b0 <__sprint_r.part.0>
  402390:	2800      	cmp	r0, #0
  402392:	d0c9      	beq.n	402328 <_vfiprintf_r+0x8f8>
  402394:	f8dd b010 	ldr.w	fp, [sp, #16]
  402398:	e797      	b.n	4022ca <_vfiprintf_r+0x89a>
  40239a:	9302      	str	r3, [sp, #8]
  40239c:	2600      	movs	r6, #0
  40239e:	2700      	movs	r7, #0
  4023a0:	4649      	mov	r1, r9
  4023a2:	e000      	b.n	4023a6 <_vfiprintf_r+0x976>
  4023a4:	4659      	mov	r1, fp
  4023a6:	08f2      	lsrs	r2, r6, #3
  4023a8:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  4023ac:	08f8      	lsrs	r0, r7, #3
  4023ae:	f006 0307 	and.w	r3, r6, #7
  4023b2:	4607      	mov	r7, r0
  4023b4:	4616      	mov	r6, r2
  4023b6:	3330      	adds	r3, #48	; 0x30
  4023b8:	ea56 0207 	orrs.w	r2, r6, r7
  4023bc:	f801 3c01 	strb.w	r3, [r1, #-1]
  4023c0:	f101 3bff 	add.w	fp, r1, #4294967295
  4023c4:	d1ee      	bne.n	4023a4 <_vfiprintf_r+0x974>
  4023c6:	9a02      	ldr	r2, [sp, #8]
  4023c8:	07d6      	lsls	r6, r2, #31
  4023ca:	f57f ad9d 	bpl.w	401f08 <_vfiprintf_r+0x4d8>
  4023ce:	2b30      	cmp	r3, #48	; 0x30
  4023d0:	f43f ad9a 	beq.w	401f08 <_vfiprintf_r+0x4d8>
  4023d4:	3902      	subs	r1, #2
  4023d6:	2330      	movs	r3, #48	; 0x30
  4023d8:	f80b 3c01 	strb.w	r3, [fp, #-1]
  4023dc:	eba9 0301 	sub.w	r3, r9, r1
  4023e0:	9305      	str	r3, [sp, #20]
  4023e2:	468b      	mov	fp, r1
  4023e4:	e476      	b.n	401cd4 <_vfiprintf_r+0x2a4>
  4023e6:	9b03      	ldr	r3, [sp, #12]
  4023e8:	9a08      	ldr	r2, [sp, #32]
  4023ea:	428a      	cmp	r2, r1
  4023ec:	bfac      	ite	ge
  4023ee:	189b      	addge	r3, r3, r2
  4023f0:	185b      	addlt	r3, r3, r1
  4023f2:	9303      	str	r3, [sp, #12]
  4023f4:	e798      	b.n	402328 <_vfiprintf_r+0x8f8>
  4023f6:	2202      	movs	r2, #2
  4023f8:	e44d      	b.n	401c96 <_vfiprintf_r+0x266>
  4023fa:	2f00      	cmp	r7, #0
  4023fc:	bf08      	it	eq
  4023fe:	2e0a      	cmpeq	r6, #10
  402400:	d352      	bcc.n	4024a8 <_vfiprintf_r+0xa78>
  402402:	46cb      	mov	fp, r9
  402404:	4630      	mov	r0, r6
  402406:	4639      	mov	r1, r7
  402408:	220a      	movs	r2, #10
  40240a:	2300      	movs	r3, #0
  40240c:	f001 fe9a 	bl	404144 <__aeabi_uldivmod>
  402410:	3230      	adds	r2, #48	; 0x30
  402412:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  402416:	4630      	mov	r0, r6
  402418:	4639      	mov	r1, r7
  40241a:	2300      	movs	r3, #0
  40241c:	220a      	movs	r2, #10
  40241e:	f001 fe91 	bl	404144 <__aeabi_uldivmod>
  402422:	4606      	mov	r6, r0
  402424:	460f      	mov	r7, r1
  402426:	ea56 0307 	orrs.w	r3, r6, r7
  40242a:	d1eb      	bne.n	402404 <_vfiprintf_r+0x9d4>
  40242c:	e56c      	b.n	401f08 <_vfiprintf_r+0x4d8>
  40242e:	9405      	str	r4, [sp, #20]
  402430:	46cb      	mov	fp, r9
  402432:	e44f      	b.n	401cd4 <_vfiprintf_r+0x2a4>
  402434:	aa0f      	add	r2, sp, #60	; 0x3c
  402436:	9904      	ldr	r1, [sp, #16]
  402438:	9806      	ldr	r0, [sp, #24]
  40243a:	f7ff fab9 	bl	4019b0 <__sprint_r.part.0>
  40243e:	2800      	cmp	r0, #0
  402440:	d1a8      	bne.n	402394 <_vfiprintf_r+0x964>
  402442:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402444:	46ca      	mov	sl, r9
  402446:	e75e      	b.n	402306 <_vfiprintf_r+0x8d6>
  402448:	aa0f      	add	r2, sp, #60	; 0x3c
  40244a:	9904      	ldr	r1, [sp, #16]
  40244c:	9806      	ldr	r0, [sp, #24]
  40244e:	f7ff faaf 	bl	4019b0 <__sprint_r.part.0>
  402452:	2800      	cmp	r0, #0
  402454:	d19e      	bne.n	402394 <_vfiprintf_r+0x964>
  402456:	46ca      	mov	sl, r9
  402458:	f7ff bbc0 	b.w	401bdc <_vfiprintf_r+0x1ac>
  40245c:	00404530 	.word	0x00404530
  402460:	00404520 	.word	0x00404520
  402464:	3104      	adds	r1, #4
  402466:	6816      	ldr	r6, [r2, #0]
  402468:	9107      	str	r1, [sp, #28]
  40246a:	2201      	movs	r2, #1
  40246c:	2700      	movs	r7, #0
  40246e:	e412      	b.n	401c96 <_vfiprintf_r+0x266>
  402470:	9807      	ldr	r0, [sp, #28]
  402472:	4601      	mov	r1, r0
  402474:	3104      	adds	r1, #4
  402476:	6806      	ldr	r6, [r0, #0]
  402478:	9107      	str	r1, [sp, #28]
  40247a:	2700      	movs	r7, #0
  40247c:	e40b      	b.n	401c96 <_vfiprintf_r+0x266>
  40247e:	680e      	ldr	r6, [r1, #0]
  402480:	3104      	adds	r1, #4
  402482:	9107      	str	r1, [sp, #28]
  402484:	2700      	movs	r7, #0
  402486:	e591      	b.n	401fac <_vfiprintf_r+0x57c>
  402488:	9907      	ldr	r1, [sp, #28]
  40248a:	680e      	ldr	r6, [r1, #0]
  40248c:	460a      	mov	r2, r1
  40248e:	17f7      	asrs	r7, r6, #31
  402490:	3204      	adds	r2, #4
  402492:	9207      	str	r2, [sp, #28]
  402494:	4630      	mov	r0, r6
  402496:	4639      	mov	r1, r7
  402498:	e50f      	b.n	401eba <_vfiprintf_r+0x48a>
  40249a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40249e:	f000 fe83 	bl	4031a8 <__retarget_lock_release_recursive>
  4024a2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4024a6:	e71a      	b.n	4022de <_vfiprintf_r+0x8ae>
  4024a8:	9b02      	ldr	r3, [sp, #8]
  4024aa:	9302      	str	r3, [sp, #8]
  4024ac:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4024b0:	3630      	adds	r6, #48	; 0x30
  4024b2:	2301      	movs	r3, #1
  4024b4:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  4024b8:	9305      	str	r3, [sp, #20]
  4024ba:	e40b      	b.n	401cd4 <_vfiprintf_r+0x2a4>
  4024bc:	aa0f      	add	r2, sp, #60	; 0x3c
  4024be:	9904      	ldr	r1, [sp, #16]
  4024c0:	9806      	ldr	r0, [sp, #24]
  4024c2:	f7ff fa75 	bl	4019b0 <__sprint_r.part.0>
  4024c6:	2800      	cmp	r0, #0
  4024c8:	f47f af64 	bne.w	402394 <_vfiprintf_r+0x964>
  4024cc:	9910      	ldr	r1, [sp, #64]	; 0x40
  4024ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4024d0:	1c48      	adds	r0, r1, #1
  4024d2:	46ca      	mov	sl, r9
  4024d4:	e651      	b.n	40217a <_vfiprintf_r+0x74a>
  4024d6:	aa0f      	add	r2, sp, #60	; 0x3c
  4024d8:	9904      	ldr	r1, [sp, #16]
  4024da:	9806      	ldr	r0, [sp, #24]
  4024dc:	f7ff fa68 	bl	4019b0 <__sprint_r.part.0>
  4024e0:	2800      	cmp	r0, #0
  4024e2:	f47f af57 	bne.w	402394 <_vfiprintf_r+0x964>
  4024e6:	9910      	ldr	r1, [sp, #64]	; 0x40
  4024e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4024ea:	1c48      	adds	r0, r1, #1
  4024ec:	46ca      	mov	sl, r9
  4024ee:	e448      	b.n	401d82 <_vfiprintf_r+0x352>
  4024f0:	2a00      	cmp	r2, #0
  4024f2:	f040 8091 	bne.w	402618 <_vfiprintf_r+0xbe8>
  4024f6:	2001      	movs	r0, #1
  4024f8:	4611      	mov	r1, r2
  4024fa:	46ca      	mov	sl, r9
  4024fc:	e641      	b.n	402182 <_vfiprintf_r+0x752>
  4024fe:	aa0f      	add	r2, sp, #60	; 0x3c
  402500:	9904      	ldr	r1, [sp, #16]
  402502:	9806      	ldr	r0, [sp, #24]
  402504:	f7ff fa54 	bl	4019b0 <__sprint_r.part.0>
  402508:	2800      	cmp	r0, #0
  40250a:	f47f af43 	bne.w	402394 <_vfiprintf_r+0x964>
  40250e:	9810      	ldr	r0, [sp, #64]	; 0x40
  402510:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402512:	3001      	adds	r0, #1
  402514:	46ca      	mov	sl, r9
  402516:	e667      	b.n	4021e8 <_vfiprintf_r+0x7b8>
  402518:	46d3      	mov	fp, sl
  40251a:	e6d6      	b.n	4022ca <_vfiprintf_r+0x89a>
  40251c:	9e07      	ldr	r6, [sp, #28]
  40251e:	3607      	adds	r6, #7
  402520:	f026 0207 	bic.w	r2, r6, #7
  402524:	f102 0108 	add.w	r1, r2, #8
  402528:	e9d2 6700 	ldrd	r6, r7, [r2]
  40252c:	9107      	str	r1, [sp, #28]
  40252e:	2201      	movs	r2, #1
  402530:	f7ff bbb1 	b.w	401c96 <_vfiprintf_r+0x266>
  402534:	9e07      	ldr	r6, [sp, #28]
  402536:	3607      	adds	r6, #7
  402538:	f026 0607 	bic.w	r6, r6, #7
  40253c:	e9d6 0100 	ldrd	r0, r1, [r6]
  402540:	f106 0208 	add.w	r2, r6, #8
  402544:	9207      	str	r2, [sp, #28]
  402546:	4606      	mov	r6, r0
  402548:	460f      	mov	r7, r1
  40254a:	e4b6      	b.n	401eba <_vfiprintf_r+0x48a>
  40254c:	9e07      	ldr	r6, [sp, #28]
  40254e:	3607      	adds	r6, #7
  402550:	f026 0207 	bic.w	r2, r6, #7
  402554:	f102 0108 	add.w	r1, r2, #8
  402558:	e9d2 6700 	ldrd	r6, r7, [r2]
  40255c:	9107      	str	r1, [sp, #28]
  40255e:	2200      	movs	r2, #0
  402560:	f7ff bb99 	b.w	401c96 <_vfiprintf_r+0x266>
  402564:	9e07      	ldr	r6, [sp, #28]
  402566:	3607      	adds	r6, #7
  402568:	f026 0107 	bic.w	r1, r6, #7
  40256c:	f101 0008 	add.w	r0, r1, #8
  402570:	9007      	str	r0, [sp, #28]
  402572:	e9d1 6700 	ldrd	r6, r7, [r1]
  402576:	e519      	b.n	401fac <_vfiprintf_r+0x57c>
  402578:	46cb      	mov	fp, r9
  40257a:	f7ff bbab 	b.w	401cd4 <_vfiprintf_r+0x2a4>
  40257e:	252d      	movs	r5, #45	; 0x2d
  402580:	4276      	negs	r6, r6
  402582:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  402586:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40258a:	2201      	movs	r2, #1
  40258c:	f7ff bb88 	b.w	401ca0 <_vfiprintf_r+0x270>
  402590:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402592:	b9b3      	cbnz	r3, 4025c2 <_vfiprintf_r+0xb92>
  402594:	4611      	mov	r1, r2
  402596:	2001      	movs	r0, #1
  402598:	46ca      	mov	sl, r9
  40259a:	e5f2      	b.n	402182 <_vfiprintf_r+0x752>
  40259c:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4025a0:	f000 fe02 	bl	4031a8 <__retarget_lock_release_recursive>
  4025a4:	f04f 33ff 	mov.w	r3, #4294967295
  4025a8:	9303      	str	r3, [sp, #12]
  4025aa:	f7ff bb50 	b.w	401c4e <_vfiprintf_r+0x21e>
  4025ae:	aa0f      	add	r2, sp, #60	; 0x3c
  4025b0:	9904      	ldr	r1, [sp, #16]
  4025b2:	9806      	ldr	r0, [sp, #24]
  4025b4:	f7ff f9fc 	bl	4019b0 <__sprint_r.part.0>
  4025b8:	2800      	cmp	r0, #0
  4025ba:	f47f aeeb 	bne.w	402394 <_vfiprintf_r+0x964>
  4025be:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4025c0:	e6a9      	b.n	402316 <_vfiprintf_r+0x8e6>
  4025c2:	ab0e      	add	r3, sp, #56	; 0x38
  4025c4:	2202      	movs	r2, #2
  4025c6:	931c      	str	r3, [sp, #112]	; 0x70
  4025c8:	921d      	str	r2, [sp, #116]	; 0x74
  4025ca:	2001      	movs	r0, #1
  4025cc:	46ca      	mov	sl, r9
  4025ce:	e5d0      	b.n	402172 <_vfiprintf_r+0x742>
  4025d0:	aa0f      	add	r2, sp, #60	; 0x3c
  4025d2:	9904      	ldr	r1, [sp, #16]
  4025d4:	9806      	ldr	r0, [sp, #24]
  4025d6:	f7ff f9eb 	bl	4019b0 <__sprint_r.part.0>
  4025da:	2800      	cmp	r0, #0
  4025dc:	f47f aeda 	bne.w	402394 <_vfiprintf_r+0x964>
  4025e0:	9910      	ldr	r1, [sp, #64]	; 0x40
  4025e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4025e4:	1c48      	adds	r0, r1, #1
  4025e6:	46ca      	mov	sl, r9
  4025e8:	e5a4      	b.n	402134 <_vfiprintf_r+0x704>
  4025ea:	9a07      	ldr	r2, [sp, #28]
  4025ec:	9903      	ldr	r1, [sp, #12]
  4025ee:	6813      	ldr	r3, [r2, #0]
  4025f0:	17cd      	asrs	r5, r1, #31
  4025f2:	4608      	mov	r0, r1
  4025f4:	3204      	adds	r2, #4
  4025f6:	4629      	mov	r1, r5
  4025f8:	9207      	str	r2, [sp, #28]
  4025fa:	e9c3 0100 	strd	r0, r1, [r3]
  4025fe:	f7ff ba54 	b.w	401aaa <_vfiprintf_r+0x7a>
  402602:	4658      	mov	r0, fp
  402604:	9607      	str	r6, [sp, #28]
  402606:	9302      	str	r3, [sp, #8]
  402608:	f7ff f8ba 	bl	401780 <strlen>
  40260c:	2400      	movs	r4, #0
  40260e:	9005      	str	r0, [sp, #20]
  402610:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402614:	f7ff bb5e 	b.w	401cd4 <_vfiprintf_r+0x2a4>
  402618:	aa0f      	add	r2, sp, #60	; 0x3c
  40261a:	9904      	ldr	r1, [sp, #16]
  40261c:	9806      	ldr	r0, [sp, #24]
  40261e:	f7ff f9c7 	bl	4019b0 <__sprint_r.part.0>
  402622:	2800      	cmp	r0, #0
  402624:	f47f aeb6 	bne.w	402394 <_vfiprintf_r+0x964>
  402628:	9910      	ldr	r1, [sp, #64]	; 0x40
  40262a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40262c:	1c48      	adds	r0, r1, #1
  40262e:	46ca      	mov	sl, r9
  402630:	e5a7      	b.n	402182 <_vfiprintf_r+0x752>
  402632:	9910      	ldr	r1, [sp, #64]	; 0x40
  402634:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402636:	4e20      	ldr	r6, [pc, #128]	; (4026b8 <_vfiprintf_r+0xc88>)
  402638:	3101      	adds	r1, #1
  40263a:	f7ff bb90 	b.w	401d5e <_vfiprintf_r+0x32e>
  40263e:	2c06      	cmp	r4, #6
  402640:	bf28      	it	cs
  402642:	2406      	movcs	r4, #6
  402644:	9405      	str	r4, [sp, #20]
  402646:	9607      	str	r6, [sp, #28]
  402648:	9401      	str	r4, [sp, #4]
  40264a:	f8df b070 	ldr.w	fp, [pc, #112]	; 4026bc <_vfiprintf_r+0xc8c>
  40264e:	e4d5      	b.n	401ffc <_vfiprintf_r+0x5cc>
  402650:	9810      	ldr	r0, [sp, #64]	; 0x40
  402652:	4e19      	ldr	r6, [pc, #100]	; (4026b8 <_vfiprintf_r+0xc88>)
  402654:	3001      	adds	r0, #1
  402656:	e603      	b.n	402260 <_vfiprintf_r+0x830>
  402658:	9405      	str	r4, [sp, #20]
  40265a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40265e:	9607      	str	r6, [sp, #28]
  402660:	9302      	str	r3, [sp, #8]
  402662:	4604      	mov	r4, r0
  402664:	f7ff bb36 	b.w	401cd4 <_vfiprintf_r+0x2a4>
  402668:	4686      	mov	lr, r0
  40266a:	f7ff bbce 	b.w	401e0a <_vfiprintf_r+0x3da>
  40266e:	9806      	ldr	r0, [sp, #24]
  402670:	aa0f      	add	r2, sp, #60	; 0x3c
  402672:	4659      	mov	r1, fp
  402674:	f7ff f99c 	bl	4019b0 <__sprint_r.part.0>
  402678:	2800      	cmp	r0, #0
  40267a:	f43f ae24 	beq.w	4022c6 <_vfiprintf_r+0x896>
  40267e:	e624      	b.n	4022ca <_vfiprintf_r+0x89a>
  402680:	9907      	ldr	r1, [sp, #28]
  402682:	f898 2001 	ldrb.w	r2, [r8, #1]
  402686:	680c      	ldr	r4, [r1, #0]
  402688:	3104      	adds	r1, #4
  40268a:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  40268e:	46b8      	mov	r8, r7
  402690:	9107      	str	r1, [sp, #28]
  402692:	f7ff ba3f 	b.w	401b14 <_vfiprintf_r+0xe4>
  402696:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40269a:	e43c      	b.n	401f16 <_vfiprintf_r+0x4e6>
  40269c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4026a0:	e521      	b.n	4020e6 <_vfiprintf_r+0x6b6>
  4026a2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4026a6:	f7ff bbf4 	b.w	401e92 <_vfiprintf_r+0x462>
  4026aa:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4026ae:	e491      	b.n	401fd4 <_vfiprintf_r+0x5a4>
  4026b0:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4026b4:	e469      	b.n	401f8a <_vfiprintf_r+0x55a>
  4026b6:	bf00      	nop
  4026b8:	00404520 	.word	0x00404520
  4026bc:	00404518 	.word	0x00404518

004026c0 <__sbprintf>:
  4026c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4026c4:	460c      	mov	r4, r1
  4026c6:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  4026ca:	8989      	ldrh	r1, [r1, #12]
  4026cc:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4026ce:	89e5      	ldrh	r5, [r4, #14]
  4026d0:	9619      	str	r6, [sp, #100]	; 0x64
  4026d2:	f021 0102 	bic.w	r1, r1, #2
  4026d6:	4606      	mov	r6, r0
  4026d8:	69e0      	ldr	r0, [r4, #28]
  4026da:	f8ad 100c 	strh.w	r1, [sp, #12]
  4026de:	4617      	mov	r7, r2
  4026e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4026e4:	6a62      	ldr	r2, [r4, #36]	; 0x24
  4026e6:	f8ad 500e 	strh.w	r5, [sp, #14]
  4026ea:	4698      	mov	r8, r3
  4026ec:	ad1a      	add	r5, sp, #104	; 0x68
  4026ee:	2300      	movs	r3, #0
  4026f0:	9007      	str	r0, [sp, #28]
  4026f2:	a816      	add	r0, sp, #88	; 0x58
  4026f4:	9209      	str	r2, [sp, #36]	; 0x24
  4026f6:	9306      	str	r3, [sp, #24]
  4026f8:	9500      	str	r5, [sp, #0]
  4026fa:	9504      	str	r5, [sp, #16]
  4026fc:	9102      	str	r1, [sp, #8]
  4026fe:	9105      	str	r1, [sp, #20]
  402700:	f000 fd4c 	bl	40319c <__retarget_lock_init_recursive>
  402704:	4643      	mov	r3, r8
  402706:	463a      	mov	r2, r7
  402708:	4669      	mov	r1, sp
  40270a:	4630      	mov	r0, r6
  40270c:	f7ff f990 	bl	401a30 <_vfiprintf_r>
  402710:	1e05      	subs	r5, r0, #0
  402712:	db07      	blt.n	402724 <__sbprintf+0x64>
  402714:	4630      	mov	r0, r6
  402716:	4669      	mov	r1, sp
  402718:	f000 f928 	bl	40296c <_fflush_r>
  40271c:	2800      	cmp	r0, #0
  40271e:	bf18      	it	ne
  402720:	f04f 35ff 	movne.w	r5, #4294967295
  402724:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  402728:	065b      	lsls	r3, r3, #25
  40272a:	d503      	bpl.n	402734 <__sbprintf+0x74>
  40272c:	89a3      	ldrh	r3, [r4, #12]
  40272e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402732:	81a3      	strh	r3, [r4, #12]
  402734:	9816      	ldr	r0, [sp, #88]	; 0x58
  402736:	f000 fd33 	bl	4031a0 <__retarget_lock_close_recursive>
  40273a:	4628      	mov	r0, r5
  40273c:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  402740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00402744 <__swsetup_r>:
  402744:	b538      	push	{r3, r4, r5, lr}
  402746:	4b30      	ldr	r3, [pc, #192]	; (402808 <__swsetup_r+0xc4>)
  402748:	681b      	ldr	r3, [r3, #0]
  40274a:	4605      	mov	r5, r0
  40274c:	460c      	mov	r4, r1
  40274e:	b113      	cbz	r3, 402756 <__swsetup_r+0x12>
  402750:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  402752:	2a00      	cmp	r2, #0
  402754:	d038      	beq.n	4027c8 <__swsetup_r+0x84>
  402756:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40275a:	b293      	uxth	r3, r2
  40275c:	0718      	lsls	r0, r3, #28
  40275e:	d50c      	bpl.n	40277a <__swsetup_r+0x36>
  402760:	6920      	ldr	r0, [r4, #16]
  402762:	b1a8      	cbz	r0, 402790 <__swsetup_r+0x4c>
  402764:	f013 0201 	ands.w	r2, r3, #1
  402768:	d01e      	beq.n	4027a8 <__swsetup_r+0x64>
  40276a:	6963      	ldr	r3, [r4, #20]
  40276c:	2200      	movs	r2, #0
  40276e:	425b      	negs	r3, r3
  402770:	61a3      	str	r3, [r4, #24]
  402772:	60a2      	str	r2, [r4, #8]
  402774:	b1f0      	cbz	r0, 4027b4 <__swsetup_r+0x70>
  402776:	2000      	movs	r0, #0
  402778:	bd38      	pop	{r3, r4, r5, pc}
  40277a:	06d9      	lsls	r1, r3, #27
  40277c:	d53c      	bpl.n	4027f8 <__swsetup_r+0xb4>
  40277e:	0758      	lsls	r0, r3, #29
  402780:	d426      	bmi.n	4027d0 <__swsetup_r+0x8c>
  402782:	6920      	ldr	r0, [r4, #16]
  402784:	f042 0308 	orr.w	r3, r2, #8
  402788:	81a3      	strh	r3, [r4, #12]
  40278a:	b29b      	uxth	r3, r3
  40278c:	2800      	cmp	r0, #0
  40278e:	d1e9      	bne.n	402764 <__swsetup_r+0x20>
  402790:	f403 7220 	and.w	r2, r3, #640	; 0x280
  402794:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  402798:	d0e4      	beq.n	402764 <__swsetup_r+0x20>
  40279a:	4628      	mov	r0, r5
  40279c:	4621      	mov	r1, r4
  40279e:	f000 fd33 	bl	403208 <__smakebuf_r>
  4027a2:	89a3      	ldrh	r3, [r4, #12]
  4027a4:	6920      	ldr	r0, [r4, #16]
  4027a6:	e7dd      	b.n	402764 <__swsetup_r+0x20>
  4027a8:	0799      	lsls	r1, r3, #30
  4027aa:	bf58      	it	pl
  4027ac:	6962      	ldrpl	r2, [r4, #20]
  4027ae:	60a2      	str	r2, [r4, #8]
  4027b0:	2800      	cmp	r0, #0
  4027b2:	d1e0      	bne.n	402776 <__swsetup_r+0x32>
  4027b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4027b8:	061a      	lsls	r2, r3, #24
  4027ba:	d5dd      	bpl.n	402778 <__swsetup_r+0x34>
  4027bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4027c0:	81a3      	strh	r3, [r4, #12]
  4027c2:	f04f 30ff 	mov.w	r0, #4294967295
  4027c6:	bd38      	pop	{r3, r4, r5, pc}
  4027c8:	4618      	mov	r0, r3
  4027ca:	f000 f927 	bl	402a1c <__sinit>
  4027ce:	e7c2      	b.n	402756 <__swsetup_r+0x12>
  4027d0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4027d2:	b151      	cbz	r1, 4027ea <__swsetup_r+0xa6>
  4027d4:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4027d8:	4299      	cmp	r1, r3
  4027da:	d004      	beq.n	4027e6 <__swsetup_r+0xa2>
  4027dc:	4628      	mov	r0, r5
  4027de:	f000 fa43 	bl	402c68 <_free_r>
  4027e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4027e6:	2300      	movs	r3, #0
  4027e8:	6323      	str	r3, [r4, #48]	; 0x30
  4027ea:	2300      	movs	r3, #0
  4027ec:	6920      	ldr	r0, [r4, #16]
  4027ee:	6063      	str	r3, [r4, #4]
  4027f0:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4027f4:	6020      	str	r0, [r4, #0]
  4027f6:	e7c5      	b.n	402784 <__swsetup_r+0x40>
  4027f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4027fc:	2309      	movs	r3, #9
  4027fe:	602b      	str	r3, [r5, #0]
  402800:	f04f 30ff 	mov.w	r0, #4294967295
  402804:	81a2      	strh	r2, [r4, #12]
  402806:	bd38      	pop	{r3, r4, r5, pc}
  402808:	20400028 	.word	0x20400028

0040280c <register_fini>:
  40280c:	4b02      	ldr	r3, [pc, #8]	; (402818 <register_fini+0xc>)
  40280e:	b113      	cbz	r3, 402816 <register_fini+0xa>
  402810:	4802      	ldr	r0, [pc, #8]	; (40281c <register_fini+0x10>)
  402812:	f000 b805 	b.w	402820 <atexit>
  402816:	4770      	bx	lr
  402818:	00000000 	.word	0x00000000
  40281c:	00402a8d 	.word	0x00402a8d

00402820 <atexit>:
  402820:	2300      	movs	r3, #0
  402822:	4601      	mov	r1, r0
  402824:	461a      	mov	r2, r3
  402826:	4618      	mov	r0, r3
  402828:	f001 bb64 	b.w	403ef4 <__register_exitproc>

0040282c <__sflush_r>:
  40282c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  402830:	b29a      	uxth	r2, r3
  402832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402836:	460d      	mov	r5, r1
  402838:	0711      	lsls	r1, r2, #28
  40283a:	4680      	mov	r8, r0
  40283c:	d43a      	bmi.n	4028b4 <__sflush_r+0x88>
  40283e:	686a      	ldr	r2, [r5, #4]
  402840:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  402844:	2a00      	cmp	r2, #0
  402846:	81ab      	strh	r3, [r5, #12]
  402848:	dd6f      	ble.n	40292a <__sflush_r+0xfe>
  40284a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40284c:	2c00      	cmp	r4, #0
  40284e:	d049      	beq.n	4028e4 <__sflush_r+0xb8>
  402850:	2200      	movs	r2, #0
  402852:	b29b      	uxth	r3, r3
  402854:	f8d8 6000 	ldr.w	r6, [r8]
  402858:	f8c8 2000 	str.w	r2, [r8]
  40285c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  402860:	d067      	beq.n	402932 <__sflush_r+0x106>
  402862:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  402864:	075f      	lsls	r7, r3, #29
  402866:	d505      	bpl.n	402874 <__sflush_r+0x48>
  402868:	6869      	ldr	r1, [r5, #4]
  40286a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40286c:	1a52      	subs	r2, r2, r1
  40286e:	b10b      	cbz	r3, 402874 <__sflush_r+0x48>
  402870:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  402872:	1ad2      	subs	r2, r2, r3
  402874:	2300      	movs	r3, #0
  402876:	69e9      	ldr	r1, [r5, #28]
  402878:	4640      	mov	r0, r8
  40287a:	47a0      	blx	r4
  40287c:	1c44      	adds	r4, r0, #1
  40287e:	d03c      	beq.n	4028fa <__sflush_r+0xce>
  402880:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  402884:	692a      	ldr	r2, [r5, #16]
  402886:	602a      	str	r2, [r5, #0]
  402888:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40288c:	2200      	movs	r2, #0
  40288e:	81ab      	strh	r3, [r5, #12]
  402890:	04db      	lsls	r3, r3, #19
  402892:	606a      	str	r2, [r5, #4]
  402894:	d447      	bmi.n	402926 <__sflush_r+0xfa>
  402896:	6b29      	ldr	r1, [r5, #48]	; 0x30
  402898:	f8c8 6000 	str.w	r6, [r8]
  40289c:	b311      	cbz	r1, 4028e4 <__sflush_r+0xb8>
  40289e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4028a2:	4299      	cmp	r1, r3
  4028a4:	d002      	beq.n	4028ac <__sflush_r+0x80>
  4028a6:	4640      	mov	r0, r8
  4028a8:	f000 f9de 	bl	402c68 <_free_r>
  4028ac:	2000      	movs	r0, #0
  4028ae:	6328      	str	r0, [r5, #48]	; 0x30
  4028b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4028b4:	692e      	ldr	r6, [r5, #16]
  4028b6:	b1ae      	cbz	r6, 4028e4 <__sflush_r+0xb8>
  4028b8:	682c      	ldr	r4, [r5, #0]
  4028ba:	602e      	str	r6, [r5, #0]
  4028bc:	0791      	lsls	r1, r2, #30
  4028be:	bf0c      	ite	eq
  4028c0:	696b      	ldreq	r3, [r5, #20]
  4028c2:	2300      	movne	r3, #0
  4028c4:	1ba4      	subs	r4, r4, r6
  4028c6:	60ab      	str	r3, [r5, #8]
  4028c8:	e00a      	b.n	4028e0 <__sflush_r+0xb4>
  4028ca:	4623      	mov	r3, r4
  4028cc:	4632      	mov	r2, r6
  4028ce:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4028d0:	69e9      	ldr	r1, [r5, #28]
  4028d2:	4640      	mov	r0, r8
  4028d4:	47b8      	blx	r7
  4028d6:	2800      	cmp	r0, #0
  4028d8:	eba4 0400 	sub.w	r4, r4, r0
  4028dc:	4406      	add	r6, r0
  4028de:	dd04      	ble.n	4028ea <__sflush_r+0xbe>
  4028e0:	2c00      	cmp	r4, #0
  4028e2:	dcf2      	bgt.n	4028ca <__sflush_r+0x9e>
  4028e4:	2000      	movs	r0, #0
  4028e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4028ea:	89ab      	ldrh	r3, [r5, #12]
  4028ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4028f0:	81ab      	strh	r3, [r5, #12]
  4028f2:	f04f 30ff 	mov.w	r0, #4294967295
  4028f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4028fa:	f8d8 4000 	ldr.w	r4, [r8]
  4028fe:	2c1d      	cmp	r4, #29
  402900:	d8f3      	bhi.n	4028ea <__sflush_r+0xbe>
  402902:	4b19      	ldr	r3, [pc, #100]	; (402968 <__sflush_r+0x13c>)
  402904:	40e3      	lsrs	r3, r4
  402906:	43db      	mvns	r3, r3
  402908:	f013 0301 	ands.w	r3, r3, #1
  40290c:	d1ed      	bne.n	4028ea <__sflush_r+0xbe>
  40290e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  402912:	606b      	str	r3, [r5, #4]
  402914:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  402918:	6929      	ldr	r1, [r5, #16]
  40291a:	81ab      	strh	r3, [r5, #12]
  40291c:	04da      	lsls	r2, r3, #19
  40291e:	6029      	str	r1, [r5, #0]
  402920:	d5b9      	bpl.n	402896 <__sflush_r+0x6a>
  402922:	2c00      	cmp	r4, #0
  402924:	d1b7      	bne.n	402896 <__sflush_r+0x6a>
  402926:	6528      	str	r0, [r5, #80]	; 0x50
  402928:	e7b5      	b.n	402896 <__sflush_r+0x6a>
  40292a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40292c:	2a00      	cmp	r2, #0
  40292e:	dc8c      	bgt.n	40284a <__sflush_r+0x1e>
  402930:	e7d8      	b.n	4028e4 <__sflush_r+0xb8>
  402932:	2301      	movs	r3, #1
  402934:	69e9      	ldr	r1, [r5, #28]
  402936:	4640      	mov	r0, r8
  402938:	47a0      	blx	r4
  40293a:	1c43      	adds	r3, r0, #1
  40293c:	4602      	mov	r2, r0
  40293e:	d002      	beq.n	402946 <__sflush_r+0x11a>
  402940:	89ab      	ldrh	r3, [r5, #12]
  402942:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402944:	e78e      	b.n	402864 <__sflush_r+0x38>
  402946:	f8d8 3000 	ldr.w	r3, [r8]
  40294a:	2b00      	cmp	r3, #0
  40294c:	d0f8      	beq.n	402940 <__sflush_r+0x114>
  40294e:	2b1d      	cmp	r3, #29
  402950:	d001      	beq.n	402956 <__sflush_r+0x12a>
  402952:	2b16      	cmp	r3, #22
  402954:	d102      	bne.n	40295c <__sflush_r+0x130>
  402956:	f8c8 6000 	str.w	r6, [r8]
  40295a:	e7c3      	b.n	4028e4 <__sflush_r+0xb8>
  40295c:	89ab      	ldrh	r3, [r5, #12]
  40295e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402962:	81ab      	strh	r3, [r5, #12]
  402964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402968:	20400001 	.word	0x20400001

0040296c <_fflush_r>:
  40296c:	b538      	push	{r3, r4, r5, lr}
  40296e:	460d      	mov	r5, r1
  402970:	4604      	mov	r4, r0
  402972:	b108      	cbz	r0, 402978 <_fflush_r+0xc>
  402974:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402976:	b1bb      	cbz	r3, 4029a8 <_fflush_r+0x3c>
  402978:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  40297c:	b188      	cbz	r0, 4029a2 <_fflush_r+0x36>
  40297e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  402980:	07db      	lsls	r3, r3, #31
  402982:	d401      	bmi.n	402988 <_fflush_r+0x1c>
  402984:	0581      	lsls	r1, r0, #22
  402986:	d517      	bpl.n	4029b8 <_fflush_r+0x4c>
  402988:	4620      	mov	r0, r4
  40298a:	4629      	mov	r1, r5
  40298c:	f7ff ff4e 	bl	40282c <__sflush_r>
  402990:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  402992:	07da      	lsls	r2, r3, #31
  402994:	4604      	mov	r4, r0
  402996:	d402      	bmi.n	40299e <_fflush_r+0x32>
  402998:	89ab      	ldrh	r3, [r5, #12]
  40299a:	059b      	lsls	r3, r3, #22
  40299c:	d507      	bpl.n	4029ae <_fflush_r+0x42>
  40299e:	4620      	mov	r0, r4
  4029a0:	bd38      	pop	{r3, r4, r5, pc}
  4029a2:	4604      	mov	r4, r0
  4029a4:	4620      	mov	r0, r4
  4029a6:	bd38      	pop	{r3, r4, r5, pc}
  4029a8:	f000 f838 	bl	402a1c <__sinit>
  4029ac:	e7e4      	b.n	402978 <_fflush_r+0xc>
  4029ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4029b0:	f000 fbfa 	bl	4031a8 <__retarget_lock_release_recursive>
  4029b4:	4620      	mov	r0, r4
  4029b6:	bd38      	pop	{r3, r4, r5, pc}
  4029b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4029ba:	f000 fbf3 	bl	4031a4 <__retarget_lock_acquire_recursive>
  4029be:	e7e3      	b.n	402988 <_fflush_r+0x1c>

004029c0 <_cleanup_r>:
  4029c0:	4901      	ldr	r1, [pc, #4]	; (4029c8 <_cleanup_r+0x8>)
  4029c2:	f000 bbaf 	b.w	403124 <_fwalk_reent>
  4029c6:	bf00      	nop
  4029c8:	00403fdd 	.word	0x00403fdd

004029cc <std.isra.0>:
  4029cc:	b510      	push	{r4, lr}
  4029ce:	2300      	movs	r3, #0
  4029d0:	4604      	mov	r4, r0
  4029d2:	8181      	strh	r1, [r0, #12]
  4029d4:	81c2      	strh	r2, [r0, #14]
  4029d6:	6003      	str	r3, [r0, #0]
  4029d8:	6043      	str	r3, [r0, #4]
  4029da:	6083      	str	r3, [r0, #8]
  4029dc:	6643      	str	r3, [r0, #100]	; 0x64
  4029de:	6103      	str	r3, [r0, #16]
  4029e0:	6143      	str	r3, [r0, #20]
  4029e2:	6183      	str	r3, [r0, #24]
  4029e4:	4619      	mov	r1, r3
  4029e6:	2208      	movs	r2, #8
  4029e8:	305c      	adds	r0, #92	; 0x5c
  4029ea:	f7fe fe73 	bl	4016d4 <memset>
  4029ee:	4807      	ldr	r0, [pc, #28]	; (402a0c <std.isra.0+0x40>)
  4029f0:	4907      	ldr	r1, [pc, #28]	; (402a10 <std.isra.0+0x44>)
  4029f2:	4a08      	ldr	r2, [pc, #32]	; (402a14 <std.isra.0+0x48>)
  4029f4:	4b08      	ldr	r3, [pc, #32]	; (402a18 <std.isra.0+0x4c>)
  4029f6:	6220      	str	r0, [r4, #32]
  4029f8:	61e4      	str	r4, [r4, #28]
  4029fa:	6261      	str	r1, [r4, #36]	; 0x24
  4029fc:	62a2      	str	r2, [r4, #40]	; 0x28
  4029fe:	62e3      	str	r3, [r4, #44]	; 0x2c
  402a00:	f104 0058 	add.w	r0, r4, #88	; 0x58
  402a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402a08:	f000 bbc8 	b.w	40319c <__retarget_lock_init_recursive>
  402a0c:	00403d21 	.word	0x00403d21
  402a10:	00403d45 	.word	0x00403d45
  402a14:	00403d81 	.word	0x00403d81
  402a18:	00403da1 	.word	0x00403da1

00402a1c <__sinit>:
  402a1c:	b510      	push	{r4, lr}
  402a1e:	4604      	mov	r4, r0
  402a20:	4812      	ldr	r0, [pc, #72]	; (402a6c <__sinit+0x50>)
  402a22:	f000 fbbf 	bl	4031a4 <__retarget_lock_acquire_recursive>
  402a26:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402a28:	b9d2      	cbnz	r2, 402a60 <__sinit+0x44>
  402a2a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  402a2e:	4810      	ldr	r0, [pc, #64]	; (402a70 <__sinit+0x54>)
  402a30:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  402a34:	2103      	movs	r1, #3
  402a36:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  402a3a:	63e0      	str	r0, [r4, #60]	; 0x3c
  402a3c:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  402a40:	6860      	ldr	r0, [r4, #4]
  402a42:	2104      	movs	r1, #4
  402a44:	f7ff ffc2 	bl	4029cc <std.isra.0>
  402a48:	2201      	movs	r2, #1
  402a4a:	2109      	movs	r1, #9
  402a4c:	68a0      	ldr	r0, [r4, #8]
  402a4e:	f7ff ffbd 	bl	4029cc <std.isra.0>
  402a52:	2202      	movs	r2, #2
  402a54:	2112      	movs	r1, #18
  402a56:	68e0      	ldr	r0, [r4, #12]
  402a58:	f7ff ffb8 	bl	4029cc <std.isra.0>
  402a5c:	2301      	movs	r3, #1
  402a5e:	63a3      	str	r3, [r4, #56]	; 0x38
  402a60:	4802      	ldr	r0, [pc, #8]	; (402a6c <__sinit+0x50>)
  402a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402a66:	f000 bb9f 	b.w	4031a8 <__retarget_lock_release_recursive>
  402a6a:	bf00      	nop
  402a6c:	2043b4cc 	.word	0x2043b4cc
  402a70:	004029c1 	.word	0x004029c1

00402a74 <__sfp_lock_acquire>:
  402a74:	4801      	ldr	r0, [pc, #4]	; (402a7c <__sfp_lock_acquire+0x8>)
  402a76:	f000 bb95 	b.w	4031a4 <__retarget_lock_acquire_recursive>
  402a7a:	bf00      	nop
  402a7c:	2043b4e0 	.word	0x2043b4e0

00402a80 <__sfp_lock_release>:
  402a80:	4801      	ldr	r0, [pc, #4]	; (402a88 <__sfp_lock_release+0x8>)
  402a82:	f000 bb91 	b.w	4031a8 <__retarget_lock_release_recursive>
  402a86:	bf00      	nop
  402a88:	2043b4e0 	.word	0x2043b4e0

00402a8c <__libc_fini_array>:
  402a8c:	b538      	push	{r3, r4, r5, lr}
  402a8e:	4c0a      	ldr	r4, [pc, #40]	; (402ab8 <__libc_fini_array+0x2c>)
  402a90:	4d0a      	ldr	r5, [pc, #40]	; (402abc <__libc_fini_array+0x30>)
  402a92:	1b64      	subs	r4, r4, r5
  402a94:	10a4      	asrs	r4, r4, #2
  402a96:	d00a      	beq.n	402aae <__libc_fini_array+0x22>
  402a98:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402a9c:	3b01      	subs	r3, #1
  402a9e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  402aa2:	3c01      	subs	r4, #1
  402aa4:	f855 3904 	ldr.w	r3, [r5], #-4
  402aa8:	4798      	blx	r3
  402aaa:	2c00      	cmp	r4, #0
  402aac:	d1f9      	bne.n	402aa2 <__libc_fini_array+0x16>
  402aae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402ab2:	f001 bdd9 	b.w	404668 <_fini>
  402ab6:	bf00      	nop
  402ab8:	00404678 	.word	0x00404678
  402abc:	00404674 	.word	0x00404674

00402ac0 <__fputwc>:
  402ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402ac4:	b082      	sub	sp, #8
  402ac6:	4680      	mov	r8, r0
  402ac8:	4689      	mov	r9, r1
  402aca:	4614      	mov	r4, r2
  402acc:	f000 fb54 	bl	403178 <__locale_mb_cur_max>
  402ad0:	2801      	cmp	r0, #1
  402ad2:	d036      	beq.n	402b42 <__fputwc+0x82>
  402ad4:	464a      	mov	r2, r9
  402ad6:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  402ada:	a901      	add	r1, sp, #4
  402adc:	4640      	mov	r0, r8
  402ade:	f001 f9bb 	bl	403e58 <_wcrtomb_r>
  402ae2:	1c42      	adds	r2, r0, #1
  402ae4:	4606      	mov	r6, r0
  402ae6:	d025      	beq.n	402b34 <__fputwc+0x74>
  402ae8:	b3a8      	cbz	r0, 402b56 <__fputwc+0x96>
  402aea:	f89d e004 	ldrb.w	lr, [sp, #4]
  402aee:	2500      	movs	r5, #0
  402af0:	f10d 0a04 	add.w	sl, sp, #4
  402af4:	e009      	b.n	402b0a <__fputwc+0x4a>
  402af6:	6823      	ldr	r3, [r4, #0]
  402af8:	1c5a      	adds	r2, r3, #1
  402afa:	6022      	str	r2, [r4, #0]
  402afc:	f883 e000 	strb.w	lr, [r3]
  402b00:	3501      	adds	r5, #1
  402b02:	42b5      	cmp	r5, r6
  402b04:	d227      	bcs.n	402b56 <__fputwc+0x96>
  402b06:	f815 e00a 	ldrb.w	lr, [r5, sl]
  402b0a:	68a3      	ldr	r3, [r4, #8]
  402b0c:	3b01      	subs	r3, #1
  402b0e:	2b00      	cmp	r3, #0
  402b10:	60a3      	str	r3, [r4, #8]
  402b12:	daf0      	bge.n	402af6 <__fputwc+0x36>
  402b14:	69a7      	ldr	r7, [r4, #24]
  402b16:	42bb      	cmp	r3, r7
  402b18:	4671      	mov	r1, lr
  402b1a:	4622      	mov	r2, r4
  402b1c:	4640      	mov	r0, r8
  402b1e:	db02      	blt.n	402b26 <__fputwc+0x66>
  402b20:	f1be 0f0a 	cmp.w	lr, #10
  402b24:	d1e7      	bne.n	402af6 <__fputwc+0x36>
  402b26:	f001 f93f 	bl	403da8 <__swbuf_r>
  402b2a:	1c43      	adds	r3, r0, #1
  402b2c:	d1e8      	bne.n	402b00 <__fputwc+0x40>
  402b2e:	b002      	add	sp, #8
  402b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402b34:	89a3      	ldrh	r3, [r4, #12]
  402b36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402b3a:	81a3      	strh	r3, [r4, #12]
  402b3c:	b002      	add	sp, #8
  402b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402b42:	f109 33ff 	add.w	r3, r9, #4294967295
  402b46:	2bfe      	cmp	r3, #254	; 0xfe
  402b48:	d8c4      	bhi.n	402ad4 <__fputwc+0x14>
  402b4a:	fa5f fe89 	uxtb.w	lr, r9
  402b4e:	4606      	mov	r6, r0
  402b50:	f88d e004 	strb.w	lr, [sp, #4]
  402b54:	e7cb      	b.n	402aee <__fputwc+0x2e>
  402b56:	4648      	mov	r0, r9
  402b58:	b002      	add	sp, #8
  402b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402b5e:	bf00      	nop

00402b60 <_fputwc_r>:
  402b60:	b530      	push	{r4, r5, lr}
  402b62:	6e53      	ldr	r3, [r2, #100]	; 0x64
  402b64:	f013 0f01 	tst.w	r3, #1
  402b68:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  402b6c:	4614      	mov	r4, r2
  402b6e:	b083      	sub	sp, #12
  402b70:	4605      	mov	r5, r0
  402b72:	b29a      	uxth	r2, r3
  402b74:	d101      	bne.n	402b7a <_fputwc_r+0x1a>
  402b76:	0590      	lsls	r0, r2, #22
  402b78:	d51c      	bpl.n	402bb4 <_fputwc_r+0x54>
  402b7a:	0490      	lsls	r0, r2, #18
  402b7c:	d406      	bmi.n	402b8c <_fputwc_r+0x2c>
  402b7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
  402b80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  402b84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  402b88:	81a3      	strh	r3, [r4, #12]
  402b8a:	6662      	str	r2, [r4, #100]	; 0x64
  402b8c:	4628      	mov	r0, r5
  402b8e:	4622      	mov	r2, r4
  402b90:	f7ff ff96 	bl	402ac0 <__fputwc>
  402b94:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402b96:	07da      	lsls	r2, r3, #31
  402b98:	4605      	mov	r5, r0
  402b9a:	d402      	bmi.n	402ba2 <_fputwc_r+0x42>
  402b9c:	89a3      	ldrh	r3, [r4, #12]
  402b9e:	059b      	lsls	r3, r3, #22
  402ba0:	d502      	bpl.n	402ba8 <_fputwc_r+0x48>
  402ba2:	4628      	mov	r0, r5
  402ba4:	b003      	add	sp, #12
  402ba6:	bd30      	pop	{r4, r5, pc}
  402ba8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402baa:	f000 fafd 	bl	4031a8 <__retarget_lock_release_recursive>
  402bae:	4628      	mov	r0, r5
  402bb0:	b003      	add	sp, #12
  402bb2:	bd30      	pop	{r4, r5, pc}
  402bb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402bb6:	9101      	str	r1, [sp, #4]
  402bb8:	f000 faf4 	bl	4031a4 <__retarget_lock_acquire_recursive>
  402bbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402bc0:	9901      	ldr	r1, [sp, #4]
  402bc2:	b29a      	uxth	r2, r3
  402bc4:	e7d9      	b.n	402b7a <_fputwc_r+0x1a>
  402bc6:	bf00      	nop

00402bc8 <_malloc_trim_r>:
  402bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402bca:	4f24      	ldr	r7, [pc, #144]	; (402c5c <_malloc_trim_r+0x94>)
  402bcc:	460c      	mov	r4, r1
  402bce:	4606      	mov	r6, r0
  402bd0:	f000 fee2 	bl	403998 <__malloc_lock>
  402bd4:	68bb      	ldr	r3, [r7, #8]
  402bd6:	685d      	ldr	r5, [r3, #4]
  402bd8:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  402bdc:	310f      	adds	r1, #15
  402bde:	f025 0503 	bic.w	r5, r5, #3
  402be2:	4429      	add	r1, r5
  402be4:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  402be8:	f021 010f 	bic.w	r1, r1, #15
  402bec:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  402bf0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  402bf4:	db07      	blt.n	402c06 <_malloc_trim_r+0x3e>
  402bf6:	2100      	movs	r1, #0
  402bf8:	4630      	mov	r0, r6
  402bfa:	f001 f87f 	bl	403cfc <_sbrk_r>
  402bfe:	68bb      	ldr	r3, [r7, #8]
  402c00:	442b      	add	r3, r5
  402c02:	4298      	cmp	r0, r3
  402c04:	d004      	beq.n	402c10 <_malloc_trim_r+0x48>
  402c06:	4630      	mov	r0, r6
  402c08:	f000 fecc 	bl	4039a4 <__malloc_unlock>
  402c0c:	2000      	movs	r0, #0
  402c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402c10:	4261      	negs	r1, r4
  402c12:	4630      	mov	r0, r6
  402c14:	f001 f872 	bl	403cfc <_sbrk_r>
  402c18:	3001      	adds	r0, #1
  402c1a:	d00d      	beq.n	402c38 <_malloc_trim_r+0x70>
  402c1c:	4b10      	ldr	r3, [pc, #64]	; (402c60 <_malloc_trim_r+0x98>)
  402c1e:	68ba      	ldr	r2, [r7, #8]
  402c20:	6819      	ldr	r1, [r3, #0]
  402c22:	1b2d      	subs	r5, r5, r4
  402c24:	f045 0501 	orr.w	r5, r5, #1
  402c28:	4630      	mov	r0, r6
  402c2a:	1b09      	subs	r1, r1, r4
  402c2c:	6055      	str	r5, [r2, #4]
  402c2e:	6019      	str	r1, [r3, #0]
  402c30:	f000 feb8 	bl	4039a4 <__malloc_unlock>
  402c34:	2001      	movs	r0, #1
  402c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402c38:	2100      	movs	r1, #0
  402c3a:	4630      	mov	r0, r6
  402c3c:	f001 f85e 	bl	403cfc <_sbrk_r>
  402c40:	68ba      	ldr	r2, [r7, #8]
  402c42:	1a83      	subs	r3, r0, r2
  402c44:	2b0f      	cmp	r3, #15
  402c46:	ddde      	ble.n	402c06 <_malloc_trim_r+0x3e>
  402c48:	4c06      	ldr	r4, [pc, #24]	; (402c64 <_malloc_trim_r+0x9c>)
  402c4a:	4905      	ldr	r1, [pc, #20]	; (402c60 <_malloc_trim_r+0x98>)
  402c4c:	6824      	ldr	r4, [r4, #0]
  402c4e:	f043 0301 	orr.w	r3, r3, #1
  402c52:	1b00      	subs	r0, r0, r4
  402c54:	6053      	str	r3, [r2, #4]
  402c56:	6008      	str	r0, [r1, #0]
  402c58:	e7d5      	b.n	402c06 <_malloc_trim_r+0x3e>
  402c5a:	bf00      	nop
  402c5c:	204005c8 	.word	0x204005c8
  402c60:	2043b3f4 	.word	0x2043b3f4
  402c64:	204009d0 	.word	0x204009d0

00402c68 <_free_r>:
  402c68:	2900      	cmp	r1, #0
  402c6a:	d044      	beq.n	402cf6 <_free_r+0x8e>
  402c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402c70:	460d      	mov	r5, r1
  402c72:	4680      	mov	r8, r0
  402c74:	f000 fe90 	bl	403998 <__malloc_lock>
  402c78:	f855 7c04 	ldr.w	r7, [r5, #-4]
  402c7c:	4969      	ldr	r1, [pc, #420]	; (402e24 <_free_r+0x1bc>)
  402c7e:	f027 0301 	bic.w	r3, r7, #1
  402c82:	f1a5 0408 	sub.w	r4, r5, #8
  402c86:	18e2      	adds	r2, r4, r3
  402c88:	688e      	ldr	r6, [r1, #8]
  402c8a:	6850      	ldr	r0, [r2, #4]
  402c8c:	42b2      	cmp	r2, r6
  402c8e:	f020 0003 	bic.w	r0, r0, #3
  402c92:	d05e      	beq.n	402d52 <_free_r+0xea>
  402c94:	07fe      	lsls	r6, r7, #31
  402c96:	6050      	str	r0, [r2, #4]
  402c98:	d40b      	bmi.n	402cb2 <_free_r+0x4a>
  402c9a:	f855 7c08 	ldr.w	r7, [r5, #-8]
  402c9e:	1be4      	subs	r4, r4, r7
  402ca0:	f101 0e08 	add.w	lr, r1, #8
  402ca4:	68a5      	ldr	r5, [r4, #8]
  402ca6:	4575      	cmp	r5, lr
  402ca8:	443b      	add	r3, r7
  402caa:	d06d      	beq.n	402d88 <_free_r+0x120>
  402cac:	68e7      	ldr	r7, [r4, #12]
  402cae:	60ef      	str	r7, [r5, #12]
  402cb0:	60bd      	str	r5, [r7, #8]
  402cb2:	1815      	adds	r5, r2, r0
  402cb4:	686d      	ldr	r5, [r5, #4]
  402cb6:	07ed      	lsls	r5, r5, #31
  402cb8:	d53e      	bpl.n	402d38 <_free_r+0xd0>
  402cba:	f043 0201 	orr.w	r2, r3, #1
  402cbe:	6062      	str	r2, [r4, #4]
  402cc0:	50e3      	str	r3, [r4, r3]
  402cc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402cc6:	d217      	bcs.n	402cf8 <_free_r+0x90>
  402cc8:	08db      	lsrs	r3, r3, #3
  402cca:	1c58      	adds	r0, r3, #1
  402ccc:	109a      	asrs	r2, r3, #2
  402cce:	684d      	ldr	r5, [r1, #4]
  402cd0:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  402cd4:	60a7      	str	r7, [r4, #8]
  402cd6:	2301      	movs	r3, #1
  402cd8:	4093      	lsls	r3, r2
  402cda:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  402cde:	432b      	orrs	r3, r5
  402ce0:	3a08      	subs	r2, #8
  402ce2:	60e2      	str	r2, [r4, #12]
  402ce4:	604b      	str	r3, [r1, #4]
  402ce6:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  402cea:	60fc      	str	r4, [r7, #12]
  402cec:	4640      	mov	r0, r8
  402cee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402cf2:	f000 be57 	b.w	4039a4 <__malloc_unlock>
  402cf6:	4770      	bx	lr
  402cf8:	0a5a      	lsrs	r2, r3, #9
  402cfa:	2a04      	cmp	r2, #4
  402cfc:	d852      	bhi.n	402da4 <_free_r+0x13c>
  402cfe:	099a      	lsrs	r2, r3, #6
  402d00:	f102 0739 	add.w	r7, r2, #57	; 0x39
  402d04:	00ff      	lsls	r7, r7, #3
  402d06:	f102 0538 	add.w	r5, r2, #56	; 0x38
  402d0a:	19c8      	adds	r0, r1, r7
  402d0c:	59ca      	ldr	r2, [r1, r7]
  402d0e:	3808      	subs	r0, #8
  402d10:	4290      	cmp	r0, r2
  402d12:	d04f      	beq.n	402db4 <_free_r+0x14c>
  402d14:	6851      	ldr	r1, [r2, #4]
  402d16:	f021 0103 	bic.w	r1, r1, #3
  402d1a:	428b      	cmp	r3, r1
  402d1c:	d232      	bcs.n	402d84 <_free_r+0x11c>
  402d1e:	6892      	ldr	r2, [r2, #8]
  402d20:	4290      	cmp	r0, r2
  402d22:	d1f7      	bne.n	402d14 <_free_r+0xac>
  402d24:	68c3      	ldr	r3, [r0, #12]
  402d26:	60a0      	str	r0, [r4, #8]
  402d28:	60e3      	str	r3, [r4, #12]
  402d2a:	609c      	str	r4, [r3, #8]
  402d2c:	60c4      	str	r4, [r0, #12]
  402d2e:	4640      	mov	r0, r8
  402d30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402d34:	f000 be36 	b.w	4039a4 <__malloc_unlock>
  402d38:	6895      	ldr	r5, [r2, #8]
  402d3a:	4f3b      	ldr	r7, [pc, #236]	; (402e28 <_free_r+0x1c0>)
  402d3c:	42bd      	cmp	r5, r7
  402d3e:	4403      	add	r3, r0
  402d40:	d040      	beq.n	402dc4 <_free_r+0x15c>
  402d42:	68d0      	ldr	r0, [r2, #12]
  402d44:	60e8      	str	r0, [r5, #12]
  402d46:	f043 0201 	orr.w	r2, r3, #1
  402d4a:	6085      	str	r5, [r0, #8]
  402d4c:	6062      	str	r2, [r4, #4]
  402d4e:	50e3      	str	r3, [r4, r3]
  402d50:	e7b7      	b.n	402cc2 <_free_r+0x5a>
  402d52:	07ff      	lsls	r7, r7, #31
  402d54:	4403      	add	r3, r0
  402d56:	d407      	bmi.n	402d68 <_free_r+0x100>
  402d58:	f855 2c08 	ldr.w	r2, [r5, #-8]
  402d5c:	1aa4      	subs	r4, r4, r2
  402d5e:	4413      	add	r3, r2
  402d60:	68a0      	ldr	r0, [r4, #8]
  402d62:	68e2      	ldr	r2, [r4, #12]
  402d64:	60c2      	str	r2, [r0, #12]
  402d66:	6090      	str	r0, [r2, #8]
  402d68:	4a30      	ldr	r2, [pc, #192]	; (402e2c <_free_r+0x1c4>)
  402d6a:	6812      	ldr	r2, [r2, #0]
  402d6c:	f043 0001 	orr.w	r0, r3, #1
  402d70:	4293      	cmp	r3, r2
  402d72:	6060      	str	r0, [r4, #4]
  402d74:	608c      	str	r4, [r1, #8]
  402d76:	d3b9      	bcc.n	402cec <_free_r+0x84>
  402d78:	4b2d      	ldr	r3, [pc, #180]	; (402e30 <_free_r+0x1c8>)
  402d7a:	4640      	mov	r0, r8
  402d7c:	6819      	ldr	r1, [r3, #0]
  402d7e:	f7ff ff23 	bl	402bc8 <_malloc_trim_r>
  402d82:	e7b3      	b.n	402cec <_free_r+0x84>
  402d84:	4610      	mov	r0, r2
  402d86:	e7cd      	b.n	402d24 <_free_r+0xbc>
  402d88:	1811      	adds	r1, r2, r0
  402d8a:	6849      	ldr	r1, [r1, #4]
  402d8c:	07c9      	lsls	r1, r1, #31
  402d8e:	d444      	bmi.n	402e1a <_free_r+0x1b2>
  402d90:	6891      	ldr	r1, [r2, #8]
  402d92:	68d2      	ldr	r2, [r2, #12]
  402d94:	60ca      	str	r2, [r1, #12]
  402d96:	4403      	add	r3, r0
  402d98:	f043 0001 	orr.w	r0, r3, #1
  402d9c:	6091      	str	r1, [r2, #8]
  402d9e:	6060      	str	r0, [r4, #4]
  402da0:	50e3      	str	r3, [r4, r3]
  402da2:	e7a3      	b.n	402cec <_free_r+0x84>
  402da4:	2a14      	cmp	r2, #20
  402da6:	d816      	bhi.n	402dd6 <_free_r+0x16e>
  402da8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  402dac:	00ff      	lsls	r7, r7, #3
  402dae:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  402db2:	e7aa      	b.n	402d0a <_free_r+0xa2>
  402db4:	10aa      	asrs	r2, r5, #2
  402db6:	2301      	movs	r3, #1
  402db8:	684d      	ldr	r5, [r1, #4]
  402dba:	4093      	lsls	r3, r2
  402dbc:	432b      	orrs	r3, r5
  402dbe:	604b      	str	r3, [r1, #4]
  402dc0:	4603      	mov	r3, r0
  402dc2:	e7b0      	b.n	402d26 <_free_r+0xbe>
  402dc4:	f043 0201 	orr.w	r2, r3, #1
  402dc8:	614c      	str	r4, [r1, #20]
  402dca:	610c      	str	r4, [r1, #16]
  402dcc:	60e5      	str	r5, [r4, #12]
  402dce:	60a5      	str	r5, [r4, #8]
  402dd0:	6062      	str	r2, [r4, #4]
  402dd2:	50e3      	str	r3, [r4, r3]
  402dd4:	e78a      	b.n	402cec <_free_r+0x84>
  402dd6:	2a54      	cmp	r2, #84	; 0x54
  402dd8:	d806      	bhi.n	402de8 <_free_r+0x180>
  402dda:	0b1a      	lsrs	r2, r3, #12
  402ddc:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  402de0:	00ff      	lsls	r7, r7, #3
  402de2:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  402de6:	e790      	b.n	402d0a <_free_r+0xa2>
  402de8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402dec:	d806      	bhi.n	402dfc <_free_r+0x194>
  402dee:	0bda      	lsrs	r2, r3, #15
  402df0:	f102 0778 	add.w	r7, r2, #120	; 0x78
  402df4:	00ff      	lsls	r7, r7, #3
  402df6:	f102 0577 	add.w	r5, r2, #119	; 0x77
  402dfa:	e786      	b.n	402d0a <_free_r+0xa2>
  402dfc:	f240 5054 	movw	r0, #1364	; 0x554
  402e00:	4282      	cmp	r2, r0
  402e02:	d806      	bhi.n	402e12 <_free_r+0x1aa>
  402e04:	0c9a      	lsrs	r2, r3, #18
  402e06:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  402e0a:	00ff      	lsls	r7, r7, #3
  402e0c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  402e10:	e77b      	b.n	402d0a <_free_r+0xa2>
  402e12:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  402e16:	257e      	movs	r5, #126	; 0x7e
  402e18:	e777      	b.n	402d0a <_free_r+0xa2>
  402e1a:	f043 0101 	orr.w	r1, r3, #1
  402e1e:	6061      	str	r1, [r4, #4]
  402e20:	6013      	str	r3, [r2, #0]
  402e22:	e763      	b.n	402cec <_free_r+0x84>
  402e24:	204005c8 	.word	0x204005c8
  402e28:	204005d0 	.word	0x204005d0
  402e2c:	204009d4 	.word	0x204009d4
  402e30:	2043b424 	.word	0x2043b424

00402e34 <__sfvwrite_r>:
  402e34:	6893      	ldr	r3, [r2, #8]
  402e36:	2b00      	cmp	r3, #0
  402e38:	d073      	beq.n	402f22 <__sfvwrite_r+0xee>
  402e3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402e3e:	898b      	ldrh	r3, [r1, #12]
  402e40:	b083      	sub	sp, #12
  402e42:	460c      	mov	r4, r1
  402e44:	0719      	lsls	r1, r3, #28
  402e46:	9000      	str	r0, [sp, #0]
  402e48:	4616      	mov	r6, r2
  402e4a:	d526      	bpl.n	402e9a <__sfvwrite_r+0x66>
  402e4c:	6922      	ldr	r2, [r4, #16]
  402e4e:	b322      	cbz	r2, 402e9a <__sfvwrite_r+0x66>
  402e50:	f013 0002 	ands.w	r0, r3, #2
  402e54:	6835      	ldr	r5, [r6, #0]
  402e56:	d02c      	beq.n	402eb2 <__sfvwrite_r+0x7e>
  402e58:	f04f 0900 	mov.w	r9, #0
  402e5c:	4fb0      	ldr	r7, [pc, #704]	; (403120 <__sfvwrite_r+0x2ec>)
  402e5e:	46c8      	mov	r8, r9
  402e60:	46b2      	mov	sl, r6
  402e62:	45b8      	cmp	r8, r7
  402e64:	4643      	mov	r3, r8
  402e66:	464a      	mov	r2, r9
  402e68:	bf28      	it	cs
  402e6a:	463b      	movcs	r3, r7
  402e6c:	9800      	ldr	r0, [sp, #0]
  402e6e:	f1b8 0f00 	cmp.w	r8, #0
  402e72:	d050      	beq.n	402f16 <__sfvwrite_r+0xe2>
  402e74:	69e1      	ldr	r1, [r4, #28]
  402e76:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402e78:	47b0      	blx	r6
  402e7a:	2800      	cmp	r0, #0
  402e7c:	dd58      	ble.n	402f30 <__sfvwrite_r+0xfc>
  402e7e:	f8da 3008 	ldr.w	r3, [sl, #8]
  402e82:	1a1b      	subs	r3, r3, r0
  402e84:	4481      	add	r9, r0
  402e86:	eba8 0800 	sub.w	r8, r8, r0
  402e8a:	f8ca 3008 	str.w	r3, [sl, #8]
  402e8e:	2b00      	cmp	r3, #0
  402e90:	d1e7      	bne.n	402e62 <__sfvwrite_r+0x2e>
  402e92:	2000      	movs	r0, #0
  402e94:	b003      	add	sp, #12
  402e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402e9a:	4621      	mov	r1, r4
  402e9c:	9800      	ldr	r0, [sp, #0]
  402e9e:	f7ff fc51 	bl	402744 <__swsetup_r>
  402ea2:	2800      	cmp	r0, #0
  402ea4:	f040 8133 	bne.w	40310e <__sfvwrite_r+0x2da>
  402ea8:	89a3      	ldrh	r3, [r4, #12]
  402eaa:	6835      	ldr	r5, [r6, #0]
  402eac:	f013 0002 	ands.w	r0, r3, #2
  402eb0:	d1d2      	bne.n	402e58 <__sfvwrite_r+0x24>
  402eb2:	f013 0901 	ands.w	r9, r3, #1
  402eb6:	d145      	bne.n	402f44 <__sfvwrite_r+0x110>
  402eb8:	464f      	mov	r7, r9
  402eba:	9601      	str	r6, [sp, #4]
  402ebc:	b337      	cbz	r7, 402f0c <__sfvwrite_r+0xd8>
  402ebe:	059a      	lsls	r2, r3, #22
  402ec0:	f8d4 8008 	ldr.w	r8, [r4, #8]
  402ec4:	f140 8083 	bpl.w	402fce <__sfvwrite_r+0x19a>
  402ec8:	4547      	cmp	r7, r8
  402eca:	46c3      	mov	fp, r8
  402ecc:	f0c0 80ab 	bcc.w	403026 <__sfvwrite_r+0x1f2>
  402ed0:	f413 6f90 	tst.w	r3, #1152	; 0x480
  402ed4:	f040 80ac 	bne.w	403030 <__sfvwrite_r+0x1fc>
  402ed8:	6820      	ldr	r0, [r4, #0]
  402eda:	46ba      	mov	sl, r7
  402edc:	465a      	mov	r2, fp
  402ede:	4649      	mov	r1, r9
  402ee0:	f000 fcf6 	bl	4038d0 <memmove>
  402ee4:	68a2      	ldr	r2, [r4, #8]
  402ee6:	6823      	ldr	r3, [r4, #0]
  402ee8:	eba2 0208 	sub.w	r2, r2, r8
  402eec:	445b      	add	r3, fp
  402eee:	60a2      	str	r2, [r4, #8]
  402ef0:	6023      	str	r3, [r4, #0]
  402ef2:	9a01      	ldr	r2, [sp, #4]
  402ef4:	6893      	ldr	r3, [r2, #8]
  402ef6:	eba3 030a 	sub.w	r3, r3, sl
  402efa:	44d1      	add	r9, sl
  402efc:	eba7 070a 	sub.w	r7, r7, sl
  402f00:	6093      	str	r3, [r2, #8]
  402f02:	2b00      	cmp	r3, #0
  402f04:	d0c5      	beq.n	402e92 <__sfvwrite_r+0x5e>
  402f06:	89a3      	ldrh	r3, [r4, #12]
  402f08:	2f00      	cmp	r7, #0
  402f0a:	d1d8      	bne.n	402ebe <__sfvwrite_r+0x8a>
  402f0c:	f8d5 9000 	ldr.w	r9, [r5]
  402f10:	686f      	ldr	r7, [r5, #4]
  402f12:	3508      	adds	r5, #8
  402f14:	e7d2      	b.n	402ebc <__sfvwrite_r+0x88>
  402f16:	f8d5 9000 	ldr.w	r9, [r5]
  402f1a:	f8d5 8004 	ldr.w	r8, [r5, #4]
  402f1e:	3508      	adds	r5, #8
  402f20:	e79f      	b.n	402e62 <__sfvwrite_r+0x2e>
  402f22:	2000      	movs	r0, #0
  402f24:	4770      	bx	lr
  402f26:	4621      	mov	r1, r4
  402f28:	9800      	ldr	r0, [sp, #0]
  402f2a:	f7ff fd1f 	bl	40296c <_fflush_r>
  402f2e:	b370      	cbz	r0, 402f8e <__sfvwrite_r+0x15a>
  402f30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402f34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402f38:	f04f 30ff 	mov.w	r0, #4294967295
  402f3c:	81a3      	strh	r3, [r4, #12]
  402f3e:	b003      	add	sp, #12
  402f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402f44:	4681      	mov	r9, r0
  402f46:	4633      	mov	r3, r6
  402f48:	464e      	mov	r6, r9
  402f4a:	46a8      	mov	r8, r5
  402f4c:	469a      	mov	sl, r3
  402f4e:	464d      	mov	r5, r9
  402f50:	b34e      	cbz	r6, 402fa6 <__sfvwrite_r+0x172>
  402f52:	b380      	cbz	r0, 402fb6 <__sfvwrite_r+0x182>
  402f54:	6820      	ldr	r0, [r4, #0]
  402f56:	6923      	ldr	r3, [r4, #16]
  402f58:	6962      	ldr	r2, [r4, #20]
  402f5a:	45b1      	cmp	r9, r6
  402f5c:	46cb      	mov	fp, r9
  402f5e:	bf28      	it	cs
  402f60:	46b3      	movcs	fp, r6
  402f62:	4298      	cmp	r0, r3
  402f64:	465f      	mov	r7, fp
  402f66:	d904      	bls.n	402f72 <__sfvwrite_r+0x13e>
  402f68:	68a3      	ldr	r3, [r4, #8]
  402f6a:	4413      	add	r3, r2
  402f6c:	459b      	cmp	fp, r3
  402f6e:	f300 80a6 	bgt.w	4030be <__sfvwrite_r+0x28a>
  402f72:	4593      	cmp	fp, r2
  402f74:	db4b      	blt.n	40300e <__sfvwrite_r+0x1da>
  402f76:	4613      	mov	r3, r2
  402f78:	6a67      	ldr	r7, [r4, #36]	; 0x24
  402f7a:	69e1      	ldr	r1, [r4, #28]
  402f7c:	9800      	ldr	r0, [sp, #0]
  402f7e:	462a      	mov	r2, r5
  402f80:	47b8      	blx	r7
  402f82:	1e07      	subs	r7, r0, #0
  402f84:	ddd4      	ble.n	402f30 <__sfvwrite_r+0xfc>
  402f86:	ebb9 0907 	subs.w	r9, r9, r7
  402f8a:	d0cc      	beq.n	402f26 <__sfvwrite_r+0xf2>
  402f8c:	2001      	movs	r0, #1
  402f8e:	f8da 3008 	ldr.w	r3, [sl, #8]
  402f92:	1bdb      	subs	r3, r3, r7
  402f94:	443d      	add	r5, r7
  402f96:	1bf6      	subs	r6, r6, r7
  402f98:	f8ca 3008 	str.w	r3, [sl, #8]
  402f9c:	2b00      	cmp	r3, #0
  402f9e:	f43f af78 	beq.w	402e92 <__sfvwrite_r+0x5e>
  402fa2:	2e00      	cmp	r6, #0
  402fa4:	d1d5      	bne.n	402f52 <__sfvwrite_r+0x11e>
  402fa6:	f108 0308 	add.w	r3, r8, #8
  402faa:	e913 0060 	ldmdb	r3, {r5, r6}
  402fae:	4698      	mov	r8, r3
  402fb0:	3308      	adds	r3, #8
  402fb2:	2e00      	cmp	r6, #0
  402fb4:	d0f9      	beq.n	402faa <__sfvwrite_r+0x176>
  402fb6:	4632      	mov	r2, r6
  402fb8:	210a      	movs	r1, #10
  402fba:	4628      	mov	r0, r5
  402fbc:	f000 fc38 	bl	403830 <memchr>
  402fc0:	2800      	cmp	r0, #0
  402fc2:	f000 80a1 	beq.w	403108 <__sfvwrite_r+0x2d4>
  402fc6:	3001      	adds	r0, #1
  402fc8:	eba0 0905 	sub.w	r9, r0, r5
  402fcc:	e7c2      	b.n	402f54 <__sfvwrite_r+0x120>
  402fce:	6820      	ldr	r0, [r4, #0]
  402fd0:	6923      	ldr	r3, [r4, #16]
  402fd2:	4298      	cmp	r0, r3
  402fd4:	d802      	bhi.n	402fdc <__sfvwrite_r+0x1a8>
  402fd6:	6963      	ldr	r3, [r4, #20]
  402fd8:	429f      	cmp	r7, r3
  402fda:	d25d      	bcs.n	403098 <__sfvwrite_r+0x264>
  402fdc:	45b8      	cmp	r8, r7
  402fde:	bf28      	it	cs
  402fe0:	46b8      	movcs	r8, r7
  402fe2:	4642      	mov	r2, r8
  402fe4:	4649      	mov	r1, r9
  402fe6:	f000 fc73 	bl	4038d0 <memmove>
  402fea:	68a3      	ldr	r3, [r4, #8]
  402fec:	6822      	ldr	r2, [r4, #0]
  402fee:	eba3 0308 	sub.w	r3, r3, r8
  402ff2:	4442      	add	r2, r8
  402ff4:	60a3      	str	r3, [r4, #8]
  402ff6:	6022      	str	r2, [r4, #0]
  402ff8:	b10b      	cbz	r3, 402ffe <__sfvwrite_r+0x1ca>
  402ffa:	46c2      	mov	sl, r8
  402ffc:	e779      	b.n	402ef2 <__sfvwrite_r+0xbe>
  402ffe:	4621      	mov	r1, r4
  403000:	9800      	ldr	r0, [sp, #0]
  403002:	f7ff fcb3 	bl	40296c <_fflush_r>
  403006:	2800      	cmp	r0, #0
  403008:	d192      	bne.n	402f30 <__sfvwrite_r+0xfc>
  40300a:	46c2      	mov	sl, r8
  40300c:	e771      	b.n	402ef2 <__sfvwrite_r+0xbe>
  40300e:	465a      	mov	r2, fp
  403010:	4629      	mov	r1, r5
  403012:	f000 fc5d 	bl	4038d0 <memmove>
  403016:	68a2      	ldr	r2, [r4, #8]
  403018:	6823      	ldr	r3, [r4, #0]
  40301a:	eba2 020b 	sub.w	r2, r2, fp
  40301e:	445b      	add	r3, fp
  403020:	60a2      	str	r2, [r4, #8]
  403022:	6023      	str	r3, [r4, #0]
  403024:	e7af      	b.n	402f86 <__sfvwrite_r+0x152>
  403026:	6820      	ldr	r0, [r4, #0]
  403028:	46b8      	mov	r8, r7
  40302a:	46ba      	mov	sl, r7
  40302c:	46bb      	mov	fp, r7
  40302e:	e755      	b.n	402edc <__sfvwrite_r+0xa8>
  403030:	6962      	ldr	r2, [r4, #20]
  403032:	6820      	ldr	r0, [r4, #0]
  403034:	6921      	ldr	r1, [r4, #16]
  403036:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  40303a:	eba0 0a01 	sub.w	sl, r0, r1
  40303e:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  403042:	f10a 0001 	add.w	r0, sl, #1
  403046:	ea4f 0868 	mov.w	r8, r8, asr #1
  40304a:	4438      	add	r0, r7
  40304c:	4540      	cmp	r0, r8
  40304e:	4642      	mov	r2, r8
  403050:	bf84      	itt	hi
  403052:	4680      	movhi	r8, r0
  403054:	4642      	movhi	r2, r8
  403056:	055b      	lsls	r3, r3, #21
  403058:	d544      	bpl.n	4030e4 <__sfvwrite_r+0x2b0>
  40305a:	4611      	mov	r1, r2
  40305c:	9800      	ldr	r0, [sp, #0]
  40305e:	f000 f91d 	bl	40329c <_malloc_r>
  403062:	4683      	mov	fp, r0
  403064:	2800      	cmp	r0, #0
  403066:	d055      	beq.n	403114 <__sfvwrite_r+0x2e0>
  403068:	4652      	mov	r2, sl
  40306a:	6921      	ldr	r1, [r4, #16]
  40306c:	f7fe fa98 	bl	4015a0 <memcpy>
  403070:	89a3      	ldrh	r3, [r4, #12]
  403072:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  403076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40307a:	81a3      	strh	r3, [r4, #12]
  40307c:	eb0b 000a 	add.w	r0, fp, sl
  403080:	eba8 030a 	sub.w	r3, r8, sl
  403084:	f8c4 b010 	str.w	fp, [r4, #16]
  403088:	f8c4 8014 	str.w	r8, [r4, #20]
  40308c:	6020      	str	r0, [r4, #0]
  40308e:	60a3      	str	r3, [r4, #8]
  403090:	46b8      	mov	r8, r7
  403092:	46ba      	mov	sl, r7
  403094:	46bb      	mov	fp, r7
  403096:	e721      	b.n	402edc <__sfvwrite_r+0xa8>
  403098:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  40309c:	42b9      	cmp	r1, r7
  40309e:	bf28      	it	cs
  4030a0:	4639      	movcs	r1, r7
  4030a2:	464a      	mov	r2, r9
  4030a4:	fb91 f1f3 	sdiv	r1, r1, r3
  4030a8:	9800      	ldr	r0, [sp, #0]
  4030aa:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4030ac:	fb03 f301 	mul.w	r3, r3, r1
  4030b0:	69e1      	ldr	r1, [r4, #28]
  4030b2:	47b0      	blx	r6
  4030b4:	f1b0 0a00 	subs.w	sl, r0, #0
  4030b8:	f73f af1b 	bgt.w	402ef2 <__sfvwrite_r+0xbe>
  4030bc:	e738      	b.n	402f30 <__sfvwrite_r+0xfc>
  4030be:	461a      	mov	r2, r3
  4030c0:	4629      	mov	r1, r5
  4030c2:	9301      	str	r3, [sp, #4]
  4030c4:	f000 fc04 	bl	4038d0 <memmove>
  4030c8:	6822      	ldr	r2, [r4, #0]
  4030ca:	9b01      	ldr	r3, [sp, #4]
  4030cc:	9800      	ldr	r0, [sp, #0]
  4030ce:	441a      	add	r2, r3
  4030d0:	6022      	str	r2, [r4, #0]
  4030d2:	4621      	mov	r1, r4
  4030d4:	f7ff fc4a 	bl	40296c <_fflush_r>
  4030d8:	9b01      	ldr	r3, [sp, #4]
  4030da:	2800      	cmp	r0, #0
  4030dc:	f47f af28 	bne.w	402f30 <__sfvwrite_r+0xfc>
  4030e0:	461f      	mov	r7, r3
  4030e2:	e750      	b.n	402f86 <__sfvwrite_r+0x152>
  4030e4:	9800      	ldr	r0, [sp, #0]
  4030e6:	f000 fc63 	bl	4039b0 <_realloc_r>
  4030ea:	4683      	mov	fp, r0
  4030ec:	2800      	cmp	r0, #0
  4030ee:	d1c5      	bne.n	40307c <__sfvwrite_r+0x248>
  4030f0:	9d00      	ldr	r5, [sp, #0]
  4030f2:	6921      	ldr	r1, [r4, #16]
  4030f4:	4628      	mov	r0, r5
  4030f6:	f7ff fdb7 	bl	402c68 <_free_r>
  4030fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4030fe:	220c      	movs	r2, #12
  403100:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  403104:	602a      	str	r2, [r5, #0]
  403106:	e715      	b.n	402f34 <__sfvwrite_r+0x100>
  403108:	f106 0901 	add.w	r9, r6, #1
  40310c:	e722      	b.n	402f54 <__sfvwrite_r+0x120>
  40310e:	f04f 30ff 	mov.w	r0, #4294967295
  403112:	e6bf      	b.n	402e94 <__sfvwrite_r+0x60>
  403114:	9a00      	ldr	r2, [sp, #0]
  403116:	230c      	movs	r3, #12
  403118:	6013      	str	r3, [r2, #0]
  40311a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40311e:	e709      	b.n	402f34 <__sfvwrite_r+0x100>
  403120:	7ffffc00 	.word	0x7ffffc00

00403124 <_fwalk_reent>:
  403124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403128:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40312c:	d01f      	beq.n	40316e <_fwalk_reent+0x4a>
  40312e:	4688      	mov	r8, r1
  403130:	4606      	mov	r6, r0
  403132:	f04f 0900 	mov.w	r9, #0
  403136:	687d      	ldr	r5, [r7, #4]
  403138:	68bc      	ldr	r4, [r7, #8]
  40313a:	3d01      	subs	r5, #1
  40313c:	d411      	bmi.n	403162 <_fwalk_reent+0x3e>
  40313e:	89a3      	ldrh	r3, [r4, #12]
  403140:	2b01      	cmp	r3, #1
  403142:	f105 35ff 	add.w	r5, r5, #4294967295
  403146:	d908      	bls.n	40315a <_fwalk_reent+0x36>
  403148:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40314c:	3301      	adds	r3, #1
  40314e:	4621      	mov	r1, r4
  403150:	4630      	mov	r0, r6
  403152:	d002      	beq.n	40315a <_fwalk_reent+0x36>
  403154:	47c0      	blx	r8
  403156:	ea49 0900 	orr.w	r9, r9, r0
  40315a:	1c6b      	adds	r3, r5, #1
  40315c:	f104 0468 	add.w	r4, r4, #104	; 0x68
  403160:	d1ed      	bne.n	40313e <_fwalk_reent+0x1a>
  403162:	683f      	ldr	r7, [r7, #0]
  403164:	2f00      	cmp	r7, #0
  403166:	d1e6      	bne.n	403136 <_fwalk_reent+0x12>
  403168:	4648      	mov	r0, r9
  40316a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40316e:	46b9      	mov	r9, r7
  403170:	4648      	mov	r0, r9
  403172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403176:	bf00      	nop

00403178 <__locale_mb_cur_max>:
  403178:	4b04      	ldr	r3, [pc, #16]	; (40318c <__locale_mb_cur_max+0x14>)
  40317a:	4a05      	ldr	r2, [pc, #20]	; (403190 <__locale_mb_cur_max+0x18>)
  40317c:	681b      	ldr	r3, [r3, #0]
  40317e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  403180:	2b00      	cmp	r3, #0
  403182:	bf08      	it	eq
  403184:	4613      	moveq	r3, r2
  403186:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  40318a:	4770      	bx	lr
  40318c:	20400028 	.word	0x20400028
  403190:	2040045c 	.word	0x2040045c

00403194 <__locale_ctype_ptr_l>:
  403194:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
  403198:	4770      	bx	lr
  40319a:	bf00      	nop

0040319c <__retarget_lock_init_recursive>:
  40319c:	4770      	bx	lr
  40319e:	bf00      	nop

004031a0 <__retarget_lock_close_recursive>:
  4031a0:	4770      	bx	lr
  4031a2:	bf00      	nop

004031a4 <__retarget_lock_acquire_recursive>:
  4031a4:	4770      	bx	lr
  4031a6:	bf00      	nop

004031a8 <__retarget_lock_release_recursive>:
  4031a8:	4770      	bx	lr
  4031aa:	bf00      	nop

004031ac <__swhatbuf_r>:
  4031ac:	b570      	push	{r4, r5, r6, lr}
  4031ae:	460c      	mov	r4, r1
  4031b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4031b4:	2900      	cmp	r1, #0
  4031b6:	b090      	sub	sp, #64	; 0x40
  4031b8:	4615      	mov	r5, r2
  4031ba:	461e      	mov	r6, r3
  4031bc:	db14      	blt.n	4031e8 <__swhatbuf_r+0x3c>
  4031be:	aa01      	add	r2, sp, #4
  4031c0:	f000 ff6e 	bl	4040a0 <_fstat_r>
  4031c4:	2800      	cmp	r0, #0
  4031c6:	db0f      	blt.n	4031e8 <__swhatbuf_r+0x3c>
  4031c8:	9a02      	ldr	r2, [sp, #8]
  4031ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4031ce:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4031d2:	fab2 f282 	clz	r2, r2
  4031d6:	0952      	lsrs	r2, r2, #5
  4031d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4031dc:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4031e0:	6032      	str	r2, [r6, #0]
  4031e2:	602b      	str	r3, [r5, #0]
  4031e4:	b010      	add	sp, #64	; 0x40
  4031e6:	bd70      	pop	{r4, r5, r6, pc}
  4031e8:	89a2      	ldrh	r2, [r4, #12]
  4031ea:	2300      	movs	r3, #0
  4031ec:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  4031f0:	6033      	str	r3, [r6, #0]
  4031f2:	d004      	beq.n	4031fe <__swhatbuf_r+0x52>
  4031f4:	2240      	movs	r2, #64	; 0x40
  4031f6:	4618      	mov	r0, r3
  4031f8:	602a      	str	r2, [r5, #0]
  4031fa:	b010      	add	sp, #64	; 0x40
  4031fc:	bd70      	pop	{r4, r5, r6, pc}
  4031fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403202:	602b      	str	r3, [r5, #0]
  403204:	b010      	add	sp, #64	; 0x40
  403206:	bd70      	pop	{r4, r5, r6, pc}

00403208 <__smakebuf_r>:
  403208:	898a      	ldrh	r2, [r1, #12]
  40320a:	0792      	lsls	r2, r2, #30
  40320c:	460b      	mov	r3, r1
  40320e:	d506      	bpl.n	40321e <__smakebuf_r+0x16>
  403210:	f101 0243 	add.w	r2, r1, #67	; 0x43
  403214:	2101      	movs	r1, #1
  403216:	601a      	str	r2, [r3, #0]
  403218:	611a      	str	r2, [r3, #16]
  40321a:	6159      	str	r1, [r3, #20]
  40321c:	4770      	bx	lr
  40321e:	b5f0      	push	{r4, r5, r6, r7, lr}
  403220:	b083      	sub	sp, #12
  403222:	ab01      	add	r3, sp, #4
  403224:	466a      	mov	r2, sp
  403226:	460c      	mov	r4, r1
  403228:	4606      	mov	r6, r0
  40322a:	f7ff ffbf 	bl	4031ac <__swhatbuf_r>
  40322e:	9900      	ldr	r1, [sp, #0]
  403230:	4605      	mov	r5, r0
  403232:	4630      	mov	r0, r6
  403234:	f000 f832 	bl	40329c <_malloc_r>
  403238:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40323c:	b1d8      	cbz	r0, 403276 <__smakebuf_r+0x6e>
  40323e:	9a01      	ldr	r2, [sp, #4]
  403240:	4f15      	ldr	r7, [pc, #84]	; (403298 <__smakebuf_r+0x90>)
  403242:	9900      	ldr	r1, [sp, #0]
  403244:	63f7      	str	r7, [r6, #60]	; 0x3c
  403246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40324a:	81a3      	strh	r3, [r4, #12]
  40324c:	6020      	str	r0, [r4, #0]
  40324e:	6120      	str	r0, [r4, #16]
  403250:	6161      	str	r1, [r4, #20]
  403252:	b91a      	cbnz	r2, 40325c <__smakebuf_r+0x54>
  403254:	432b      	orrs	r3, r5
  403256:	81a3      	strh	r3, [r4, #12]
  403258:	b003      	add	sp, #12
  40325a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40325c:	4630      	mov	r0, r6
  40325e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403262:	f000 ff31 	bl	4040c8 <_isatty_r>
  403266:	b1a0      	cbz	r0, 403292 <__smakebuf_r+0x8a>
  403268:	89a3      	ldrh	r3, [r4, #12]
  40326a:	f023 0303 	bic.w	r3, r3, #3
  40326e:	f043 0301 	orr.w	r3, r3, #1
  403272:	b21b      	sxth	r3, r3
  403274:	e7ee      	b.n	403254 <__smakebuf_r+0x4c>
  403276:	059a      	lsls	r2, r3, #22
  403278:	d4ee      	bmi.n	403258 <__smakebuf_r+0x50>
  40327a:	f023 0303 	bic.w	r3, r3, #3
  40327e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403282:	f043 0302 	orr.w	r3, r3, #2
  403286:	2101      	movs	r1, #1
  403288:	81a3      	strh	r3, [r4, #12]
  40328a:	6022      	str	r2, [r4, #0]
  40328c:	6122      	str	r2, [r4, #16]
  40328e:	6161      	str	r1, [r4, #20]
  403290:	e7e2      	b.n	403258 <__smakebuf_r+0x50>
  403292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403296:	e7dd      	b.n	403254 <__smakebuf_r+0x4c>
  403298:	004029c1 	.word	0x004029c1

0040329c <_malloc_r>:
  40329c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4032a0:	f101 060b 	add.w	r6, r1, #11
  4032a4:	2e16      	cmp	r6, #22
  4032a6:	b083      	sub	sp, #12
  4032a8:	4605      	mov	r5, r0
  4032aa:	f240 809e 	bls.w	4033ea <_malloc_r+0x14e>
  4032ae:	f036 0607 	bics.w	r6, r6, #7
  4032b2:	f100 80bd 	bmi.w	403430 <_malloc_r+0x194>
  4032b6:	42b1      	cmp	r1, r6
  4032b8:	f200 80ba 	bhi.w	403430 <_malloc_r+0x194>
  4032bc:	f000 fb6c 	bl	403998 <__malloc_lock>
  4032c0:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  4032c4:	f0c0 8293 	bcc.w	4037ee <_malloc_r+0x552>
  4032c8:	0a73      	lsrs	r3, r6, #9
  4032ca:	f000 80b8 	beq.w	40343e <_malloc_r+0x1a2>
  4032ce:	2b04      	cmp	r3, #4
  4032d0:	f200 8179 	bhi.w	4035c6 <_malloc_r+0x32a>
  4032d4:	09b3      	lsrs	r3, r6, #6
  4032d6:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4032da:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4032de:	00c3      	lsls	r3, r0, #3
  4032e0:	4fbf      	ldr	r7, [pc, #764]	; (4035e0 <_malloc_r+0x344>)
  4032e2:	443b      	add	r3, r7
  4032e4:	f1a3 0108 	sub.w	r1, r3, #8
  4032e8:	685c      	ldr	r4, [r3, #4]
  4032ea:	42a1      	cmp	r1, r4
  4032ec:	d106      	bne.n	4032fc <_malloc_r+0x60>
  4032ee:	e00c      	b.n	40330a <_malloc_r+0x6e>
  4032f0:	2a00      	cmp	r2, #0
  4032f2:	f280 80aa 	bge.w	40344a <_malloc_r+0x1ae>
  4032f6:	68e4      	ldr	r4, [r4, #12]
  4032f8:	42a1      	cmp	r1, r4
  4032fa:	d006      	beq.n	40330a <_malloc_r+0x6e>
  4032fc:	6863      	ldr	r3, [r4, #4]
  4032fe:	f023 0303 	bic.w	r3, r3, #3
  403302:	1b9a      	subs	r2, r3, r6
  403304:	2a0f      	cmp	r2, #15
  403306:	ddf3      	ble.n	4032f0 <_malloc_r+0x54>
  403308:	4670      	mov	r0, lr
  40330a:	693c      	ldr	r4, [r7, #16]
  40330c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4035f4 <_malloc_r+0x358>
  403310:	4574      	cmp	r4, lr
  403312:	f000 81ab 	beq.w	40366c <_malloc_r+0x3d0>
  403316:	6863      	ldr	r3, [r4, #4]
  403318:	f023 0303 	bic.w	r3, r3, #3
  40331c:	1b9a      	subs	r2, r3, r6
  40331e:	2a0f      	cmp	r2, #15
  403320:	f300 8190 	bgt.w	403644 <_malloc_r+0x3a8>
  403324:	2a00      	cmp	r2, #0
  403326:	f8c7 e014 	str.w	lr, [r7, #20]
  40332a:	f8c7 e010 	str.w	lr, [r7, #16]
  40332e:	f280 809d 	bge.w	40346c <_malloc_r+0x1d0>
  403332:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403336:	f080 8161 	bcs.w	4035fc <_malloc_r+0x360>
  40333a:	08db      	lsrs	r3, r3, #3
  40333c:	f103 0c01 	add.w	ip, r3, #1
  403340:	1099      	asrs	r1, r3, #2
  403342:	687a      	ldr	r2, [r7, #4]
  403344:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  403348:	f8c4 8008 	str.w	r8, [r4, #8]
  40334c:	2301      	movs	r3, #1
  40334e:	408b      	lsls	r3, r1
  403350:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  403354:	4313      	orrs	r3, r2
  403356:	3908      	subs	r1, #8
  403358:	60e1      	str	r1, [r4, #12]
  40335a:	607b      	str	r3, [r7, #4]
  40335c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  403360:	f8c8 400c 	str.w	r4, [r8, #12]
  403364:	1082      	asrs	r2, r0, #2
  403366:	2401      	movs	r4, #1
  403368:	4094      	lsls	r4, r2
  40336a:	429c      	cmp	r4, r3
  40336c:	f200 808b 	bhi.w	403486 <_malloc_r+0x1ea>
  403370:	421c      	tst	r4, r3
  403372:	d106      	bne.n	403382 <_malloc_r+0xe6>
  403374:	f020 0003 	bic.w	r0, r0, #3
  403378:	0064      	lsls	r4, r4, #1
  40337a:	421c      	tst	r4, r3
  40337c:	f100 0004 	add.w	r0, r0, #4
  403380:	d0fa      	beq.n	403378 <_malloc_r+0xdc>
  403382:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  403386:	46cc      	mov	ip, r9
  403388:	4680      	mov	r8, r0
  40338a:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40338e:	459c      	cmp	ip, r3
  403390:	d107      	bne.n	4033a2 <_malloc_r+0x106>
  403392:	e16d      	b.n	403670 <_malloc_r+0x3d4>
  403394:	2a00      	cmp	r2, #0
  403396:	f280 817b 	bge.w	403690 <_malloc_r+0x3f4>
  40339a:	68db      	ldr	r3, [r3, #12]
  40339c:	459c      	cmp	ip, r3
  40339e:	f000 8167 	beq.w	403670 <_malloc_r+0x3d4>
  4033a2:	6859      	ldr	r1, [r3, #4]
  4033a4:	f021 0103 	bic.w	r1, r1, #3
  4033a8:	1b8a      	subs	r2, r1, r6
  4033aa:	2a0f      	cmp	r2, #15
  4033ac:	ddf2      	ble.n	403394 <_malloc_r+0xf8>
  4033ae:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4033b2:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4033b6:	9300      	str	r3, [sp, #0]
  4033b8:	199c      	adds	r4, r3, r6
  4033ba:	4628      	mov	r0, r5
  4033bc:	f046 0601 	orr.w	r6, r6, #1
  4033c0:	f042 0501 	orr.w	r5, r2, #1
  4033c4:	605e      	str	r6, [r3, #4]
  4033c6:	f8c8 c00c 	str.w	ip, [r8, #12]
  4033ca:	f8cc 8008 	str.w	r8, [ip, #8]
  4033ce:	617c      	str	r4, [r7, #20]
  4033d0:	613c      	str	r4, [r7, #16]
  4033d2:	f8c4 e00c 	str.w	lr, [r4, #12]
  4033d6:	f8c4 e008 	str.w	lr, [r4, #8]
  4033da:	6065      	str	r5, [r4, #4]
  4033dc:	505a      	str	r2, [r3, r1]
  4033de:	f000 fae1 	bl	4039a4 <__malloc_unlock>
  4033e2:	9b00      	ldr	r3, [sp, #0]
  4033e4:	f103 0408 	add.w	r4, r3, #8
  4033e8:	e01e      	b.n	403428 <_malloc_r+0x18c>
  4033ea:	2910      	cmp	r1, #16
  4033ec:	d820      	bhi.n	403430 <_malloc_r+0x194>
  4033ee:	f000 fad3 	bl	403998 <__malloc_lock>
  4033f2:	2610      	movs	r6, #16
  4033f4:	2318      	movs	r3, #24
  4033f6:	2002      	movs	r0, #2
  4033f8:	4f79      	ldr	r7, [pc, #484]	; (4035e0 <_malloc_r+0x344>)
  4033fa:	443b      	add	r3, r7
  4033fc:	f1a3 0208 	sub.w	r2, r3, #8
  403400:	685c      	ldr	r4, [r3, #4]
  403402:	4294      	cmp	r4, r2
  403404:	f000 813d 	beq.w	403682 <_malloc_r+0x3e6>
  403408:	6863      	ldr	r3, [r4, #4]
  40340a:	68e1      	ldr	r1, [r4, #12]
  40340c:	68a6      	ldr	r6, [r4, #8]
  40340e:	f023 0303 	bic.w	r3, r3, #3
  403412:	4423      	add	r3, r4
  403414:	4628      	mov	r0, r5
  403416:	685a      	ldr	r2, [r3, #4]
  403418:	60f1      	str	r1, [r6, #12]
  40341a:	f042 0201 	orr.w	r2, r2, #1
  40341e:	608e      	str	r6, [r1, #8]
  403420:	605a      	str	r2, [r3, #4]
  403422:	f000 fabf 	bl	4039a4 <__malloc_unlock>
  403426:	3408      	adds	r4, #8
  403428:	4620      	mov	r0, r4
  40342a:	b003      	add	sp, #12
  40342c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403430:	2400      	movs	r4, #0
  403432:	230c      	movs	r3, #12
  403434:	4620      	mov	r0, r4
  403436:	602b      	str	r3, [r5, #0]
  403438:	b003      	add	sp, #12
  40343a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40343e:	2040      	movs	r0, #64	; 0x40
  403440:	f44f 7300 	mov.w	r3, #512	; 0x200
  403444:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  403448:	e74a      	b.n	4032e0 <_malloc_r+0x44>
  40344a:	4423      	add	r3, r4
  40344c:	68e1      	ldr	r1, [r4, #12]
  40344e:	685a      	ldr	r2, [r3, #4]
  403450:	68a6      	ldr	r6, [r4, #8]
  403452:	f042 0201 	orr.w	r2, r2, #1
  403456:	60f1      	str	r1, [r6, #12]
  403458:	4628      	mov	r0, r5
  40345a:	608e      	str	r6, [r1, #8]
  40345c:	605a      	str	r2, [r3, #4]
  40345e:	f000 faa1 	bl	4039a4 <__malloc_unlock>
  403462:	3408      	adds	r4, #8
  403464:	4620      	mov	r0, r4
  403466:	b003      	add	sp, #12
  403468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40346c:	4423      	add	r3, r4
  40346e:	4628      	mov	r0, r5
  403470:	685a      	ldr	r2, [r3, #4]
  403472:	f042 0201 	orr.w	r2, r2, #1
  403476:	605a      	str	r2, [r3, #4]
  403478:	f000 fa94 	bl	4039a4 <__malloc_unlock>
  40347c:	3408      	adds	r4, #8
  40347e:	4620      	mov	r0, r4
  403480:	b003      	add	sp, #12
  403482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403486:	68bc      	ldr	r4, [r7, #8]
  403488:	6863      	ldr	r3, [r4, #4]
  40348a:	f023 0803 	bic.w	r8, r3, #3
  40348e:	45b0      	cmp	r8, r6
  403490:	d304      	bcc.n	40349c <_malloc_r+0x200>
  403492:	eba8 0306 	sub.w	r3, r8, r6
  403496:	2b0f      	cmp	r3, #15
  403498:	f300 8085 	bgt.w	4035a6 <_malloc_r+0x30a>
  40349c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4035f8 <_malloc_r+0x35c>
  4034a0:	4b50      	ldr	r3, [pc, #320]	; (4035e4 <_malloc_r+0x348>)
  4034a2:	f8d9 2000 	ldr.w	r2, [r9]
  4034a6:	681b      	ldr	r3, [r3, #0]
  4034a8:	3201      	adds	r2, #1
  4034aa:	4433      	add	r3, r6
  4034ac:	eb04 0a08 	add.w	sl, r4, r8
  4034b0:	f000 8155 	beq.w	40375e <_malloc_r+0x4c2>
  4034b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4034b8:	330f      	adds	r3, #15
  4034ba:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  4034be:	f02b 0b0f 	bic.w	fp, fp, #15
  4034c2:	4659      	mov	r1, fp
  4034c4:	4628      	mov	r0, r5
  4034c6:	f000 fc19 	bl	403cfc <_sbrk_r>
  4034ca:	1c41      	adds	r1, r0, #1
  4034cc:	4602      	mov	r2, r0
  4034ce:	f000 80fc 	beq.w	4036ca <_malloc_r+0x42e>
  4034d2:	4582      	cmp	sl, r0
  4034d4:	f200 80f7 	bhi.w	4036c6 <_malloc_r+0x42a>
  4034d8:	4b43      	ldr	r3, [pc, #268]	; (4035e8 <_malloc_r+0x34c>)
  4034da:	6819      	ldr	r1, [r3, #0]
  4034dc:	4459      	add	r1, fp
  4034de:	6019      	str	r1, [r3, #0]
  4034e0:	f000 814d 	beq.w	40377e <_malloc_r+0x4e2>
  4034e4:	f8d9 0000 	ldr.w	r0, [r9]
  4034e8:	3001      	adds	r0, #1
  4034ea:	bf1b      	ittet	ne
  4034ec:	eba2 0a0a 	subne.w	sl, r2, sl
  4034f0:	4451      	addne	r1, sl
  4034f2:	f8c9 2000 	streq.w	r2, [r9]
  4034f6:	6019      	strne	r1, [r3, #0]
  4034f8:	f012 0107 	ands.w	r1, r2, #7
  4034fc:	f000 8115 	beq.w	40372a <_malloc_r+0x48e>
  403500:	f1c1 0008 	rsb	r0, r1, #8
  403504:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  403508:	4402      	add	r2, r0
  40350a:	3108      	adds	r1, #8
  40350c:	eb02 090b 	add.w	r9, r2, fp
  403510:	f3c9 090b 	ubfx	r9, r9, #0, #12
  403514:	eba1 0909 	sub.w	r9, r1, r9
  403518:	4649      	mov	r1, r9
  40351a:	4628      	mov	r0, r5
  40351c:	9301      	str	r3, [sp, #4]
  40351e:	9200      	str	r2, [sp, #0]
  403520:	f000 fbec 	bl	403cfc <_sbrk_r>
  403524:	1c43      	adds	r3, r0, #1
  403526:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40352a:	f000 8143 	beq.w	4037b4 <_malloc_r+0x518>
  40352e:	1a80      	subs	r0, r0, r2
  403530:	4448      	add	r0, r9
  403532:	f040 0001 	orr.w	r0, r0, #1
  403536:	6819      	ldr	r1, [r3, #0]
  403538:	60ba      	str	r2, [r7, #8]
  40353a:	4449      	add	r1, r9
  40353c:	42bc      	cmp	r4, r7
  40353e:	6050      	str	r0, [r2, #4]
  403540:	6019      	str	r1, [r3, #0]
  403542:	d017      	beq.n	403574 <_malloc_r+0x2d8>
  403544:	f1b8 0f0f 	cmp.w	r8, #15
  403548:	f240 80fb 	bls.w	403742 <_malloc_r+0x4a6>
  40354c:	6860      	ldr	r0, [r4, #4]
  40354e:	f1a8 020c 	sub.w	r2, r8, #12
  403552:	f022 0207 	bic.w	r2, r2, #7
  403556:	eb04 0e02 	add.w	lr, r4, r2
  40355a:	f000 0001 	and.w	r0, r0, #1
  40355e:	f04f 0c05 	mov.w	ip, #5
  403562:	4310      	orrs	r0, r2
  403564:	2a0f      	cmp	r2, #15
  403566:	6060      	str	r0, [r4, #4]
  403568:	f8ce c004 	str.w	ip, [lr, #4]
  40356c:	f8ce c008 	str.w	ip, [lr, #8]
  403570:	f200 8117 	bhi.w	4037a2 <_malloc_r+0x506>
  403574:	4b1d      	ldr	r3, [pc, #116]	; (4035ec <_malloc_r+0x350>)
  403576:	68bc      	ldr	r4, [r7, #8]
  403578:	681a      	ldr	r2, [r3, #0]
  40357a:	4291      	cmp	r1, r2
  40357c:	bf88      	it	hi
  40357e:	6019      	strhi	r1, [r3, #0]
  403580:	4b1b      	ldr	r3, [pc, #108]	; (4035f0 <_malloc_r+0x354>)
  403582:	681a      	ldr	r2, [r3, #0]
  403584:	4291      	cmp	r1, r2
  403586:	6862      	ldr	r2, [r4, #4]
  403588:	bf88      	it	hi
  40358a:	6019      	strhi	r1, [r3, #0]
  40358c:	f022 0203 	bic.w	r2, r2, #3
  403590:	4296      	cmp	r6, r2
  403592:	eba2 0306 	sub.w	r3, r2, r6
  403596:	d801      	bhi.n	40359c <_malloc_r+0x300>
  403598:	2b0f      	cmp	r3, #15
  40359a:	dc04      	bgt.n	4035a6 <_malloc_r+0x30a>
  40359c:	4628      	mov	r0, r5
  40359e:	f000 fa01 	bl	4039a4 <__malloc_unlock>
  4035a2:	2400      	movs	r4, #0
  4035a4:	e740      	b.n	403428 <_malloc_r+0x18c>
  4035a6:	19a2      	adds	r2, r4, r6
  4035a8:	f043 0301 	orr.w	r3, r3, #1
  4035ac:	f046 0601 	orr.w	r6, r6, #1
  4035b0:	6066      	str	r6, [r4, #4]
  4035b2:	4628      	mov	r0, r5
  4035b4:	60ba      	str	r2, [r7, #8]
  4035b6:	6053      	str	r3, [r2, #4]
  4035b8:	f000 f9f4 	bl	4039a4 <__malloc_unlock>
  4035bc:	3408      	adds	r4, #8
  4035be:	4620      	mov	r0, r4
  4035c0:	b003      	add	sp, #12
  4035c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4035c6:	2b14      	cmp	r3, #20
  4035c8:	d971      	bls.n	4036ae <_malloc_r+0x412>
  4035ca:	2b54      	cmp	r3, #84	; 0x54
  4035cc:	f200 80a3 	bhi.w	403716 <_malloc_r+0x47a>
  4035d0:	0b33      	lsrs	r3, r6, #12
  4035d2:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  4035d6:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  4035da:	00c3      	lsls	r3, r0, #3
  4035dc:	e680      	b.n	4032e0 <_malloc_r+0x44>
  4035de:	bf00      	nop
  4035e0:	204005c8 	.word	0x204005c8
  4035e4:	2043b424 	.word	0x2043b424
  4035e8:	2043b3f4 	.word	0x2043b3f4
  4035ec:	2043b41c 	.word	0x2043b41c
  4035f0:	2043b420 	.word	0x2043b420
  4035f4:	204005d0 	.word	0x204005d0
  4035f8:	204009d0 	.word	0x204009d0
  4035fc:	0a5a      	lsrs	r2, r3, #9
  4035fe:	2a04      	cmp	r2, #4
  403600:	d95b      	bls.n	4036ba <_malloc_r+0x41e>
  403602:	2a14      	cmp	r2, #20
  403604:	f200 80ae 	bhi.w	403764 <_malloc_r+0x4c8>
  403608:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40360c:	00c9      	lsls	r1, r1, #3
  40360e:	325b      	adds	r2, #91	; 0x5b
  403610:	eb07 0c01 	add.w	ip, r7, r1
  403614:	5879      	ldr	r1, [r7, r1]
  403616:	f1ac 0c08 	sub.w	ip, ip, #8
  40361a:	458c      	cmp	ip, r1
  40361c:	f000 8088 	beq.w	403730 <_malloc_r+0x494>
  403620:	684a      	ldr	r2, [r1, #4]
  403622:	f022 0203 	bic.w	r2, r2, #3
  403626:	4293      	cmp	r3, r2
  403628:	d273      	bcs.n	403712 <_malloc_r+0x476>
  40362a:	6889      	ldr	r1, [r1, #8]
  40362c:	458c      	cmp	ip, r1
  40362e:	d1f7      	bne.n	403620 <_malloc_r+0x384>
  403630:	f8dc 200c 	ldr.w	r2, [ip, #12]
  403634:	687b      	ldr	r3, [r7, #4]
  403636:	60e2      	str	r2, [r4, #12]
  403638:	f8c4 c008 	str.w	ip, [r4, #8]
  40363c:	6094      	str	r4, [r2, #8]
  40363e:	f8cc 400c 	str.w	r4, [ip, #12]
  403642:	e68f      	b.n	403364 <_malloc_r+0xc8>
  403644:	19a1      	adds	r1, r4, r6
  403646:	f046 0c01 	orr.w	ip, r6, #1
  40364a:	f042 0601 	orr.w	r6, r2, #1
  40364e:	f8c4 c004 	str.w	ip, [r4, #4]
  403652:	4628      	mov	r0, r5
  403654:	6179      	str	r1, [r7, #20]
  403656:	6139      	str	r1, [r7, #16]
  403658:	f8c1 e00c 	str.w	lr, [r1, #12]
  40365c:	f8c1 e008 	str.w	lr, [r1, #8]
  403660:	604e      	str	r6, [r1, #4]
  403662:	50e2      	str	r2, [r4, r3]
  403664:	f000 f99e 	bl	4039a4 <__malloc_unlock>
  403668:	3408      	adds	r4, #8
  40366a:	e6dd      	b.n	403428 <_malloc_r+0x18c>
  40366c:	687b      	ldr	r3, [r7, #4]
  40366e:	e679      	b.n	403364 <_malloc_r+0xc8>
  403670:	f108 0801 	add.w	r8, r8, #1
  403674:	f018 0f03 	tst.w	r8, #3
  403678:	f10c 0c08 	add.w	ip, ip, #8
  40367c:	f47f ae85 	bne.w	40338a <_malloc_r+0xee>
  403680:	e02d      	b.n	4036de <_malloc_r+0x442>
  403682:	68dc      	ldr	r4, [r3, #12]
  403684:	42a3      	cmp	r3, r4
  403686:	bf08      	it	eq
  403688:	3002      	addeq	r0, #2
  40368a:	f43f ae3e 	beq.w	40330a <_malloc_r+0x6e>
  40368e:	e6bb      	b.n	403408 <_malloc_r+0x16c>
  403690:	4419      	add	r1, r3
  403692:	461c      	mov	r4, r3
  403694:	684a      	ldr	r2, [r1, #4]
  403696:	68db      	ldr	r3, [r3, #12]
  403698:	f854 6f08 	ldr.w	r6, [r4, #8]!
  40369c:	f042 0201 	orr.w	r2, r2, #1
  4036a0:	604a      	str	r2, [r1, #4]
  4036a2:	4628      	mov	r0, r5
  4036a4:	60f3      	str	r3, [r6, #12]
  4036a6:	609e      	str	r6, [r3, #8]
  4036a8:	f000 f97c 	bl	4039a4 <__malloc_unlock>
  4036ac:	e6bc      	b.n	403428 <_malloc_r+0x18c>
  4036ae:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4036b2:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4036b6:	00c3      	lsls	r3, r0, #3
  4036b8:	e612      	b.n	4032e0 <_malloc_r+0x44>
  4036ba:	099a      	lsrs	r2, r3, #6
  4036bc:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4036c0:	00c9      	lsls	r1, r1, #3
  4036c2:	3238      	adds	r2, #56	; 0x38
  4036c4:	e7a4      	b.n	403610 <_malloc_r+0x374>
  4036c6:	42bc      	cmp	r4, r7
  4036c8:	d054      	beq.n	403774 <_malloc_r+0x4d8>
  4036ca:	68bc      	ldr	r4, [r7, #8]
  4036cc:	6862      	ldr	r2, [r4, #4]
  4036ce:	f022 0203 	bic.w	r2, r2, #3
  4036d2:	e75d      	b.n	403590 <_malloc_r+0x2f4>
  4036d4:	f859 3908 	ldr.w	r3, [r9], #-8
  4036d8:	4599      	cmp	r9, r3
  4036da:	f040 8086 	bne.w	4037ea <_malloc_r+0x54e>
  4036de:	f010 0f03 	tst.w	r0, #3
  4036e2:	f100 30ff 	add.w	r0, r0, #4294967295
  4036e6:	d1f5      	bne.n	4036d4 <_malloc_r+0x438>
  4036e8:	687b      	ldr	r3, [r7, #4]
  4036ea:	ea23 0304 	bic.w	r3, r3, r4
  4036ee:	607b      	str	r3, [r7, #4]
  4036f0:	0064      	lsls	r4, r4, #1
  4036f2:	429c      	cmp	r4, r3
  4036f4:	f63f aec7 	bhi.w	403486 <_malloc_r+0x1ea>
  4036f8:	2c00      	cmp	r4, #0
  4036fa:	f43f aec4 	beq.w	403486 <_malloc_r+0x1ea>
  4036fe:	421c      	tst	r4, r3
  403700:	4640      	mov	r0, r8
  403702:	f47f ae3e 	bne.w	403382 <_malloc_r+0xe6>
  403706:	0064      	lsls	r4, r4, #1
  403708:	421c      	tst	r4, r3
  40370a:	f100 0004 	add.w	r0, r0, #4
  40370e:	d0fa      	beq.n	403706 <_malloc_r+0x46a>
  403710:	e637      	b.n	403382 <_malloc_r+0xe6>
  403712:	468c      	mov	ip, r1
  403714:	e78c      	b.n	403630 <_malloc_r+0x394>
  403716:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40371a:	d815      	bhi.n	403748 <_malloc_r+0x4ac>
  40371c:	0bf3      	lsrs	r3, r6, #15
  40371e:	f103 0078 	add.w	r0, r3, #120	; 0x78
  403722:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  403726:	00c3      	lsls	r3, r0, #3
  403728:	e5da      	b.n	4032e0 <_malloc_r+0x44>
  40372a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40372e:	e6ed      	b.n	40350c <_malloc_r+0x270>
  403730:	687b      	ldr	r3, [r7, #4]
  403732:	1092      	asrs	r2, r2, #2
  403734:	2101      	movs	r1, #1
  403736:	fa01 f202 	lsl.w	r2, r1, r2
  40373a:	4313      	orrs	r3, r2
  40373c:	607b      	str	r3, [r7, #4]
  40373e:	4662      	mov	r2, ip
  403740:	e779      	b.n	403636 <_malloc_r+0x39a>
  403742:	2301      	movs	r3, #1
  403744:	6053      	str	r3, [r2, #4]
  403746:	e729      	b.n	40359c <_malloc_r+0x300>
  403748:	f240 5254 	movw	r2, #1364	; 0x554
  40374c:	4293      	cmp	r3, r2
  40374e:	d822      	bhi.n	403796 <_malloc_r+0x4fa>
  403750:	0cb3      	lsrs	r3, r6, #18
  403752:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  403756:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40375a:	00c3      	lsls	r3, r0, #3
  40375c:	e5c0      	b.n	4032e0 <_malloc_r+0x44>
  40375e:	f103 0b10 	add.w	fp, r3, #16
  403762:	e6ae      	b.n	4034c2 <_malloc_r+0x226>
  403764:	2a54      	cmp	r2, #84	; 0x54
  403766:	d829      	bhi.n	4037bc <_malloc_r+0x520>
  403768:	0b1a      	lsrs	r2, r3, #12
  40376a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40376e:	00c9      	lsls	r1, r1, #3
  403770:	326e      	adds	r2, #110	; 0x6e
  403772:	e74d      	b.n	403610 <_malloc_r+0x374>
  403774:	4b20      	ldr	r3, [pc, #128]	; (4037f8 <_malloc_r+0x55c>)
  403776:	6819      	ldr	r1, [r3, #0]
  403778:	4459      	add	r1, fp
  40377a:	6019      	str	r1, [r3, #0]
  40377c:	e6b2      	b.n	4034e4 <_malloc_r+0x248>
  40377e:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403782:	2800      	cmp	r0, #0
  403784:	f47f aeae 	bne.w	4034e4 <_malloc_r+0x248>
  403788:	eb08 030b 	add.w	r3, r8, fp
  40378c:	68ba      	ldr	r2, [r7, #8]
  40378e:	f043 0301 	orr.w	r3, r3, #1
  403792:	6053      	str	r3, [r2, #4]
  403794:	e6ee      	b.n	403574 <_malloc_r+0x2d8>
  403796:	207f      	movs	r0, #127	; 0x7f
  403798:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40379c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4037a0:	e59e      	b.n	4032e0 <_malloc_r+0x44>
  4037a2:	f104 0108 	add.w	r1, r4, #8
  4037a6:	4628      	mov	r0, r5
  4037a8:	9300      	str	r3, [sp, #0]
  4037aa:	f7ff fa5d 	bl	402c68 <_free_r>
  4037ae:	9b00      	ldr	r3, [sp, #0]
  4037b0:	6819      	ldr	r1, [r3, #0]
  4037b2:	e6df      	b.n	403574 <_malloc_r+0x2d8>
  4037b4:	2001      	movs	r0, #1
  4037b6:	f04f 0900 	mov.w	r9, #0
  4037ba:	e6bc      	b.n	403536 <_malloc_r+0x29a>
  4037bc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4037c0:	d805      	bhi.n	4037ce <_malloc_r+0x532>
  4037c2:	0bda      	lsrs	r2, r3, #15
  4037c4:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4037c8:	00c9      	lsls	r1, r1, #3
  4037ca:	3277      	adds	r2, #119	; 0x77
  4037cc:	e720      	b.n	403610 <_malloc_r+0x374>
  4037ce:	f240 5154 	movw	r1, #1364	; 0x554
  4037d2:	428a      	cmp	r2, r1
  4037d4:	d805      	bhi.n	4037e2 <_malloc_r+0x546>
  4037d6:	0c9a      	lsrs	r2, r3, #18
  4037d8:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4037dc:	00c9      	lsls	r1, r1, #3
  4037de:	327c      	adds	r2, #124	; 0x7c
  4037e0:	e716      	b.n	403610 <_malloc_r+0x374>
  4037e2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4037e6:	227e      	movs	r2, #126	; 0x7e
  4037e8:	e712      	b.n	403610 <_malloc_r+0x374>
  4037ea:	687b      	ldr	r3, [r7, #4]
  4037ec:	e780      	b.n	4036f0 <_malloc_r+0x454>
  4037ee:	08f0      	lsrs	r0, r6, #3
  4037f0:	f106 0308 	add.w	r3, r6, #8
  4037f4:	e600      	b.n	4033f8 <_malloc_r+0x15c>
  4037f6:	bf00      	nop
  4037f8:	2043b3f4 	.word	0x2043b3f4

004037fc <__ascii_mbtowc>:
  4037fc:	b082      	sub	sp, #8
  4037fe:	b149      	cbz	r1, 403814 <__ascii_mbtowc+0x18>
  403800:	b15a      	cbz	r2, 40381a <__ascii_mbtowc+0x1e>
  403802:	b16b      	cbz	r3, 403820 <__ascii_mbtowc+0x24>
  403804:	7813      	ldrb	r3, [r2, #0]
  403806:	600b      	str	r3, [r1, #0]
  403808:	7812      	ldrb	r2, [r2, #0]
  40380a:	1c10      	adds	r0, r2, #0
  40380c:	bf18      	it	ne
  40380e:	2001      	movne	r0, #1
  403810:	b002      	add	sp, #8
  403812:	4770      	bx	lr
  403814:	a901      	add	r1, sp, #4
  403816:	2a00      	cmp	r2, #0
  403818:	d1f3      	bne.n	403802 <__ascii_mbtowc+0x6>
  40381a:	4610      	mov	r0, r2
  40381c:	b002      	add	sp, #8
  40381e:	4770      	bx	lr
  403820:	f06f 0001 	mvn.w	r0, #1
  403824:	e7f4      	b.n	403810 <__ascii_mbtowc+0x14>
  403826:	bf00      	nop
	...

00403830 <memchr>:
  403830:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403834:	2a10      	cmp	r2, #16
  403836:	db2b      	blt.n	403890 <memchr+0x60>
  403838:	f010 0f07 	tst.w	r0, #7
  40383c:	d008      	beq.n	403850 <memchr+0x20>
  40383e:	f810 3b01 	ldrb.w	r3, [r0], #1
  403842:	3a01      	subs	r2, #1
  403844:	428b      	cmp	r3, r1
  403846:	d02d      	beq.n	4038a4 <memchr+0x74>
  403848:	f010 0f07 	tst.w	r0, #7
  40384c:	b342      	cbz	r2, 4038a0 <memchr+0x70>
  40384e:	d1f6      	bne.n	40383e <memchr+0xe>
  403850:	b4f0      	push	{r4, r5, r6, r7}
  403852:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  403856:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40385a:	f022 0407 	bic.w	r4, r2, #7
  40385e:	f07f 0700 	mvns.w	r7, #0
  403862:	2300      	movs	r3, #0
  403864:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  403868:	3c08      	subs	r4, #8
  40386a:	ea85 0501 	eor.w	r5, r5, r1
  40386e:	ea86 0601 	eor.w	r6, r6, r1
  403872:	fa85 f547 	uadd8	r5, r5, r7
  403876:	faa3 f587 	sel	r5, r3, r7
  40387a:	fa86 f647 	uadd8	r6, r6, r7
  40387e:	faa5 f687 	sel	r6, r5, r7
  403882:	b98e      	cbnz	r6, 4038a8 <memchr+0x78>
  403884:	d1ee      	bne.n	403864 <memchr+0x34>
  403886:	bcf0      	pop	{r4, r5, r6, r7}
  403888:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40388c:	f002 0207 	and.w	r2, r2, #7
  403890:	b132      	cbz	r2, 4038a0 <memchr+0x70>
  403892:	f810 3b01 	ldrb.w	r3, [r0], #1
  403896:	3a01      	subs	r2, #1
  403898:	ea83 0301 	eor.w	r3, r3, r1
  40389c:	b113      	cbz	r3, 4038a4 <memchr+0x74>
  40389e:	d1f8      	bne.n	403892 <memchr+0x62>
  4038a0:	2000      	movs	r0, #0
  4038a2:	4770      	bx	lr
  4038a4:	3801      	subs	r0, #1
  4038a6:	4770      	bx	lr
  4038a8:	2d00      	cmp	r5, #0
  4038aa:	bf06      	itte	eq
  4038ac:	4635      	moveq	r5, r6
  4038ae:	3803      	subeq	r0, #3
  4038b0:	3807      	subne	r0, #7
  4038b2:	f015 0f01 	tst.w	r5, #1
  4038b6:	d107      	bne.n	4038c8 <memchr+0x98>
  4038b8:	3001      	adds	r0, #1
  4038ba:	f415 7f80 	tst.w	r5, #256	; 0x100
  4038be:	bf02      	ittt	eq
  4038c0:	3001      	addeq	r0, #1
  4038c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4038c6:	3001      	addeq	r0, #1
  4038c8:	bcf0      	pop	{r4, r5, r6, r7}
  4038ca:	3801      	subs	r0, #1
  4038cc:	4770      	bx	lr
  4038ce:	bf00      	nop

004038d0 <memmove>:
  4038d0:	4288      	cmp	r0, r1
  4038d2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4038d4:	d90d      	bls.n	4038f2 <memmove+0x22>
  4038d6:	188b      	adds	r3, r1, r2
  4038d8:	4298      	cmp	r0, r3
  4038da:	d20a      	bcs.n	4038f2 <memmove+0x22>
  4038dc:	1884      	adds	r4, r0, r2
  4038de:	2a00      	cmp	r2, #0
  4038e0:	d051      	beq.n	403986 <memmove+0xb6>
  4038e2:	4622      	mov	r2, r4
  4038e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4038e8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4038ec:	4299      	cmp	r1, r3
  4038ee:	d1f9      	bne.n	4038e4 <memmove+0x14>
  4038f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4038f2:	2a0f      	cmp	r2, #15
  4038f4:	d948      	bls.n	403988 <memmove+0xb8>
  4038f6:	ea41 0300 	orr.w	r3, r1, r0
  4038fa:	079b      	lsls	r3, r3, #30
  4038fc:	d146      	bne.n	40398c <memmove+0xbc>
  4038fe:	f100 0410 	add.w	r4, r0, #16
  403902:	f101 0310 	add.w	r3, r1, #16
  403906:	4615      	mov	r5, r2
  403908:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40390c:	f844 6c10 	str.w	r6, [r4, #-16]
  403910:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  403914:	f844 6c0c 	str.w	r6, [r4, #-12]
  403918:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40391c:	f844 6c08 	str.w	r6, [r4, #-8]
  403920:	3d10      	subs	r5, #16
  403922:	f853 6c04 	ldr.w	r6, [r3, #-4]
  403926:	f844 6c04 	str.w	r6, [r4, #-4]
  40392a:	2d0f      	cmp	r5, #15
  40392c:	f103 0310 	add.w	r3, r3, #16
  403930:	f104 0410 	add.w	r4, r4, #16
  403934:	d8e8      	bhi.n	403908 <memmove+0x38>
  403936:	f1a2 0310 	sub.w	r3, r2, #16
  40393a:	f023 030f 	bic.w	r3, r3, #15
  40393e:	f002 0e0f 	and.w	lr, r2, #15
  403942:	3310      	adds	r3, #16
  403944:	f1be 0f03 	cmp.w	lr, #3
  403948:	4419      	add	r1, r3
  40394a:	4403      	add	r3, r0
  40394c:	d921      	bls.n	403992 <memmove+0xc2>
  40394e:	1f1e      	subs	r6, r3, #4
  403950:	460d      	mov	r5, r1
  403952:	4674      	mov	r4, lr
  403954:	3c04      	subs	r4, #4
  403956:	f855 7b04 	ldr.w	r7, [r5], #4
  40395a:	f846 7f04 	str.w	r7, [r6, #4]!
  40395e:	2c03      	cmp	r4, #3
  403960:	d8f8      	bhi.n	403954 <memmove+0x84>
  403962:	f1ae 0404 	sub.w	r4, lr, #4
  403966:	f024 0403 	bic.w	r4, r4, #3
  40396a:	3404      	adds	r4, #4
  40396c:	4421      	add	r1, r4
  40396e:	4423      	add	r3, r4
  403970:	f002 0203 	and.w	r2, r2, #3
  403974:	b162      	cbz	r2, 403990 <memmove+0xc0>
  403976:	3b01      	subs	r3, #1
  403978:	440a      	add	r2, r1
  40397a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40397e:	f803 4f01 	strb.w	r4, [r3, #1]!
  403982:	428a      	cmp	r2, r1
  403984:	d1f9      	bne.n	40397a <memmove+0xaa>
  403986:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403988:	4603      	mov	r3, r0
  40398a:	e7f3      	b.n	403974 <memmove+0xa4>
  40398c:	4603      	mov	r3, r0
  40398e:	e7f2      	b.n	403976 <memmove+0xa6>
  403990:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403992:	4672      	mov	r2, lr
  403994:	e7ee      	b.n	403974 <memmove+0xa4>
  403996:	bf00      	nop

00403998 <__malloc_lock>:
  403998:	4801      	ldr	r0, [pc, #4]	; (4039a0 <__malloc_lock+0x8>)
  40399a:	f7ff bc03 	b.w	4031a4 <__retarget_lock_acquire_recursive>
  40399e:	bf00      	nop
  4039a0:	2043b4d0 	.word	0x2043b4d0

004039a4 <__malloc_unlock>:
  4039a4:	4801      	ldr	r0, [pc, #4]	; (4039ac <__malloc_unlock+0x8>)
  4039a6:	f7ff bbff 	b.w	4031a8 <__retarget_lock_release_recursive>
  4039aa:	bf00      	nop
  4039ac:	2043b4d0 	.word	0x2043b4d0

004039b0 <_realloc_r>:
  4039b0:	2900      	cmp	r1, #0
  4039b2:	f000 8095 	beq.w	403ae0 <_realloc_r+0x130>
  4039b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4039ba:	460d      	mov	r5, r1
  4039bc:	4616      	mov	r6, r2
  4039be:	b083      	sub	sp, #12
  4039c0:	4680      	mov	r8, r0
  4039c2:	f106 070b 	add.w	r7, r6, #11
  4039c6:	f7ff ffe7 	bl	403998 <__malloc_lock>
  4039ca:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4039ce:	2f16      	cmp	r7, #22
  4039d0:	f02e 0403 	bic.w	r4, lr, #3
  4039d4:	f1a5 0908 	sub.w	r9, r5, #8
  4039d8:	d83c      	bhi.n	403a54 <_realloc_r+0xa4>
  4039da:	2210      	movs	r2, #16
  4039dc:	4617      	mov	r7, r2
  4039de:	42be      	cmp	r6, r7
  4039e0:	d83d      	bhi.n	403a5e <_realloc_r+0xae>
  4039e2:	4294      	cmp	r4, r2
  4039e4:	da43      	bge.n	403a6e <_realloc_r+0xbe>
  4039e6:	4bc4      	ldr	r3, [pc, #784]	; (403cf8 <_realloc_r+0x348>)
  4039e8:	6899      	ldr	r1, [r3, #8]
  4039ea:	eb09 0004 	add.w	r0, r9, r4
  4039ee:	4288      	cmp	r0, r1
  4039f0:	f000 80b4 	beq.w	403b5c <_realloc_r+0x1ac>
  4039f4:	6843      	ldr	r3, [r0, #4]
  4039f6:	f023 0101 	bic.w	r1, r3, #1
  4039fa:	4401      	add	r1, r0
  4039fc:	6849      	ldr	r1, [r1, #4]
  4039fe:	07c9      	lsls	r1, r1, #31
  403a00:	d54c      	bpl.n	403a9c <_realloc_r+0xec>
  403a02:	f01e 0f01 	tst.w	lr, #1
  403a06:	f000 809b 	beq.w	403b40 <_realloc_r+0x190>
  403a0a:	4631      	mov	r1, r6
  403a0c:	4640      	mov	r0, r8
  403a0e:	f7ff fc45 	bl	40329c <_malloc_r>
  403a12:	4606      	mov	r6, r0
  403a14:	2800      	cmp	r0, #0
  403a16:	d03a      	beq.n	403a8e <_realloc_r+0xde>
  403a18:	f855 3c04 	ldr.w	r3, [r5, #-4]
  403a1c:	f023 0301 	bic.w	r3, r3, #1
  403a20:	444b      	add	r3, r9
  403a22:	f1a0 0208 	sub.w	r2, r0, #8
  403a26:	429a      	cmp	r2, r3
  403a28:	f000 8121 	beq.w	403c6e <_realloc_r+0x2be>
  403a2c:	1f22      	subs	r2, r4, #4
  403a2e:	2a24      	cmp	r2, #36	; 0x24
  403a30:	f200 8107 	bhi.w	403c42 <_realloc_r+0x292>
  403a34:	2a13      	cmp	r2, #19
  403a36:	f200 80db 	bhi.w	403bf0 <_realloc_r+0x240>
  403a3a:	4603      	mov	r3, r0
  403a3c:	462a      	mov	r2, r5
  403a3e:	6811      	ldr	r1, [r2, #0]
  403a40:	6019      	str	r1, [r3, #0]
  403a42:	6851      	ldr	r1, [r2, #4]
  403a44:	6059      	str	r1, [r3, #4]
  403a46:	6892      	ldr	r2, [r2, #8]
  403a48:	609a      	str	r2, [r3, #8]
  403a4a:	4629      	mov	r1, r5
  403a4c:	4640      	mov	r0, r8
  403a4e:	f7ff f90b 	bl	402c68 <_free_r>
  403a52:	e01c      	b.n	403a8e <_realloc_r+0xde>
  403a54:	f027 0707 	bic.w	r7, r7, #7
  403a58:	2f00      	cmp	r7, #0
  403a5a:	463a      	mov	r2, r7
  403a5c:	dabf      	bge.n	4039de <_realloc_r+0x2e>
  403a5e:	2600      	movs	r6, #0
  403a60:	230c      	movs	r3, #12
  403a62:	4630      	mov	r0, r6
  403a64:	f8c8 3000 	str.w	r3, [r8]
  403a68:	b003      	add	sp, #12
  403a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403a6e:	462e      	mov	r6, r5
  403a70:	1be3      	subs	r3, r4, r7
  403a72:	2b0f      	cmp	r3, #15
  403a74:	d81e      	bhi.n	403ab4 <_realloc_r+0x104>
  403a76:	f8d9 3004 	ldr.w	r3, [r9, #4]
  403a7a:	f003 0301 	and.w	r3, r3, #1
  403a7e:	4323      	orrs	r3, r4
  403a80:	444c      	add	r4, r9
  403a82:	f8c9 3004 	str.w	r3, [r9, #4]
  403a86:	6863      	ldr	r3, [r4, #4]
  403a88:	f043 0301 	orr.w	r3, r3, #1
  403a8c:	6063      	str	r3, [r4, #4]
  403a8e:	4640      	mov	r0, r8
  403a90:	f7ff ff88 	bl	4039a4 <__malloc_unlock>
  403a94:	4630      	mov	r0, r6
  403a96:	b003      	add	sp, #12
  403a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403a9c:	f023 0303 	bic.w	r3, r3, #3
  403aa0:	18e1      	adds	r1, r4, r3
  403aa2:	4291      	cmp	r1, r2
  403aa4:	db1f      	blt.n	403ae6 <_realloc_r+0x136>
  403aa6:	68c3      	ldr	r3, [r0, #12]
  403aa8:	6882      	ldr	r2, [r0, #8]
  403aaa:	462e      	mov	r6, r5
  403aac:	60d3      	str	r3, [r2, #12]
  403aae:	460c      	mov	r4, r1
  403ab0:	609a      	str	r2, [r3, #8]
  403ab2:	e7dd      	b.n	403a70 <_realloc_r+0xc0>
  403ab4:	f8d9 2004 	ldr.w	r2, [r9, #4]
  403ab8:	eb09 0107 	add.w	r1, r9, r7
  403abc:	f002 0201 	and.w	r2, r2, #1
  403ac0:	444c      	add	r4, r9
  403ac2:	f043 0301 	orr.w	r3, r3, #1
  403ac6:	4317      	orrs	r7, r2
  403ac8:	f8c9 7004 	str.w	r7, [r9, #4]
  403acc:	604b      	str	r3, [r1, #4]
  403ace:	6863      	ldr	r3, [r4, #4]
  403ad0:	f043 0301 	orr.w	r3, r3, #1
  403ad4:	3108      	adds	r1, #8
  403ad6:	6063      	str	r3, [r4, #4]
  403ad8:	4640      	mov	r0, r8
  403ada:	f7ff f8c5 	bl	402c68 <_free_r>
  403ade:	e7d6      	b.n	403a8e <_realloc_r+0xde>
  403ae0:	4611      	mov	r1, r2
  403ae2:	f7ff bbdb 	b.w	40329c <_malloc_r>
  403ae6:	f01e 0f01 	tst.w	lr, #1
  403aea:	d18e      	bne.n	403a0a <_realloc_r+0x5a>
  403aec:	f855 1c08 	ldr.w	r1, [r5, #-8]
  403af0:	eba9 0a01 	sub.w	sl, r9, r1
  403af4:	f8da 1004 	ldr.w	r1, [sl, #4]
  403af8:	f021 0103 	bic.w	r1, r1, #3
  403afc:	440b      	add	r3, r1
  403afe:	4423      	add	r3, r4
  403b00:	4293      	cmp	r3, r2
  403b02:	db25      	blt.n	403b50 <_realloc_r+0x1a0>
  403b04:	68c2      	ldr	r2, [r0, #12]
  403b06:	6881      	ldr	r1, [r0, #8]
  403b08:	4656      	mov	r6, sl
  403b0a:	60ca      	str	r2, [r1, #12]
  403b0c:	6091      	str	r1, [r2, #8]
  403b0e:	f8da 100c 	ldr.w	r1, [sl, #12]
  403b12:	f856 0f08 	ldr.w	r0, [r6, #8]!
  403b16:	1f22      	subs	r2, r4, #4
  403b18:	2a24      	cmp	r2, #36	; 0x24
  403b1a:	60c1      	str	r1, [r0, #12]
  403b1c:	6088      	str	r0, [r1, #8]
  403b1e:	f200 8094 	bhi.w	403c4a <_realloc_r+0x29a>
  403b22:	2a13      	cmp	r2, #19
  403b24:	d96f      	bls.n	403c06 <_realloc_r+0x256>
  403b26:	6829      	ldr	r1, [r5, #0]
  403b28:	f8ca 1008 	str.w	r1, [sl, #8]
  403b2c:	6869      	ldr	r1, [r5, #4]
  403b2e:	f8ca 100c 	str.w	r1, [sl, #12]
  403b32:	2a1b      	cmp	r2, #27
  403b34:	f200 80a2 	bhi.w	403c7c <_realloc_r+0x2cc>
  403b38:	3508      	adds	r5, #8
  403b3a:	f10a 0210 	add.w	r2, sl, #16
  403b3e:	e063      	b.n	403c08 <_realloc_r+0x258>
  403b40:	f855 3c08 	ldr.w	r3, [r5, #-8]
  403b44:	eba9 0a03 	sub.w	sl, r9, r3
  403b48:	f8da 1004 	ldr.w	r1, [sl, #4]
  403b4c:	f021 0103 	bic.w	r1, r1, #3
  403b50:	1863      	adds	r3, r4, r1
  403b52:	4293      	cmp	r3, r2
  403b54:	f6ff af59 	blt.w	403a0a <_realloc_r+0x5a>
  403b58:	4656      	mov	r6, sl
  403b5a:	e7d8      	b.n	403b0e <_realloc_r+0x15e>
  403b5c:	6841      	ldr	r1, [r0, #4]
  403b5e:	f021 0b03 	bic.w	fp, r1, #3
  403b62:	44a3      	add	fp, r4
  403b64:	f107 0010 	add.w	r0, r7, #16
  403b68:	4583      	cmp	fp, r0
  403b6a:	da56      	bge.n	403c1a <_realloc_r+0x26a>
  403b6c:	f01e 0f01 	tst.w	lr, #1
  403b70:	f47f af4b 	bne.w	403a0a <_realloc_r+0x5a>
  403b74:	f855 1c08 	ldr.w	r1, [r5, #-8]
  403b78:	eba9 0a01 	sub.w	sl, r9, r1
  403b7c:	f8da 1004 	ldr.w	r1, [sl, #4]
  403b80:	f021 0103 	bic.w	r1, r1, #3
  403b84:	448b      	add	fp, r1
  403b86:	4558      	cmp	r0, fp
  403b88:	dce2      	bgt.n	403b50 <_realloc_r+0x1a0>
  403b8a:	4656      	mov	r6, sl
  403b8c:	f8da 100c 	ldr.w	r1, [sl, #12]
  403b90:	f856 0f08 	ldr.w	r0, [r6, #8]!
  403b94:	1f22      	subs	r2, r4, #4
  403b96:	2a24      	cmp	r2, #36	; 0x24
  403b98:	60c1      	str	r1, [r0, #12]
  403b9a:	6088      	str	r0, [r1, #8]
  403b9c:	f200 808f 	bhi.w	403cbe <_realloc_r+0x30e>
  403ba0:	2a13      	cmp	r2, #19
  403ba2:	f240 808a 	bls.w	403cba <_realloc_r+0x30a>
  403ba6:	6829      	ldr	r1, [r5, #0]
  403ba8:	f8ca 1008 	str.w	r1, [sl, #8]
  403bac:	6869      	ldr	r1, [r5, #4]
  403bae:	f8ca 100c 	str.w	r1, [sl, #12]
  403bb2:	2a1b      	cmp	r2, #27
  403bb4:	f200 808a 	bhi.w	403ccc <_realloc_r+0x31c>
  403bb8:	3508      	adds	r5, #8
  403bba:	f10a 0210 	add.w	r2, sl, #16
  403bbe:	6829      	ldr	r1, [r5, #0]
  403bc0:	6011      	str	r1, [r2, #0]
  403bc2:	6869      	ldr	r1, [r5, #4]
  403bc4:	6051      	str	r1, [r2, #4]
  403bc6:	68a9      	ldr	r1, [r5, #8]
  403bc8:	6091      	str	r1, [r2, #8]
  403bca:	eb0a 0107 	add.w	r1, sl, r7
  403bce:	ebab 0207 	sub.w	r2, fp, r7
  403bd2:	f042 0201 	orr.w	r2, r2, #1
  403bd6:	6099      	str	r1, [r3, #8]
  403bd8:	604a      	str	r2, [r1, #4]
  403bda:	f8da 3004 	ldr.w	r3, [sl, #4]
  403bde:	f003 0301 	and.w	r3, r3, #1
  403be2:	431f      	orrs	r7, r3
  403be4:	4640      	mov	r0, r8
  403be6:	f8ca 7004 	str.w	r7, [sl, #4]
  403bea:	f7ff fedb 	bl	4039a4 <__malloc_unlock>
  403bee:	e751      	b.n	403a94 <_realloc_r+0xe4>
  403bf0:	682b      	ldr	r3, [r5, #0]
  403bf2:	6003      	str	r3, [r0, #0]
  403bf4:	686b      	ldr	r3, [r5, #4]
  403bf6:	6043      	str	r3, [r0, #4]
  403bf8:	2a1b      	cmp	r2, #27
  403bfa:	d82d      	bhi.n	403c58 <_realloc_r+0x2a8>
  403bfc:	f100 0308 	add.w	r3, r0, #8
  403c00:	f105 0208 	add.w	r2, r5, #8
  403c04:	e71b      	b.n	403a3e <_realloc_r+0x8e>
  403c06:	4632      	mov	r2, r6
  403c08:	6829      	ldr	r1, [r5, #0]
  403c0a:	6011      	str	r1, [r2, #0]
  403c0c:	6869      	ldr	r1, [r5, #4]
  403c0e:	6051      	str	r1, [r2, #4]
  403c10:	68a9      	ldr	r1, [r5, #8]
  403c12:	6091      	str	r1, [r2, #8]
  403c14:	461c      	mov	r4, r3
  403c16:	46d1      	mov	r9, sl
  403c18:	e72a      	b.n	403a70 <_realloc_r+0xc0>
  403c1a:	eb09 0107 	add.w	r1, r9, r7
  403c1e:	ebab 0b07 	sub.w	fp, fp, r7
  403c22:	f04b 0201 	orr.w	r2, fp, #1
  403c26:	6099      	str	r1, [r3, #8]
  403c28:	604a      	str	r2, [r1, #4]
  403c2a:	f855 3c04 	ldr.w	r3, [r5, #-4]
  403c2e:	f003 0301 	and.w	r3, r3, #1
  403c32:	431f      	orrs	r7, r3
  403c34:	4640      	mov	r0, r8
  403c36:	f845 7c04 	str.w	r7, [r5, #-4]
  403c3a:	f7ff feb3 	bl	4039a4 <__malloc_unlock>
  403c3e:	462e      	mov	r6, r5
  403c40:	e728      	b.n	403a94 <_realloc_r+0xe4>
  403c42:	4629      	mov	r1, r5
  403c44:	f7ff fe44 	bl	4038d0 <memmove>
  403c48:	e6ff      	b.n	403a4a <_realloc_r+0x9a>
  403c4a:	4629      	mov	r1, r5
  403c4c:	4630      	mov	r0, r6
  403c4e:	461c      	mov	r4, r3
  403c50:	46d1      	mov	r9, sl
  403c52:	f7ff fe3d 	bl	4038d0 <memmove>
  403c56:	e70b      	b.n	403a70 <_realloc_r+0xc0>
  403c58:	68ab      	ldr	r3, [r5, #8]
  403c5a:	6083      	str	r3, [r0, #8]
  403c5c:	68eb      	ldr	r3, [r5, #12]
  403c5e:	60c3      	str	r3, [r0, #12]
  403c60:	2a24      	cmp	r2, #36	; 0x24
  403c62:	d017      	beq.n	403c94 <_realloc_r+0x2e4>
  403c64:	f100 0310 	add.w	r3, r0, #16
  403c68:	f105 0210 	add.w	r2, r5, #16
  403c6c:	e6e7      	b.n	403a3e <_realloc_r+0x8e>
  403c6e:	f850 3c04 	ldr.w	r3, [r0, #-4]
  403c72:	f023 0303 	bic.w	r3, r3, #3
  403c76:	441c      	add	r4, r3
  403c78:	462e      	mov	r6, r5
  403c7a:	e6f9      	b.n	403a70 <_realloc_r+0xc0>
  403c7c:	68a9      	ldr	r1, [r5, #8]
  403c7e:	f8ca 1010 	str.w	r1, [sl, #16]
  403c82:	68e9      	ldr	r1, [r5, #12]
  403c84:	f8ca 1014 	str.w	r1, [sl, #20]
  403c88:	2a24      	cmp	r2, #36	; 0x24
  403c8a:	d00c      	beq.n	403ca6 <_realloc_r+0x2f6>
  403c8c:	3510      	adds	r5, #16
  403c8e:	f10a 0218 	add.w	r2, sl, #24
  403c92:	e7b9      	b.n	403c08 <_realloc_r+0x258>
  403c94:	692b      	ldr	r3, [r5, #16]
  403c96:	6103      	str	r3, [r0, #16]
  403c98:	696b      	ldr	r3, [r5, #20]
  403c9a:	6143      	str	r3, [r0, #20]
  403c9c:	f105 0218 	add.w	r2, r5, #24
  403ca0:	f100 0318 	add.w	r3, r0, #24
  403ca4:	e6cb      	b.n	403a3e <_realloc_r+0x8e>
  403ca6:	692a      	ldr	r2, [r5, #16]
  403ca8:	f8ca 2018 	str.w	r2, [sl, #24]
  403cac:	696a      	ldr	r2, [r5, #20]
  403cae:	f8ca 201c 	str.w	r2, [sl, #28]
  403cb2:	3518      	adds	r5, #24
  403cb4:	f10a 0220 	add.w	r2, sl, #32
  403cb8:	e7a6      	b.n	403c08 <_realloc_r+0x258>
  403cba:	4632      	mov	r2, r6
  403cbc:	e77f      	b.n	403bbe <_realloc_r+0x20e>
  403cbe:	4629      	mov	r1, r5
  403cc0:	4630      	mov	r0, r6
  403cc2:	9301      	str	r3, [sp, #4]
  403cc4:	f7ff fe04 	bl	4038d0 <memmove>
  403cc8:	9b01      	ldr	r3, [sp, #4]
  403cca:	e77e      	b.n	403bca <_realloc_r+0x21a>
  403ccc:	68a9      	ldr	r1, [r5, #8]
  403cce:	f8ca 1010 	str.w	r1, [sl, #16]
  403cd2:	68e9      	ldr	r1, [r5, #12]
  403cd4:	f8ca 1014 	str.w	r1, [sl, #20]
  403cd8:	2a24      	cmp	r2, #36	; 0x24
  403cda:	d003      	beq.n	403ce4 <_realloc_r+0x334>
  403cdc:	3510      	adds	r5, #16
  403cde:	f10a 0218 	add.w	r2, sl, #24
  403ce2:	e76c      	b.n	403bbe <_realloc_r+0x20e>
  403ce4:	692a      	ldr	r2, [r5, #16]
  403ce6:	f8ca 2018 	str.w	r2, [sl, #24]
  403cea:	696a      	ldr	r2, [r5, #20]
  403cec:	f8ca 201c 	str.w	r2, [sl, #28]
  403cf0:	3518      	adds	r5, #24
  403cf2:	f10a 0220 	add.w	r2, sl, #32
  403cf6:	e762      	b.n	403bbe <_realloc_r+0x20e>
  403cf8:	204005c8 	.word	0x204005c8

00403cfc <_sbrk_r>:
  403cfc:	b538      	push	{r3, r4, r5, lr}
  403cfe:	4c07      	ldr	r4, [pc, #28]	; (403d1c <_sbrk_r+0x20>)
  403d00:	2300      	movs	r3, #0
  403d02:	4605      	mov	r5, r0
  403d04:	4608      	mov	r0, r1
  403d06:	6023      	str	r3, [r4, #0]
  403d08:	f7fd f99c 	bl	401044 <_sbrk>
  403d0c:	1c43      	adds	r3, r0, #1
  403d0e:	d000      	beq.n	403d12 <_sbrk_r+0x16>
  403d10:	bd38      	pop	{r3, r4, r5, pc}
  403d12:	6823      	ldr	r3, [r4, #0]
  403d14:	2b00      	cmp	r3, #0
  403d16:	d0fb      	beq.n	403d10 <_sbrk_r+0x14>
  403d18:	602b      	str	r3, [r5, #0]
  403d1a:	bd38      	pop	{r3, r4, r5, pc}
  403d1c:	2043b4e4 	.word	0x2043b4e4

00403d20 <__sread>:
  403d20:	b510      	push	{r4, lr}
  403d22:	460c      	mov	r4, r1
  403d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403d28:	f000 f9f6 	bl	404118 <_read_r>
  403d2c:	2800      	cmp	r0, #0
  403d2e:	db03      	blt.n	403d38 <__sread+0x18>
  403d30:	6d23      	ldr	r3, [r4, #80]	; 0x50
  403d32:	4403      	add	r3, r0
  403d34:	6523      	str	r3, [r4, #80]	; 0x50
  403d36:	bd10      	pop	{r4, pc}
  403d38:	89a3      	ldrh	r3, [r4, #12]
  403d3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  403d3e:	81a3      	strh	r3, [r4, #12]
  403d40:	bd10      	pop	{r4, pc}
  403d42:	bf00      	nop

00403d44 <__swrite>:
  403d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403d48:	4616      	mov	r6, r2
  403d4a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  403d4e:	461f      	mov	r7, r3
  403d50:	05d3      	lsls	r3, r2, #23
  403d52:	460c      	mov	r4, r1
  403d54:	4605      	mov	r5, r0
  403d56:	d507      	bpl.n	403d68 <__swrite+0x24>
  403d58:	2200      	movs	r2, #0
  403d5a:	2302      	movs	r3, #2
  403d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403d60:	f000 f9c4 	bl	4040ec <_lseek_r>
  403d64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403d68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403d6c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  403d70:	81a2      	strh	r2, [r4, #12]
  403d72:	463b      	mov	r3, r7
  403d74:	4632      	mov	r2, r6
  403d76:	4628      	mov	r0, r5
  403d78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403d7c:	f000 b8a4 	b.w	403ec8 <_write_r>

00403d80 <__sseek>:
  403d80:	b510      	push	{r4, lr}
  403d82:	460c      	mov	r4, r1
  403d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403d88:	f000 f9b0 	bl	4040ec <_lseek_r>
  403d8c:	89a3      	ldrh	r3, [r4, #12]
  403d8e:	1c42      	adds	r2, r0, #1
  403d90:	bf0e      	itee	eq
  403d92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  403d96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  403d9a:	6520      	strne	r0, [r4, #80]	; 0x50
  403d9c:	81a3      	strh	r3, [r4, #12]
  403d9e:	bd10      	pop	{r4, pc}

00403da0 <__sclose>:
  403da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403da4:	f000 b908 	b.w	403fb8 <_close_r>

00403da8 <__swbuf_r>:
  403da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403daa:	460d      	mov	r5, r1
  403dac:	4614      	mov	r4, r2
  403dae:	4606      	mov	r6, r0
  403db0:	b110      	cbz	r0, 403db8 <__swbuf_r+0x10>
  403db2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403db4:	2b00      	cmp	r3, #0
  403db6:	d04b      	beq.n	403e50 <__swbuf_r+0xa8>
  403db8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403dbc:	69a3      	ldr	r3, [r4, #24]
  403dbe:	60a3      	str	r3, [r4, #8]
  403dc0:	b291      	uxth	r1, r2
  403dc2:	0708      	lsls	r0, r1, #28
  403dc4:	d539      	bpl.n	403e3a <__swbuf_r+0x92>
  403dc6:	6923      	ldr	r3, [r4, #16]
  403dc8:	2b00      	cmp	r3, #0
  403dca:	d036      	beq.n	403e3a <__swbuf_r+0x92>
  403dcc:	b2ed      	uxtb	r5, r5
  403dce:	0489      	lsls	r1, r1, #18
  403dd0:	462f      	mov	r7, r5
  403dd2:	d515      	bpl.n	403e00 <__swbuf_r+0x58>
  403dd4:	6822      	ldr	r2, [r4, #0]
  403dd6:	6961      	ldr	r1, [r4, #20]
  403dd8:	1ad3      	subs	r3, r2, r3
  403dda:	428b      	cmp	r3, r1
  403ddc:	da1c      	bge.n	403e18 <__swbuf_r+0x70>
  403dde:	3301      	adds	r3, #1
  403de0:	68a1      	ldr	r1, [r4, #8]
  403de2:	1c50      	adds	r0, r2, #1
  403de4:	3901      	subs	r1, #1
  403de6:	60a1      	str	r1, [r4, #8]
  403de8:	6020      	str	r0, [r4, #0]
  403dea:	7015      	strb	r5, [r2, #0]
  403dec:	6962      	ldr	r2, [r4, #20]
  403dee:	429a      	cmp	r2, r3
  403df0:	d01a      	beq.n	403e28 <__swbuf_r+0x80>
  403df2:	89a3      	ldrh	r3, [r4, #12]
  403df4:	07db      	lsls	r3, r3, #31
  403df6:	d501      	bpl.n	403dfc <__swbuf_r+0x54>
  403df8:	2d0a      	cmp	r5, #10
  403dfa:	d015      	beq.n	403e28 <__swbuf_r+0x80>
  403dfc:	4638      	mov	r0, r7
  403dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403e00:	6e61      	ldr	r1, [r4, #100]	; 0x64
  403e02:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  403e06:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  403e0a:	81a2      	strh	r2, [r4, #12]
  403e0c:	6822      	ldr	r2, [r4, #0]
  403e0e:	6661      	str	r1, [r4, #100]	; 0x64
  403e10:	6961      	ldr	r1, [r4, #20]
  403e12:	1ad3      	subs	r3, r2, r3
  403e14:	428b      	cmp	r3, r1
  403e16:	dbe2      	blt.n	403dde <__swbuf_r+0x36>
  403e18:	4621      	mov	r1, r4
  403e1a:	4630      	mov	r0, r6
  403e1c:	f7fe fda6 	bl	40296c <_fflush_r>
  403e20:	b940      	cbnz	r0, 403e34 <__swbuf_r+0x8c>
  403e22:	6822      	ldr	r2, [r4, #0]
  403e24:	2301      	movs	r3, #1
  403e26:	e7db      	b.n	403de0 <__swbuf_r+0x38>
  403e28:	4621      	mov	r1, r4
  403e2a:	4630      	mov	r0, r6
  403e2c:	f7fe fd9e 	bl	40296c <_fflush_r>
  403e30:	2800      	cmp	r0, #0
  403e32:	d0e3      	beq.n	403dfc <__swbuf_r+0x54>
  403e34:	f04f 37ff 	mov.w	r7, #4294967295
  403e38:	e7e0      	b.n	403dfc <__swbuf_r+0x54>
  403e3a:	4621      	mov	r1, r4
  403e3c:	4630      	mov	r0, r6
  403e3e:	f7fe fc81 	bl	402744 <__swsetup_r>
  403e42:	2800      	cmp	r0, #0
  403e44:	d1f6      	bne.n	403e34 <__swbuf_r+0x8c>
  403e46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403e4a:	6923      	ldr	r3, [r4, #16]
  403e4c:	b291      	uxth	r1, r2
  403e4e:	e7bd      	b.n	403dcc <__swbuf_r+0x24>
  403e50:	f7fe fde4 	bl	402a1c <__sinit>
  403e54:	e7b0      	b.n	403db8 <__swbuf_r+0x10>
  403e56:	bf00      	nop

00403e58 <_wcrtomb_r>:
  403e58:	b5f0      	push	{r4, r5, r6, r7, lr}
  403e5a:	4606      	mov	r6, r0
  403e5c:	b085      	sub	sp, #20
  403e5e:	461f      	mov	r7, r3
  403e60:	b189      	cbz	r1, 403e86 <_wcrtomb_r+0x2e>
  403e62:	4c10      	ldr	r4, [pc, #64]	; (403ea4 <_wcrtomb_r+0x4c>)
  403e64:	4d10      	ldr	r5, [pc, #64]	; (403ea8 <_wcrtomb_r+0x50>)
  403e66:	6824      	ldr	r4, [r4, #0]
  403e68:	6b64      	ldr	r4, [r4, #52]	; 0x34
  403e6a:	2c00      	cmp	r4, #0
  403e6c:	bf08      	it	eq
  403e6e:	462c      	moveq	r4, r5
  403e70:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  403e74:	47a0      	blx	r4
  403e76:	1c43      	adds	r3, r0, #1
  403e78:	d103      	bne.n	403e82 <_wcrtomb_r+0x2a>
  403e7a:	2200      	movs	r2, #0
  403e7c:	238a      	movs	r3, #138	; 0x8a
  403e7e:	603a      	str	r2, [r7, #0]
  403e80:	6033      	str	r3, [r6, #0]
  403e82:	b005      	add	sp, #20
  403e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403e86:	460c      	mov	r4, r1
  403e88:	4906      	ldr	r1, [pc, #24]	; (403ea4 <_wcrtomb_r+0x4c>)
  403e8a:	4a07      	ldr	r2, [pc, #28]	; (403ea8 <_wcrtomb_r+0x50>)
  403e8c:	6809      	ldr	r1, [r1, #0]
  403e8e:	6b49      	ldr	r1, [r1, #52]	; 0x34
  403e90:	2900      	cmp	r1, #0
  403e92:	bf08      	it	eq
  403e94:	4611      	moveq	r1, r2
  403e96:	4622      	mov	r2, r4
  403e98:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  403e9c:	a901      	add	r1, sp, #4
  403e9e:	47a0      	blx	r4
  403ea0:	e7e9      	b.n	403e76 <_wcrtomb_r+0x1e>
  403ea2:	bf00      	nop
  403ea4:	20400028 	.word	0x20400028
  403ea8:	2040045c 	.word	0x2040045c

00403eac <__ascii_wctomb>:
  403eac:	b121      	cbz	r1, 403eb8 <__ascii_wctomb+0xc>
  403eae:	2aff      	cmp	r2, #255	; 0xff
  403eb0:	d804      	bhi.n	403ebc <__ascii_wctomb+0x10>
  403eb2:	700a      	strb	r2, [r1, #0]
  403eb4:	2001      	movs	r0, #1
  403eb6:	4770      	bx	lr
  403eb8:	4608      	mov	r0, r1
  403eba:	4770      	bx	lr
  403ebc:	238a      	movs	r3, #138	; 0x8a
  403ebe:	6003      	str	r3, [r0, #0]
  403ec0:	f04f 30ff 	mov.w	r0, #4294967295
  403ec4:	4770      	bx	lr
  403ec6:	bf00      	nop

00403ec8 <_write_r>:
  403ec8:	b570      	push	{r4, r5, r6, lr}
  403eca:	460d      	mov	r5, r1
  403ecc:	4c08      	ldr	r4, [pc, #32]	; (403ef0 <_write_r+0x28>)
  403ece:	4611      	mov	r1, r2
  403ed0:	4606      	mov	r6, r0
  403ed2:	461a      	mov	r2, r3
  403ed4:	4628      	mov	r0, r5
  403ed6:	2300      	movs	r3, #0
  403ed8:	6023      	str	r3, [r4, #0]
  403eda:	f7fc f9f3 	bl	4002c4 <_write>
  403ede:	1c43      	adds	r3, r0, #1
  403ee0:	d000      	beq.n	403ee4 <_write_r+0x1c>
  403ee2:	bd70      	pop	{r4, r5, r6, pc}
  403ee4:	6823      	ldr	r3, [r4, #0]
  403ee6:	2b00      	cmp	r3, #0
  403ee8:	d0fb      	beq.n	403ee2 <_write_r+0x1a>
  403eea:	6033      	str	r3, [r6, #0]
  403eec:	bd70      	pop	{r4, r5, r6, pc}
  403eee:	bf00      	nop
  403ef0:	2043b4e4 	.word	0x2043b4e4

00403ef4 <__register_exitproc>:
  403ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403ef8:	4d2c      	ldr	r5, [pc, #176]	; (403fac <__register_exitproc+0xb8>)
  403efa:	4606      	mov	r6, r0
  403efc:	6828      	ldr	r0, [r5, #0]
  403efe:	4698      	mov	r8, r3
  403f00:	460f      	mov	r7, r1
  403f02:	4691      	mov	r9, r2
  403f04:	f7ff f94e 	bl	4031a4 <__retarget_lock_acquire_recursive>
  403f08:	4b29      	ldr	r3, [pc, #164]	; (403fb0 <__register_exitproc+0xbc>)
  403f0a:	681c      	ldr	r4, [r3, #0]
  403f0c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  403f10:	2b00      	cmp	r3, #0
  403f12:	d03e      	beq.n	403f92 <__register_exitproc+0x9e>
  403f14:	685a      	ldr	r2, [r3, #4]
  403f16:	2a1f      	cmp	r2, #31
  403f18:	dc1c      	bgt.n	403f54 <__register_exitproc+0x60>
  403f1a:	f102 0e01 	add.w	lr, r2, #1
  403f1e:	b176      	cbz	r6, 403f3e <__register_exitproc+0x4a>
  403f20:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  403f24:	2401      	movs	r4, #1
  403f26:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  403f2a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  403f2e:	4094      	lsls	r4, r2
  403f30:	4320      	orrs	r0, r4
  403f32:	2e02      	cmp	r6, #2
  403f34:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  403f38:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  403f3c:	d023      	beq.n	403f86 <__register_exitproc+0x92>
  403f3e:	3202      	adds	r2, #2
  403f40:	f8c3 e004 	str.w	lr, [r3, #4]
  403f44:	6828      	ldr	r0, [r5, #0]
  403f46:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  403f4a:	f7ff f92d 	bl	4031a8 <__retarget_lock_release_recursive>
  403f4e:	2000      	movs	r0, #0
  403f50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403f54:	4b17      	ldr	r3, [pc, #92]	; (403fb4 <__register_exitproc+0xc0>)
  403f56:	b30b      	cbz	r3, 403f9c <__register_exitproc+0xa8>
  403f58:	f44f 70c8 	mov.w	r0, #400	; 0x190
  403f5c:	f3af 8000 	nop.w
  403f60:	4603      	mov	r3, r0
  403f62:	b1d8      	cbz	r0, 403f9c <__register_exitproc+0xa8>
  403f64:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  403f68:	6002      	str	r2, [r0, #0]
  403f6a:	2100      	movs	r1, #0
  403f6c:	6041      	str	r1, [r0, #4]
  403f6e:	460a      	mov	r2, r1
  403f70:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  403f74:	f04f 0e01 	mov.w	lr, #1
  403f78:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  403f7c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  403f80:	2e00      	cmp	r6, #0
  403f82:	d0dc      	beq.n	403f3e <__register_exitproc+0x4a>
  403f84:	e7cc      	b.n	403f20 <__register_exitproc+0x2c>
  403f86:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  403f8a:	430c      	orrs	r4, r1
  403f8c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  403f90:	e7d5      	b.n	403f3e <__register_exitproc+0x4a>
  403f92:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  403f96:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  403f9a:	e7bb      	b.n	403f14 <__register_exitproc+0x20>
  403f9c:	6828      	ldr	r0, [r5, #0]
  403f9e:	f7ff f903 	bl	4031a8 <__retarget_lock_release_recursive>
  403fa2:	f04f 30ff 	mov.w	r0, #4294967295
  403fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403faa:	bf00      	nop
  403fac:	20400458 	.word	0x20400458
  403fb0:	004044ec 	.word	0x004044ec
  403fb4:	00000000 	.word	0x00000000

00403fb8 <_close_r>:
  403fb8:	b538      	push	{r3, r4, r5, lr}
  403fba:	4c07      	ldr	r4, [pc, #28]	; (403fd8 <_close_r+0x20>)
  403fbc:	2300      	movs	r3, #0
  403fbe:	4605      	mov	r5, r0
  403fc0:	4608      	mov	r0, r1
  403fc2:	6023      	str	r3, [r4, #0]
  403fc4:	f7fd f85a 	bl	40107c <_close>
  403fc8:	1c43      	adds	r3, r0, #1
  403fca:	d000      	beq.n	403fce <_close_r+0x16>
  403fcc:	bd38      	pop	{r3, r4, r5, pc}
  403fce:	6823      	ldr	r3, [r4, #0]
  403fd0:	2b00      	cmp	r3, #0
  403fd2:	d0fb      	beq.n	403fcc <_close_r+0x14>
  403fd4:	602b      	str	r3, [r5, #0]
  403fd6:	bd38      	pop	{r3, r4, r5, pc}
  403fd8:	2043b4e4 	.word	0x2043b4e4

00403fdc <_fclose_r>:
  403fdc:	b570      	push	{r4, r5, r6, lr}
  403fde:	b159      	cbz	r1, 403ff8 <_fclose_r+0x1c>
  403fe0:	4605      	mov	r5, r0
  403fe2:	460c      	mov	r4, r1
  403fe4:	b110      	cbz	r0, 403fec <_fclose_r+0x10>
  403fe6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403fe8:	2b00      	cmp	r3, #0
  403fea:	d03c      	beq.n	404066 <_fclose_r+0x8a>
  403fec:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403fee:	07d8      	lsls	r0, r3, #31
  403ff0:	d505      	bpl.n	403ffe <_fclose_r+0x22>
  403ff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403ff6:	b92b      	cbnz	r3, 404004 <_fclose_r+0x28>
  403ff8:	2600      	movs	r6, #0
  403ffa:	4630      	mov	r0, r6
  403ffc:	bd70      	pop	{r4, r5, r6, pc}
  403ffe:	89a3      	ldrh	r3, [r4, #12]
  404000:	0599      	lsls	r1, r3, #22
  404002:	d53c      	bpl.n	40407e <_fclose_r+0xa2>
  404004:	4621      	mov	r1, r4
  404006:	4628      	mov	r0, r5
  404008:	f7fe fc10 	bl	40282c <__sflush_r>
  40400c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40400e:	4606      	mov	r6, r0
  404010:	b133      	cbz	r3, 404020 <_fclose_r+0x44>
  404012:	69e1      	ldr	r1, [r4, #28]
  404014:	4628      	mov	r0, r5
  404016:	4798      	blx	r3
  404018:	2800      	cmp	r0, #0
  40401a:	bfb8      	it	lt
  40401c:	f04f 36ff 	movlt.w	r6, #4294967295
  404020:	89a3      	ldrh	r3, [r4, #12]
  404022:	061a      	lsls	r2, r3, #24
  404024:	d422      	bmi.n	40406c <_fclose_r+0x90>
  404026:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404028:	b141      	cbz	r1, 40403c <_fclose_r+0x60>
  40402a:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40402e:	4299      	cmp	r1, r3
  404030:	d002      	beq.n	404038 <_fclose_r+0x5c>
  404032:	4628      	mov	r0, r5
  404034:	f7fe fe18 	bl	402c68 <_free_r>
  404038:	2300      	movs	r3, #0
  40403a:	6323      	str	r3, [r4, #48]	; 0x30
  40403c:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40403e:	b121      	cbz	r1, 40404a <_fclose_r+0x6e>
  404040:	4628      	mov	r0, r5
  404042:	f7fe fe11 	bl	402c68 <_free_r>
  404046:	2300      	movs	r3, #0
  404048:	6463      	str	r3, [r4, #68]	; 0x44
  40404a:	f7fe fd13 	bl	402a74 <__sfp_lock_acquire>
  40404e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404050:	2200      	movs	r2, #0
  404052:	07db      	lsls	r3, r3, #31
  404054:	81a2      	strh	r2, [r4, #12]
  404056:	d50e      	bpl.n	404076 <_fclose_r+0x9a>
  404058:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40405a:	f7ff f8a1 	bl	4031a0 <__retarget_lock_close_recursive>
  40405e:	f7fe fd0f 	bl	402a80 <__sfp_lock_release>
  404062:	4630      	mov	r0, r6
  404064:	bd70      	pop	{r4, r5, r6, pc}
  404066:	f7fe fcd9 	bl	402a1c <__sinit>
  40406a:	e7bf      	b.n	403fec <_fclose_r+0x10>
  40406c:	6921      	ldr	r1, [r4, #16]
  40406e:	4628      	mov	r0, r5
  404070:	f7fe fdfa 	bl	402c68 <_free_r>
  404074:	e7d7      	b.n	404026 <_fclose_r+0x4a>
  404076:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404078:	f7ff f896 	bl	4031a8 <__retarget_lock_release_recursive>
  40407c:	e7ec      	b.n	404058 <_fclose_r+0x7c>
  40407e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404080:	f7ff f890 	bl	4031a4 <__retarget_lock_acquire_recursive>
  404084:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404088:	2b00      	cmp	r3, #0
  40408a:	d1bb      	bne.n	404004 <_fclose_r+0x28>
  40408c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40408e:	f016 0601 	ands.w	r6, r6, #1
  404092:	d1b1      	bne.n	403ff8 <_fclose_r+0x1c>
  404094:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404096:	f7ff f887 	bl	4031a8 <__retarget_lock_release_recursive>
  40409a:	4630      	mov	r0, r6
  40409c:	bd70      	pop	{r4, r5, r6, pc}
  40409e:	bf00      	nop

004040a0 <_fstat_r>:
  4040a0:	b538      	push	{r3, r4, r5, lr}
  4040a2:	460b      	mov	r3, r1
  4040a4:	4c07      	ldr	r4, [pc, #28]	; (4040c4 <_fstat_r+0x24>)
  4040a6:	4605      	mov	r5, r0
  4040a8:	4611      	mov	r1, r2
  4040aa:	4618      	mov	r0, r3
  4040ac:	2300      	movs	r3, #0
  4040ae:	6023      	str	r3, [r4, #0]
  4040b0:	f7fc ffe7 	bl	401082 <_fstat>
  4040b4:	1c43      	adds	r3, r0, #1
  4040b6:	d000      	beq.n	4040ba <_fstat_r+0x1a>
  4040b8:	bd38      	pop	{r3, r4, r5, pc}
  4040ba:	6823      	ldr	r3, [r4, #0]
  4040bc:	2b00      	cmp	r3, #0
  4040be:	d0fb      	beq.n	4040b8 <_fstat_r+0x18>
  4040c0:	602b      	str	r3, [r5, #0]
  4040c2:	bd38      	pop	{r3, r4, r5, pc}
  4040c4:	2043b4e4 	.word	0x2043b4e4

004040c8 <_isatty_r>:
  4040c8:	b538      	push	{r3, r4, r5, lr}
  4040ca:	4c07      	ldr	r4, [pc, #28]	; (4040e8 <_isatty_r+0x20>)
  4040cc:	2300      	movs	r3, #0
  4040ce:	4605      	mov	r5, r0
  4040d0:	4608      	mov	r0, r1
  4040d2:	6023      	str	r3, [r4, #0]
  4040d4:	f7fc ffda 	bl	40108c <_isatty>
  4040d8:	1c43      	adds	r3, r0, #1
  4040da:	d000      	beq.n	4040de <_isatty_r+0x16>
  4040dc:	bd38      	pop	{r3, r4, r5, pc}
  4040de:	6823      	ldr	r3, [r4, #0]
  4040e0:	2b00      	cmp	r3, #0
  4040e2:	d0fb      	beq.n	4040dc <_isatty_r+0x14>
  4040e4:	602b      	str	r3, [r5, #0]
  4040e6:	bd38      	pop	{r3, r4, r5, pc}
  4040e8:	2043b4e4 	.word	0x2043b4e4

004040ec <_lseek_r>:
  4040ec:	b570      	push	{r4, r5, r6, lr}
  4040ee:	460d      	mov	r5, r1
  4040f0:	4c08      	ldr	r4, [pc, #32]	; (404114 <_lseek_r+0x28>)
  4040f2:	4611      	mov	r1, r2
  4040f4:	4606      	mov	r6, r0
  4040f6:	461a      	mov	r2, r3
  4040f8:	4628      	mov	r0, r5
  4040fa:	2300      	movs	r3, #0
  4040fc:	6023      	str	r3, [r4, #0]
  4040fe:	f7fc ffc7 	bl	401090 <_lseek>
  404102:	1c43      	adds	r3, r0, #1
  404104:	d000      	beq.n	404108 <_lseek_r+0x1c>
  404106:	bd70      	pop	{r4, r5, r6, pc}
  404108:	6823      	ldr	r3, [r4, #0]
  40410a:	2b00      	cmp	r3, #0
  40410c:	d0fb      	beq.n	404106 <_lseek_r+0x1a>
  40410e:	6033      	str	r3, [r6, #0]
  404110:	bd70      	pop	{r4, r5, r6, pc}
  404112:	bf00      	nop
  404114:	2043b4e4 	.word	0x2043b4e4

00404118 <_read_r>:
  404118:	b570      	push	{r4, r5, r6, lr}
  40411a:	460d      	mov	r5, r1
  40411c:	4c08      	ldr	r4, [pc, #32]	; (404140 <_read_r+0x28>)
  40411e:	4611      	mov	r1, r2
  404120:	4606      	mov	r6, r0
  404122:	461a      	mov	r2, r3
  404124:	4628      	mov	r0, r5
  404126:	2300      	movs	r3, #0
  404128:	6023      	str	r3, [r4, #0]
  40412a:	f7fc f8ad 	bl	400288 <_read>
  40412e:	1c43      	adds	r3, r0, #1
  404130:	d000      	beq.n	404134 <_read_r+0x1c>
  404132:	bd70      	pop	{r4, r5, r6, pc}
  404134:	6823      	ldr	r3, [r4, #0]
  404136:	2b00      	cmp	r3, #0
  404138:	d0fb      	beq.n	404132 <_read_r+0x1a>
  40413a:	6033      	str	r3, [r6, #0]
  40413c:	bd70      	pop	{r4, r5, r6, pc}
  40413e:	bf00      	nop
  404140:	2043b4e4 	.word	0x2043b4e4

00404144 <__aeabi_uldivmod>:
  404144:	b953      	cbnz	r3, 40415c <__aeabi_uldivmod+0x18>
  404146:	b94a      	cbnz	r2, 40415c <__aeabi_uldivmod+0x18>
  404148:	2900      	cmp	r1, #0
  40414a:	bf08      	it	eq
  40414c:	2800      	cmpeq	r0, #0
  40414e:	bf1c      	itt	ne
  404150:	f04f 31ff 	movne.w	r1, #4294967295
  404154:	f04f 30ff 	movne.w	r0, #4294967295
  404158:	f000 b97a 	b.w	404450 <__aeabi_idiv0>
  40415c:	f1ad 0c08 	sub.w	ip, sp, #8
  404160:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  404164:	f000 f806 	bl	404174 <__udivmoddi4>
  404168:	f8dd e004 	ldr.w	lr, [sp, #4]
  40416c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404170:	b004      	add	sp, #16
  404172:	4770      	bx	lr

00404174 <__udivmoddi4>:
  404174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404178:	468c      	mov	ip, r1
  40417a:	460d      	mov	r5, r1
  40417c:	4604      	mov	r4, r0
  40417e:	9e08      	ldr	r6, [sp, #32]
  404180:	2b00      	cmp	r3, #0
  404182:	d151      	bne.n	404228 <__udivmoddi4+0xb4>
  404184:	428a      	cmp	r2, r1
  404186:	4617      	mov	r7, r2
  404188:	d96d      	bls.n	404266 <__udivmoddi4+0xf2>
  40418a:	fab2 fe82 	clz	lr, r2
  40418e:	f1be 0f00 	cmp.w	lr, #0
  404192:	d00b      	beq.n	4041ac <__udivmoddi4+0x38>
  404194:	f1ce 0c20 	rsb	ip, lr, #32
  404198:	fa01 f50e 	lsl.w	r5, r1, lr
  40419c:	fa20 fc0c 	lsr.w	ip, r0, ip
  4041a0:	fa02 f70e 	lsl.w	r7, r2, lr
  4041a4:	ea4c 0c05 	orr.w	ip, ip, r5
  4041a8:	fa00 f40e 	lsl.w	r4, r0, lr
  4041ac:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4041b0:	0c25      	lsrs	r5, r4, #16
  4041b2:	fbbc f8fa 	udiv	r8, ip, sl
  4041b6:	fa1f f987 	uxth.w	r9, r7
  4041ba:	fb0a cc18 	mls	ip, sl, r8, ip
  4041be:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4041c2:	fb08 f309 	mul.w	r3, r8, r9
  4041c6:	42ab      	cmp	r3, r5
  4041c8:	d90a      	bls.n	4041e0 <__udivmoddi4+0x6c>
  4041ca:	19ed      	adds	r5, r5, r7
  4041cc:	f108 32ff 	add.w	r2, r8, #4294967295
  4041d0:	f080 8123 	bcs.w	40441a <__udivmoddi4+0x2a6>
  4041d4:	42ab      	cmp	r3, r5
  4041d6:	f240 8120 	bls.w	40441a <__udivmoddi4+0x2a6>
  4041da:	f1a8 0802 	sub.w	r8, r8, #2
  4041de:	443d      	add	r5, r7
  4041e0:	1aed      	subs	r5, r5, r3
  4041e2:	b2a4      	uxth	r4, r4
  4041e4:	fbb5 f0fa 	udiv	r0, r5, sl
  4041e8:	fb0a 5510 	mls	r5, sl, r0, r5
  4041ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4041f0:	fb00 f909 	mul.w	r9, r0, r9
  4041f4:	45a1      	cmp	r9, r4
  4041f6:	d909      	bls.n	40420c <__udivmoddi4+0x98>
  4041f8:	19e4      	adds	r4, r4, r7
  4041fa:	f100 33ff 	add.w	r3, r0, #4294967295
  4041fe:	f080 810a 	bcs.w	404416 <__udivmoddi4+0x2a2>
  404202:	45a1      	cmp	r9, r4
  404204:	f240 8107 	bls.w	404416 <__udivmoddi4+0x2a2>
  404208:	3802      	subs	r0, #2
  40420a:	443c      	add	r4, r7
  40420c:	eba4 0409 	sub.w	r4, r4, r9
  404210:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  404214:	2100      	movs	r1, #0
  404216:	2e00      	cmp	r6, #0
  404218:	d061      	beq.n	4042de <__udivmoddi4+0x16a>
  40421a:	fa24 f40e 	lsr.w	r4, r4, lr
  40421e:	2300      	movs	r3, #0
  404220:	6034      	str	r4, [r6, #0]
  404222:	6073      	str	r3, [r6, #4]
  404224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404228:	428b      	cmp	r3, r1
  40422a:	d907      	bls.n	40423c <__udivmoddi4+0xc8>
  40422c:	2e00      	cmp	r6, #0
  40422e:	d054      	beq.n	4042da <__udivmoddi4+0x166>
  404230:	2100      	movs	r1, #0
  404232:	e886 0021 	stmia.w	r6, {r0, r5}
  404236:	4608      	mov	r0, r1
  404238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40423c:	fab3 f183 	clz	r1, r3
  404240:	2900      	cmp	r1, #0
  404242:	f040 808e 	bne.w	404362 <__udivmoddi4+0x1ee>
  404246:	42ab      	cmp	r3, r5
  404248:	d302      	bcc.n	404250 <__udivmoddi4+0xdc>
  40424a:	4282      	cmp	r2, r0
  40424c:	f200 80fa 	bhi.w	404444 <__udivmoddi4+0x2d0>
  404250:	1a84      	subs	r4, r0, r2
  404252:	eb65 0503 	sbc.w	r5, r5, r3
  404256:	2001      	movs	r0, #1
  404258:	46ac      	mov	ip, r5
  40425a:	2e00      	cmp	r6, #0
  40425c:	d03f      	beq.n	4042de <__udivmoddi4+0x16a>
  40425e:	e886 1010 	stmia.w	r6, {r4, ip}
  404262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404266:	b912      	cbnz	r2, 40426e <__udivmoddi4+0xfa>
  404268:	2701      	movs	r7, #1
  40426a:	fbb7 f7f2 	udiv	r7, r7, r2
  40426e:	fab7 fe87 	clz	lr, r7
  404272:	f1be 0f00 	cmp.w	lr, #0
  404276:	d134      	bne.n	4042e2 <__udivmoddi4+0x16e>
  404278:	1beb      	subs	r3, r5, r7
  40427a:	0c3a      	lsrs	r2, r7, #16
  40427c:	fa1f fc87 	uxth.w	ip, r7
  404280:	2101      	movs	r1, #1
  404282:	fbb3 f8f2 	udiv	r8, r3, r2
  404286:	0c25      	lsrs	r5, r4, #16
  404288:	fb02 3318 	mls	r3, r2, r8, r3
  40428c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  404290:	fb0c f308 	mul.w	r3, ip, r8
  404294:	42ab      	cmp	r3, r5
  404296:	d907      	bls.n	4042a8 <__udivmoddi4+0x134>
  404298:	19ed      	adds	r5, r5, r7
  40429a:	f108 30ff 	add.w	r0, r8, #4294967295
  40429e:	d202      	bcs.n	4042a6 <__udivmoddi4+0x132>
  4042a0:	42ab      	cmp	r3, r5
  4042a2:	f200 80d1 	bhi.w	404448 <__udivmoddi4+0x2d4>
  4042a6:	4680      	mov	r8, r0
  4042a8:	1aed      	subs	r5, r5, r3
  4042aa:	b2a3      	uxth	r3, r4
  4042ac:	fbb5 f0f2 	udiv	r0, r5, r2
  4042b0:	fb02 5510 	mls	r5, r2, r0, r5
  4042b4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4042b8:	fb0c fc00 	mul.w	ip, ip, r0
  4042bc:	45a4      	cmp	ip, r4
  4042be:	d907      	bls.n	4042d0 <__udivmoddi4+0x15c>
  4042c0:	19e4      	adds	r4, r4, r7
  4042c2:	f100 33ff 	add.w	r3, r0, #4294967295
  4042c6:	d202      	bcs.n	4042ce <__udivmoddi4+0x15a>
  4042c8:	45a4      	cmp	ip, r4
  4042ca:	f200 80b8 	bhi.w	40443e <__udivmoddi4+0x2ca>
  4042ce:	4618      	mov	r0, r3
  4042d0:	eba4 040c 	sub.w	r4, r4, ip
  4042d4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4042d8:	e79d      	b.n	404216 <__udivmoddi4+0xa2>
  4042da:	4631      	mov	r1, r6
  4042dc:	4630      	mov	r0, r6
  4042de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4042e2:	f1ce 0420 	rsb	r4, lr, #32
  4042e6:	fa05 f30e 	lsl.w	r3, r5, lr
  4042ea:	fa07 f70e 	lsl.w	r7, r7, lr
  4042ee:	fa20 f804 	lsr.w	r8, r0, r4
  4042f2:	0c3a      	lsrs	r2, r7, #16
  4042f4:	fa25 f404 	lsr.w	r4, r5, r4
  4042f8:	ea48 0803 	orr.w	r8, r8, r3
  4042fc:	fbb4 f1f2 	udiv	r1, r4, r2
  404300:	ea4f 4518 	mov.w	r5, r8, lsr #16
  404304:	fb02 4411 	mls	r4, r2, r1, r4
  404308:	fa1f fc87 	uxth.w	ip, r7
  40430c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  404310:	fb01 f30c 	mul.w	r3, r1, ip
  404314:	42ab      	cmp	r3, r5
  404316:	fa00 f40e 	lsl.w	r4, r0, lr
  40431a:	d909      	bls.n	404330 <__udivmoddi4+0x1bc>
  40431c:	19ed      	adds	r5, r5, r7
  40431e:	f101 30ff 	add.w	r0, r1, #4294967295
  404322:	f080 808a 	bcs.w	40443a <__udivmoddi4+0x2c6>
  404326:	42ab      	cmp	r3, r5
  404328:	f240 8087 	bls.w	40443a <__udivmoddi4+0x2c6>
  40432c:	3902      	subs	r1, #2
  40432e:	443d      	add	r5, r7
  404330:	1aeb      	subs	r3, r5, r3
  404332:	fa1f f588 	uxth.w	r5, r8
  404336:	fbb3 f0f2 	udiv	r0, r3, r2
  40433a:	fb02 3310 	mls	r3, r2, r0, r3
  40433e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  404342:	fb00 f30c 	mul.w	r3, r0, ip
  404346:	42ab      	cmp	r3, r5
  404348:	d907      	bls.n	40435a <__udivmoddi4+0x1e6>
  40434a:	19ed      	adds	r5, r5, r7
  40434c:	f100 38ff 	add.w	r8, r0, #4294967295
  404350:	d26f      	bcs.n	404432 <__udivmoddi4+0x2be>
  404352:	42ab      	cmp	r3, r5
  404354:	d96d      	bls.n	404432 <__udivmoddi4+0x2be>
  404356:	3802      	subs	r0, #2
  404358:	443d      	add	r5, r7
  40435a:	1aeb      	subs	r3, r5, r3
  40435c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  404360:	e78f      	b.n	404282 <__udivmoddi4+0x10e>
  404362:	f1c1 0720 	rsb	r7, r1, #32
  404366:	fa22 f807 	lsr.w	r8, r2, r7
  40436a:	408b      	lsls	r3, r1
  40436c:	fa05 f401 	lsl.w	r4, r5, r1
  404370:	ea48 0303 	orr.w	r3, r8, r3
  404374:	fa20 fe07 	lsr.w	lr, r0, r7
  404378:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40437c:	40fd      	lsrs	r5, r7
  40437e:	ea4e 0e04 	orr.w	lr, lr, r4
  404382:	fbb5 f9fc 	udiv	r9, r5, ip
  404386:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40438a:	fb0c 5519 	mls	r5, ip, r9, r5
  40438e:	fa1f f883 	uxth.w	r8, r3
  404392:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  404396:	fb09 f408 	mul.w	r4, r9, r8
  40439a:	42ac      	cmp	r4, r5
  40439c:	fa02 f201 	lsl.w	r2, r2, r1
  4043a0:	fa00 fa01 	lsl.w	sl, r0, r1
  4043a4:	d908      	bls.n	4043b8 <__udivmoddi4+0x244>
  4043a6:	18ed      	adds	r5, r5, r3
  4043a8:	f109 30ff 	add.w	r0, r9, #4294967295
  4043ac:	d243      	bcs.n	404436 <__udivmoddi4+0x2c2>
  4043ae:	42ac      	cmp	r4, r5
  4043b0:	d941      	bls.n	404436 <__udivmoddi4+0x2c2>
  4043b2:	f1a9 0902 	sub.w	r9, r9, #2
  4043b6:	441d      	add	r5, r3
  4043b8:	1b2d      	subs	r5, r5, r4
  4043ba:	fa1f fe8e 	uxth.w	lr, lr
  4043be:	fbb5 f0fc 	udiv	r0, r5, ip
  4043c2:	fb0c 5510 	mls	r5, ip, r0, r5
  4043c6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4043ca:	fb00 f808 	mul.w	r8, r0, r8
  4043ce:	45a0      	cmp	r8, r4
  4043d0:	d907      	bls.n	4043e2 <__udivmoddi4+0x26e>
  4043d2:	18e4      	adds	r4, r4, r3
  4043d4:	f100 35ff 	add.w	r5, r0, #4294967295
  4043d8:	d229      	bcs.n	40442e <__udivmoddi4+0x2ba>
  4043da:	45a0      	cmp	r8, r4
  4043dc:	d927      	bls.n	40442e <__udivmoddi4+0x2ba>
  4043de:	3802      	subs	r0, #2
  4043e0:	441c      	add	r4, r3
  4043e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4043e6:	eba4 0408 	sub.w	r4, r4, r8
  4043ea:	fba0 8902 	umull	r8, r9, r0, r2
  4043ee:	454c      	cmp	r4, r9
  4043f0:	46c6      	mov	lr, r8
  4043f2:	464d      	mov	r5, r9
  4043f4:	d315      	bcc.n	404422 <__udivmoddi4+0x2ae>
  4043f6:	d012      	beq.n	40441e <__udivmoddi4+0x2aa>
  4043f8:	b156      	cbz	r6, 404410 <__udivmoddi4+0x29c>
  4043fa:	ebba 030e 	subs.w	r3, sl, lr
  4043fe:	eb64 0405 	sbc.w	r4, r4, r5
  404402:	fa04 f707 	lsl.w	r7, r4, r7
  404406:	40cb      	lsrs	r3, r1
  404408:	431f      	orrs	r7, r3
  40440a:	40cc      	lsrs	r4, r1
  40440c:	6037      	str	r7, [r6, #0]
  40440e:	6074      	str	r4, [r6, #4]
  404410:	2100      	movs	r1, #0
  404412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404416:	4618      	mov	r0, r3
  404418:	e6f8      	b.n	40420c <__udivmoddi4+0x98>
  40441a:	4690      	mov	r8, r2
  40441c:	e6e0      	b.n	4041e0 <__udivmoddi4+0x6c>
  40441e:	45c2      	cmp	sl, r8
  404420:	d2ea      	bcs.n	4043f8 <__udivmoddi4+0x284>
  404422:	ebb8 0e02 	subs.w	lr, r8, r2
  404426:	eb69 0503 	sbc.w	r5, r9, r3
  40442a:	3801      	subs	r0, #1
  40442c:	e7e4      	b.n	4043f8 <__udivmoddi4+0x284>
  40442e:	4628      	mov	r0, r5
  404430:	e7d7      	b.n	4043e2 <__udivmoddi4+0x26e>
  404432:	4640      	mov	r0, r8
  404434:	e791      	b.n	40435a <__udivmoddi4+0x1e6>
  404436:	4681      	mov	r9, r0
  404438:	e7be      	b.n	4043b8 <__udivmoddi4+0x244>
  40443a:	4601      	mov	r1, r0
  40443c:	e778      	b.n	404330 <__udivmoddi4+0x1bc>
  40443e:	3802      	subs	r0, #2
  404440:	443c      	add	r4, r7
  404442:	e745      	b.n	4042d0 <__udivmoddi4+0x15c>
  404444:	4608      	mov	r0, r1
  404446:	e708      	b.n	40425a <__udivmoddi4+0xe6>
  404448:	f1a8 0802 	sub.w	r8, r8, #2
  40444c:	443d      	add	r5, r7
  40444e:	e72b      	b.n	4042a8 <__udivmoddi4+0x134>

00404450 <__aeabi_idiv0>:
  404450:	4770      	bx	lr
  404452:	bf00      	nop
  404454:	616b616b 	.word	0x616b616b
  404458:	0a20616b 	.word	0x0a20616b
  40445c:	00000000 	.word	0x00000000
  404460:	00005441 	.word	0x00005441
  404464:	522b5441 	.word	0x522b5441
  404468:	54455345 	.word	0x54455345
  40446c:	00000000 	.word	0x00000000
  404470:	4e2b5441 	.word	0x4e2b5441
  404474:	53454d41 	.word	0x53454d41
  404478:	65767265 	.word	0x65767265
  40447c:	00000072 	.word	0x00000072
  404480:	522b5441 	.word	0x522b5441
  404484:	30454c4f 	.word	0x30454c4f
  404488:	00000000 	.word	0x00000000
  40448c:	30316d68 	.word	0x30316d68
  404490:	7265735f 	.word	0x7265735f
  404494:	5f726576 	.word	0x5f726576
  404498:	74696e69 	.word	0x74696e69
  40449c:	00000000 	.word	0x00000000
  4044a0:	63696e49 	.word	0x63696e49
  4044a4:	696c6169 	.word	0x696c6169
  4044a8:	646e617a 	.word	0x646e617a
  4044ac:	2e2e2e6f 	.word	0x2e2e2e6f
  4044b0:	00000a0d 	.word	0x00000a0d
  4044b4:	666e6f43 	.word	0x666e6f43
  4044b8:	48206769 	.word	0x48206769
  4044bc:	20353043 	.word	0x20353043
  4044c0:	76726553 	.word	0x76726553
  4044c4:	2e2e7265 	.word	0x2e2e7265
  4044c8:	000a0d2e 	.word	0x000a0d2e
  4044cc:	6f666562 	.word	0x6f666562
  4044d0:	00006572 	.word	0x00006572
  4044d4:	756c6f56 	.word	0x756c6f56
  4044d8:	0000656d 	.word	0x0000656d
  4044dc:	69727453 	.word	0x69727453
  4044e0:	0000676e 	.word	0x0000676e
  4044e4:	0000005b 	.word	0x0000005b
  4044e8:	0000205d 	.word	0x0000205d

004044ec <_global_impure_ptr>:
  4044ec:	20400030 33323130 37363534 42413938     0.@ 0123456789AB
  4044fc:	46454443 00000000 33323130 37363534     CDEF....01234567
  40450c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  40451c:	0000296c                                l)..

00404520 <blanks.7217>:
  404520:	20202020 20202020 20202020 20202020                     

00404530 <zeroes.7218>:
  404530:	30303030 30303030 30303030 30303030     0000000000000000
  404540:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00404550 <_ctype_>:
  404550:	20202000 20202020 28282020 20282828     .         ((((( 
  404560:	20202020 20202020 20202020 20202020                     
  404570:	10108820 10101010 10101010 10101010      ...............
  404580:	04040410 04040404 10040404 10101010     ................
  404590:	41411010 41414141 01010101 01010101     ..AAAAAA........
  4045a0:	01010101 01010101 01010101 10101010     ................
  4045b0:	42421010 42424242 02020202 02020202     ..BBBBBB........
  4045c0:	02020202 02020202 02020202 10101010     ................
  4045d0:	00000020 00000000 00000000 00000000      ...............
	...

00404654 <_init>:
  404654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404656:	bf00      	nop
  404658:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40465a:	bc08      	pop	{r3}
  40465c:	469e      	mov	lr, r3
  40465e:	4770      	bx	lr

00404660 <__init_array_start>:
  404660:	0040280d 	.word	0x0040280d

00404664 <__frame_dummy_init_array_entry>:
  404664:	00400165                                e.@.

00404668 <_fini>:
  404668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40466a:	bf00      	nop
  40466c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40466e:	bc08      	pop	{r3}
  404670:	469e      	mov	lr, r3
  404672:	4770      	bx	lr

00404674 <__fini_array_start>:
  404674:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <buffer>:
20400010:	0a74 2040 0001 0000 d4c0 0001 0000 0000     t.@ ............
	...

20400028 <_impure_ptr>:
20400028:	0030 2040 0000 0000                         0.@ ....

20400030 <impure_data>:
20400030:	0000 0000 031c 2040 0384 2040 03ec 2040     ......@ ..@ ..@ 
	...
204000d8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400458 <__atexit_recursive_mutex>:
20400458:	b4c0 2043                                   ..C 

2040045c <__global_locale>:
2040045c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040047c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040049c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004bc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004dc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004fc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040051c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040053c:	3ead 0040 37fd 0040 0000 0000 4550 0040     .>@..7@.....PE@.
2040054c:	454c 0040 445c 0040 445c 0040 445c 0040     LE@.\D@.\D@.\D@.
2040055c:	445c 0040 445c 0040 445c 0040 445c 0040     \D@.\D@.\D@.\D@.
2040056c:	445c 0040 445c 0040 ffff ffff ffff ffff     \D@.\D@.........
2040057c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204005a4:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

204005c8 <__malloc_av_>:
	...
204005d0:	05c8 2040 05c8 2040 05d0 2040 05d0 2040     ..@ ..@ ..@ ..@ 
204005e0:	05d8 2040 05d8 2040 05e0 2040 05e0 2040     ..@ ..@ ..@ ..@ 
204005f0:	05e8 2040 05e8 2040 05f0 2040 05f0 2040     ..@ ..@ ..@ ..@ 
20400600:	05f8 2040 05f8 2040 0600 2040 0600 2040     ..@ ..@ ..@ ..@ 
20400610:	0608 2040 0608 2040 0610 2040 0610 2040     ..@ ..@ ..@ ..@ 
20400620:	0618 2040 0618 2040 0620 2040 0620 2040     ..@ ..@  .@  .@ 
20400630:	0628 2040 0628 2040 0630 2040 0630 2040     (.@ (.@ 0.@ 0.@ 
20400640:	0638 2040 0638 2040 0640 2040 0640 2040     8.@ 8.@ @.@ @.@ 
20400650:	0648 2040 0648 2040 0650 2040 0650 2040     H.@ H.@ P.@ P.@ 
20400660:	0658 2040 0658 2040 0660 2040 0660 2040     X.@ X.@ `.@ `.@ 
20400670:	0668 2040 0668 2040 0670 2040 0670 2040     h.@ h.@ p.@ p.@ 
20400680:	0678 2040 0678 2040 0680 2040 0680 2040     x.@ x.@ ..@ ..@ 
20400690:	0688 2040 0688 2040 0690 2040 0690 2040     ..@ ..@ ..@ ..@ 
204006a0:	0698 2040 0698 2040 06a0 2040 06a0 2040     ..@ ..@ ..@ ..@ 
204006b0:	06a8 2040 06a8 2040 06b0 2040 06b0 2040     ..@ ..@ ..@ ..@ 
204006c0:	06b8 2040 06b8 2040 06c0 2040 06c0 2040     ..@ ..@ ..@ ..@ 
204006d0:	06c8 2040 06c8 2040 06d0 2040 06d0 2040     ..@ ..@ ..@ ..@ 
204006e0:	06d8 2040 06d8 2040 06e0 2040 06e0 2040     ..@ ..@ ..@ ..@ 
204006f0:	06e8 2040 06e8 2040 06f0 2040 06f0 2040     ..@ ..@ ..@ ..@ 
20400700:	06f8 2040 06f8 2040 0700 2040 0700 2040     ..@ ..@ ..@ ..@ 
20400710:	0708 2040 0708 2040 0710 2040 0710 2040     ..@ ..@ ..@ ..@ 
20400720:	0718 2040 0718 2040 0720 2040 0720 2040     ..@ ..@  .@  .@ 
20400730:	0728 2040 0728 2040 0730 2040 0730 2040     (.@ (.@ 0.@ 0.@ 
20400740:	0738 2040 0738 2040 0740 2040 0740 2040     8.@ 8.@ @.@ @.@ 
20400750:	0748 2040 0748 2040 0750 2040 0750 2040     H.@ H.@ P.@ P.@ 
20400760:	0758 2040 0758 2040 0760 2040 0760 2040     X.@ X.@ `.@ `.@ 
20400770:	0768 2040 0768 2040 0770 2040 0770 2040     h.@ h.@ p.@ p.@ 
20400780:	0778 2040 0778 2040 0780 2040 0780 2040     x.@ x.@ ..@ ..@ 
20400790:	0788 2040 0788 2040 0790 2040 0790 2040     ..@ ..@ ..@ ..@ 
204007a0:	0798 2040 0798 2040 07a0 2040 07a0 2040     ..@ ..@ ..@ ..@ 
204007b0:	07a8 2040 07a8 2040 07b0 2040 07b0 2040     ..@ ..@ ..@ ..@ 
204007c0:	07b8 2040 07b8 2040 07c0 2040 07c0 2040     ..@ ..@ ..@ ..@ 
204007d0:	07c8 2040 07c8 2040 07d0 2040 07d0 2040     ..@ ..@ ..@ ..@ 
204007e0:	07d8 2040 07d8 2040 07e0 2040 07e0 2040     ..@ ..@ ..@ ..@ 
204007f0:	07e8 2040 07e8 2040 07f0 2040 07f0 2040     ..@ ..@ ..@ ..@ 
20400800:	07f8 2040 07f8 2040 0800 2040 0800 2040     ..@ ..@ ..@ ..@ 
20400810:	0808 2040 0808 2040 0810 2040 0810 2040     ..@ ..@ ..@ ..@ 
20400820:	0818 2040 0818 2040 0820 2040 0820 2040     ..@ ..@  .@  .@ 
20400830:	0828 2040 0828 2040 0830 2040 0830 2040     (.@ (.@ 0.@ 0.@ 
20400840:	0838 2040 0838 2040 0840 2040 0840 2040     8.@ 8.@ @.@ @.@ 
20400850:	0848 2040 0848 2040 0850 2040 0850 2040     H.@ H.@ P.@ P.@ 
20400860:	0858 2040 0858 2040 0860 2040 0860 2040     X.@ X.@ `.@ `.@ 
20400870:	0868 2040 0868 2040 0870 2040 0870 2040     h.@ h.@ p.@ p.@ 
20400880:	0878 2040 0878 2040 0880 2040 0880 2040     x.@ x.@ ..@ ..@ 
20400890:	0888 2040 0888 2040 0890 2040 0890 2040     ..@ ..@ ..@ ..@ 
204008a0:	0898 2040 0898 2040 08a0 2040 08a0 2040     ..@ ..@ ..@ ..@ 
204008b0:	08a8 2040 08a8 2040 08b0 2040 08b0 2040     ..@ ..@ ..@ ..@ 
204008c0:	08b8 2040 08b8 2040 08c0 2040 08c0 2040     ..@ ..@ ..@ ..@ 
204008d0:	08c8 2040 08c8 2040 08d0 2040 08d0 2040     ..@ ..@ ..@ ..@ 
204008e0:	08d8 2040 08d8 2040 08e0 2040 08e0 2040     ..@ ..@ ..@ ..@ 
204008f0:	08e8 2040 08e8 2040 08f0 2040 08f0 2040     ..@ ..@ ..@ ..@ 
20400900:	08f8 2040 08f8 2040 0900 2040 0900 2040     ..@ ..@ ..@ ..@ 
20400910:	0908 2040 0908 2040 0910 2040 0910 2040     ..@ ..@ ..@ ..@ 
20400920:	0918 2040 0918 2040 0920 2040 0920 2040     ..@ ..@  .@  .@ 
20400930:	0928 2040 0928 2040 0930 2040 0930 2040     (.@ (.@ 0.@ 0.@ 
20400940:	0938 2040 0938 2040 0940 2040 0940 2040     8.@ 8.@ @.@ @.@ 
20400950:	0948 2040 0948 2040 0950 2040 0950 2040     H.@ H.@ P.@ P.@ 
20400960:	0958 2040 0958 2040 0960 2040 0960 2040     X.@ X.@ `.@ `.@ 
20400970:	0968 2040 0968 2040 0970 2040 0970 2040     h.@ h.@ p.@ p.@ 
20400980:	0978 2040 0978 2040 0980 2040 0980 2040     x.@ x.@ ..@ ..@ 
20400990:	0988 2040 0988 2040 0990 2040 0990 2040     ..@ ..@ ..@ ..@ 
204009a0:	0998 2040 0998 2040 09a0 2040 09a0 2040     ..@ ..@ ..@ ..@ 
204009b0:	09a8 2040 09a8 2040 09b0 2040 09b0 2040     ..@ ..@ ..@ ..@ 
204009c0:	09b8 2040 09b8 2040 09c0 2040 09c0 2040     ..@ ..@ ..@ ..@ 

204009d0 <__malloc_sbrk_base>:
204009d0:	ffff ffff                                   ....

204009d4 <__malloc_trim_threshold>:
204009d4:	0000 0002                                   ....
